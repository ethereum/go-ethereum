// Copyright 2018 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package encryption

import (
	"bytes"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto/sha3"
	"github.com/ethereum/go-ethereum/swarm/testutil"
)

var expectedTransformedHex = ""

var hashFunc = sha3.NewKeccak256
var testKey Key

func init() {
	var err error
	testKey, err = hexutil.Decode("0x8abf1502f557f15026716030fb6384792583daf39608a3cd02ff2f47e9bc6e49")
	if err != nil {
		panic(err.Error())
	}
}

func TestEncryptDataLongerThanPadding(t *testing.T) {
	enc := New(testKey, 4095, uint32(0), hashFunc)

	data := make([]byte, 4096)

	expectedError := "Data length longer than padding, data length 4096 padding 4095"

	_, err := enc.Encrypt(data)
	if err == nil || err.Error() != expectedError {
		t.Fatalf("Expected error \"%v\" got \"%v\"", expectedError, err)
	}
}

func TestEncryptDataZeroPadding(t *testing.T) {
	enc := New(testKey, 0, uint32(0), hashFunc)

	data := make([]byte, 2048)

	encrypted, err := enc.Encrypt(data)
	if err != nil {
		t.Fatalf("Expected no error got %v", err)
	}
	if len(encrypted) != 2048 {
		t.Fatalf("Encrypted data length expected \"%v\" got %v", 2048, len(encrypted))
	}
}

func TestEncryptDataLengthEqualsPadding(t *testing.T) {
	enc := New(testKey, 4096, uint32(0), hashFunc)

	data := make([]byte, 4096)

	encrypted, err := enc.Encrypt(data)
	if err != nil {
		t.Fatalf("Expected no error got %v", err)
	}
	encryptedHex := common.Bytes2Hex(encrypted)
	expectedTransformed := common.Hex2Bytes(expectedTransformedHex)

	if !bytes.Equal(encrypted, expectedTransformed) {
		t.Fatalf("Expected %v got %v", expectedTransformedHex, encryptedHex)
	}
}

func TestEncryptDataLengthSmallerThanPadding(t *testing.T) {
	enc := New(testKey, 4096, uint32(0), hashFunc)

	data := make([]byte, 4080)

	encrypted, err := enc.Encrypt(data)
	if err != nil {
		t.Fatalf("Expected no error got %v", err)
	}
	if len(encrypted) != 4096 {
		t.Fatalf("Encrypted data length expected %v got %v", 4096, len(encrypted))
	}
}

func TestEncryptDataCounterNonZero(t *testing.T) {
	// TODO
}

func TestDecryptDataLengthNotEqualsPadding(t *testing.T) {
	enc := New(testKey, 4096, uint32(0), hashFunc)

	data := make([]byte, 4097)

	expectedError := "Data length different than padding, data length 4097 padding 4096"

	_, err := enc.Decrypt(data)
	if err == nil || err.Error() != expectedError {
		t.Fatalf("Expected error \"%v\" got \"%v\"", expectedError, err)
	}
}

func TestEncryptDecryptIsIdentity(t *testing.T) {
	testEncryptDecryptIsIdentity(t, 2048, 0, 2048, 32)
	testEncryptDecryptIsIdentity(t, 4096, 0, 4096, 32)
	testEncryptDecryptIsIdentity(t, 4096, 0, 1000, 32)
	testEncryptDecryptIsIdentity(t, 32, 10, 32, 32)
}

func testEncryptDecryptIsIdentity(t *testing.T, padding int, initCtr uint32, dataLength int, keyLength int) {
	key := GenerateRandomKey(keyLength)
	enc := New(key, padding, initCtr, hashFunc)

	data := testutil.RandomBytes(1, dataLength)

	encrypted, err := enc.Encrypt(data)
	if err != nil {
		t.Fatalf("Expected no error got %v", err)
	}

	decrypted, err := enc.Decrypt(encrypted)
	if err != nil {
		t.Fatalf("Expected no error got %v", err)
	}
	if len(decrypted) != padding {
		t.Fatalf("Expected decrypted data length %v got %v", padding, len(decrypted))
	}

	// we have to remove the extra bytes which were randomly added to fill until padding
	if len(data) < padding {
		decrypted = decrypted[:len(data)]
	}

	if !bytes.Equal(data, decrypted) {
		t.Fatalf("Expected decrypted %v got %v", common.Bytes2Hex(data), common.Bytes2Hex(decrypted))
	}
}
