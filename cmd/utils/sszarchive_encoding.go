// Code generated by fastssz. DO NOT EDIT.
// Hash: 83cb98f6e5a8f51aa880e12253ab615fe9336f7df1070004bf4e4e207c59c528
// Version: 0.1.2
package utils

import (
	"github.com/ethereum/go-ethereum/core/types/sszcodec"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ArchiveHeader object
func (a *ArchiveHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the ArchiveHeader object to a target array
func (a *ArchiveHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Version'
	dst = ssz.MarshalUint64(dst, a.Version)

	// Field (1) 'HeadBlockNumber'
	dst = ssz.MarshalUint64(dst, a.HeadBlockNumber)

	// Field (2) 'BlockCount'
	dst = ssz.MarshalUint32(dst, a.BlockCount)

	return
}

// UnmarshalSSZ ssz unmarshals the ArchiveHeader object
func (a *ArchiveHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 20 {
		return ssz.ErrSize
	}

	// Field (0) 'Version'
	a.Version = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'HeadBlockNumber'
	a.HeadBlockNumber = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'BlockCount'
	a.BlockCount = ssz.UnmarshallUint32(buf[16:20])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ArchiveHeader object
func (a *ArchiveHeader) SizeSSZ() (size int) {
	size = 20
	return
}

// HashTreeRoot ssz hashes the ArchiveHeader object
func (a *ArchiveHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the ArchiveHeader object with a hasher
func (a *ArchiveHeader) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Version'
	hh.PutUint64(a.Version)

	// Field (1) 'HeadBlockNumber'
	hh.PutUint64(a.HeadBlockNumber)

	// Field (2) 'BlockCount'
	hh.PutUint32(a.BlockCount)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ArchiveHeader object
func (a *ArchiveHeader) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the ArchiveBody object
func (a *ArchiveBody) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the ArchiveBody object to a target array
func (a *ArchiveBody) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Blocks'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(a.Blocks); ii++ {
		offset += 4
		offset += a.Blocks[ii].SizeSSZ()
	}

	// Field (0) 'Blocks'
	if size := len(a.Blocks); size > 1000000 {
		err = ssz.ErrListTooBigFn("ArchiveBody.Blocks", size, 1000000)
		return
	}
	{
		offset = 4 * len(a.Blocks)
		for ii := 0; ii < len(a.Blocks); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += a.Blocks[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(a.Blocks); ii++ {
		if dst, err = a.Blocks[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ArchiveBody object
func (a *ArchiveBody) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Blocks'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Blocks'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 1000000)
		if err != nil {
			return err
		}
		a.Blocks = make([]*sszcodec.Block, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if a.Blocks[indx] == nil {
				a.Blocks[indx] = new(sszcodec.Block)
			}
			if err = a.Blocks[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ArchiveBody object
func (a *ArchiveBody) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Blocks'
	for ii := 0; ii < len(a.Blocks); ii++ {
		size += 4
		size += a.Blocks[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the ArchiveBody object
func (a *ArchiveBody) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the ArchiveBody object with a hasher
func (a *ArchiveBody) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Blocks'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Blocks))
		if num > 1000000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Blocks {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1000000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ArchiveBody object
func (a *ArchiveBody) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
