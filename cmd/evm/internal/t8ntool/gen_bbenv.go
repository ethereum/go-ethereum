// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package t8ntool

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*bbEnvMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b bbEnv) MarshalJSON() ([]byte, error) {
	type bbEnv struct {
		ParentHash  common.Hash           `json:"parentHash"`
		UncleHash   common.Hash           `json:"sha3Uncles"`
		Coinbase    common.Address        `json:"miner"            gencode:"required"`
		Root        common.Hash           `json:"stateRoot"        gencodec:"required"`
		TxHash      common.Hash           `json:"transactionsRoot"`
		ReceiptHash common.Hash           `json:"receiptsRoot"`
		Bloom       types.Bloom           `json:"logsBloom"`
		Difficulty  *math.HexOrDecimal256 `json:"difficulty"`
		Number      *math.HexOrDecimal256 `json:"number"           gencodec:"required"`
		GasLimit    math.HexOrDecimal64   `json:"gasLimit"         gencodec:"required"`
		GasUsed     math.HexOrDecimal64   `json:"gasUsed"`
		Time        math.HexOrDecimal64   `json:"timestamp"        gencodec:"required"`
		Extra       hexutil.Bytes         `json:"extraData"`
		MixDigest   common.Hash           `json:"mixHash"`
		Nonce       types.BlockNonce      `json:"nonce"`
		BaseFee     *math.HexOrDecimal256 `json:"baseFeePerGas"`
	}
	var enc bbEnv
	enc.ParentHash = b.ParentHash
	enc.UncleHash = b.UncleHash
	enc.Coinbase = b.Coinbase
	enc.Root = b.Root
	enc.TxHash = b.TxHash
	enc.ReceiptHash = b.ReceiptHash
	enc.Bloom = b.Bloom
	enc.Difficulty = (*math.HexOrDecimal256)(b.Difficulty)
	enc.Number = (*math.HexOrDecimal256)(b.Number)
	enc.GasLimit = math.HexOrDecimal64(b.GasLimit)
	enc.GasUsed = math.HexOrDecimal64(b.GasUsed)
	enc.Time = math.HexOrDecimal64(b.Time)
	enc.Extra = b.Extra
	enc.MixDigest = b.MixDigest
	enc.Nonce = b.Nonce
	enc.BaseFee = (*math.HexOrDecimal256)(b.BaseFee)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *bbEnv) UnmarshalJSON(input []byte) error {
	type bbEnv struct {
		ParentHash  *common.Hash          `json:"parentHash"`
		UncleHash   *common.Hash          `json:"sha3Uncles"`
		Coinbase    *common.Address       `json:"miner"            gencode:"required"`
		Root        *common.Hash          `json:"stateRoot"        gencodec:"required"`
		TxHash      *common.Hash          `json:"transactionsRoot"`
		ReceiptHash *common.Hash          `json:"receiptsRoot"`
		Bloom       *types.Bloom          `json:"logsBloom"`
		Difficulty  *math.HexOrDecimal256 `json:"difficulty"`
		Number      *math.HexOrDecimal256 `json:"number"           gencodec:"required"`
		GasLimit    *math.HexOrDecimal64  `json:"gasLimit"         gencodec:"required"`
		GasUsed     *math.HexOrDecimal64  `json:"gasUsed"`
		Time        *math.HexOrDecimal64  `json:"timestamp"        gencodec:"required"`
		Extra       *hexutil.Bytes        `json:"extraData"`
		MixDigest   *common.Hash          `json:"mixHash"`
		Nonce       *types.BlockNonce     `json:"nonce"`
		BaseFee     *math.HexOrDecimal256 `json:"baseFeePerGas"`
	}
	var dec bbEnv
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	if dec.UncleHash != nil {
		b.UncleHash = *dec.UncleHash
	}
	if dec.Coinbase != nil {
		b.Coinbase = *dec.Coinbase
	}
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for bbEnv")
	}
	b.Root = *dec.Root
	if dec.TxHash != nil {
		b.TxHash = *dec.TxHash
	}
	if dec.ReceiptHash != nil {
		b.ReceiptHash = *dec.ReceiptHash
	}
	if dec.Bloom != nil {
		b.Bloom = *dec.Bloom
	}
	if dec.Difficulty != nil {
		b.Difficulty = (*big.Int)(dec.Difficulty)
	}
	if dec.Number == nil {
		return errors.New("missing required field 'number' for bbEnv")
	}
	b.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for bbEnv")
	}
	b.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed != nil {
		b.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for bbEnv")
	}
	b.Time = uint64(*dec.Time)
	if dec.Extra != nil {
		b.Extra = *dec.Extra
	}
	if dec.MixDigest != nil {
		b.MixDigest = *dec.MixDigest
	}
	if dec.Nonce != nil {
		b.Nonce = *dec.Nonce
	}
	if dec.BaseFee != nil {
		b.BaseFee = (*big.Int)(dec.BaseFee)
	}
	return nil
}
