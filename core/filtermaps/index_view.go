// Copyright 2025 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package filtermaps

import (
	"errors"
	"sync/atomic"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

var (
	ErrInvalidView = errors.New("index view already invalidated")
)

type IndexView struct {
	// if invalid <= 0 then the view is considered invalid and will return error
	// on any read operation (storage maps before firstMemoryMap might have changed
	// since its creation)
	refCount, invalid int32
	storage           *mapStorage

	tailEpoch     uint32               //TODO apply to read functions
	blockRange    common.Range[uint64] //TODO apply to read functions
	headBlockHash common.Hash
	headLvPointer uint64 // points after head block delimiter

	firstMemoryMap   uint32
	firstMemoryBlock uint64
	finishedMaps     []*finishedMap
	headMapIndex     uint32
	headMap          *memoryMap
}

func (iv *IndexView) Release() {
	iv.addRefCount(-1)
}

func (iv *IndexView) addRefCount(add int32) bool {
	return atomic.AddInt32(&iv.refCount, add) <= 0
}

func (iv *IndexView) checkReleased() bool {
	return atomic.LoadInt32(&iv.refCount) <= 0
}

func (iv *IndexView) invalidate() {
	atomic.StoreInt32(&iv.invalid, 1)
}

func (iv *IndexView) checkInvalid() bool {
	return atomic.LoadInt32(&iv.invalid) != 0
}

func (iv *IndexView) GetParams() *Params {
	return iv.storage.params
}

func (iv *IndexView) BlockRange() common.Range[uint64] {
	return iv.blockRange
}

// getBlockLvPointer returns the starting log value index where the log values
// generated by the given block are located.
// Note that the function returns a valid result (the next free log value index)
// for headNumber + 1.
func (iv *IndexView) GetBlockLvPointer(blockNumber uint64) (uint64, error) {
	if iv.checkInvalid() {
		return 0, ErrInvalidView
	}

	if blockNumber < iv.firstMemoryBlock {
		lvPtr, err := iv.storage.getBlockLvPointer(blockNumber)
		if iv.checkInvalid() {
			return 0, ErrInvalidView
		}
		return lvPtr, err
	}
	if blockNumber == iv.blockRange.AfterLast() {
		return iv.headLvPointer, nil
	}
	if blockNumber > iv.blockRange.AfterLast() {
		return 0, ErrOutOfRange
	}
	for _, fm := range iv.finishedMaps {
		if blockNumber >= fm.firstBlock() && blockNumber <= fm.lastBlock.number {
			return fm.blockPtrs[blockNumber-fm.firstBlock()], nil
		}
	}
	if blockNumber >= iv.headMap.firstBlock() && blockNumber <= iv.headMap.lastBlock.number {
		return iv.headMap.blockPtrs[blockNumber-iv.headMap.firstBlock()], nil
	}
	panic("IndexView.GetBlockLvPointer: gap in blockLvPtrs")
}

// GetLastBlockOfMap returns the number and hash of the block that generated the
// last log value entry of the given map.
func (iv *IndexView) GetLastBlockOfMap(mapIndex uint32) (uint64, common.Hash, error) {
	if iv.checkInvalid() {
		return 0, common.Hash{}, ErrInvalidView
	}

	if mapIndex < iv.firstMemoryMap {
		lastNumber, lastHash, err := iv.storage.getLastBlockOfMap(mapIndex)
		if iv.checkInvalid() {
			return 0, common.Hash{}, ErrInvalidView
		}
		return lastNumber, lastHash, err
	}
	if mapIndex > iv.headMapIndex {
		return 0, common.Hash{}, ErrOutOfRange
	}
	if mapIndex == iv.headMapIndex {
		return iv.headMap.lastBlock.number, iv.headMap.lastBlock.hash, nil
	}
	fm := iv.finishedMaps[mapIndex-iv.firstMemoryMap]
	return fm.lastBlock.number, fm.lastBlock.hash, nil
}

// GetFilterMapRows returns a batch of filter maps rows from the same row index,
// each truncated to the length limit of the specified mapping layer.
// The function assumes that the map indices are in strictly ascending order.
func (iv *IndexView) GetFilterMapRows(mapIndices []uint32, rowIndex, layerIndex uint32) (rows []FilterRow, err error) {
	if iv.checkInvalid() {
		return nil, ErrInvalidView
	}

	dbIndices := len(mapIndices)
	for dbIndices > 0 && mapIndices[dbIndices-1] >= iv.firstMemoryMap {
		dbIndices--
	}
	if dbIndices > 0 {
		rows, err = iv.storage.getFilterMapRows(mapIndices[:dbIndices], rowIndex, layerIndex)
		if iv.checkInvalid() {
			return nil, ErrInvalidView
		}
		if err != nil {
			return nil, err
		}
	}
	for i := dbIndices; i < len(mapIndices); i++ {
		mapIndex := mapIndices[i]
		var row FilterRow
		if mapIndex == iv.headMapIndex {
			row = iv.headMap.getRow(rowIndex, iv.storage.params.getMaxRowLength(layerIndex+1))
		}
		if mapIndex < iv.headMapIndex {
			row = iv.finishedMaps[mapIndex-iv.firstMemoryMap].getRow(rowIndex, iv.storage.params.getMaxRowLength(layerIndex+1))
		}
		rows = append(rows, row)
	}
	return rows, nil
}

type renderState struct {
	params           *Params
	renderRange      common.Range[uint32]
	lvPointer        uint64
	mapIndex         uint32
	currentMap       *memoryMap
	finishedMaps     []*finishedMap
	nextBlock        uint64
	partialBlock     bool
	partialBlockHash common.Hash
}

func (rs *renderState) checkNextHash(hash common.Hash) bool {
	if rs.partialBlock && rs.partialBlockHash != hash {
		return false
	}
	rs.partialBlock = false
	return true
}

func (rs *renderState) addReceipts(receipts types.Receipts) {
	if rs.partialBlock {
		panic("checkNextHash has to be called before adding partially rendered block")
	}
	if rs.currentMap != nil {
		rs.currentMap.blockPtrs = append(rs.currentMap.blockPtrs, rs.lvPointer)
		rs.currentMap.lastBlock = lastBlockOfMap{number: rs.nextBlock} // hash will be set by addHeader
	}
	for _, receipt := range receipts {
		//TODO add tx delimiter
		for _, log := range receipt.Logs {
			mapRemaining := rs.params.valuesPerMap - rs.lvPointer%rs.params.valuesPerMap
			if mapRemaining <= uint64(len(log.Topics)) {
				rs.advance(mapRemaining)
			}
			if rs.currentMap != nil {
				rs.addValue(addressValue(log.Address))
				for _, topic := range log.Topics {
					rs.addValue(topicValue(topic))
				}
			} else {
				rs.advance(uint64(len(log.Topics) + 1))
			}
			if rs.finished() {
				return
			}
		}
	}
}

func (rs *renderState) addHeader(header *types.Header) (uint32, []*finishedMap) {
	if rs.partialBlock {
		panic("checkNextHash has to be called before adding partially rendered block")
	}
	if rs.nextBlock != header.Number.Uint64() {
		panic("wrong block number")
	}
	if !rs.finished() {
		rs.advance(1) //TODO blockValue
	}
	rs.nextBlock++
	lastBlock := lastBlockOfMap{number: header.Number.Uint64(), hash: header.Hash()}
	if rs.currentMap != nil {
		rs.currentMap.lastBlock = lastBlock
	}
	for _, fm := range rs.finishedMaps {
		fm.lastBlock = lastBlock
	}
	firstMemoryMap, finishedMaps := rs.mapIndex-uint32(len(rs.finishedMaps)), rs.finishedMaps
	rs.finishedMaps = nil
	return firstMemoryMap, finishedMaps
}

// assumes currentMap != nil
func (rs *renderState) addValue(logValue common.Hash) {
	if rs.renderRange.Includes(rs.mapIndex) {
		for layerIndex := uint32(0); ; layerIndex++ {
			rowIndex := rs.params.rowIndex(rs.mapIndex, layerIndex, logValue)
			if rs.currentMap.rowLength(rowIndex) < rs.params.getMaxRowLength(layerIndex) {
				rs.currentMap.addToRow(rowIndex, rs.params.columnIndex(rs.lvPointer, &logValue))
				break
			}
		}
	}
	rs.advance(1)
}

func (rs *renderState) advance(count uint64) {
	rs.lvPointer += count
	if uint32(rs.lvPointer>>rs.params.logValuesPerMap) > rs.mapIndex {
		if rs.currentMap != nil {
			rs.finishedMaps = append(rs.finishedMaps, rs.currentMap.finished())
		}
		rs.mapIndex++
		if rs.renderRange.Includes(rs.mapIndex) {
			rs.currentMap = rs.params.newMemoryMap()
		} else {
			rs.currentMap = nil
		}
	}
}

func (rs *renderState) finished() bool {
	return rs.mapIndex >= rs.renderRange.AfterLast()
}
