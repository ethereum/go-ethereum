package vm

import (
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/tracing"
	wrappeda0gibase "github.com/ethereum/go-ethereum/core/vm/precompiles/wrapped_a0gi_base"
	"github.com/holiman/uint256"
	"github.com/vmihailenco/msgpack/v5"
)

const (
	WrappedA0GIBaseRequiredGasMax uint64 = 1000_000_000

	// txs
	WrappedA0GIBaseFunctionMint         = "mint"
	WrappedA0GIBaseFunctionBurn         = "burn"
	WrappedA0GIBaseFunctionSetMinterCap = "setMinterCap"
	// queries
	WrappedA0GIBaseFunctionGetWA0GI     = "getWA0GI"
	WrappedA0GIBaseFunctionMinterSupply = "minterSupply"
)

var WrappedA0GIBaseRequiredGasBasic = map[string]uint64{
	WrappedA0GIBaseFunctionMint:         100_000,
	WrappedA0GIBaseFunctionBurn:         100_000,
	WrappedA0GIBaseFunctionSetMinterCap: 100_000,
	WrappedA0GIBaseFunctionGetWA0GI:     5_000,
	WrappedA0GIBaseFunctionMinterSupply: 10_000,
}

var _ StatefulPrecompiledContract = &WrappedA0giBasePrecompile{}

type WrappedA0giBasePrecompile struct {
	abi abi.ABI
}

// Abi implements common.PrecompileCommon.
func (w *WrappedA0giBasePrecompile) Abi() *abi.ABI {
	return &w.abi
}

// IsTx implements common.PrecompileCommon.
func (w *WrappedA0giBasePrecompile) IsTx(method string) bool {
	switch method {
	case WrappedA0GIBaseFunctionMint,
		WrappedA0GIBaseFunctionBurn:
		return true
	default:
		return false
	}
}

func (w *WrappedA0giBasePrecompile) Address() common.Address {
	return common.HexToAddress("0x0000000000000000000000000000000000001002")
}

// RequiredGas implements vm.PrecompiledContract.
func (w *WrappedA0giBasePrecompile) RequiredGas(input []byte) uint64 {
	if len(input) < 4 {
		return WrappedA0GIBaseRequiredGasMax
	}
	method, err := w.abi.MethodById(input[:4])
	if err != nil {
		return WrappedA0GIBaseRequiredGasMax
	}
	if gas, ok := WrappedA0GIBaseRequiredGasBasic[method.Name]; ok {
		return gas
	}
	return WrappedA0GIBaseRequiredGasMax
}

func NewWrappedA0giBasePrecompile() *WrappedA0giBasePrecompile {
	abi, err := abi.JSON(strings.NewReader(wrappeda0gibase.Wrappeda0gibaseABI))
	if err != nil {
		panic(err)
	}
	return &WrappedA0giBasePrecompile{
		abi: abi,
	}
}

// Run implements vm.PrecompiledContract.
func (w *WrappedA0giBasePrecompile) Run(evm *EVM, contract *Contract, readonly bool) ([]byte, error) {
	method, args, err := InitializeStatefulPrecompileCall(w, evm, contract, readonly)
	if err != nil {
		return nil, err
	}

	var bz []byte
	switch method.Name {
	// queries
	case WrappedA0GIBaseFunctionGetWA0GI:
		bz, err = w.GetWA0GI(evm, method, args)
	case WrappedA0GIBaseFunctionMinterSupply:
		bz, err = w.MinterSupply(evm, method, args)
	// txs
	case WrappedA0GIBaseFunctionMint:
		bz, err = w.Mint(evm, contract, method, args)
	case WrappedA0GIBaseFunctionBurn:
		bz, err = w.Burn(evm, contract, method, args)
	case WrappedA0GIBaseFunctionSetMinterCap:
		bz, err = w.SetMinterCap(evm, contract, method, args)
	}

	if err != nil {
		return nil, err
	}

	return bz, nil
}

func (w *WrappedA0giBasePrecompile) getWA0GI() common.Address {
	// This is a Wrapped A0GI contract deployed by a raw transaction:
	// raw tx params:
	//	 from: 0x873cd27b6833e6394c34a00c37b260aca5abc0b6
	//   nonce: 0
	//	 gasPrice: 100 Gwei
	//   gasLimit: 1000000
	// The sender is an ephemeral account, nobody holds its private key and this is the only transaction it signed.
	// This transaction is a legacy transaction without chain ID so it can be deployed at any EVM chain which supports pre-EIP155 transactions.
	// raw tx: 0xf90f568085174876e800830f42408080b90f0360c0604052600c60809081526b57726170706564204130474960a01b60a0526000906200002d908262000128565b50604080518082019091526005815264574130474960d81b602082015260019062000059908262000128565b50600280546001600160a81b031916621002121790553480156200007c57600080fd5b50620001f4565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000ae57607f821691505b602082108103620000cf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200012357600081815260208120601f850160051c81016020861015620000fe5750805b601f850160051c820191505b818110156200011f578281556001016200010a565b5050505b505050565b81516001600160401b0381111562000144576200014462000083565b6200015c8162000155845462000099565b84620000d5565b602080601f8311600181146200019457600084156200017b5750858301515b600019600386901b1c1916600185901b1785556200011f565b600085815260208120601f198616915b82811015620001c557888601518255948401946001909101908401620001a4565b5085821015620001e45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610cff80620002046000396000f3fe6080604052600436106100f75760003560e01c806370a082311161008a578063a9059cbb11610059578063a9059cbb14610291578063c8dd1a26146102b1578063d0e30db0146102ee578063dd62ed3e146102f657600080fd5b806370a082311461022f57806379cc67901461025c57806395d89b411461027c5780639dc29fac1461025c57600080fd5b80632e1a7d4d116100c65780632e1a7d4d146101a3578063313ce567146101c357806340c10f19146101ef57806342966c681461020f57600080fd5b806306fdde031461010b578063095ea7b31461013657806318160ddd1461016657806323b872dd1461018357600080fd5b366101065761010461032e565b005b600080fd5b34801561011757600080fd5b50610120610389565b60405161012d9190610b1b565b60405180910390f35b34801561014257600080fd5b50610156610151366004610b6a565b610417565b604051901515815260200161012d565b34801561017257600080fd5b50475b60405190815260200161012d565b34801561018f57600080fd5b5061015661019e366004610b94565b610484565b3480156101af57600080fd5b506101046101be366004610bd0565b61068c565b3480156101cf57600080fd5b506002546101dd9060ff1681565b60405160ff909116815260200161012d565b3480156101fb57600080fd5b5061010461020a366004610b6a565b610716565b34801561021b57600080fd5b5061010461022a366004610bd0565b610879565b34801561023b57600080fd5b5061017561024a366004610be9565b60036020526000908152604090205481565b34801561026857600080fd5b50610104610277366004610b6a565b610886565b34801561028857600080fd5b50610120610894565b34801561029d57600080fd5b506101566102ac366004610b6a565b6108a1565b3480156102bd57600080fd5b506002546102d69061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161012d565b61010461032e565b34801561030257600080fd5b50610175610311366004610c04565b600460209081526000928352604080842090915290825290205481565b336000908152600360205260408120805434929061034d908490610c4d565b909155505060405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b6000805461039690610c60565b80601f01602080910402602001604051908101604052809291908181526020018280546103c290610c60565b801561040f5780601f106103e45761010080835404028352916020019161040f565b820191906000526020600020905b8154815290600101906020018083116103f257829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104729086815260200190565b60405180910390a35060015b92915050565b6001600160a01b0383166000908152600360205260408120548211156104f15760405162461bcd60e51b815260206004820152601860248201527f73726320696e73756666696369656e742062616c616e6365000000000000000060448201526064015b60405180910390fd5b6001600160a01b038416331480159061052f57506001600160a01b038416600090815260046020908152604080832033845290915290205460001914155b156105d9576001600160a01b03841660009081526004602090815260408083203384529091529020548211156105a05760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b60448201526064016104e8565b6001600160a01b0384166000908152600460209081526040808320338452909152812080548492906105d3908490610c9a565b90915550505b6001600160a01b03841660009081526003602052604081208054849290610601908490610c9a565b90915550506001600160a01b0383166000908152600360205260408120805484929061062e908490610c4d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161067a91815260200190565b60405180910390a35060019392505050565b33600090815260036020526040812080548392906106ab908490610c9a565b9091555050604051339082156108fc029083906000818181858888f193505050501580156106dd573d6000803e3d6000fd5b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250565b6002546040513360248201526044810183905260009161010090046001600160a01b03169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b179052516107739190610cad565b6000604051808303816000865af19150503d80600081146107b0576040519150601f19603f3d011682016040523d82523d6000602084013e6107b5565b606091505b50509050806108065760405162461bcd60e51b815260206004820152601d60248201527f7772617070656420613067692062617365206d696e74206661696c656400000060448201526064016104e8565b6001600160a01b0383166000908152600360205260408120805484929061082e908490610c4d565b90915550506040518281526001600160a01b0384169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8906020015b60405180910390a3505050565b61088333826108b5565b50565b61089082826108b5565b5050565b6001805461039690610c60565b60006108ae338484610484565b9392505050565b6002546040513360248201526044810183905260009161010090046001600160a01b03169060640160408051601f198184030181529181526020820180516001600160e01b0316632770a7eb60e21b179052516109129190610cad565b6000604051808303816000865af19150503d806000811461094f576040519150601f19603f3d011682016040523d82523d6000602084013e610954565b606091505b50509050806109a55760405162461bcd60e51b815260206004820152601d60248201527f7772617070656420613067692062617365206275726e206661696c656400000060448201526064016104e8565b6001600160a01b03831633148015906109e357506001600160a01b038316600090815260046020908152604080832033845290915290205460001914155b15610a8d576001600160a01b0383166000908152600460209081526040808320338452909152902054821115610a545760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b60448201526064016104e8565b6001600160a01b038316600090815260046020908152604080832033845290915281208054849290610a87908490610c9a565b90915550505b6001600160a01b03831660009081526003602052604081208054849290610ab5908490610c9a565b90915550506040518281526001600160a01b0384169033907fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539060200161086c565b60005b83811015610b12578181015183820152602001610afa565b50506000910152565b6020815260008251806020840152610b3a816040850160208701610af7565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610b6557600080fd5b919050565b60008060408385031215610b7d57600080fd5b610b8683610b4e565b946020939093013593505050565b600080600060608486031215610ba957600080fd5b610bb284610b4e565b9250610bc060208501610b4e565b9150604084013590509250925092565b600060208284031215610be257600080fd5b5035919050565b600060208284031215610bfb57600080fd5b6108ae82610b4e565b60008060408385031215610c1757600080fd5b610c2083610b4e565b9150610c2e60208401610b4e565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561047e5761047e610c37565b600181811c90821680610c7457607f821691505b602082108103610c9457634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561047e5761047e610c37565b60008251610cbf818460208701610af7565b919091019291505056fea2646970667358221220e46d4016267b105c34d4679646e09d6fb451927a4dd464e4ebe1563577af02a664736f6c634300081400331ba0fbd8c503ac7ff82ea302cdc5d6a7195281eaa99017a6a363e36fba073028ba42a037a49fedf5460e3d33776233d88dfb242ddaf9bb5d4cb6688aa290ead65a93c7
	return common.HexToAddress("0x1cd0690ff9a693f5ef2dd976660a8dafc81a109c")
}

func (w *WrappedA0giBasePrecompile) GetWA0GI(_ *EVM, method *abi.Method, args []interface{}) ([]byte, error) {
	if len(args) != 0 {
		return nil, ErrExecutionReverted
	}

	return method.Outputs.Pack(w.getWA0GI())
}

func (w *WrappedA0giBasePrecompile) setMinterSupply(evm *EVM, account common.Address, supply wrappeda0gibase.Supply) error {
	b, err := msgpack.Marshal(supply)
	if err != nil {
		return err
	}
	StoreBytes(evm.StateDB, w.Address(), wrappeda0gibase.SupplyKey(account), b)
	return nil
}

func (w *WrappedA0giBasePrecompile) getMinterSupply(evm *EVM, account common.Address) (wrappeda0gibase.Supply, error) {
	b := LoadBytes(evm.StateDB, w.Address(), wrappeda0gibase.SupplyKey(account))
	if len(b) == 0 {
		return wrappeda0gibase.Supply{
			Cap:           big.NewInt(0),
			Supply:        big.NewInt(0),
			InitialSupply: big.NewInt(0),
		}, nil
	}

	var supply wrappeda0gibase.Supply
	err := msgpack.Unmarshal(b, &supply)
	if err != nil {
		return wrappeda0gibase.Supply{}, err
	}
	return supply, nil
}

func (w *WrappedA0giBasePrecompile) MinterSupply(evm *EVM, method *abi.Method, args []interface{}) ([]byte, error) {
	if len(args) != 1 {
		return nil, ErrExecutionReverted
	}
	account := args[0].(common.Address)
	supply, err := w.getMinterSupply(evm, account)
	if err != nil {
		return nil, err
	}
	return method.Outputs.Pack(supply)
}

func (w *WrappedA0giBasePrecompile) Mint(
	evm *EVM,
	contract *Contract,
	method *abi.Method,
	args []interface{},
) ([]byte, error) {
	if len(args) != 2 {
		return nil, ErrExecutionReverted
	}
	minter := args[0].(common.Address)
	amount := args[1].(*big.Int)
	// validation
	wa0gi := w.getWA0GI()
	if contract.caller != wa0gi {
		return nil, wrappeda0gibase.ErrSenderNotWA0GI
	}
	// execute
	supply, err := w.getMinterSupply(evm, minter)
	if err != nil {
		return nil, err
	}
	// check & update mint supply
	supply.Supply.Add(supply.Supply, amount)
	if supply.Supply.Cmp(supply.Cap) > 0 {
		return nil, wrappeda0gibase.ErrInsufficientMintCap
	}
	// mint & transfer to wa0gi contract address
	evm.StateDB.AddBalance(wa0gi, uint256.MustFromBig(amount), tracing.BalanceIncreaseWA0GIMint)
	// update supply
	if err = w.setMinterSupply(evm, minter, supply); err != nil {
		return nil, err
	}
	return method.Outputs.Pack()
}

func (w *WrappedA0giBasePrecompile) Burn(
	evm *EVM,
	contract *Contract,
	method *abi.Method,
	args []interface{},
) ([]byte, error) {
	if len(args) != 2 {
		return nil, ErrExecutionReverted
	}
	minter := args[0].(common.Address)
	amount := args[1].(*big.Int)
	// validation
	wa0gi := w.getWA0GI()
	if contract.caller != wa0gi {
		return nil, wrappeda0gibase.ErrSenderNotWA0GI
	}
	// execute
	supply, err := w.getMinterSupply(evm, minter)
	if err != nil {
		return nil, err
	}
	// check & update mint supply
	supply.Supply.Sub(supply.Supply, amount)
	if supply.Supply.Cmp(big.NewInt(0)) < 0 {
		return nil, wrappeda0gibase.ErrInsufficientMintSupply
	}
	// transfer from wa0gi contract address & burn
	evm.StateDB.SubBalance(wa0gi, uint256.MustFromBig(amount), tracing.BalanceIncreaseWA0GIMint)
	// update supply
	if err = w.setMinterSupply(evm, minter, supply); err != nil {
		return nil, err
	}
	return method.Outputs.Pack()
}

func (w *WrappedA0giBasePrecompile) getAgency() common.Address {
	// This is a upgradeable contract deployed in Beacon-Proxy pattern in three raw transaction:
	// raw tx params:
	//	 from: 0x3504d167b83f6fc763ed006ad9b3ae2c90ad1c5b
	//   nonce: 0..2
	//	 gasPrice: 100 Gwei
	//   gasLimit: 1000000
	// The sender is an ephemeral account, nobody holds its private key and this is the only transaction it signed.
	// This transaction is a legacy transaction without chain ID so it can be deployed at any EVM chain which supports pre-EIP155 transactions.
	// raw tx #0(implementation): 0xf905ef8085174876e800830f42408080b9059c608060405234801561001057600080fd5b5061057c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638129fc1c146100715780638da5cb5b14610079578063c8dd1a26146100c1578063dddba6c8146100ca578063f2fde38b146100dd575b600080fd5b61006f6100f0565b005b61006f610104565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6100a561100281565b61006f6100d83660046104c2565b610227565b61006f6100eb3660046104f5565b61033a565b6100f8610378565b61010260006103d3565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561014a5750825b905060008267ffffffffffffffff1660011480156101675750303b155b905081158015610175575080155b156101935760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156101bd57845460ff60401b1916600160401b1785555b6101da732d7f2d2286994477ba878f321b17a7e40e52cda4610444565b831561022057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b61022f610378565b6040516001600160a01b038416602482015260448101839052606481018290526000906110029060840160408051601f198184030181529181526020820180516001600160e01b0316631bbb74d960e31b1790525161028e9190610517565b6000604051808303816000865af19150503d80600081146102cb576040519150601f19603f3d011682016040523d82523d6000602084013e6102d0565b606091505b50509050806103345760405162461bcd60e51b815260206004820152602560248201527f7772617070656420613067692062617365207365744d696e7465724361702066604482015264185a5b195960da1b60648201526084015b60405180910390fd5b50505050565b610342610378565b6001600160a01b03811661036c57604051631e4fbdf760e01b81526000600482015260240161032b565b610375816103d3565b50565b336103aa7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146101025760405163118cdaa760e01b815233600482015260240161032b565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61044c610455565b6103758161049e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661010257604051631afcd79f60e31b815260040160405180910390fd5b610342610455565b80356001600160a01b03811681146104bd57600080fd5b919050565b6000806000606084860312156104d757600080fd5b6104e0846104a6565b95602085013595506040909401359392505050565b60006020828403121561050757600080fd5b610510826104a6565b9392505050565b6000825160005b81811015610538576020818601810151858301520161051e565b50600092019182525091905056fea26469706673582212201bc776e718351abafec5f665778c1e36e86e42d150a1555947e32c251669ef2564736f6c634300081400331ca0387754e94e273cf7d520ee01bf551d277a8de7da62a95fe38691c413294b0bfda0015e1f3af836be67761814b0bf20f49e9b6455836c7fd363a1d10c518f1d66c7
	// raw tx #1(beacon): 0xf904cb0185174876e800830f42408080b90478608060405234801561001057600080fd5b5060405161043838038061043883398101604081905261002f91610165565b806001600160a01b03811661005f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61006881610079565b50610072826100c9565b5050610198565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b806001600160a01b03163b6000036100ff5760405163211eb15960e21b81526001600160a01b0382166004820152602401610056565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b80516001600160a01b038116811461016057600080fd5b919050565b6000806040838503121561017857600080fd5b61018183610149565b915061018f60208401610149565b90509250929050565b610291806101a76000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a36600461022b565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f6100da565b6000546001600160a01b031661007e565b61006f6100c136600461022b565b6100ee565b6100ce61012e565b6100d78161015b565b50565b6100e261012e565b6100ec60006101db565b565b6100f661012e565b6001600160a01b03811661012557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6100d7816101db565b6000546001600160a01b031633146100ec5760405163118cdaa760e01b815233600482015260240161011c565b806001600160a01b03163b6000036101915760405163211eb15960e21b81526001600160a01b038216600482015260240161011c565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561023d57600080fd5b81356001600160a01b038116811461025457600080fd5b939250505056fea26469706673582212205220e5b3095ab739313888ed7a605b359ca52e79f2a5a6297e03c439e8e8b30764736f6c63430008140033000000000000000000000000cc46de259693c7ca0a776903381fd9b30f7973680000000000000000000000002d7f2d2286994477ba878f321b17a7e40e52cda41ba0a6796d9b4d10a35400ed45febe7bd9966c02b85da7926d1cabe262ff02fe7f63a05a0c76c708bc0af68cb1dc911eef76d71dfbc519b85ce848a8844eff51a0b8af
	// raw tx #2(proxy): 0xf906720285174876e800830f42408080b9061f60a06040526040516105bf3803806105bf83398101604081905261002291610387565b61002c828261003e565b506001600160a01b031660805261047e565b610047826100fe565b6040516001600160a01b038316907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a28051156100f2576100ed826001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e79190610447565b82610211565b505050565b6100fa610288565b5050565b806001600160a01b03163b60000361013957604051631933b43b60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b807fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392831617905560408051635c60da1b60e01b81529051600092841691635c60da1b9160048083019260209291908290030181865afa1580156101b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d99190610447565b9050806001600160a01b03163b6000036100fa57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610130565b6060600080846001600160a01b03168460405161022e9190610462565b600060405180830381855af49150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50909250905061027f8583836102a9565b95945050505050565b34156102a75760405163b398979f60e01b815260040160405180910390fd5b565b6060826102be576102b982610308565b610301565b81511580156102d557506001600160a01b0384163b155b156102fe57604051639996b31560e01b81526001600160a01b0385166004820152602401610130565b50805b9392505050565b8051156103185780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80516001600160a01b038116811461034857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561037e578181015183820152602001610366565b50506000910152565b6000806040838503121561039a57600080fd5b6103a383610331565b60208401519092506001600160401b03808211156103c057600080fd5b818501915085601f8301126103d457600080fd5b8151818111156103e6576103e661034d565b604051601f8201601f19908116603f0116810190838211818310171561040e5761040e61034d565b8160405282815288602084870101111561042757600080fd5b610438836020830160208801610363565b80955050505050509250929050565b60006020828403121561045957600080fd5b61030182610331565b60008251610474818460208701610363565b9190910192915050565b6080516101276104986000396000601e01526101276000f3fe6080604052600a600c565b005b60186014601a565b60a0565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156079573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190609b919060c3565b905090565b3660008037600080366000845af43d6000803e80801560be573d6000f35b3d6000fd5b60006020828403121560d457600080fd5b81516001600160a01b038116811460ea57600080fd5b939250505056fea264697066735822122039e43d51fa1bcd8fe79599db2a7e6dd3e5358b756c53210827bbf02fda62be6c64736f6c63430008140033000000000000000000000000357f0f6bff45b51bd84121aab517c63c3c9d003a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000001ba09c5d3b7c86539764e213c89c5ebefa8bc1533c53d6f533e8bc403f6765efed76a077d056d4f3d618d8cf4bac4f1bbf09ba8ffaa2875058d59670c05c124e670f5f
	// The owners of the contract and the beacon will be set to 0x2D7F2d2286994477Ba878f321b17A7e40E52cDa4,
	// and after the network has launched and reached a stable state, ownership will be transferred to a timelock contract controlled by a multisig
	return common.HexToAddress("0xe1a5162f99e075f8c6681ae28191ab3ac250b468")
}

func (w *WrappedA0giBasePrecompile) SetMinterCap(
	evm *EVM,
	contract *Contract,
	method *abi.Method,
	args []interface{},
) ([]byte, error) {
	if len(args) != 3 {
		return nil, ErrExecutionReverted
	}
	minter := args[0].(common.Address)
	cap := args[1].(*big.Int)
	initialSupply := args[2].(*big.Int)
	// validation
	agency := w.getAgency()
	if contract.caller != agency {
		return nil, wrappeda0gibase.ErrSenderNotAgency
	}
	// execute
	supply, err := w.getMinterSupply(evm, minter)
	if err != nil {
		return nil, err
	}
	difference := new(big.Int).Sub(initialSupply, supply.InitialSupply)
	supply.Supply.Add(supply.Supply, difference)
	if supply.Supply.Cmp(big.NewInt(0)) < 0 {
		supply.Supply = big.NewInt(0)
	}
	supply.Cap = cap
	supply.InitialSupply = initialSupply

	// update minter supply
	if err = w.setMinterSupply(evm, minter, supply); err != nil {
		return nil, err
	}
	return method.Outputs.Pack()
}
