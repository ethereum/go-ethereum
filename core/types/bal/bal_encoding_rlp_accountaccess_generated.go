// Code generated by rlpgen. DO NOT EDIT.

package bal

import "github.com/ethereum/go-ethereum/rlp"
import "io"

func (obj *encodingAccountAccess) EncodeRLP(_w io.Writer) error {
	w := rlp.NewEncoderBuffer(_w)
	_tmp0 := w.List()
	w.WriteBytes(obj.Address[:])
	_tmp1 := w.List()
	for _, _tmp2 := range obj.StorageWrites {
		_tmp3 := w.List()
		w.WriteBytes(_tmp2.Slot[:])
		_tmp4 := w.List()
		for _, _tmp5 := range _tmp2.Accesses {
			_tmp6 := w.List()
			w.WriteUint64(uint64(_tmp5.TxIdx))
			w.WriteBytes(_tmp5.ValueAfter[:])
			w.ListEnd(_tmp6)
		}
		w.ListEnd(_tmp4)
		w.ListEnd(_tmp3)
	}
	w.ListEnd(_tmp1)
	_tmp7 := w.List()
	for _, _tmp8 := range obj.StorageReads {
		w.WriteBytes(_tmp8[:])
	}
	w.ListEnd(_tmp7)
	_tmp9 := w.List()
	for _, _tmp10 := range obj.BalanceChanges {
		_tmp11 := w.List()
		w.WriteUint64(uint64(_tmp10.TxIdx))
		w.WriteBytes(_tmp10.Balance[:])
		w.ListEnd(_tmp11)
	}
	w.ListEnd(_tmp9)
	_tmp12 := w.List()
	for _, _tmp13 := range obj.NonceChanges {
		_tmp14 := w.List()
		w.WriteUint64(uint64(_tmp13.TxIdx))
		w.WriteUint64(_tmp13.Nonce)
		w.ListEnd(_tmp14)
	}
	w.ListEnd(_tmp12)
	_tmp15 := w.List()
	for _, _tmp16 := range obj.Code {
		_tmp17 := w.List()
		w.WriteUint64(uint64(_tmp16.TxIndex))
		w.WriteBytes(_tmp16.Code)
		w.ListEnd(_tmp17)
	}
	w.ListEnd(_tmp15)
	w.ListEnd(_tmp0)
	return w.Flush()
}

func (obj *encodingAccountAccess) DecodeRLP(dec *rlp.Stream) error {
	var _tmp0 encodingAccountAccess
	{
		if _, err := dec.List(); err != nil {
			return err
		}
		// Address:
		var _tmp1 [20]byte
		if err := dec.ReadBytes(_tmp1[:]); err != nil {
			return err
		}
		_tmp0.Address = _tmp1
		// StorageWrites:
		var _tmp2 []encodingSlotWrites
		if _, err := dec.List(); err != nil {
			return err
		}
		for dec.MoreDataInList() {
			var _tmp3 encodingSlotWrites
			{
				if _, err := dec.List(); err != nil {
					return err
				}
				// Slot:
				var _tmp4 [32]byte
				if err := dec.ReadBytes(_tmp4[:]); err != nil {
					return err
				}
				_tmp3.Slot = _tmp4
				// Accesses:
				var _tmp5 []encodingStorageWrite
				if _, err := dec.List(); err != nil {
					return err
				}
				for dec.MoreDataInList() {
					var _tmp6 encodingStorageWrite
					{
						if _, err := dec.List(); err != nil {
							return err
						}
						// TxIdx:
						_tmp7, err := dec.Uint16()
						if err != nil {
							return err
						}
						_tmp6.TxIdx = _tmp7
						// ValueAfter:
						var _tmp8 [32]byte
						if err := dec.ReadBytes(_tmp8[:]); err != nil {
							return err
						}
						_tmp6.ValueAfter = _tmp8
						if err := dec.ListEnd(); err != nil {
							return err
						}
					}
					_tmp5 = append(_tmp5, _tmp6)
				}
				if err := dec.ListEnd(); err != nil {
					return err
				}
				_tmp3.Accesses = _tmp5
				if err := dec.ListEnd(); err != nil {
					return err
				}
			}
			_tmp2 = append(_tmp2, _tmp3)
		}
		if err := dec.ListEnd(); err != nil {
			return err
		}
		_tmp0.StorageWrites = _tmp2
		// StorageReads:
		var _tmp9 [][32]byte
		if _, err := dec.List(); err != nil {
			return err
		}
		for dec.MoreDataInList() {
			var _tmp10 [32]byte
			if err := dec.ReadBytes(_tmp10[:]); err != nil {
				return err
			}
			_tmp9 = append(_tmp9, _tmp10)
		}
		if err := dec.ListEnd(); err != nil {
			return err
		}
		_tmp0.StorageReads = _tmp9
		// BalanceChanges:
		var _tmp11 []encodingBalanceChange
		if _, err := dec.List(); err != nil {
			return err
		}
		for dec.MoreDataInList() {
			var _tmp12 encodingBalanceChange
			{
				if _, err := dec.List(); err != nil {
					return err
				}
				// TxIdx:
				_tmp13, err := dec.Uint16()
				if err != nil {
					return err
				}
				_tmp12.TxIdx = _tmp13
				// Balance:
				var _tmp14 encodingBalance
				if err := dec.ReadBytes(_tmp14[:]); err != nil {
					return err
				}
				_tmp12.Balance = _tmp14
				if err := dec.ListEnd(); err != nil {
					return err
				}
			}
			_tmp11 = append(_tmp11, _tmp12)
		}
		if err := dec.ListEnd(); err != nil {
			return err
		}
		_tmp0.BalanceChanges = _tmp11
		// NonceChanges:
		var _tmp15 []encodingAccountNonce
		if _, err := dec.List(); err != nil {
			return err
		}
		for dec.MoreDataInList() {
			var _tmp16 encodingAccountNonce
			{
				if _, err := dec.List(); err != nil {
					return err
				}
				// TxIdx:
				_tmp17, err := dec.Uint16()
				if err != nil {
					return err
				}
				_tmp16.TxIdx = _tmp17
				// Nonce:
				_tmp18, err := dec.Uint64()
				if err != nil {
					return err
				}
				_tmp16.Nonce = _tmp18
				if err := dec.ListEnd(); err != nil {
					return err
				}
			}
			_tmp15 = append(_tmp15, _tmp16)
		}
		if err := dec.ListEnd(); err != nil {
			return err
		}
		_tmp0.NonceChanges = _tmp15
		// Code:
		var _tmp19 []encodingCodeChange
		if _, err := dec.List(); err != nil {
			return err
		}
		for dec.MoreDataInList() {
			var _tmp20 encodingCodeChange
			{
				if _, err := dec.List(); err != nil {
					return err
				}
				// TxIndex:
				_tmp21, err := dec.Uint16()
				if err != nil {
					return err
				}
				_tmp20.TxIndex = _tmp21
				// Code:
				_tmp22, err := dec.Bytes()
				if err != nil {
					return err
				}
				_tmp20.Code = _tmp22
				if err := dec.ListEnd(); err != nil {
					return err
				}
			}
			_tmp19 = append(_tmp19, _tmp20)
		}
		if err := dec.ListEnd(); err != nil {
			return err
		}
		_tmp0.Code = _tmp19
		if err := dec.ListEnd(); err != nil {
			return err
		}
	}
	*obj = _tmp0
	return nil
}
