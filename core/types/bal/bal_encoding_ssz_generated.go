// Code generated by fastssz. DO NOT EDIT.
// Hash: 5a611ca283f63103b9044df57fda81526194a110bef4d5f1b2035335dfeb3ad6
// Version: 0.1.3
package bal

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the encodingBlockAccessList object
func (e *encodingBlockAccessList) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingBlockAccessList object to a target array
func (e *encodingBlockAccessList) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Accesses'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Accesses'
	if size := len(e.Accesses); size > 300000 {
		err = ssz.ErrListTooBigFn("encodingBlockAccessList.Accesses", size, 300000)
		return
	}
	{
		offset = 4 * len(e.Accesses)
		for ii := 0; ii < len(e.Accesses); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.Accesses[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.Accesses); ii++ {
		if dst, err = e.Accesses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the encodingBlockAccessList object
func (e *encodingBlockAccessList) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Accesses'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Accesses'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 300000)
		if err != nil {
			return err
		}
		e.Accesses = make([]encodingAccountAccess, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.Accesses[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingBlockAccessList object
func (e *encodingBlockAccessList) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Accesses'
	for ii := 0; ii < len(e.Accesses); ii++ {
		size += 4
		size += e.Accesses[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the encodingBlockAccessList object
func (e *encodingBlockAccessList) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingBlockAccessList object with a hasher
func (e *encodingBlockAccessList) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Accesses'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Accesses))
		if num > 300000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Accesses {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 300000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingBlockAccessList object
func (e *encodingBlockAccessList) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingCodeChange object
func (e *encodingCodeChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingCodeChange object to a target array
func (e *encodingCodeChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(6)

	// Field (0) 'TxIndex'
	dst = ssz.MarshalUint16(dst, e.TxIndex)

	// Offset (1) 'Code'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Code'
	if size := len(e.Code); size > 24576 {
		err = ssz.ErrBytesLengthFn("encodingCodeChange.Code", size, 24576)
		return
	}
	dst = append(dst, e.Code...)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingCodeChange object
func (e *encodingCodeChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 6 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'TxIndex'
	e.TxIndex = ssz.UnmarshallUint16(buf[0:2])

	// Offset (1) 'Code'
	if o1 = ssz.ReadOffset(buf[2:6]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 6 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Code'
	{
		buf = tail[o1:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(e.Code) == 0 {
			e.Code = make([]byte, 0, len(buf))
		}
		e.Code = append(e.Code, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingCodeChange object
func (e *encodingCodeChange) SizeSSZ() (size int) {
	size = 6

	// Field (1) 'Code'
	size += len(e.Code)

	return
}

// HashTreeRoot ssz hashes the encodingCodeChange object
func (e *encodingCodeChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingCodeChange object with a hasher
func (e *encodingCodeChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIndex'
	hh.PutUint16(e.TxIndex)

	// Field (1) 'Code'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.Code))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.Code)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingCodeChange object
func (e *encodingCodeChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingAccountAccess object
func (e *encodingAccountAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingAccountAccess object to a target array
func (e *encodingAccountAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(40)

	// Field (0) 'Address'
	dst = append(dst, e.Address[:]...)

	// Offset (1) 'StorageWrites'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.StorageWrites); ii++ {
		offset += 4
		offset += e.StorageWrites[ii].SizeSSZ()
	}

	// Offset (2) 'StorageReads'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.StorageReads) * 32

	// Offset (3) 'BalanceChanges'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.BalanceChanges) * 18

	// Offset (4) 'NonceChanges'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.NonceChanges) * 10

	// Offset (5) 'Code'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'StorageWrites'
	if size := len(e.StorageWrites); size > 300000 {
		err = ssz.ErrListTooBigFn("encodingAccountAccess.StorageWrites", size, 300000)
		return
	}
	{
		offset = 4 * len(e.StorageWrites)
		for ii := 0; ii < len(e.StorageWrites); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.StorageWrites[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.StorageWrites); ii++ {
		if dst, err = e.StorageWrites[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'StorageReads'
	if size := len(e.StorageReads); size > 300000 {
		err = ssz.ErrListTooBigFn("encodingAccountAccess.StorageReads", size, 300000)
		return
	}
	for ii := 0; ii < len(e.StorageReads); ii++ {
		dst = append(dst, e.StorageReads[ii][:]...)
	}

	// Field (3) 'BalanceChanges'
	if size := len(e.BalanceChanges); size > 300000 {
		err = ssz.ErrListTooBigFn("encodingAccountAccess.BalanceChanges", size, 300000)
		return
	}
	for ii := 0; ii < len(e.BalanceChanges); ii++ {
		if dst, err = e.BalanceChanges[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (4) 'NonceChanges'
	if size := len(e.NonceChanges); size > 300000 {
		err = ssz.ErrListTooBigFn("encodingAccountAccess.NonceChanges", size, 300000)
		return
	}
	for ii := 0; ii < len(e.NonceChanges); ii++ {
		if dst, err = e.NonceChanges[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (5) 'Code'
	if size := len(e.Code); size > 1 {
		err = ssz.ErrListTooBigFn("encodingAccountAccess.Code", size, 1)
		return
	}
	{
		offset = 4 * len(e.Code)
		for ii := 0; ii < len(e.Code); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.Code[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.Code); ii++ {
		if dst, err = e.Code[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the encodingAccountAccess object
func (e *encodingAccountAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 40 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2, o3, o4, o5 uint64

	// Field (0) 'Address'
	copy(e.Address[:], buf[0:20])

	// Offset (1) 'StorageWrites'
	if o1 = ssz.ReadOffset(buf[20:24]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 40 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'StorageReads'
	if o2 = ssz.ReadOffset(buf[24:28]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'BalanceChanges'
	if o3 = ssz.ReadOffset(buf[28:32]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'NonceChanges'
	if o4 = ssz.ReadOffset(buf[32:36]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Offset (5) 'Code'
	if o5 = ssz.ReadOffset(buf[36:40]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (1) 'StorageWrites'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 300000)
		if err != nil {
			return err
		}
		e.StorageWrites = make([]encodingSlotWrites, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.StorageWrites[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'StorageReads'
	{
		buf = tail[o2:o3]
		num, err := ssz.DivideInt2(len(buf), 32, 300000)
		if err != nil {
			return err
		}
		e.StorageReads = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(e.StorageReads[ii][:], buf[ii*32:(ii+1)*32])
		}
	}

	// Field (3) 'BalanceChanges'
	{
		buf = tail[o3:o4]
		num, err := ssz.DivideInt2(len(buf), 18, 300000)
		if err != nil {
			return err
		}
		e.BalanceChanges = make([]encodingBalanceChange, num)
		for ii := 0; ii < num; ii++ {
			if err = e.BalanceChanges[ii].UnmarshalSSZ(buf[ii*18 : (ii+1)*18]); err != nil {
				return err
			}
		}
	}

	// Field (4) 'NonceChanges'
	{
		buf = tail[o4:o5]
		num, err := ssz.DivideInt2(len(buf), 10, 300000)
		if err != nil {
			return err
		}
		e.NonceChanges = make([]encodingAccountNonce, num)
		for ii := 0; ii < num; ii++ {
			if err = e.NonceChanges[ii].UnmarshalSSZ(buf[ii*10 : (ii+1)*10]); err != nil {
				return err
			}
		}
	}

	// Field (5) 'Code'
	{
		buf = tail[o5:]
		num, err := ssz.DecodeDynamicLength(buf, 1)
		if err != nil {
			return err
		}
		e.Code = make([]encodingCodeChange, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.Code[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingAccountAccess object
func (e *encodingAccountAccess) SizeSSZ() (size int) {
	size = 40

	// Field (1) 'StorageWrites'
	for ii := 0; ii < len(e.StorageWrites); ii++ {
		size += 4
		size += e.StorageWrites[ii].SizeSSZ()
	}

	// Field (2) 'StorageReads'
	size += len(e.StorageReads) * 32

	// Field (3) 'BalanceChanges'
	size += len(e.BalanceChanges) * 18

	// Field (4) 'NonceChanges'
	size += len(e.NonceChanges) * 10

	// Field (5) 'Code'
	for ii := 0; ii < len(e.Code); ii++ {
		size += 4
		size += e.Code[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the encodingAccountAccess object
func (e *encodingAccountAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingAccountAccess object with a hasher
func (e *encodingAccountAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(e.Address[:])

	// Field (1) 'StorageWrites'
	{
		subIndx := hh.Index()
		num := uint64(len(e.StorageWrites))
		if num > 300000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.StorageWrites {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 300000)
	}

	// Field (2) 'StorageReads'
	{
		if size := len(e.StorageReads); size > 300000 {
			err = ssz.ErrListTooBigFn("encodingAccountAccess.StorageReads", size, 300000)
			return
		}
		subIndx := hh.Index()
		for _, i := range e.StorageReads {
			hh.Append(i[:])
		}
		numItems := uint64(len(e.StorageReads))
		hh.MerkleizeWithMixin(subIndx, numItems, 300000)
	}

	// Field (3) 'BalanceChanges'
	{
		subIndx := hh.Index()
		num := uint64(len(e.BalanceChanges))
		if num > 300000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.BalanceChanges {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 300000)
	}

	// Field (4) 'NonceChanges'
	{
		subIndx := hh.Index()
		num := uint64(len(e.NonceChanges))
		if num > 300000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.NonceChanges {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 300000)
	}

	// Field (5) 'Code'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Code))
		if num > 1 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Code {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingAccountAccess object
func (e *encodingAccountAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingBalanceChange object
func (e *encodingBalanceChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingBalanceChange object to a target array
func (e *encodingBalanceChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint16(dst, e.TxIdx)

	// Field (1) 'Balance'
	dst = append(dst, e.Balance[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingBalanceChange object
func (e *encodingBalanceChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 18 {
		return ssz.ErrSize
	}

	// Field (0) 'TxIdx'
	e.TxIdx = ssz.UnmarshallUint16(buf[0:2])

	// Field (1) 'Balance'
	copy(e.Balance[:], buf[2:18])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingBalanceChange object
func (e *encodingBalanceChange) SizeSSZ() (size int) {
	size = 18
	return
}

// HashTreeRoot ssz hashes the encodingBalanceChange object
func (e *encodingBalanceChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingBalanceChange object with a hasher
func (e *encodingBalanceChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint16(e.TxIdx)

	// Field (1) 'Balance'
	hh.PutBytes(e.Balance[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingBalanceChange object
func (e *encodingBalanceChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingAccountNonce object
func (e *encodingAccountNonce) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingAccountNonce object to a target array
func (e *encodingAccountNonce) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint16(dst, e.TxIdx)

	// Field (1) 'Nonce'
	dst = ssz.MarshalUint64(dst, e.Nonce)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingAccountNonce object
func (e *encodingAccountNonce) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 10 {
		return ssz.ErrSize
	}

	// Field (0) 'TxIdx'
	e.TxIdx = ssz.UnmarshallUint16(buf[0:2])

	// Field (1) 'Nonce'
	e.Nonce = ssz.UnmarshallUint64(buf[2:10])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingAccountNonce object
func (e *encodingAccountNonce) SizeSSZ() (size int) {
	size = 10
	return
}

// HashTreeRoot ssz hashes the encodingAccountNonce object
func (e *encodingAccountNonce) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingAccountNonce object with a hasher
func (e *encodingAccountNonce) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint16(e.TxIdx)

	// Field (1) 'Nonce'
	hh.PutUint64(e.Nonce)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingAccountNonce object
func (e *encodingAccountNonce) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingStorageWrite object
func (e *encodingStorageWrite) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingStorageWrite object to a target array
func (e *encodingStorageWrite) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint16(dst, e.TxIdx)

	// Field (1) 'ValueAfter'
	dst = append(dst, e.ValueAfter[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingStorageWrite object
func (e *encodingStorageWrite) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 34 {
		return ssz.ErrSize
	}

	// Field (0) 'TxIdx'
	e.TxIdx = ssz.UnmarshallUint16(buf[0:2])

	// Field (1) 'ValueAfter'
	copy(e.ValueAfter[:], buf[2:34])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingStorageWrite object
func (e *encodingStorageWrite) SizeSSZ() (size int) {
	size = 34
	return
}

// HashTreeRoot ssz hashes the encodingStorageWrite object
func (e *encodingStorageWrite) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingStorageWrite object with a hasher
func (e *encodingStorageWrite) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint16(e.TxIdx)

	// Field (1) 'ValueAfter'
	hh.PutBytes(e.ValueAfter[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingStorageWrite object
func (e *encodingStorageWrite) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingSlotWrites object
func (e *encodingSlotWrites) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingSlotWrites object to a target array
func (e *encodingSlotWrites) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'Slot'
	dst = append(dst, e.Slot[:]...)

	// Offset (1) 'Accesses'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Accesses'
	if size := len(e.Accesses); size > 300000 {
		err = ssz.ErrListTooBigFn("encodingSlotWrites.Accesses", size, 300000)
		return
	}
	for ii := 0; ii < len(e.Accesses); ii++ {
		if dst, err = e.Accesses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the encodingSlotWrites object
func (e *encodingSlotWrites) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Slot'
	copy(e.Slot[:], buf[0:32])

	// Offset (1) 'Accesses'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Accesses'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 34, 300000)
		if err != nil {
			return err
		}
		e.Accesses = make([]encodingStorageWrite, num)
		for ii := 0; ii < num; ii++ {
			if err = e.Accesses[ii].UnmarshalSSZ(buf[ii*34 : (ii+1)*34]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingSlotWrites object
func (e *encodingSlotWrites) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Accesses'
	size += len(e.Accesses) * 34

	return
}

// HashTreeRoot ssz hashes the encodingSlotWrites object
func (e *encodingSlotWrites) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingSlotWrites object with a hasher
func (e *encodingSlotWrites) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutBytes(e.Slot[:])

	// Field (1) 'Accesses'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Accesses))
		if num > 300000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Accesses {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 300000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingSlotWrites object
func (e *encodingSlotWrites) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
