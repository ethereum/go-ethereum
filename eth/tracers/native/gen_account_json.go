// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package native

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*accountMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (p PrestateAccount) MarshalJSON() ([]byte, error) {
	type PrestateAccount struct {
		Balance  *hexutil.Big                `json:"balance,omitempty"`
		Code     hexutil.Bytes               `json:"code,omitempty"`
		CodeHash *common.Hash                `json:"codeHash,omitempty"`
		Nonce    uint64                      `json:"nonce,omitempty"`
		Storage  map[common.Hash]common.Hash `json:"storage,omitempty"`
	}
	var enc PrestateAccount
	enc.Balance = (*hexutil.Big)(p.Balance)
	enc.Code = p.Code
	enc.CodeHash = p.CodeHash
	enc.Nonce = p.Nonce
	enc.Storage = p.Storage
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (p *PrestateAccount) UnmarshalJSON(input []byte) error {
	type PrestateAccount struct {
		Balance  *hexutil.Big                `json:"balance,omitempty"`
		Code     *hexutil.Bytes              `json:"code,omitempty"`
		CodeHash *common.Hash                `json:"codeHash,omitempty"`
		Nonce    *uint64                     `json:"nonce,omitempty"`
		Storage  map[common.Hash]common.Hash `json:"storage,omitempty"`
	}
	var dec PrestateAccount
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Balance != nil {
		p.Balance = (*big.Int)(dec.Balance)
	}
	if dec.Code != nil {
		p.Code = *dec.Code
	}
	if dec.CodeHash != nil {
		p.CodeHash = dec.CodeHash
	}
	if dec.Nonce != nil {
		p.Nonce = *dec.Nonce
	}
	if dec.Storage != nil {
		p.Storage = dec.Storage
	}
	return nil
}
