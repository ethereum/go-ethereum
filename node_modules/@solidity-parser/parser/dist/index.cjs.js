var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (cb, mod) => () => (mod || cb((mod = {exports: {}}).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// node_modules/antlr4ts/ANTLRErrorListener.js
var require_ANTLRErrorListener = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/ANTLRErrorStrategy.js
var require_ANTLRErrorStrategy = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/Decorators.js
var require_Decorators = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SuppressWarnings = exports.Override = exports.Nullable = exports.NotNull = void 0;
  function NotNull(target, propertyKey, propertyDescriptor) {
  }
  exports.NotNull = NotNull;
  function Nullable(target, propertyKey, propertyDescriptor) {
  }
  exports.Nullable = Nullable;
  function Override(target, propertyKey, propertyDescriptor) {
  }
  exports.Override = Override;
  function SuppressWarnings(options) {
    return (target, propertyKey, descriptor) => {
    };
  }
  exports.SuppressWarnings = SuppressWarnings;
});

// node_modules/antlr4ts/IntStream.js
var require_IntStream = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.IntStream = void 0;
  var IntStream;
  (function(IntStream2) {
    IntStream2.EOF = -1;
    IntStream2.UNKNOWN_SOURCE_NAME = "<unknown>";
  })(IntStream = exports.IntStream || (exports.IntStream = {}));
});

// node_modules/antlr4ts/ANTLRInputStream.js
var require_ANTLRInputStream = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ANTLRInputStream = void 0;
  var assert = require("assert");
  var Decorators_1 = require_Decorators();
  var IntStream_1 = require_IntStream();
  var ANTLRInputStream2 = class {
    constructor(input) {
      this.p = 0;
      this.data = input;
      this.n = input.length;
    }
    reset() {
      this.p = 0;
    }
    consume() {
      if (this.p >= this.n) {
        assert(this.LA(1) === IntStream_1.IntStream.EOF);
        throw new Error("cannot consume EOF");
      }
      if (this.p < this.n) {
        this.p++;
      }
    }
    LA(i) {
      if (i === 0) {
        return 0;
      }
      if (i < 0) {
        i++;
        if (this.p + i - 1 < 0) {
          return IntStream_1.IntStream.EOF;
        }
      }
      if (this.p + i - 1 >= this.n) {
        return IntStream_1.IntStream.EOF;
      }
      return this.data.charCodeAt(this.p + i - 1);
    }
    LT(i) {
      return this.LA(i);
    }
    get index() {
      return this.p;
    }
    get size() {
      return this.n;
    }
    mark() {
      return -1;
    }
    release(marker) {
    }
    seek(index) {
      if (index <= this.p) {
        this.p = index;
        return;
      }
      index = Math.min(index, this.n);
      while (this.p < index) {
        this.consume();
      }
    }
    getText(interval) {
      let start = interval.a;
      let stop = interval.b;
      if (stop >= this.n) {
        stop = this.n - 1;
      }
      let count = stop - start + 1;
      if (start >= this.n) {
        return "";
      }
      return this.data.substr(start, count);
    }
    get sourceName() {
      if (!this.name) {
        return IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
      }
      return this.name;
    }
    toString() {
      return this.data;
    }
  };
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "consume", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "LA", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "index", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "mark", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "release", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "seek", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "getText", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "sourceName", null);
  __decorate([
    Decorators_1.Override
  ], ANTLRInputStream2.prototype, "toString", null);
  exports.ANTLRInputStream = ANTLRInputStream2;
});

// node_modules/antlr4ts/atn/ATNState.js
var require_ATNState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATNState = void 0;
  var Decorators_1 = require_Decorators();
  var ATNState = class {
    constructor() {
      this.stateNumber = ATNState.INVALID_STATE_NUMBER;
      this.ruleIndex = 0;
      this.epsilonOnlyTransitions = false;
      this.transitions = [];
      this.optimizedTransitions = this.transitions;
    }
    getStateNumber() {
      return this.stateNumber;
    }
    get nonStopStateNumber() {
      return this.getStateNumber();
    }
    hashCode() {
      return this.stateNumber;
    }
    equals(o) {
      if (o instanceof ATNState) {
        return this.stateNumber === o.stateNumber;
      }
      return false;
    }
    get isNonGreedyExitState() {
      return false;
    }
    toString() {
      return String(this.stateNumber);
    }
    getTransitions() {
      return this.transitions.slice(0);
    }
    get numberOfTransitions() {
      return this.transitions.length;
    }
    addTransition(e, index) {
      if (this.transitions.length === 0) {
        this.epsilonOnlyTransitions = e.isEpsilon;
      } else if (this.epsilonOnlyTransitions !== e.isEpsilon) {
        this.epsilonOnlyTransitions = false;
        throw new Error("ATN state " + this.stateNumber + " has both epsilon and non-epsilon transitions.");
      }
      this.transitions.splice(index !== void 0 ? index : this.transitions.length, 0, e);
    }
    transition(i) {
      return this.transitions[i];
    }
    setTransition(i, e) {
      this.transitions[i] = e;
    }
    removeTransition(index) {
      return this.transitions.splice(index, 1)[0];
    }
    get onlyHasEpsilonTransitions() {
      return this.epsilonOnlyTransitions;
    }
    setRuleIndex(ruleIndex) {
      this.ruleIndex = ruleIndex;
    }
    get isOptimized() {
      return this.optimizedTransitions !== this.transitions;
    }
    get numberOfOptimizedTransitions() {
      return this.optimizedTransitions.length;
    }
    getOptimizedTransition(i) {
      return this.optimizedTransitions[i];
    }
    addOptimizedTransition(e) {
      if (!this.isOptimized) {
        this.optimizedTransitions = new Array();
      }
      this.optimizedTransitions.push(e);
    }
    setOptimizedTransition(i, e) {
      if (!this.isOptimized) {
        throw new Error("This ATNState is not optimized.");
      }
      this.optimizedTransitions[i] = e;
    }
    removeOptimizedTransition(i) {
      if (!this.isOptimized) {
        throw new Error("This ATNState is not optimized.");
      }
      this.optimizedTransitions.splice(i, 1);
    }
  };
  __decorate([
    Decorators_1.Override
  ], ATNState.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], ATNState.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], ATNState.prototype, "toString", null);
  exports.ATNState = ATNState;
  (function(ATNState2) {
    ATNState2.INVALID_STATE_NUMBER = -1;
  })(ATNState = exports.ATNState || (exports.ATNState = {}));
});

// node_modules/antlr4ts/atn/ATNStateType.js
var require_ATNStateType = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATNStateType = void 0;
  var ATNStateType;
  (function(ATNStateType2) {
    ATNStateType2[ATNStateType2["INVALID_TYPE"] = 0] = "INVALID_TYPE";
    ATNStateType2[ATNStateType2["BASIC"] = 1] = "BASIC";
    ATNStateType2[ATNStateType2["RULE_START"] = 2] = "RULE_START";
    ATNStateType2[ATNStateType2["BLOCK_START"] = 3] = "BLOCK_START";
    ATNStateType2[ATNStateType2["PLUS_BLOCK_START"] = 4] = "PLUS_BLOCK_START";
    ATNStateType2[ATNStateType2["STAR_BLOCK_START"] = 5] = "STAR_BLOCK_START";
    ATNStateType2[ATNStateType2["TOKEN_START"] = 6] = "TOKEN_START";
    ATNStateType2[ATNStateType2["RULE_STOP"] = 7] = "RULE_STOP";
    ATNStateType2[ATNStateType2["BLOCK_END"] = 8] = "BLOCK_END";
    ATNStateType2[ATNStateType2["STAR_LOOP_BACK"] = 9] = "STAR_LOOP_BACK";
    ATNStateType2[ATNStateType2["STAR_LOOP_ENTRY"] = 10] = "STAR_LOOP_ENTRY";
    ATNStateType2[ATNStateType2["PLUS_LOOP_BACK"] = 11] = "PLUS_LOOP_BACK";
    ATNStateType2[ATNStateType2["LOOP_END"] = 12] = "LOOP_END";
  })(ATNStateType = exports.ATNStateType || (exports.ATNStateType = {}));
});

// node_modules/antlr4ts/RecognitionException.js
var require_RecognitionException = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RecognitionException = void 0;
  var RecognitionException2 = class extends Error {
    constructor(recognizer, input, ctx, message) {
      super(message);
      this._offendingState = -1;
      this._recognizer = recognizer;
      this.input = input;
      this.ctx = ctx;
      if (recognizer) {
        this._offendingState = recognizer.state;
      }
    }
    get offendingState() {
      return this._offendingState;
    }
    setOffendingState(offendingState) {
      this._offendingState = offendingState;
    }
    get expectedTokens() {
      if (this._recognizer) {
        return this._recognizer.atn.getExpectedTokens(this._offendingState, this.ctx);
      }
      return void 0;
    }
    get context() {
      return this.ctx;
    }
    get inputStream() {
      return this.input;
    }
    getOffendingToken(recognizer) {
      if (recognizer && recognizer !== this._recognizer) {
        return void 0;
      }
      return this.offendingToken;
    }
    setOffendingToken(recognizer, offendingToken) {
      if (recognizer === this._recognizer) {
        this.offendingToken = offendingToken;
      }
    }
    get recognizer() {
      return this._recognizer;
    }
  };
  exports.RecognitionException = RecognitionException2;
});

// node_modules/antlr4ts/atn/Transition.js
var require_Transition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Transition = void 0;
  var Decorators_1 = require_Decorators();
  var Transition = class Transition {
    constructor(target) {
      if (target == null) {
        throw new Error("target cannot be null.");
      }
      this.target = target;
    }
    get isEpsilon() {
      return false;
    }
    get label() {
      return void 0;
    }
  };
  Transition.serializationNames = [
    "INVALID",
    "EPSILON",
    "RANGE",
    "RULE",
    "PREDICATE",
    "ATOM",
    "ACTION",
    "SET",
    "NOT_SET",
    "WILDCARD",
    "PRECEDENCE"
  ];
  __decorate([
    Decorators_1.NotNull
  ], Transition.prototype, "target", void 0);
  Transition = __decorate([
    __param(0, Decorators_1.NotNull)
  ], Transition);
  exports.Transition = Transition;
});

// node_modules/antlr4ts/atn/AbstractPredicateTransition.js
var require_AbstractPredicateTransition = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.AbstractPredicateTransition = void 0;
  var Transition_1 = require_Transition();
  var AbstractPredicateTransition = class extends Transition_1.Transition {
    constructor(target) {
      super(target);
    }
  };
  exports.AbstractPredicateTransition = AbstractPredicateTransition;
});

// node_modules/antlr4ts/misc/MurmurHash.js
var require_MurmurHash = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.MurmurHash = void 0;
  var MurmurHash;
  (function(MurmurHash2) {
    const DEFAULT_SEED = 0;
    function initialize(seed = DEFAULT_SEED) {
      return seed;
    }
    MurmurHash2.initialize = initialize;
    function update(hash, value) {
      const c1 = 3432918353;
      const c2 = 461845907;
      const r1 = 15;
      const r2 = 13;
      const m = 5;
      const n = 3864292196;
      if (value == null) {
        value = 0;
      } else if (typeof value === "string") {
        value = hashString(value);
      } else if (typeof value === "object") {
        value = value.hashCode();
      }
      let k = value;
      k = Math.imul(k, c1);
      k = k << r1 | k >>> 32 - r1;
      k = Math.imul(k, c2);
      hash = hash ^ k;
      hash = hash << r2 | hash >>> 32 - r2;
      hash = Math.imul(hash, m) + n;
      return hash & 4294967295;
    }
    MurmurHash2.update = update;
    function finish(hash, numberOfWords) {
      hash = hash ^ numberOfWords * 4;
      hash = hash ^ hash >>> 16;
      hash = Math.imul(hash, 2246822507);
      hash = hash ^ hash >>> 13;
      hash = Math.imul(hash, 3266489909);
      hash = hash ^ hash >>> 16;
      return hash;
    }
    MurmurHash2.finish = finish;
    function hashCode(data, seed = DEFAULT_SEED) {
      let hash = initialize(seed);
      let length = 0;
      for (let value of data) {
        hash = update(hash, value);
        length++;
      }
      hash = finish(hash, length);
      return hash;
    }
    MurmurHash2.hashCode = hashCode;
    function hashString(str) {
      let len = str.length;
      if (len === 0) {
        return 0;
      }
      let hash = 0;
      for (let i = 0; i < len; i++) {
        let c = str.charCodeAt(i);
        hash = (hash << 5 >>> 0) - hash + c;
        hash |= 0;
      }
      return hash;
    }
  })(MurmurHash = exports.MurmurHash || (exports.MurmurHash = {}));
});

// node_modules/antlr4ts/misc/ObjectEqualityComparator.js
var require_ObjectEqualityComparator = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ObjectEqualityComparator = void 0;
  var Decorators_1 = require_Decorators();
  var ObjectEqualityComparator = class {
    hashCode(obj) {
      if (obj == null) {
        return 0;
      }
      return obj.hashCode();
    }
    equals(a, b) {
      if (a == null) {
        return b == null;
      }
      return a.equals(b);
    }
  };
  ObjectEqualityComparator.INSTANCE = new ObjectEqualityComparator();
  __decorate([
    Decorators_1.Override
  ], ObjectEqualityComparator.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], ObjectEqualityComparator.prototype, "equals", null);
  exports.ObjectEqualityComparator = ObjectEqualityComparator;
});

// node_modules/antlr4ts/misc/DefaultEqualityComparator.js
var require_DefaultEqualityComparator = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DefaultEqualityComparator = void 0;
  var Decorators_1 = require_Decorators();
  var MurmurHash_1 = require_MurmurHash();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var DefaultEqualityComparator = class {
    hashCode(obj) {
      if (obj == null) {
        return 0;
      } else if (typeof obj === "string" || typeof obj === "number") {
        return MurmurHash_1.MurmurHash.hashCode([obj]);
      } else {
        return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.hashCode(obj);
      }
    }
    equals(a, b) {
      if (a == null) {
        return b == null;
      } else if (typeof a === "string" || typeof a === "number") {
        return a === b;
      } else {
        return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a, b);
      }
    }
  };
  DefaultEqualityComparator.INSTANCE = new DefaultEqualityComparator();
  __decorate([
    Decorators_1.Override
  ], DefaultEqualityComparator.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], DefaultEqualityComparator.prototype, "equals", null);
  exports.DefaultEqualityComparator = DefaultEqualityComparator;
});

// node_modules/antlr4ts/misc/Array2DHashSet.js
var require_Array2DHashSet = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Array2DHashSet = void 0;
  var assert = require("assert");
  var DefaultEqualityComparator_1 = require_DefaultEqualityComparator();
  var Decorators_1 = require_Decorators();
  var MurmurHash_1 = require_MurmurHash();
  var INITAL_CAPACITY = 16;
  var LOAD_FACTOR = 0.75;
  var Array2DHashSet = class {
    constructor(comparatorOrSet, initialCapacity = INITAL_CAPACITY) {
      this.n = 0;
      this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);
      if (comparatorOrSet instanceof Array2DHashSet) {
        this.comparator = comparatorOrSet.comparator;
        this.buckets = comparatorOrSet.buckets.slice(0);
        for (let i = 0; i < this.buckets.length; i++) {
          let bucket = this.buckets[i];
          if (bucket) {
            this.buckets[i] = bucket.slice(0);
          }
        }
        this.n = comparatorOrSet.n;
        this.threshold = comparatorOrSet.threshold;
      } else {
        this.comparator = comparatorOrSet || DefaultEqualityComparator_1.DefaultEqualityComparator.INSTANCE;
        this.buckets = this.createBuckets(initialCapacity);
      }
    }
    getOrAdd(o) {
      if (this.n > this.threshold) {
        this.expand();
      }
      return this.getOrAddImpl(o);
    }
    getOrAddImpl(o) {
      let b = this.getBucket(o);
      let bucket = this.buckets[b];
      if (!bucket) {
        bucket = [o];
        this.buckets[b] = bucket;
        this.n++;
        return o;
      }
      for (let existing of bucket) {
        if (this.comparator.equals(existing, o)) {
          return existing;
        }
      }
      bucket.push(o);
      this.n++;
      return o;
    }
    get(o) {
      if (o == null) {
        return o;
      }
      let b = this.getBucket(o);
      let bucket = this.buckets[b];
      if (!bucket) {
        return void 0;
      }
      for (let e of bucket) {
        if (this.comparator.equals(e, o)) {
          return e;
        }
      }
      return void 0;
    }
    getBucket(o) {
      let hash = this.comparator.hashCode(o);
      let b = hash & this.buckets.length - 1;
      return b;
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      for (let bucket of this.buckets) {
        if (bucket == null) {
          continue;
        }
        for (let o of bucket) {
          if (o == null) {
            break;
          }
          hash = MurmurHash_1.MurmurHash.update(hash, this.comparator.hashCode(o));
        }
      }
      hash = MurmurHash_1.MurmurHash.finish(hash, this.size);
      return hash;
    }
    equals(o) {
      if (o === this) {
        return true;
      }
      if (!(o instanceof Array2DHashSet)) {
        return false;
      }
      if (o.size !== this.size) {
        return false;
      }
      let same = this.containsAll(o);
      return same;
    }
    expand() {
      let old = this.buckets;
      let newCapacity = this.buckets.length * 2;
      let newTable = this.createBuckets(newCapacity);
      this.buckets = newTable;
      this.threshold = Math.floor(newCapacity * LOAD_FACTOR);
      let oldSize = this.size;
      for (let bucket of old) {
        if (!bucket) {
          continue;
        }
        for (let o of bucket) {
          let b = this.getBucket(o);
          let newBucket = this.buckets[b];
          if (!newBucket) {
            newBucket = [];
            this.buckets[b] = newBucket;
          }
          newBucket.push(o);
        }
      }
      assert(this.n === oldSize);
    }
    add(t) {
      let existing = this.getOrAdd(t);
      return existing === t;
    }
    get size() {
      return this.n;
    }
    get isEmpty() {
      return this.n === 0;
    }
    contains(o) {
      return this.containsFast(this.asElementType(o));
    }
    containsFast(obj) {
      if (obj == null) {
        return false;
      }
      return this.get(obj) != null;
    }
    *[Symbol.iterator]() {
      yield* this.toArray();
    }
    toArray() {
      const a = new Array(this.size);
      let i = 0;
      for (let bucket of this.buckets) {
        if (bucket == null) {
          continue;
        }
        for (let o of bucket) {
          if (o == null) {
            break;
          }
          a[i++] = o;
        }
      }
      return a;
    }
    containsAll(collection) {
      if (collection instanceof Array2DHashSet) {
        let s = collection;
        for (let bucket of s.buckets) {
          if (bucket == null) {
            continue;
          }
          for (let o of bucket) {
            if (o == null) {
              break;
            }
            if (!this.containsFast(this.asElementType(o))) {
              return false;
            }
          }
        }
      } else {
        for (let o of collection) {
          if (!this.containsFast(this.asElementType(o))) {
            return false;
          }
        }
      }
      return true;
    }
    addAll(c) {
      let changed = false;
      for (let o of c) {
        let existing = this.getOrAdd(o);
        if (existing !== o) {
          changed = true;
        }
      }
      return changed;
    }
    clear() {
      this.buckets = this.createBuckets(INITAL_CAPACITY);
      this.n = 0;
      this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);
    }
    toString() {
      if (this.size === 0) {
        return "{}";
      }
      let buf = "{";
      let first = true;
      for (let bucket of this.buckets) {
        if (bucket == null) {
          continue;
        }
        for (let o of bucket) {
          if (o == null) {
            break;
          }
          if (first) {
            first = false;
          } else {
            buf += ", ";
          }
          buf += o.toString();
        }
      }
      buf += "}";
      return buf;
    }
    toTableString() {
      let buf = "";
      for (let bucket of this.buckets) {
        if (bucket == null) {
          buf += "null\n";
          continue;
        }
        buf += "[";
        let first = true;
        for (let o of bucket) {
          if (first) {
            first = false;
          } else {
            buf += " ";
          }
          if (o == null) {
            buf += "_";
          } else {
            buf += o.toString();
          }
        }
        buf += "]\n";
      }
      return buf;
    }
    asElementType(o) {
      return o;
    }
    createBuckets(capacity) {
      return new Array(capacity);
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], Array2DHashSet.prototype, "comparator", void 0);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "add", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "isEmpty", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "contains", null);
  __decorate([
    __param(0, Decorators_1.Nullable)
  ], Array2DHashSet.prototype, "containsFast", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, Symbol.iterator, null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "toArray", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "containsAll", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "addAll", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "clear", null);
  __decorate([
    Decorators_1.Override
  ], Array2DHashSet.prototype, "toString", null);
  __decorate([
    Decorators_1.SuppressWarnings("unchecked")
  ], Array2DHashSet.prototype, "asElementType", null);
  __decorate([
    Decorators_1.SuppressWarnings("unchecked")
  ], Array2DHashSet.prototype, "createBuckets", null);
  exports.Array2DHashSet = Array2DHashSet;
});

// node_modules/antlr4ts/misc/ArrayEqualityComparator.js
var require_ArrayEqualityComparator = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ArrayEqualityComparator = void 0;
  var Decorators_1 = require_Decorators();
  var MurmurHash_1 = require_MurmurHash();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var ArrayEqualityComparator = class {
    hashCode(obj) {
      if (obj == null) {
        return 0;
      }
      return MurmurHash_1.MurmurHash.hashCode(obj, 0);
    }
    equals(a, b) {
      if (a == null) {
        return b == null;
      } else if (b == null) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      for (let i = 0; i < a.length; i++) {
        if (!ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
  };
  ArrayEqualityComparator.INSTANCE = new ArrayEqualityComparator();
  __decorate([
    Decorators_1.Override
  ], ArrayEqualityComparator.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], ArrayEqualityComparator.prototype, "equals", null);
  exports.ArrayEqualityComparator = ArrayEqualityComparator;
});

// node_modules/antlr4ts/misc/Utils.js
var require_Utils = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.toCharArray = exports.toMap = exports.equals = exports.join = exports.escapeWhitespace = void 0;
  function escapeWhitespace(s, escapeSpaces) {
    return escapeSpaces ? s.replace(/ /, "\xB7") : s.replace(/\t/, "\\t").replace(/\n/, "\\n").replace(/\r/, "\\r");
  }
  exports.escapeWhitespace = escapeWhitespace;
  function join3(collection, separator) {
    let buf = "";
    let first = true;
    for (let current of collection) {
      if (first) {
        first = false;
      } else {
        buf += separator;
      }
      buf += current;
    }
    return buf;
  }
  exports.join = join3;
  function equals(x, y) {
    if (x === y) {
      return true;
    }
    if (x === void 0 || y === void 0) {
      return false;
    }
    return x.equals(y);
  }
  exports.equals = equals;
  function toMap(keys) {
    let m = new Map();
    for (let i = 0; i < keys.length; i++) {
      m.set(keys[i], i);
    }
    return m;
  }
  exports.toMap = toMap;
  function toCharArray3(str) {
    if (typeof str === "string") {
      let result = new Uint16Array(str.length);
      for (let i = 0; i < str.length; i++) {
        result[i] = str.charCodeAt(i);
      }
      return result;
    } else {
      return str.toCharArray();
    }
  }
  exports.toCharArray = toCharArray3;
});

// node_modules/antlr4ts/atn/SemanticContext.js
var require_SemanticContext = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SemanticContext = void 0;
  var Array2DHashSet_1 = require_Array2DHashSet();
  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var Utils3 = require_Utils();
  function max(items) {
    let result;
    for (let current of items) {
      if (result === void 0) {
        result = current;
        continue;
      }
      let comparison = result.compareTo(current);
      if (comparison < 0) {
        result = current;
      }
    }
    return result;
  }
  function min(items) {
    let result;
    for (let current of items) {
      if (result === void 0) {
        result = current;
        continue;
      }
      let comparison = result.compareTo(current);
      if (comparison > 0) {
        result = current;
      }
    }
    return result;
  }
  var SemanticContext = class {
    static get NONE() {
      if (SemanticContext._NONE === void 0) {
        SemanticContext._NONE = new SemanticContext.Predicate();
      }
      return SemanticContext._NONE;
    }
    evalPrecedence(parser, parserCallStack) {
      return this;
    }
    static and(a, b) {
      if (!a || a === SemanticContext.NONE) {
        return b;
      }
      if (b === SemanticContext.NONE) {
        return a;
      }
      let result = new SemanticContext.AND(a, b);
      if (result.opnds.length === 1) {
        return result.opnds[0];
      }
      return result;
    }
    static or(a, b) {
      if (!a) {
        return b;
      }
      if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
        return SemanticContext.NONE;
      }
      let result = new SemanticContext.OR(a, b);
      if (result.opnds.length === 1) {
        return result.opnds[0];
      }
      return result;
    }
  };
  exports.SemanticContext = SemanticContext;
  (function(SemanticContext2) {
    const AND_HASHCODE = 40363613;
    const OR_HASHCODE = 486279973;
    function filterPrecedencePredicates(collection) {
      let result = [];
      for (let i = 0; i < collection.length; i++) {
        let context = collection[i];
        if (context instanceof SemanticContext2.PrecedencePredicate) {
          result.push(context);
          collection.splice(i, 1);
          i--;
        }
      }
      return result;
    }
    class Predicate extends SemanticContext2 {
      constructor(ruleIndex = -1, predIndex = -1, isCtxDependent = false) {
        super();
        this.ruleIndex = ruleIndex;
        this.predIndex = predIndex;
        this.isCtxDependent = isCtxDependent;
      }
      eval(parser, parserCallStack) {
        let localctx = this.isCtxDependent ? parserCallStack : void 0;
        return parser.sempred(localctx, this.ruleIndex, this.predIndex);
      }
      hashCode() {
        let hashCode = MurmurHash_1.MurmurHash.initialize();
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.ruleIndex);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.predIndex);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.isCtxDependent ? 1 : 0);
        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 3);
        return hashCode;
      }
      equals(obj) {
        if (!(obj instanceof Predicate)) {
          return false;
        }
        if (this === obj) {
          return true;
        }
        return this.ruleIndex === obj.ruleIndex && this.predIndex === obj.predIndex && this.isCtxDependent === obj.isCtxDependent;
      }
      toString() {
        return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
      }
    }
    __decorate([
      Decorators_1.Override
    ], Predicate.prototype, "eval", null);
    __decorate([
      Decorators_1.Override
    ], Predicate.prototype, "hashCode", null);
    __decorate([
      Decorators_1.Override
    ], Predicate.prototype, "equals", null);
    __decorate([
      Decorators_1.Override
    ], Predicate.prototype, "toString", null);
    SemanticContext2.Predicate = Predicate;
    class PrecedencePredicate extends SemanticContext2 {
      constructor(precedence) {
        super();
        this.precedence = precedence;
      }
      eval(parser, parserCallStack) {
        return parser.precpred(parserCallStack, this.precedence);
      }
      evalPrecedence(parser, parserCallStack) {
        if (parser.precpred(parserCallStack, this.precedence)) {
          return SemanticContext2.NONE;
        } else {
          return void 0;
        }
      }
      compareTo(o) {
        return this.precedence - o.precedence;
      }
      hashCode() {
        let hashCode = 1;
        hashCode = 31 * hashCode + this.precedence;
        return hashCode;
      }
      equals(obj) {
        if (!(obj instanceof PrecedencePredicate)) {
          return false;
        }
        if (this === obj) {
          return true;
        }
        return this.precedence === obj.precedence;
      }
      toString() {
        return "{" + this.precedence + ">=prec}?";
      }
    }
    __decorate([
      Decorators_1.Override
    ], PrecedencePredicate.prototype, "eval", null);
    __decorate([
      Decorators_1.Override
    ], PrecedencePredicate.prototype, "evalPrecedence", null);
    __decorate([
      Decorators_1.Override
    ], PrecedencePredicate.prototype, "compareTo", null);
    __decorate([
      Decorators_1.Override
    ], PrecedencePredicate.prototype, "hashCode", null);
    __decorate([
      Decorators_1.Override
    ], PrecedencePredicate.prototype, "equals", null);
    __decorate([
      Decorators_1.Override
    ], PrecedencePredicate.prototype, "toString", null);
    SemanticContext2.PrecedencePredicate = PrecedencePredicate;
    class Operator extends SemanticContext2 {
    }
    SemanticContext2.Operator = Operator;
    let AND = class AND2 extends Operator {
      constructor(a, b) {
        super();
        let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        if (a instanceof AND2) {
          operands.addAll(a.opnds);
        } else {
          operands.add(a);
        }
        if (b instanceof AND2) {
          operands.addAll(b.opnds);
        } else {
          operands.add(b);
        }
        this.opnds = operands.toArray();
        let precedencePredicates = filterPrecedencePredicates(this.opnds);
        let reduced = min(precedencePredicates);
        if (reduced) {
          this.opnds.push(reduced);
        }
      }
      get operands() {
        return this.opnds;
      }
      equals(obj) {
        if (this === obj) {
          return true;
        }
        if (!(obj instanceof AND2)) {
          return false;
        }
        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
      }
      hashCode() {
        return MurmurHash_1.MurmurHash.hashCode(this.opnds, AND_HASHCODE);
      }
      eval(parser, parserCallStack) {
        for (let opnd of this.opnds) {
          if (!opnd.eval(parser, parserCallStack)) {
            return false;
          }
        }
        return true;
      }
      evalPrecedence(parser, parserCallStack) {
        let differs = false;
        let operands = [];
        for (let context of this.opnds) {
          let evaluated = context.evalPrecedence(parser, parserCallStack);
          differs = differs || evaluated !== context;
          if (evaluated == null) {
            return void 0;
          } else if (evaluated !== SemanticContext2.NONE) {
            operands.push(evaluated);
          }
        }
        if (!differs) {
          return this;
        }
        if (operands.length === 0) {
          return SemanticContext2.NONE;
        }
        let result = operands[0];
        for (let i = 1; i < operands.length; i++) {
          result = SemanticContext2.and(result, operands[i]);
        }
        return result;
      }
      toString() {
        return Utils3.join(this.opnds, "&&");
      }
    };
    __decorate([
      Decorators_1.Override
    ], AND.prototype, "operands", null);
    __decorate([
      Decorators_1.Override
    ], AND.prototype, "equals", null);
    __decorate([
      Decorators_1.Override
    ], AND.prototype, "hashCode", null);
    __decorate([
      Decorators_1.Override
    ], AND.prototype, "eval", null);
    __decorate([
      Decorators_1.Override
    ], AND.prototype, "evalPrecedence", null);
    __decorate([
      Decorators_1.Override
    ], AND.prototype, "toString", null);
    AND = __decorate([
      __param(0, Decorators_1.NotNull),
      __param(1, Decorators_1.NotNull)
    ], AND);
    SemanticContext2.AND = AND;
    let OR = class OR2 extends Operator {
      constructor(a, b) {
        super();
        let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        if (a instanceof OR2) {
          operands.addAll(a.opnds);
        } else {
          operands.add(a);
        }
        if (b instanceof OR2) {
          operands.addAll(b.opnds);
        } else {
          operands.add(b);
        }
        this.opnds = operands.toArray();
        let precedencePredicates = filterPrecedencePredicates(this.opnds);
        let reduced = max(precedencePredicates);
        if (reduced) {
          this.opnds.push(reduced);
        }
      }
      get operands() {
        return this.opnds;
      }
      equals(obj) {
        if (this === obj) {
          return true;
        }
        if (!(obj instanceof OR2)) {
          return false;
        }
        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
      }
      hashCode() {
        return MurmurHash_1.MurmurHash.hashCode(this.opnds, OR_HASHCODE);
      }
      eval(parser, parserCallStack) {
        for (let opnd of this.opnds) {
          if (opnd.eval(parser, parserCallStack)) {
            return true;
          }
        }
        return false;
      }
      evalPrecedence(parser, parserCallStack) {
        let differs = false;
        let operands = [];
        for (let context of this.opnds) {
          let evaluated = context.evalPrecedence(parser, parserCallStack);
          differs = differs || evaluated !== context;
          if (evaluated === SemanticContext2.NONE) {
            return SemanticContext2.NONE;
          } else if (evaluated) {
            operands.push(evaluated);
          }
        }
        if (!differs) {
          return this;
        }
        if (operands.length === 0) {
          return void 0;
        }
        let result = operands[0];
        for (let i = 1; i < operands.length; i++) {
          result = SemanticContext2.or(result, operands[i]);
        }
        return result;
      }
      toString() {
        return Utils3.join(this.opnds, "||");
      }
    };
    __decorate([
      Decorators_1.Override
    ], OR.prototype, "operands", null);
    __decorate([
      Decorators_1.Override
    ], OR.prototype, "equals", null);
    __decorate([
      Decorators_1.Override
    ], OR.prototype, "hashCode", null);
    __decorate([
      Decorators_1.Override
    ], OR.prototype, "eval", null);
    __decorate([
      Decorators_1.Override
    ], OR.prototype, "evalPrecedence", null);
    __decorate([
      Decorators_1.Override
    ], OR.prototype, "toString", null);
    OR = __decorate([
      __param(0, Decorators_1.NotNull),
      __param(1, Decorators_1.NotNull)
    ], OR);
    SemanticContext2.OR = OR;
  })(SemanticContext = exports.SemanticContext || (exports.SemanticContext = {}));
});

// node_modules/antlr4ts/atn/PredicateTransition.js
var require_PredicateTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.PredicateTransition = void 0;
  var AbstractPredicateTransition_1 = require_AbstractPredicateTransition();
  var Decorators_1 = require_Decorators();
  var SemanticContext_1 = require_SemanticContext();
  var PredicateTransition = class PredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
    constructor(target, ruleIndex, predIndex, isCtxDependent) {
      super(target);
      this.ruleIndex = ruleIndex;
      this.predIndex = predIndex;
      this.isCtxDependent = isCtxDependent;
    }
    get serializationType() {
      return 4;
    }
    get isEpsilon() {
      return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    get predicate() {
      return new SemanticContext_1.SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
    toString() {
      return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
  };
  __decorate([
    Decorators_1.Override
  ], PredicateTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override
  ], PredicateTransition.prototype, "isEpsilon", null);
  __decorate([
    Decorators_1.Override
  ], PredicateTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], PredicateTransition.prototype, "toString", null);
  PredicateTransition = __decorate([
    __param(0, Decorators_1.NotNull)
  ], PredicateTransition);
  exports.PredicateTransition = PredicateTransition;
});

// node_modules/antlr4ts/FailedPredicateException.js
var require_FailedPredicateException = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.FailedPredicateException = void 0;
  var RecognitionException_1 = require_RecognitionException();
  var Decorators_1 = require_Decorators();
  var PredicateTransition_1 = require_PredicateTransition();
  var FailedPredicateException2 = class FailedPredicateException3 extends RecognitionException_1.RecognitionException {
    constructor(recognizer, predicate, message) {
      super(recognizer, recognizer.inputStream, recognizer.context, FailedPredicateException3.formatMessage(predicate, message));
      let s = recognizer.interpreter.atn.states[recognizer.state];
      let trans = s.transition(0);
      if (trans instanceof PredicateTransition_1.PredicateTransition) {
        this._ruleIndex = trans.ruleIndex;
        this._predicateIndex = trans.predIndex;
      } else {
        this._ruleIndex = 0;
        this._predicateIndex = 0;
      }
      this._predicate = predicate;
      super.setOffendingToken(recognizer, recognizer.currentToken);
    }
    get ruleIndex() {
      return this._ruleIndex;
    }
    get predicateIndex() {
      return this._predicateIndex;
    }
    get predicate() {
      return this._predicate;
    }
    static formatMessage(predicate, message) {
      if (message) {
        return message;
      }
      return `failed predicate: {${predicate}}?`;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], FailedPredicateException2, "formatMessage", null);
  FailedPredicateException2 = __decorate([
    __param(0, Decorators_1.NotNull)
  ], FailedPredicateException2);
  exports.FailedPredicateException = FailedPredicateException2;
});

// node_modules/antlr4ts/InputMismatchException.js
var require_InputMismatchException = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.InputMismatchException = void 0;
  var RecognitionException_1 = require_RecognitionException();
  var Decorators_1 = require_Decorators();
  var InputMismatchException = class InputMismatchException extends RecognitionException_1.RecognitionException {
    constructor(recognizer, state, context) {
      if (context === void 0) {
        context = recognizer.context;
      }
      super(recognizer, recognizer.inputStream, context);
      if (state !== void 0) {
        this.setOffendingState(state);
      }
      this.setOffendingToken(recognizer, recognizer.currentToken);
    }
  };
  InputMismatchException = __decorate([
    __param(0, Decorators_1.NotNull)
  ], InputMismatchException);
  exports.InputMismatchException = InputMismatchException;
});

// node_modules/antlr4ts/misc/Arrays.js
var require_Arrays = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Arrays = void 0;
  var Arrays;
  (function(Arrays2) {
    function binarySearch(array, key, fromIndex, toIndex) {
      return binarySearch0(array, fromIndex !== void 0 ? fromIndex : 0, toIndex !== void 0 ? toIndex : array.length, key);
    }
    Arrays2.binarySearch = binarySearch;
    function binarySearch0(array, fromIndex, toIndex, key) {
      let low = fromIndex;
      let high = toIndex - 1;
      while (low <= high) {
        let mid = low + high >>> 1;
        let midVal = array[mid];
        if (midVal < key) {
          low = mid + 1;
        } else if (midVal > key) {
          high = mid - 1;
        } else {
          return mid;
        }
      }
      return -(low + 1);
    }
    function toString(array) {
      let result = "[";
      let first = true;
      for (let element of array) {
        if (first) {
          first = false;
        } else {
          result += ", ";
        }
        if (element === null) {
          result += "null";
        } else if (element === void 0) {
          result += "undefined";
        } else {
          result += element;
        }
      }
      result += "]";
      return result;
    }
    Arrays2.toString = toString;
  })(Arrays = exports.Arrays || (exports.Arrays = {}));
});

// node_modules/antlr4ts/misc/IntegerList.js
var require_IntegerList = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.IntegerList = void 0;
  var Arrays_1 = require_Arrays();
  var Decorators_1 = require_Decorators();
  var EMPTY_DATA = new Int32Array(0);
  var INITIAL_SIZE = 4;
  var MAX_ARRAY_SIZE = (1 << 31 >>> 0) - 1 - 8;
  var IntegerList = class {
    constructor(arg) {
      if (!arg) {
        this._data = EMPTY_DATA;
        this._size = 0;
      } else if (arg instanceof IntegerList) {
        this._data = arg._data.slice(0);
        this._size = arg._size;
      } else if (typeof arg === "number") {
        if (arg === 0) {
          this._data = EMPTY_DATA;
          this._size = 0;
        } else {
          this._data = new Int32Array(arg);
          this._size = 0;
        }
      } else {
        this._data = EMPTY_DATA;
        this._size = 0;
        for (let value of arg) {
          this.add(value);
        }
      }
    }
    add(value) {
      if (this._data.length === this._size) {
        this.ensureCapacity(this._size + 1);
      }
      this._data[this._size] = value;
      this._size++;
    }
    addAll(list) {
      if (Array.isArray(list)) {
        this.ensureCapacity(this._size + list.length);
        this._data.subarray(this._size, this._size + list.length).set(list);
        this._size += list.length;
      } else if (list instanceof IntegerList) {
        this.ensureCapacity(this._size + list._size);
        this._data.subarray(this._size, this._size + list.size).set(list._data);
        this._size += list._size;
      } else {
        this.ensureCapacity(this._size + list.size);
        let current = 0;
        for (let xi of list) {
          this._data[this._size + current] = xi;
          current++;
        }
        this._size += list.size;
      }
    }
    get(index) {
      if (index < 0 || index >= this._size) {
        throw RangeError();
      }
      return this._data[index];
    }
    contains(value) {
      for (let i = 0; i < this._size; i++) {
        if (this._data[i] === value) {
          return true;
        }
      }
      return false;
    }
    set(index, value) {
      if (index < 0 || index >= this._size) {
        throw RangeError();
      }
      let previous = this._data[index];
      this._data[index] = value;
      return previous;
    }
    removeAt(index) {
      let value = this.get(index);
      this._data.copyWithin(index, index + 1, this._size);
      this._data[this._size - 1] = 0;
      this._size--;
      return value;
    }
    removeRange(fromIndex, toIndex) {
      if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
        throw RangeError();
      }
      if (fromIndex > toIndex) {
        throw RangeError();
      }
      this._data.copyWithin(toIndex, fromIndex, this._size);
      this._data.fill(0, this._size - (toIndex - fromIndex), this._size);
      this._size -= toIndex - fromIndex;
    }
    get isEmpty() {
      return this._size === 0;
    }
    get size() {
      return this._size;
    }
    trimToSize() {
      if (this._data.length === this._size) {
        return;
      }
      this._data = this._data.slice(0, this._size);
    }
    clear() {
      this._data.fill(0, 0, this._size);
      this._size = 0;
    }
    toArray() {
      if (this._size === 0) {
        return [];
      }
      return Array.from(this._data.subarray(0, this._size));
    }
    sort() {
      this._data.subarray(0, this._size).sort();
    }
    equals(o) {
      if (o === this) {
        return true;
      }
      if (!(o instanceof IntegerList)) {
        return false;
      }
      if (this._size !== o._size) {
        return false;
      }
      for (let i = 0; i < this._size; i++) {
        if (this._data[i] !== o._data[i]) {
          return false;
        }
      }
      return true;
    }
    hashCode() {
      let hashCode = 1;
      for (let i = 0; i < this._size; i++) {
        hashCode = 31 * hashCode + this._data[i];
      }
      return hashCode;
    }
    toString() {
      return this._data.toString();
    }
    binarySearch(key, fromIndex, toIndex) {
      if (fromIndex === void 0) {
        fromIndex = 0;
      }
      if (toIndex === void 0) {
        toIndex = this._size;
      }
      if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
        throw new RangeError();
      }
      if (fromIndex > toIndex) {
        throw new RangeError();
      }
      return Arrays_1.Arrays.binarySearch(this._data, key, fromIndex, toIndex);
    }
    ensureCapacity(capacity) {
      if (capacity < 0 || capacity > MAX_ARRAY_SIZE) {
        throw new RangeError();
      }
      let newLength;
      if (this._data.length === 0) {
        newLength = INITIAL_SIZE;
      } else {
        newLength = this._data.length;
      }
      while (newLength < capacity) {
        newLength = newLength * 2;
        if (newLength < 0 || newLength > MAX_ARRAY_SIZE) {
          newLength = MAX_ARRAY_SIZE;
        }
      }
      let tmp = new Int32Array(newLength);
      tmp.set(this._data);
      this._data = tmp;
    }
    toCharArray() {
      let resultArray = new Uint16Array(this._size);
      let resultIdx = 0;
      let calculatedPreciseResultSize = false;
      for (let i = 0; i < this._size; i++) {
        let codePoint = this._data[i];
        if (codePoint >= 0 && codePoint < 65536) {
          resultArray[resultIdx] = codePoint;
          resultIdx++;
          continue;
        }
        if (!calculatedPreciseResultSize) {
          let newResultArray = new Uint16Array(this.charArraySize());
          newResultArray.set(resultArray, 0);
          resultArray = newResultArray;
          calculatedPreciseResultSize = true;
        }
        let pair = String.fromCodePoint(codePoint);
        resultArray[resultIdx] = pair.charCodeAt(0);
        resultArray[resultIdx + 1] = pair.charCodeAt(1);
        resultIdx += 2;
      }
      return resultArray;
    }
    charArraySize() {
      let result = 0;
      for (let i = 0; i < this._size; i++) {
        result += this._data[i] >= 65536 ? 2 : 1;
      }
      return result;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], IntegerList.prototype, "_data", void 0);
  __decorate([
    Decorators_1.Override
  ], IntegerList.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], IntegerList.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], IntegerList.prototype, "toString", null);
  exports.IntegerList = IntegerList;
});

// node_modules/antlr4ts/misc/Interval.js
var require_Interval = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Interval = void 0;
  var Decorators_1 = require_Decorators();
  var INTERVAL_POOL_MAX_VALUE = 1e3;
  var Interval = class {
    constructor(a, b) {
      this.a = a;
      this.b = b;
    }
    static get INVALID() {
      return Interval._INVALID;
    }
    static of(a, b) {
      if (a !== b || a < 0 || a > INTERVAL_POOL_MAX_VALUE) {
        return new Interval(a, b);
      }
      if (Interval.cache[a] == null) {
        Interval.cache[a] = new Interval(a, a);
      }
      return Interval.cache[a];
    }
    get length() {
      if (this.b < this.a) {
        return 0;
      }
      return this.b - this.a + 1;
    }
    equals(o) {
      if (o === this) {
        return true;
      } else if (!(o instanceof Interval)) {
        return false;
      }
      return this.a === o.a && this.b === o.b;
    }
    hashCode() {
      let hash = 23;
      hash = hash * 31 + this.a;
      hash = hash * 31 + this.b;
      return hash;
    }
    startsBeforeDisjoint(other) {
      return this.a < other.a && this.b < other.a;
    }
    startsBeforeNonDisjoint(other) {
      return this.a <= other.a && this.b >= other.a;
    }
    startsAfter(other) {
      return this.a > other.a;
    }
    startsAfterDisjoint(other) {
      return this.a > other.b;
    }
    startsAfterNonDisjoint(other) {
      return this.a > other.a && this.a <= other.b;
    }
    disjoint(other) {
      return this.startsBeforeDisjoint(other) || this.startsAfterDisjoint(other);
    }
    adjacent(other) {
      return this.a === other.b + 1 || this.b === other.a - 1;
    }
    properlyContains(other) {
      return other.a >= this.a && other.b <= this.b;
    }
    union(other) {
      return Interval.of(Math.min(this.a, other.a), Math.max(this.b, other.b));
    }
    intersection(other) {
      return Interval.of(Math.max(this.a, other.a), Math.min(this.b, other.b));
    }
    differenceNotProperlyContained(other) {
      let diff;
      if (other.startsBeforeNonDisjoint(this)) {
        diff = Interval.of(Math.max(this.a, other.b + 1), this.b);
      } else if (other.startsAfterNonDisjoint(this)) {
        diff = Interval.of(this.a, other.a - 1);
      }
      return diff;
    }
    toString() {
      return this.a + ".." + this.b;
    }
  };
  Interval._INVALID = new Interval(-1, -2);
  Interval.cache = new Array(INTERVAL_POOL_MAX_VALUE + 1);
  __decorate([
    Decorators_1.Override
  ], Interval.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], Interval.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], Interval.prototype, "toString", null);
  exports.Interval = Interval;
});

// node_modules/antlr4ts/Token.js
var require_Token = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Token = void 0;
  var IntStream_1 = require_IntStream();
  var Token2;
  (function(Token3) {
    Token3.INVALID_TYPE = 0;
    Token3.EPSILON = -2;
    Token3.MIN_USER_TOKEN_TYPE = 1;
    Token3.EOF = IntStream_1.IntStream.EOF;
    Token3.DEFAULT_CHANNEL = 0;
    Token3.HIDDEN_CHANNEL = 1;
    Token3.MIN_USER_CHANNEL_VALUE = 2;
  })(Token2 = exports.Token || (exports.Token = {}));
});

// node_modules/antlr4ts/CommonToken.js
var require_CommonToken = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.CommonToken = void 0;
  var Interval_1 = require_Interval();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var CommonToken = class CommonToken2 {
    constructor(type, text, source = CommonToken2.EMPTY_SOURCE, channel = Token_1.Token.DEFAULT_CHANNEL, start = 0, stop = 0) {
      this._line = 0;
      this._charPositionInLine = -1;
      this._channel = Token_1.Token.DEFAULT_CHANNEL;
      this.index = -1;
      this._text = text;
      this._type = type;
      this.source = source;
      this._channel = channel;
      this.start = start;
      this.stop = stop;
      if (source.source != null) {
        this._line = source.source.line;
        this._charPositionInLine = source.source.charPositionInLine;
      }
    }
    static fromToken(oldToken) {
      let result = new CommonToken2(oldToken.type, void 0, CommonToken2.EMPTY_SOURCE, oldToken.channel, oldToken.startIndex, oldToken.stopIndex);
      result._line = oldToken.line;
      result.index = oldToken.tokenIndex;
      result._charPositionInLine = oldToken.charPositionInLine;
      if (oldToken instanceof CommonToken2) {
        result._text = oldToken._text;
        result.source = oldToken.source;
      } else {
        result._text = oldToken.text;
        result.source = {source: oldToken.tokenSource, stream: oldToken.inputStream};
      }
      return result;
    }
    get type() {
      return this._type;
    }
    set type(type) {
      this._type = type;
    }
    get line() {
      return this._line;
    }
    set line(line) {
      this._line = line;
    }
    get text() {
      if (this._text != null) {
        return this._text;
      }
      let input = this.inputStream;
      if (input == null) {
        return void 0;
      }
      let n = input.size;
      if (this.start < n && this.stop < n) {
        return input.getText(Interval_1.Interval.of(this.start, this.stop));
      } else {
        return "<EOF>";
      }
    }
    set text(text) {
      this._text = text;
    }
    get charPositionInLine() {
      return this._charPositionInLine;
    }
    set charPositionInLine(charPositionInLine) {
      this._charPositionInLine = charPositionInLine;
    }
    get channel() {
      return this._channel;
    }
    set channel(channel) {
      this._channel = channel;
    }
    get startIndex() {
      return this.start;
    }
    set startIndex(start) {
      this.start = start;
    }
    get stopIndex() {
      return this.stop;
    }
    set stopIndex(stop) {
      this.stop = stop;
    }
    get tokenIndex() {
      return this.index;
    }
    set tokenIndex(index) {
      this.index = index;
    }
    get tokenSource() {
      return this.source.source;
    }
    get inputStream() {
      return this.source.stream;
    }
    toString(recognizer) {
      let channelStr = "";
      if (this._channel > 0) {
        channelStr = ",channel=" + this._channel;
      }
      let txt = this.text;
      if (txt != null) {
        txt = txt.replace(/\n/g, "\\n");
        txt = txt.replace(/\r/g, "\\r");
        txt = txt.replace(/\t/g, "\\t");
      } else {
        txt = "<no text>";
      }
      let typeString = String(this._type);
      if (recognizer) {
        typeString = recognizer.vocabulary.getDisplayName(this._type);
      }
      return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + typeString + ">" + channelStr + "," + this._line + ":" + this.charPositionInLine + "]";
    }
  };
  CommonToken.EMPTY_SOURCE = {source: void 0, stream: void 0};
  __decorate([
    Decorators_1.NotNull
  ], CommonToken.prototype, "source", void 0);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "type", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "line", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "text", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "charPositionInLine", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "channel", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "startIndex", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "stopIndex", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "tokenIndex", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "tokenSource", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "inputStream", null);
  __decorate([
    Decorators_1.Override
  ], CommonToken.prototype, "toString", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], CommonToken, "fromToken", null);
  CommonToken = __decorate([
    __param(2, Decorators_1.NotNull)
  ], CommonToken);
  exports.CommonToken = CommonToken;
});

// node_modules/antlr4ts/CommonTokenFactory.js
var require_CommonTokenFactory = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.CommonTokenFactory = void 0;
  var CommonToken_1 = require_CommonToken();
  var Interval_1 = require_Interval();
  var Decorators_1 = require_Decorators();
  var CommonTokenFactory = class {
    constructor(copyText = false) {
      this.copyText = copyText;
    }
    create(source, type, text, channel, start, stop, line, charPositionInLine) {
      let t = new CommonToken_1.CommonToken(type, text, source, channel, start, stop);
      t.line = line;
      t.charPositionInLine = charPositionInLine;
      if (text == null && this.copyText && source.stream != null) {
        t.text = source.stream.getText(Interval_1.Interval.of(start, stop));
      }
      return t;
    }
    createSimple(type, text) {
      return new CommonToken_1.CommonToken(type, text);
    }
  };
  __decorate([
    Decorators_1.Override
  ], CommonTokenFactory.prototype, "create", null);
  __decorate([
    Decorators_1.Override
  ], CommonTokenFactory.prototype, "createSimple", null);
  exports.CommonTokenFactory = CommonTokenFactory;
  (function(CommonTokenFactory2) {
    CommonTokenFactory2.DEFAULT = new CommonTokenFactory2();
  })(CommonTokenFactory = exports.CommonTokenFactory || (exports.CommonTokenFactory = {}));
});

// node_modules/antlr4ts/misc/IntegerStack.js
var require_IntegerStack = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.IntegerStack = void 0;
  var IntegerList_1 = require_IntegerList();
  var IntegerStack = class extends IntegerList_1.IntegerList {
    constructor(arg) {
      super(arg);
    }
    push(value) {
      this.add(value);
    }
    pop() {
      return this.removeAt(this.size - 1);
    }
    peek() {
      return this.get(this.size - 1);
    }
  };
  exports.IntegerStack = IntegerStack;
});

// node_modules/antlr4ts/dfa/AcceptStateInfo.js
var require_AcceptStateInfo = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.AcceptStateInfo = void 0;
  var AcceptStateInfo = class {
    constructor(prediction, lexerActionExecutor) {
      this._prediction = prediction;
      this._lexerActionExecutor = lexerActionExecutor;
    }
    get prediction() {
      return this._prediction;
    }
    get lexerActionExecutor() {
      return this._lexerActionExecutor;
    }
  };
  exports.AcceptStateInfo = AcceptStateInfo;
});

// node_modules/antlr4ts/misc/Array2DHashMap.js
var require_Array2DHashMap = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Array2DHashMap = void 0;
  var Array2DHashSet_1 = require_Array2DHashSet();
  var MapKeyEqualityComparator = class {
    constructor(keyComparator) {
      this.keyComparator = keyComparator;
    }
    hashCode(obj) {
      return this.keyComparator.hashCode(obj.key);
    }
    equals(a, b) {
      return this.keyComparator.equals(a.key, b.key);
    }
  };
  var Array2DHashMap = class {
    constructor(keyComparer) {
      if (keyComparer instanceof Array2DHashMap) {
        this.backingStore = new Array2DHashSet_1.Array2DHashSet(keyComparer.backingStore);
      } else {
        this.backingStore = new Array2DHashSet_1.Array2DHashSet(new MapKeyEqualityComparator(keyComparer));
      }
    }
    clear() {
      this.backingStore.clear();
    }
    containsKey(key) {
      return this.backingStore.contains({key});
    }
    get(key) {
      let bucket = this.backingStore.get({key});
      if (!bucket) {
        return void 0;
      }
      return bucket.value;
    }
    get isEmpty() {
      return this.backingStore.isEmpty;
    }
    put(key, value) {
      let element = this.backingStore.get({key, value});
      let result;
      if (!element) {
        this.backingStore.add({key, value});
      } else {
        result = element.value;
        element.value = value;
      }
      return result;
    }
    putIfAbsent(key, value) {
      let element = this.backingStore.get({key, value});
      let result;
      if (!element) {
        this.backingStore.add({key, value});
      } else {
        result = element.value;
      }
      return result;
    }
    get size() {
      return this.backingStore.size;
    }
    hashCode() {
      return this.backingStore.hashCode();
    }
    equals(o) {
      if (!(o instanceof Array2DHashMap)) {
        return false;
      }
      return this.backingStore.equals(o.backingStore);
    }
  };
  exports.Array2DHashMap = Array2DHashMap;
});

// node_modules/antlr4ts/atn/DecisionState.js
var require_DecisionState = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DecisionState = void 0;
  var ATNState_1 = require_ATNState();
  var DecisionState = class extends ATNState_1.ATNState {
    constructor() {
      super(...arguments);
      this.decision = -1;
      this.nonGreedy = false;
      this.sll = false;
    }
  };
  exports.DecisionState = DecisionState;
});

// node_modules/antlr4ts/atn/PredictionContextCache.js
var require_PredictionContextCache = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.PredictionContextCache = void 0;
  var Array2DHashMap_1 = require_Array2DHashMap();
  var Decorators_1 = require_Decorators();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var PredictionContext_1 = require_PredictionContext();
  var assert = require("assert");
  var PredictionContextCache = class {
    constructor(enableCache = true) {
      this.contexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
      this.childContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
      this.joinContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
      this.enableCache = enableCache;
    }
    getAsCached(context) {
      if (!this.enableCache) {
        return context;
      }
      let result = this.contexts.get(context);
      if (!result) {
        result = context;
        this.contexts.put(context, context);
      }
      return result;
    }
    getChild(context, invokingState) {
      if (!this.enableCache) {
        return context.getChild(invokingState);
      }
      let operands = new PredictionContextCache.PredictionContextAndInt(context, invokingState);
      let result = this.childContexts.get(operands);
      if (!result) {
        result = context.getChild(invokingState);
        result = this.getAsCached(result);
        this.childContexts.put(operands, result);
      }
      return result;
    }
    join(x, y) {
      if (!this.enableCache) {
        return PredictionContext_1.PredictionContext.join(x, y, this);
      }
      let operands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(x, y);
      let result = this.joinContexts.get(operands);
      if (result) {
        return result;
      }
      result = PredictionContext_1.PredictionContext.join(x, y, this);
      result = this.getAsCached(result);
      this.joinContexts.put(operands, result);
      return result;
    }
  };
  exports.PredictionContextCache = PredictionContextCache;
  PredictionContextCache.UNCACHED = new PredictionContextCache(false);
  (function(PredictionContextCache2) {
    class PredictionContextAndInt {
      constructor(obj, value) {
        this.obj = obj;
        this.value = value;
      }
      equals(obj) {
        if (!(obj instanceof PredictionContextAndInt)) {
          return false;
        } else if (obj === this) {
          return true;
        }
        let other = obj;
        return this.value === other.value && (this.obj === other.obj || this.obj != null && this.obj.equals(other.obj));
      }
      hashCode() {
        let hashCode = 5;
        hashCode = 7 * hashCode + (this.obj != null ? this.obj.hashCode() : 0);
        hashCode = 7 * hashCode + this.value;
        return hashCode;
      }
    }
    __decorate([
      Decorators_1.Override
    ], PredictionContextAndInt.prototype, "equals", null);
    __decorate([
      Decorators_1.Override
    ], PredictionContextAndInt.prototype, "hashCode", null);
    PredictionContextCache2.PredictionContextAndInt = PredictionContextAndInt;
    class IdentityCommutativePredictionContextOperands {
      constructor(x, y) {
        assert(x != null);
        assert(y != null);
        this._x = x;
        this._y = y;
      }
      get x() {
        return this._x;
      }
      get y() {
        return this._y;
      }
      equals(o) {
        if (!(o instanceof IdentityCommutativePredictionContextOperands)) {
          return false;
        } else if (this === o) {
          return true;
        }
        let other = o;
        return this._x === other._x && this._y === other._y || this._x === other._y && this._y === other._x;
      }
      hashCode() {
        return this._x.hashCode() ^ this._y.hashCode();
      }
    }
    __decorate([
      Decorators_1.Override
    ], IdentityCommutativePredictionContextOperands.prototype, "equals", null);
    __decorate([
      Decorators_1.Override
    ], IdentityCommutativePredictionContextOperands.prototype, "hashCode", null);
    PredictionContextCache2.IdentityCommutativePredictionContextOperands = IdentityCommutativePredictionContextOperands;
  })(PredictionContextCache = exports.PredictionContextCache || (exports.PredictionContextCache = {}));
});

// node_modules/antlr4ts/atn/PredictionContext.js
var require_PredictionContext = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SingletonPredictionContext = exports.PredictionContext = void 0;
  var Array2DHashMap_1 = require_Array2DHashMap();
  var Array2DHashSet_1 = require_Array2DHashSet();
  var Arrays_1 = require_Arrays();
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var PredictionContextCache_1 = require_PredictionContextCache();
  var assert = require("assert");
  var INITIAL_HASH = 1;
  var PredictionContext = class {
    constructor(cachedHashCode) {
      this.cachedHashCode = cachedHashCode;
    }
    static calculateEmptyHashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
      hash = MurmurHash_1.MurmurHash.finish(hash, 0);
      return hash;
    }
    static calculateSingleHashCode(parent, returnState) {
      let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
      hash = MurmurHash_1.MurmurHash.update(hash, parent);
      hash = MurmurHash_1.MurmurHash.update(hash, returnState);
      hash = MurmurHash_1.MurmurHash.finish(hash, 2);
      return hash;
    }
    static calculateHashCode(parents, returnStates) {
      let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
      for (let parent of parents) {
        hash = MurmurHash_1.MurmurHash.update(hash, parent);
      }
      for (let returnState of returnStates) {
        hash = MurmurHash_1.MurmurHash.update(hash, returnState);
      }
      hash = MurmurHash_1.MurmurHash.finish(hash, 2 * parents.length);
      return hash;
    }
    static fromRuleContext(atn, outerContext, fullContext = true) {
      if (outerContext.isEmpty) {
        return fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
      }
      let parent;
      if (outerContext._parent) {
        parent = PredictionContext.fromRuleContext(atn, outerContext._parent, fullContext);
      } else {
        parent = fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
      }
      let state = atn.states[outerContext.invokingState];
      let transition = state.transition(0);
      return parent.getChild(transition.followState.stateNumber);
    }
    static addEmptyContext(context) {
      return context.addEmptyContext();
    }
    static removeEmptyContext(context) {
      return context.removeEmptyContext();
    }
    static join(context0, context1, contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED) {
      if (context0 === context1) {
        return context0;
      }
      if (context0.isEmpty) {
        return PredictionContext.isEmptyLocal(context0) ? context0 : PredictionContext.addEmptyContext(context1);
      } else if (context1.isEmpty) {
        return PredictionContext.isEmptyLocal(context1) ? context1 : PredictionContext.addEmptyContext(context0);
      }
      let context0size = context0.size;
      let context1size = context1.size;
      if (context0size === 1 && context1size === 1 && context0.getReturnState(0) === context1.getReturnState(0)) {
        let merged = contextCache.join(context0.getParent(0), context1.getParent(0));
        if (merged === context0.getParent(0)) {
          return context0;
        } else if (merged === context1.getParent(0)) {
          return context1;
        } else {
          return merged.getChild(context0.getReturnState(0));
        }
      }
      let count = 0;
      let parentsList = new Array(context0size + context1size);
      let returnStatesList = new Array(parentsList.length);
      let leftIndex = 0;
      let rightIndex = 0;
      let canReturnLeft = true;
      let canReturnRight = true;
      while (leftIndex < context0size && rightIndex < context1size) {
        if (context0.getReturnState(leftIndex) === context1.getReturnState(rightIndex)) {
          parentsList[count] = contextCache.join(context0.getParent(leftIndex), context1.getParent(rightIndex));
          returnStatesList[count] = context0.getReturnState(leftIndex);
          canReturnLeft = canReturnLeft && parentsList[count] === context0.getParent(leftIndex);
          canReturnRight = canReturnRight && parentsList[count] === context1.getParent(rightIndex);
          leftIndex++;
          rightIndex++;
        } else if (context0.getReturnState(leftIndex) < context1.getReturnState(rightIndex)) {
          parentsList[count] = context0.getParent(leftIndex);
          returnStatesList[count] = context0.getReturnState(leftIndex);
          canReturnRight = false;
          leftIndex++;
        } else {
          assert(context1.getReturnState(rightIndex) < context0.getReturnState(leftIndex));
          parentsList[count] = context1.getParent(rightIndex);
          returnStatesList[count] = context1.getReturnState(rightIndex);
          canReturnLeft = false;
          rightIndex++;
        }
        count++;
      }
      while (leftIndex < context0size) {
        parentsList[count] = context0.getParent(leftIndex);
        returnStatesList[count] = context0.getReturnState(leftIndex);
        leftIndex++;
        canReturnRight = false;
        count++;
      }
      while (rightIndex < context1size) {
        parentsList[count] = context1.getParent(rightIndex);
        returnStatesList[count] = context1.getReturnState(rightIndex);
        rightIndex++;
        canReturnLeft = false;
        count++;
      }
      if (canReturnLeft) {
        return context0;
      } else if (canReturnRight) {
        return context1;
      }
      if (count < parentsList.length) {
        parentsList = parentsList.slice(0, count);
        returnStatesList = returnStatesList.slice(0, count);
      }
      if (parentsList.length === 0) {
        return PredictionContext.EMPTY_FULL;
      } else if (parentsList.length === 1) {
        return new SingletonPredictionContext(parentsList[0], returnStatesList[0]);
      } else {
        return new ArrayPredictionContext(parentsList, returnStatesList);
      }
    }
    static isEmptyLocal(context) {
      return context === PredictionContext.EMPTY_LOCAL;
    }
    static getCachedContext(context, contextCache, visited) {
      if (context.isEmpty) {
        return context;
      }
      let existing = visited.get(context);
      if (existing) {
        return existing;
      }
      existing = contextCache.get(context);
      if (existing) {
        visited.put(context, existing);
        return existing;
      }
      let changed = false;
      let parents = new Array(context.size);
      for (let i = 0; i < parents.length; i++) {
        let parent = PredictionContext.getCachedContext(context.getParent(i), contextCache, visited);
        if (changed || parent !== context.getParent(i)) {
          if (!changed) {
            parents = new Array(context.size);
            for (let j = 0; j < context.size; j++) {
              parents[j] = context.getParent(j);
            }
            changed = true;
          }
          parents[i] = parent;
        }
      }
      if (!changed) {
        existing = contextCache.putIfAbsent(context, context);
        visited.put(context, existing != null ? existing : context);
        return context;
      }
      let updated;
      if (parents.length === 1) {
        updated = new SingletonPredictionContext(parents[0], context.getReturnState(0));
      } else {
        let returnStates = new Array(context.size);
        for (let i = 0; i < context.size; i++) {
          returnStates[i] = context.getReturnState(i);
        }
        updated = new ArrayPredictionContext(parents, returnStates, context.hashCode());
      }
      existing = contextCache.putIfAbsent(updated, updated);
      visited.put(updated, existing || updated);
      visited.put(context, existing || updated);
      return updated;
    }
    appendSingleContext(returnContext, contextCache) {
      return this.appendContext(PredictionContext.EMPTY_FULL.getChild(returnContext), contextCache);
    }
    getChild(returnState) {
      return new SingletonPredictionContext(this, returnState);
    }
    hashCode() {
      return this.cachedHashCode;
    }
    toStrings(recognizer, currentState, stop = PredictionContext.EMPTY_FULL) {
      let result = [];
      outer:
        for (let perm = 0; ; perm++) {
          let offset = 0;
          let last = true;
          let p = this;
          let stateNumber = currentState;
          let localBuffer = "";
          localBuffer += "[";
          while (!p.isEmpty && p !== stop) {
            let index = 0;
            if (p.size > 0) {
              let bits = 1;
              while (1 << bits >>> 0 < p.size) {
                bits++;
              }
              let mask = (1 << bits >>> 0) - 1;
              index = perm >> offset & mask;
              last = last && index >= p.size - 1;
              if (index >= p.size) {
                continue outer;
              }
              offset += bits;
            }
            if (recognizer) {
              if (localBuffer.length > 1) {
                localBuffer += " ";
              }
              let atn = recognizer.atn;
              let s = atn.states[stateNumber];
              let ruleName = recognizer.ruleNames[s.ruleIndex];
              localBuffer += ruleName;
            } else if (p.getReturnState(index) !== PredictionContext.EMPTY_FULL_STATE_KEY) {
              if (!p.isEmpty) {
                if (localBuffer.length > 1) {
                  localBuffer += " ";
                }
                localBuffer += p.getReturnState(index);
              }
            }
            stateNumber = p.getReturnState(index);
            p = p.getParent(index);
          }
          localBuffer += "]";
          result.push(localBuffer);
          if (last) {
            break;
          }
        }
      return result;
    }
  };
  __decorate([
    Decorators_1.Override
  ], PredictionContext.prototype, "hashCode", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], PredictionContext, "join", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], PredictionContext, "getCachedContext", null);
  exports.PredictionContext = PredictionContext;
  var EmptyPredictionContext = class extends PredictionContext {
    constructor(fullContext) {
      super(PredictionContext.calculateEmptyHashCode());
      this.fullContext = fullContext;
    }
    get isFullContext() {
      return this.fullContext;
    }
    addEmptyContext() {
      return this;
    }
    removeEmptyContext() {
      throw new Error("Cannot remove the empty context from itself.");
    }
    getParent(index) {
      throw new Error("index out of bounds");
    }
    getReturnState(index) {
      throw new Error("index out of bounds");
    }
    findReturnState(returnState) {
      return -1;
    }
    get size() {
      return 0;
    }
    appendSingleContext(returnContext, contextCache) {
      return contextCache.getChild(this, returnContext);
    }
    appendContext(suffix, contextCache) {
      return suffix;
    }
    get isEmpty() {
      return true;
    }
    get hasEmpty() {
      return true;
    }
    equals(o) {
      return this === o;
    }
    toStrings(recognizer, currentState, stop) {
      return ["[]"];
    }
  };
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "addEmptyContext", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "removeEmptyContext", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "getParent", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "getReturnState", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "findReturnState", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "appendSingleContext", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "appendContext", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "isEmpty", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "hasEmpty", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], EmptyPredictionContext.prototype, "toStrings", null);
  var ArrayPredictionContext = class ArrayPredictionContext2 extends PredictionContext {
    constructor(parents, returnStates, hashCode) {
      super(hashCode || PredictionContext.calculateHashCode(parents, returnStates));
      assert(parents.length === returnStates.length);
      assert(returnStates.length > 1 || returnStates[0] !== PredictionContext.EMPTY_FULL_STATE_KEY, "Should be using PredictionContext.EMPTY instead.");
      this.parents = parents;
      this.returnStates = returnStates;
    }
    getParent(index) {
      return this.parents[index];
    }
    getReturnState(index) {
      return this.returnStates[index];
    }
    findReturnState(returnState) {
      return Arrays_1.Arrays.binarySearch(this.returnStates, returnState);
    }
    get size() {
      return this.returnStates.length;
    }
    get isEmpty() {
      return false;
    }
    get hasEmpty() {
      return this.returnStates[this.returnStates.length - 1] === PredictionContext.EMPTY_FULL_STATE_KEY;
    }
    addEmptyContext() {
      if (this.hasEmpty) {
        return this;
      }
      let parents2 = this.parents.slice(0);
      let returnStates2 = this.returnStates.slice(0);
      parents2.push(PredictionContext.EMPTY_FULL);
      returnStates2.push(PredictionContext.EMPTY_FULL_STATE_KEY);
      return new ArrayPredictionContext2(parents2, returnStates2);
    }
    removeEmptyContext() {
      if (!this.hasEmpty) {
        return this;
      }
      if (this.returnStates.length === 2) {
        return new SingletonPredictionContext(this.parents[0], this.returnStates[0]);
      } else {
        let parents2 = this.parents.slice(0, this.parents.length - 1);
        let returnStates2 = this.returnStates.slice(0, this.returnStates.length - 1);
        return new ArrayPredictionContext2(parents2, returnStates2);
      }
    }
    appendContext(suffix, contextCache) {
      return ArrayPredictionContext2.appendContextImpl(this, suffix, new PredictionContext.IdentityHashMap());
    }
    static appendContextImpl(context, suffix, visited) {
      if (suffix.isEmpty) {
        if (PredictionContext.isEmptyLocal(suffix)) {
          if (context.hasEmpty) {
            return PredictionContext.EMPTY_LOCAL;
          }
          throw new Error("what to do here?");
        }
        return context;
      }
      if (suffix.size !== 1) {
        throw new Error("Appending a tree suffix is not yet supported.");
      }
      let result = visited.get(context);
      if (!result) {
        if (context.isEmpty) {
          result = suffix;
        } else {
          let parentCount = context.size;
          if (context.hasEmpty) {
            parentCount--;
          }
          let updatedParents = new Array(parentCount);
          let updatedReturnStates = new Array(parentCount);
          for (let i = 0; i < parentCount; i++) {
            updatedReturnStates[i] = context.getReturnState(i);
          }
          for (let i = 0; i < parentCount; i++) {
            updatedParents[i] = ArrayPredictionContext2.appendContextImpl(context.getParent(i), suffix, visited);
          }
          if (updatedParents.length === 1) {
            result = new SingletonPredictionContext(updatedParents[0], updatedReturnStates[0]);
          } else {
            assert(updatedParents.length > 1);
            result = new ArrayPredictionContext2(updatedParents, updatedReturnStates);
          }
          if (context.hasEmpty) {
            result = PredictionContext.join(result, suffix);
          }
        }
        visited.put(context, result);
      }
      return result;
    }
    equals(o) {
      if (this === o) {
        return true;
      } else if (!(o instanceof ArrayPredictionContext2)) {
        return false;
      }
      if (this.hashCode() !== o.hashCode()) {
        return false;
      }
      let other = o;
      return this.equalsImpl(other, new Array2DHashSet_1.Array2DHashSet());
    }
    equalsImpl(other, visited) {
      let selfWorkList = [];
      let otherWorkList = [];
      selfWorkList.push(this);
      otherWorkList.push(other);
      while (true) {
        let currentSelf = selfWorkList.pop();
        let currentOther = otherWorkList.pop();
        if (!currentSelf || !currentOther) {
          break;
        }
        let operands = new PredictionContextCache_1.PredictionContextCache.IdentityCommutativePredictionContextOperands(currentSelf, currentOther);
        if (!visited.add(operands)) {
          continue;
        }
        let selfSize = operands.x.size;
        if (selfSize === 0) {
          if (!operands.x.equals(operands.y)) {
            return false;
          }
          continue;
        }
        let otherSize = operands.y.size;
        if (selfSize !== otherSize) {
          return false;
        }
        for (let i = 0; i < selfSize; i++) {
          if (operands.x.getReturnState(i) !== operands.y.getReturnState(i)) {
            return false;
          }
          let selfParent = operands.x.getParent(i);
          let otherParent = operands.y.getParent(i);
          if (selfParent.hashCode() !== otherParent.hashCode()) {
            return false;
          }
          if (selfParent !== otherParent) {
            selfWorkList.push(selfParent);
            otherWorkList.push(otherParent);
          }
        }
      }
      return true;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ArrayPredictionContext.prototype, "parents", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ArrayPredictionContext.prototype, "returnStates", void 0);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "getParent", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "getReturnState", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "findReturnState", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "isEmpty", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "hasEmpty", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "addEmptyContext", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "removeEmptyContext", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "appendContext", null);
  __decorate([
    Decorators_1.Override
  ], ArrayPredictionContext.prototype, "equals", null);
  ArrayPredictionContext = __decorate([
    __param(0, Decorators_1.NotNull)
  ], ArrayPredictionContext);
  var SingletonPredictionContext = class SingletonPredictionContext2 extends PredictionContext {
    constructor(parent, returnState) {
      super(PredictionContext.calculateSingleHashCode(parent, returnState));
      this.parent = parent;
      this.returnState = returnState;
    }
    getParent(index) {
      return this.parent;
    }
    getReturnState(index) {
      return this.returnState;
    }
    findReturnState(returnState) {
      return this.returnState === returnState ? 0 : -1;
    }
    get size() {
      return 1;
    }
    get isEmpty() {
      return false;
    }
    get hasEmpty() {
      return false;
    }
    appendContext(suffix, contextCache) {
      return contextCache.getChild(this.parent.appendContext(suffix, contextCache), this.returnState);
    }
    addEmptyContext() {
      let parents = [this.parent, PredictionContext.EMPTY_FULL];
      let returnStates = [this.returnState, PredictionContext.EMPTY_FULL_STATE_KEY];
      return new ArrayPredictionContext(parents, returnStates);
    }
    removeEmptyContext() {
      return this;
    }
    equals(o) {
      if (o === this) {
        return true;
      } else if (!(o instanceof SingletonPredictionContext2)) {
        return false;
      }
      let other = o;
      if (this.hashCode() !== other.hashCode()) {
        return false;
      }
      return this.returnState === other.returnState && this.parent.equals(other.parent);
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], SingletonPredictionContext.prototype, "parent", void 0);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "getParent", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "getReturnState", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "findReturnState", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "isEmpty", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "hasEmpty", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "appendContext", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "addEmptyContext", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "removeEmptyContext", null);
  __decorate([
    Decorators_1.Override
  ], SingletonPredictionContext.prototype, "equals", null);
  SingletonPredictionContext = __decorate([
    __param(0, Decorators_1.NotNull)
  ], SingletonPredictionContext);
  exports.SingletonPredictionContext = SingletonPredictionContext;
  (function(PredictionContext2) {
    PredictionContext2.EMPTY_LOCAL = new EmptyPredictionContext(false);
    PredictionContext2.EMPTY_FULL = new EmptyPredictionContext(true);
    PredictionContext2.EMPTY_LOCAL_STATE_KEY = -(1 << 31 >>> 0);
    PredictionContext2.EMPTY_FULL_STATE_KEY = (1 << 31 >>> 0) - 1;
    class IdentityHashMap extends Array2DHashMap_1.Array2DHashMap {
      constructor() {
        super(IdentityEqualityComparator.INSTANCE);
      }
    }
    PredictionContext2.IdentityHashMap = IdentityHashMap;
    class IdentityEqualityComparator {
      IdentityEqualityComparator() {
      }
      hashCode(obj) {
        return obj.hashCode();
      }
      equals(a, b) {
        return a === b;
      }
    }
    IdentityEqualityComparator.INSTANCE = new IdentityEqualityComparator();
    __decorate([
      Decorators_1.Override
    ], IdentityEqualityComparator.prototype, "hashCode", null);
    __decorate([
      Decorators_1.Override
    ], IdentityEqualityComparator.prototype, "equals", null);
    PredictionContext2.IdentityEqualityComparator = IdentityEqualityComparator;
  })(PredictionContext = exports.PredictionContext || (exports.PredictionContext = {}));
});

// node_modules/antlr4ts/atn/ATNConfig.js
var require_ATNConfig = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATNConfig = void 0;
  var Array2DHashMap_1 = require_Array2DHashMap();
  var DecisionState_1 = require_DecisionState();
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var PredictionContext_1 = require_PredictionContext();
  var SemanticContext_1 = require_SemanticContext();
  var assert = require("assert");
  var SUPPRESS_PRECEDENCE_FILTER = 2147483648;
  var ATNConfig = class ATNConfig2 {
    constructor(state, altOrConfig, context) {
      if (typeof altOrConfig === "number") {
        assert((altOrConfig & 16777215) === altOrConfig);
        this._state = state;
        this.altAndOuterContextDepth = altOrConfig;
        this._context = context;
      } else {
        this._state = state;
        this.altAndOuterContextDepth = altOrConfig.altAndOuterContextDepth;
        this._context = context;
      }
    }
    static create(state, alt, context, semanticContext = SemanticContext_1.SemanticContext.NONE, lexerActionExecutor) {
      if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
        if (lexerActionExecutor != null) {
          return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, alt, context, false);
        } else {
          return new SemanticContextATNConfig(semanticContext, state, alt, context);
        }
      } else if (lexerActionExecutor != null) {
        return new ActionATNConfig(lexerActionExecutor, state, alt, context, false);
      } else {
        return new ATNConfig2(state, alt, context);
      }
    }
    get state() {
      return this._state;
    }
    get alt() {
      return this.altAndOuterContextDepth & 16777215;
    }
    get context() {
      return this._context;
    }
    set context(context) {
      this._context = context;
    }
    get reachesIntoOuterContext() {
      return this.outerContextDepth !== 0;
    }
    get outerContextDepth() {
      return this.altAndOuterContextDepth >>> 24 & 127;
    }
    set outerContextDepth(outerContextDepth) {
      assert(outerContextDepth >= 0);
      outerContextDepth = Math.min(outerContextDepth, 127);
      this.altAndOuterContextDepth = outerContextDepth << 24 | (this.altAndOuterContextDepth & ~2130706432) >>> 0;
    }
    get lexerActionExecutor() {
      return void 0;
    }
    get semanticContext() {
      return SemanticContext_1.SemanticContext.NONE;
    }
    get hasPassedThroughNonGreedyDecision() {
      return false;
    }
    clone() {
      return this.transform(this.state, false);
    }
    transform(state, checkNonGreedy, arg2) {
      if (arg2 == null) {
        return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
      } else if (arg2 instanceof PredictionContext_1.PredictionContext) {
        return this.transformImpl(state, arg2, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
      } else if (arg2 instanceof SemanticContext_1.SemanticContext) {
        return this.transformImpl(state, this._context, arg2, checkNonGreedy, this.lexerActionExecutor);
      } else {
        return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, arg2);
      }
    }
    transformImpl(state, context, semanticContext, checkNonGreedy, lexerActionExecutor) {
      let passedThroughNonGreedy = checkNonGreedy && ATNConfig2.checkNonGreedyDecision(this, state);
      if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
        if (lexerActionExecutor != null || passedThroughNonGreedy) {
          return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, this, context, passedThroughNonGreedy);
        } else {
          return new SemanticContextATNConfig(semanticContext, state, this, context);
        }
      } else if (lexerActionExecutor != null || passedThroughNonGreedy) {
        return new ActionATNConfig(lexerActionExecutor, state, this, context, passedThroughNonGreedy);
      } else {
        return new ATNConfig2(state, this, context);
      }
    }
    static checkNonGreedyDecision(source, target) {
      return source.hasPassedThroughNonGreedyDecision || target instanceof DecisionState_1.DecisionState && target.nonGreedy;
    }
    appendContext(context, contextCache) {
      if (typeof context === "number") {
        let appendedContext = this.context.appendSingleContext(context, contextCache);
        let result = this.transform(this.state, false, appendedContext);
        return result;
      } else {
        let appendedContext = this.context.appendContext(context, contextCache);
        let result = this.transform(this.state, false, appendedContext);
        return result;
      }
    }
    contains(subconfig) {
      if (this.state.stateNumber !== subconfig.state.stateNumber || this.alt !== subconfig.alt || !this.semanticContext.equals(subconfig.semanticContext)) {
        return false;
      }
      let leftWorkList = [];
      let rightWorkList = [];
      leftWorkList.push(this.context);
      rightWorkList.push(subconfig.context);
      while (true) {
        let left = leftWorkList.pop();
        let right = rightWorkList.pop();
        if (!left || !right) {
          break;
        }
        if (left === right) {
          return true;
        }
        if (left.size < right.size) {
          return false;
        }
        if (right.isEmpty) {
          return left.hasEmpty;
        } else {
          for (let i = 0; i < right.size; i++) {
            let index = left.findReturnState(right.getReturnState(i));
            if (index < 0) {
              return false;
            }
            leftWorkList.push(left.getParent(index));
            rightWorkList.push(right.getParent(i));
          }
        }
      }
      return false;
    }
    get isPrecedenceFilterSuppressed() {
      return (this.altAndOuterContextDepth & SUPPRESS_PRECEDENCE_FILTER) !== 0;
    }
    set isPrecedenceFilterSuppressed(value) {
      if (value) {
        this.altAndOuterContextDepth |= SUPPRESS_PRECEDENCE_FILTER;
      } else {
        this.altAndOuterContextDepth &= ~SUPPRESS_PRECEDENCE_FILTER;
      }
    }
    equals(o) {
      if (this === o) {
        return true;
      } else if (!(o instanceof ATNConfig2)) {
        return false;
      }
      return this.state.stateNumber === o.state.stateNumber && this.alt === o.alt && this.reachesIntoOuterContext === o.reachesIntoOuterContext && this.context.equals(o.context) && this.semanticContext.equals(o.semanticContext) && this.isPrecedenceFilterSuppressed === o.isPrecedenceFilterSuppressed && this.hasPassedThroughNonGreedyDecision === o.hasPassedThroughNonGreedyDecision && ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor, o.lexerActionExecutor);
    }
    hashCode() {
      let hashCode = MurmurHash_1.MurmurHash.initialize(7);
      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.state.stateNumber);
      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.alt);
      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.reachesIntoOuterContext ? 1 : 0);
      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.context);
      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.semanticContext);
      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.hasPassedThroughNonGreedyDecision ? 1 : 0);
      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.lexerActionExecutor);
      hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 7);
      return hashCode;
    }
    toDotString() {
      let builder = "";
      builder += "digraph G {\n";
      builder += "rankdir=LR;\n";
      let visited = new Array2DHashMap_1.Array2DHashMap(PredictionContext_1.PredictionContext.IdentityEqualityComparator.INSTANCE);
      let workList = [];
      function getOrAddContext(context) {
        let newNumber = visited.size;
        let result = visited.putIfAbsent(context, newNumber);
        if (result != null) {
          return result;
        }
        workList.push(context);
        return newNumber;
      }
      workList.push(this.context);
      visited.put(this.context, 0);
      while (true) {
        let current = workList.pop();
        if (!current) {
          break;
        }
        for (let i = 0; i < current.size; i++) {
          builder += "  s" + getOrAddContext(current);
          builder += "->";
          builder += "s" + getOrAddContext(current.getParent(i));
          builder += '[label="' + current.getReturnState(i) + '"];\n';
        }
      }
      builder += "}\n";
      return builder.toString();
    }
    toString(recog, showAlt, showContext) {
      if (showContext == null) {
        showContext = showAlt != null;
      }
      if (showAlt == null) {
        showAlt = true;
      }
      let buf = "";
      let contexts;
      if (showContext) {
        contexts = this.context.toStrings(recog, this.state.stateNumber);
      } else {
        contexts = ["?"];
      }
      let first = true;
      for (let contextDesc of contexts) {
        if (first) {
          first = false;
        } else {
          buf += ", ";
        }
        buf += "(";
        buf += this.state;
        if (showAlt) {
          buf += ",";
          buf += this.alt;
        }
        if (this.context) {
          buf += ",";
          buf += contextDesc;
        }
        if (this.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
          buf += ",";
          buf += this.semanticContext;
        }
        if (this.reachesIntoOuterContext) {
          buf += ",up=" + this.outerContextDepth;
        }
        buf += ")";
      }
      return buf.toString();
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ATNConfig.prototype, "_state", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATNConfig.prototype, "_context", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATNConfig.prototype, "state", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], ATNConfig.prototype, "context", null);
  __decorate([
    Decorators_1.NotNull
  ], ATNConfig.prototype, "semanticContext", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfig.prototype, "clone", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ATNConfig.prototype, "transformImpl", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfig.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfig.prototype, "hashCode", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
  ], ATNConfig, "create", null);
  ATNConfig = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ATNConfig);
  exports.ATNConfig = ATNConfig;
  var SemanticContextATNConfig = class SemanticContextATNConfig extends ATNConfig {
    constructor(semanticContext, state, altOrConfig, context) {
      if (typeof altOrConfig === "number") {
        super(state, altOrConfig, context);
      } else {
        super(state, altOrConfig, context);
      }
      this._semanticContext = semanticContext;
    }
    get semanticContext() {
      return this._semanticContext;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], SemanticContextATNConfig.prototype, "_semanticContext", void 0);
  __decorate([
    Decorators_1.Override
  ], SemanticContextATNConfig.prototype, "semanticContext", null);
  SemanticContextATNConfig = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], SemanticContextATNConfig);
  var ActionATNConfig = class ActionATNConfig extends ATNConfig {
    constructor(lexerActionExecutor, state, altOrConfig, context, passedThroughNonGreedyDecision) {
      if (typeof altOrConfig === "number") {
        super(state, altOrConfig, context);
      } else {
        super(state, altOrConfig, context);
        if (altOrConfig.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
          throw new Error("Not supported");
        }
      }
      this._lexerActionExecutor = lexerActionExecutor;
      this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
    }
    get lexerActionExecutor() {
      return this._lexerActionExecutor;
    }
    get hasPassedThroughNonGreedyDecision() {
      return this.passedThroughNonGreedyDecision;
    }
  };
  __decorate([
    Decorators_1.Override
  ], ActionATNConfig.prototype, "lexerActionExecutor", null);
  __decorate([
    Decorators_1.Override
  ], ActionATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
  ActionATNConfig = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ActionATNConfig);
  var ActionSemanticContextATNConfig = class ActionSemanticContextATNConfig extends SemanticContextATNConfig {
    constructor(lexerActionExecutor, semanticContext, state, altOrConfig, context, passedThroughNonGreedyDecision) {
      if (typeof altOrConfig === "number") {
        super(semanticContext, state, altOrConfig, context);
      } else {
        super(semanticContext, state, altOrConfig, context);
      }
      this._lexerActionExecutor = lexerActionExecutor;
      this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
    }
    get lexerActionExecutor() {
      return this._lexerActionExecutor;
    }
    get hasPassedThroughNonGreedyDecision() {
      return this.passedThroughNonGreedyDecision;
    }
  };
  __decorate([
    Decorators_1.Override
  ], ActionSemanticContextATNConfig.prototype, "lexerActionExecutor", null);
  __decorate([
    Decorators_1.Override
  ], ActionSemanticContextATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
  ActionSemanticContextATNConfig = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ActionSemanticContextATNConfig);
});

// node_modules/antlr4ts/misc/BitSet.js
var require_BitSet = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BitSet = void 0;
  var util = require("util");
  var MurmurHash_1 = require_MurmurHash();
  var EMPTY_DATA = new Uint16Array(0);
  function getIndex(bitNumber) {
    return bitNumber >>> 4;
  }
  function unIndex(n) {
    return n * 16;
  }
  function findLSBSet(word) {
    let bit = 1;
    for (let i = 0; i < 16; i++) {
      if ((word & bit) !== 0) {
        return i;
      }
      bit = bit << 1 >>> 0;
    }
    throw new RangeError("No specified bit found");
  }
  function findMSBSet(word) {
    let bit = 1 << 15 >>> 0;
    for (let i = 15; i >= 0; i--) {
      if ((word & bit) !== 0) {
        return i;
      }
      bit = bit >>> 1;
    }
    throw new RangeError("No specified bit found");
  }
  function bitsFor(fromBit, toBit) {
    fromBit &= 15;
    toBit &= 15;
    if (fromBit === toBit) {
      return 1 << fromBit >>> 0;
    }
    return 65535 >>> 15 - toBit ^ 65535 >>> 16 - fromBit;
  }
  var POP_CNT = new Uint8Array(65536);
  for (let i = 0; i < 16; i++) {
    const stride = 1 << i >>> 0;
    let index = 0;
    while (index < POP_CNT.length) {
      index += stride;
      for (let j = 0; j < stride; j++) {
        POP_CNT[index]++;
        index++;
      }
    }
  }
  var BitSet = class {
    constructor(arg) {
      if (!arg) {
        this.data = EMPTY_DATA;
      } else if (typeof arg === "number") {
        if (arg < 0) {
          throw new RangeError("nbits cannot be negative");
        } else {
          this.data = new Uint16Array(getIndex(arg - 1) + 1);
        }
      } else {
        if (arg instanceof BitSet) {
          this.data = arg.data.slice(0);
        } else {
          let max = -1;
          for (let v of arg) {
            if (max < v) {
              max = v;
            }
          }
          this.data = new Uint16Array(getIndex(max - 1) + 1);
          for (let v of arg) {
            this.set(v);
          }
        }
      }
    }
    and(set) {
      const data = this.data;
      const other = set.data;
      const words = Math.min(data.length, other.length);
      let lastWord = -1;
      for (let i = 0; i < words; i++) {
        let value = data[i] &= other[i];
        if (value !== 0) {
          lastWord = i;
        }
      }
      if (lastWord === -1) {
        this.data = EMPTY_DATA;
      }
      if (lastWord < data.length - 1) {
        this.data = data.slice(0, lastWord + 1);
      }
    }
    andNot(set) {
      const data = this.data;
      const other = set.data;
      const words = Math.min(data.length, other.length);
      let lastWord = -1;
      for (let i = 0; i < words; i++) {
        let value = data[i] &= other[i] ^ 65535;
        if (value !== 0) {
          lastWord = i;
        }
      }
      if (lastWord === -1) {
        this.data = EMPTY_DATA;
      }
      if (lastWord < data.length - 1) {
        this.data = data.slice(0, lastWord + 1);
      }
    }
    cardinality() {
      if (this.isEmpty) {
        return 0;
      }
      const data = this.data;
      const length = data.length;
      let result = 0;
      for (let i = 0; i < length; i++) {
        result += POP_CNT[data[i]];
      }
      return result;
    }
    clear(fromIndex, toIndex) {
      if (fromIndex == null) {
        this.data.fill(0);
      } else if (toIndex == null) {
        this.set(fromIndex, false);
      } else {
        this.set(fromIndex, toIndex, false);
      }
    }
    flip(fromIndex, toIndex) {
      if (toIndex == null) {
        toIndex = fromIndex;
      }
      if (fromIndex < 0 || toIndex < fromIndex) {
        throw new RangeError();
      }
      let word = getIndex(fromIndex);
      const lastWord = getIndex(toIndex);
      if (word === lastWord) {
        this.data[word] ^= bitsFor(fromIndex, toIndex);
      } else {
        this.data[word++] ^= bitsFor(fromIndex, 15);
        while (word < lastWord) {
          this.data[word++] ^= 65535;
        }
        this.data[word++] ^= bitsFor(0, toIndex);
      }
    }
    get(fromIndex, toIndex) {
      if (toIndex === void 0) {
        return !!(this.data[getIndex(fromIndex)] & bitsFor(fromIndex, fromIndex));
      } else {
        let result = new BitSet(toIndex + 1);
        for (let i = fromIndex; i <= toIndex; i++) {
          result.set(i, this.get(i));
        }
        return result;
      }
    }
    intersects(set) {
      let smallerLength = Math.min(this.length(), set.length());
      if (smallerLength === 0) {
        return false;
      }
      let bound = getIndex(smallerLength - 1);
      for (let i = 0; i <= bound; i++) {
        if ((this.data[i] & set.data[i]) !== 0) {
          return true;
        }
      }
      return false;
    }
    get isEmpty() {
      return this.length() === 0;
    }
    length() {
      if (!this.data.length) {
        return 0;
      }
      return this.previousSetBit(unIndex(this.data.length) - 1) + 1;
    }
    nextClearBit(fromIndex) {
      if (fromIndex < 0) {
        throw new RangeError("fromIndex cannot be negative");
      }
      const data = this.data;
      const length = data.length;
      let word = getIndex(fromIndex);
      if (word > length) {
        return -1;
      }
      let ignore = 65535 ^ bitsFor(fromIndex, 15);
      if ((data[word] | ignore) === 65535) {
        word++;
        ignore = 0;
        for (; word < length; word++) {
          if (data[word] !== 65535) {
            break;
          }
        }
        if (word === length) {
          return -1;
        }
      }
      return unIndex(word) + findLSBSet((data[word] | ignore) ^ 65535);
    }
    nextSetBit(fromIndex) {
      if (fromIndex < 0) {
        throw new RangeError("fromIndex cannot be negative");
      }
      const data = this.data;
      const length = data.length;
      let word = getIndex(fromIndex);
      if (word > length) {
        return -1;
      }
      let mask = bitsFor(fromIndex, 15);
      if ((data[word] & mask) === 0) {
        word++;
        mask = 65535;
        for (; word < length; word++) {
          if (data[word] !== 0) {
            break;
          }
        }
        if (word >= length) {
          return -1;
        }
      }
      return unIndex(word) + findLSBSet(data[word] & mask);
    }
    or(set) {
      const data = this.data;
      const other = set.data;
      const minWords = Math.min(data.length, other.length);
      const words = Math.max(data.length, other.length);
      const dest = data.length === words ? data : new Uint16Array(words);
      let lastWord = -1;
      for (let i = 0; i < minWords; i++) {
        let value = dest[i] = data[i] | other[i];
        if (value !== 0) {
          lastWord = i;
        }
      }
      const longer = data.length > other.length ? data : other;
      for (let i = minWords; i < words; i++) {
        let value = dest[i] = longer[i];
        if (value !== 0) {
          lastWord = i;
        }
      }
      if (lastWord === -1) {
        this.data = EMPTY_DATA;
      } else if (dest.length === lastWord + 1) {
        this.data = dest;
      } else {
        this.data = dest.slice(0, lastWord);
      }
    }
    previousClearBit(fromIndex) {
      if (fromIndex < 0) {
        throw new RangeError("fromIndex cannot be negative");
      }
      const data = this.data;
      const length = data.length;
      let word = getIndex(fromIndex);
      if (word >= length) {
        word = length - 1;
      }
      let ignore = 65535 ^ bitsFor(0, fromIndex);
      if ((data[word] | ignore) === 65535) {
        ignore = 0;
        word--;
        for (; word >= 0; word--) {
          if (data[word] !== 65535) {
            break;
          }
        }
        if (word < 0) {
          return -1;
        }
      }
      return unIndex(word) + findMSBSet((data[word] | ignore) ^ 65535);
    }
    previousSetBit(fromIndex) {
      if (fromIndex < 0) {
        throw new RangeError("fromIndex cannot be negative");
      }
      const data = this.data;
      const length = data.length;
      let word = getIndex(fromIndex);
      if (word >= length) {
        word = length - 1;
      }
      let mask = bitsFor(0, fromIndex);
      if ((data[word] & mask) === 0) {
        word--;
        mask = 65535;
        for (; word >= 0; word--) {
          if (data[word] !== 0) {
            break;
          }
        }
        if (word < 0) {
          return -1;
        }
      }
      return unIndex(word) + findMSBSet(data[word] & mask);
    }
    set(fromIndex, toIndex, value) {
      if (toIndex === void 0) {
        toIndex = fromIndex;
        value = true;
      } else if (typeof toIndex === "boolean") {
        value = toIndex;
        toIndex = fromIndex;
      }
      if (value === void 0) {
        value = true;
      }
      if (fromIndex < 0 || fromIndex > toIndex) {
        throw new RangeError();
      }
      let word = getIndex(fromIndex);
      let lastWord = getIndex(toIndex);
      if (value && lastWord >= this.data.length) {
        let temp = new Uint16Array(lastWord + 1);
        this.data.forEach((value2, index) => temp[index] = value2);
        this.data = temp;
      } else if (!value) {
        if (word >= this.data.length) {
          return;
        }
        if (lastWord >= this.data.length) {
          lastWord = this.data.length - 1;
          toIndex = this.data.length * 16 - 1;
        }
      }
      if (word === lastWord) {
        this._setBits(word, value, bitsFor(fromIndex, toIndex));
      } else {
        this._setBits(word++, value, bitsFor(fromIndex, 15));
        while (word < lastWord) {
          this.data[word++] = value ? 65535 : 0;
        }
        this._setBits(word, value, bitsFor(0, toIndex));
      }
    }
    _setBits(word, value, mask) {
      if (value) {
        this.data[word] |= mask;
      } else {
        this.data[word] &= 65535 ^ mask;
      }
    }
    get size() {
      return this.data.byteLength * 8;
    }
    hashCode() {
      return MurmurHash_1.MurmurHash.hashCode(this.data, 22);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof BitSet)) {
        return false;
      }
      const len = this.length();
      if (len !== obj.length()) {
        return false;
      }
      if (len === 0) {
        return true;
      }
      let bound = getIndex(len - 1);
      for (let i = 0; i <= bound; i++) {
        if (this.data[i] !== obj.data[i]) {
          return false;
        }
      }
      return true;
    }
    toString() {
      let result = "{";
      let first = true;
      for (let i = this.nextSetBit(0); i >= 0; i = this.nextSetBit(i + 1)) {
        if (first) {
          first = false;
        } else {
          result += ", ";
        }
        result += i;
      }
      result += "}";
      return result;
    }
    xor(set) {
      const data = this.data;
      const other = set.data;
      const minWords = Math.min(data.length, other.length);
      const words = Math.max(data.length, other.length);
      const dest = data.length === words ? data : new Uint16Array(words);
      let lastWord = -1;
      for (let i = 0; i < minWords; i++) {
        let value = dest[i] = data[i] ^ other[i];
        if (value !== 0) {
          lastWord = i;
        }
      }
      const longer = data.length > other.length ? data : other;
      for (let i = minWords; i < words; i++) {
        let value = dest[i] = longer[i];
        if (value !== 0) {
          lastWord = i;
        }
      }
      if (lastWord === -1) {
        this.data = EMPTY_DATA;
      } else if (dest.length === lastWord + 1) {
        this.data = dest;
      } else {
        this.data = dest.slice(0, lastWord + 1);
      }
    }
    clone() {
      return new BitSet(this);
    }
    [Symbol.iterator]() {
      return new BitSetIterator(this.data);
    }
    [util.inspect.custom]() {
      return "BitSet " + this.toString();
    }
  };
  exports.BitSet = BitSet;
  var BitSetIterator = class {
    constructor(data) {
      this.data = data;
      this.index = 0;
      this.mask = 65535;
    }
    next() {
      while (this.index < this.data.length) {
        const bits = this.data[this.index] & this.mask;
        if (bits !== 0) {
          const bitNumber = unIndex(this.index) + findLSBSet(bits);
          this.mask = bitsFor(bitNumber + 1, 15);
          return {done: false, value: bitNumber};
        }
        this.index++;
        this.mask = 65535;
      }
      return {done: true, value: -1};
    }
    [Symbol.iterator]() {
      return this;
    }
  };
});

// node_modules/antlr4ts/atn/ATNConfigSet.js
var require_ATNConfigSet = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATNConfigSet = void 0;
  var Array2DHashMap_1 = require_Array2DHashMap();
  var Array2DHashSet_1 = require_Array2DHashSet();
  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();
  var ATN_1 = require_ATN();
  var ATNConfig_1 = require_ATNConfig();
  var BitSet_1 = require_BitSet();
  var Decorators_1 = require_Decorators();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var PredictionContext_1 = require_PredictionContext();
  var PredictionContextCache_1 = require_PredictionContextCache();
  var SemanticContext_1 = require_SemanticContext();
  var assert = require("assert");
  var Utils3 = require_Utils();
  var KeyTypeEqualityComparer = class {
    hashCode(key) {
      return key.state ^ key.alt;
    }
    equals(a, b) {
      return a.state === b.state && a.alt === b.alt;
    }
  };
  KeyTypeEqualityComparer.INSTANCE = new KeyTypeEqualityComparer();
  function NewKeyedConfigMap(map) {
    if (map) {
      return new Array2DHashMap_1.Array2DHashMap(map);
    } else {
      return new Array2DHashMap_1.Array2DHashMap(KeyTypeEqualityComparer.INSTANCE);
    }
  }
  var ATNConfigSet = class {
    constructor(set, readonly) {
      this._uniqueAlt = 0;
      this._hasSemanticContext = false;
      this._dipsIntoOuterContext = false;
      this.outermostConfigSet = false;
      this.cachedHashCode = -1;
      if (!set) {
        this.mergedConfigs = NewKeyedConfigMap();
        this.unmerged = [];
        this.configs = [];
        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
      } else {
        if (readonly) {
          this.mergedConfigs = void 0;
          this.unmerged = void 0;
        } else if (!set.isReadOnly) {
          this.mergedConfigs = NewKeyedConfigMap(set.mergedConfigs);
          this.unmerged = set.unmerged.slice(0);
        } else {
          this.mergedConfigs = NewKeyedConfigMap();
          this.unmerged = [];
        }
        this.configs = set.configs.slice(0);
        this._dipsIntoOuterContext = set._dipsIntoOuterContext;
        this._hasSemanticContext = set._hasSemanticContext;
        this.outermostConfigSet = set.outermostConfigSet;
        if (readonly || !set.isReadOnly) {
          this._uniqueAlt = set._uniqueAlt;
          this._conflictInfo = set._conflictInfo;
        }
      }
    }
    getRepresentedAlternatives() {
      if (this._conflictInfo != null) {
        return this._conflictInfo.conflictedAlts.clone();
      }
      let alts = new BitSet_1.BitSet();
      for (let config of this) {
        alts.set(config.alt);
      }
      return alts;
    }
    get isReadOnly() {
      return this.mergedConfigs == null;
    }
    get isOutermostConfigSet() {
      return this.outermostConfigSet;
    }
    set isOutermostConfigSet(outermostConfigSet) {
      if (this.outermostConfigSet && !outermostConfigSet) {
        throw new Error("IllegalStateException");
      }
      assert(!outermostConfigSet || !this._dipsIntoOuterContext);
      this.outermostConfigSet = outermostConfigSet;
    }
    getStates() {
      let states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
      for (let c of this.configs) {
        states.add(c.state);
      }
      return states;
    }
    optimizeConfigs(interpreter) {
      if (this.configs.length === 0) {
        return;
      }
      for (let config of this.configs) {
        config.context = interpreter.atn.getCachedContext(config.context);
      }
    }
    clone(readonly) {
      let copy = new ATNConfigSet(this, readonly);
      if (!readonly && this.isReadOnly) {
        copy.addAll(this.configs);
      }
      return copy;
    }
    get size() {
      return this.configs.length;
    }
    get isEmpty() {
      return this.configs.length === 0;
    }
    contains(o) {
      if (!(o instanceof ATNConfig_1.ATNConfig)) {
        return false;
      }
      if (this.mergedConfigs && this.unmerged) {
        let config = o;
        let configKey = this.getKey(config);
        let mergedConfig = this.mergedConfigs.get(configKey);
        if (mergedConfig != null && this.canMerge(config, configKey, mergedConfig)) {
          return mergedConfig.contains(config);
        }
        for (let c of this.unmerged) {
          if (c.contains(o)) {
            return true;
          }
        }
      } else {
        for (let c of this.configs) {
          if (c.contains(o)) {
            return true;
          }
        }
      }
      return false;
    }
    *[Symbol.iterator]() {
      yield* this.configs;
    }
    toArray() {
      return this.configs;
    }
    add(e, contextCache) {
      this.ensureWritable();
      if (!this.mergedConfigs || !this.unmerged) {
        throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
      }
      assert(!this.outermostConfigSet || !e.reachesIntoOuterContext);
      if (contextCache == null) {
        contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
      }
      let addKey;
      let key = this.getKey(e);
      let mergedConfig = this.mergedConfigs.get(key);
      addKey = mergedConfig == null;
      if (mergedConfig != null && this.canMerge(e, key, mergedConfig)) {
        mergedConfig.outerContextDepth = Math.max(mergedConfig.outerContextDepth, e.outerContextDepth);
        if (e.isPrecedenceFilterSuppressed) {
          mergedConfig.isPrecedenceFilterSuppressed = true;
        }
        let joined = PredictionContext_1.PredictionContext.join(mergedConfig.context, e.context, contextCache);
        this.updatePropertiesForMergedConfig(e);
        if (mergedConfig.context === joined) {
          return false;
        }
        mergedConfig.context = joined;
        return true;
      }
      for (let i = 0; i < this.unmerged.length; i++) {
        let unmergedConfig = this.unmerged[i];
        if (this.canMerge(e, key, unmergedConfig)) {
          unmergedConfig.outerContextDepth = Math.max(unmergedConfig.outerContextDepth, e.outerContextDepth);
          if (e.isPrecedenceFilterSuppressed) {
            unmergedConfig.isPrecedenceFilterSuppressed = true;
          }
          let joined = PredictionContext_1.PredictionContext.join(unmergedConfig.context, e.context, contextCache);
          this.updatePropertiesForMergedConfig(e);
          if (unmergedConfig.context === joined) {
            return false;
          }
          unmergedConfig.context = joined;
          if (addKey) {
            this.mergedConfigs.put(key, unmergedConfig);
            this.unmerged.splice(i, 1);
          }
          return true;
        }
      }
      this.configs.push(e);
      if (addKey) {
        this.mergedConfigs.put(key, e);
      } else {
        this.unmerged.push(e);
      }
      this.updatePropertiesForAddedConfig(e);
      return true;
    }
    updatePropertiesForMergedConfig(config) {
      this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
      assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
    }
    updatePropertiesForAddedConfig(config) {
      if (this.configs.length === 1) {
        this._uniqueAlt = config.alt;
      } else if (this._uniqueAlt !== config.alt) {
        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
      }
      this._hasSemanticContext = this._hasSemanticContext || !SemanticContext_1.SemanticContext.NONE.equals(config.semanticContext);
      this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
      assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
    }
    canMerge(left, leftKey, right) {
      if (left.state.stateNumber !== right.state.stateNumber) {
        return false;
      }
      if (leftKey.alt !== right.alt) {
        return false;
      }
      return left.semanticContext.equals(right.semanticContext);
    }
    getKey(e) {
      return {state: e.state.stateNumber, alt: e.alt};
    }
    containsAll(c) {
      for (let o of c) {
        if (!(o instanceof ATNConfig_1.ATNConfig)) {
          return false;
        }
        if (!this.contains(o)) {
          return false;
        }
      }
      return true;
    }
    addAll(c, contextCache) {
      this.ensureWritable();
      let changed = false;
      for (let group of c) {
        if (this.add(group, contextCache)) {
          changed = true;
        }
      }
      return changed;
    }
    clear() {
      this.ensureWritable();
      if (!this.mergedConfigs || !this.unmerged) {
        throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
      }
      this.mergedConfigs.clear();
      this.unmerged.length = 0;
      this.configs.length = 0;
      this._dipsIntoOuterContext = false;
      this._hasSemanticContext = false;
      this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
      this._conflictInfo = void 0;
    }
    equals(obj) {
      if (this === obj) {
        return true;
      }
      if (!(obj instanceof ATNConfigSet)) {
        return false;
      }
      return this.outermostConfigSet === obj.outermostConfigSet && Utils3.equals(this._conflictInfo, obj._conflictInfo) && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.configs, obj.configs);
    }
    hashCode() {
      if (this.isReadOnly && this.cachedHashCode !== -1) {
        return this.cachedHashCode;
      }
      let hashCode = 1;
      hashCode = 5 * hashCode ^ (this.outermostConfigSet ? 1 : 0);
      hashCode = 5 * hashCode ^ ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.hashCode(this.configs);
      if (this.isReadOnly) {
        this.cachedHashCode = hashCode;
      }
      return hashCode;
    }
    toString(showContext) {
      if (showContext == null) {
        showContext = false;
      }
      let buf = "";
      let sortedConfigs = this.configs.slice(0);
      sortedConfigs.sort((o1, o2) => {
        if (o1.alt !== o2.alt) {
          return o1.alt - o2.alt;
        } else if (o1.state.stateNumber !== o2.state.stateNumber) {
          return o1.state.stateNumber - o2.state.stateNumber;
        } else {
          return o1.semanticContext.toString().localeCompare(o2.semanticContext.toString());
        }
      });
      buf += "[";
      for (let i = 0; i < sortedConfigs.length; i++) {
        if (i > 0) {
          buf += ", ";
        }
        buf += sortedConfigs[i].toString(void 0, true, showContext);
      }
      buf += "]";
      if (this._hasSemanticContext) {
        buf += ",hasSemanticContext=" + this._hasSemanticContext;
      }
      if (this._uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
        buf += ",uniqueAlt=" + this._uniqueAlt;
      }
      if (this._conflictInfo != null) {
        buf += ",conflictingAlts=" + this._conflictInfo.conflictedAlts;
        if (!this._conflictInfo.isExact) {
          buf += "*";
        }
      }
      if (this._dipsIntoOuterContext) {
        buf += ",dipsIntoOuterContext";
      }
      return buf.toString();
    }
    get uniqueAlt() {
      return this._uniqueAlt;
    }
    get hasSemanticContext() {
      return this._hasSemanticContext;
    }
    set hasSemanticContext(value) {
      this.ensureWritable();
      this._hasSemanticContext = value;
    }
    get conflictInfo() {
      return this._conflictInfo;
    }
    set conflictInfo(conflictInfo) {
      this.ensureWritable();
      this._conflictInfo = conflictInfo;
    }
    get conflictingAlts() {
      if (this._conflictInfo == null) {
        return void 0;
      }
      return this._conflictInfo.conflictedAlts;
    }
    get isExactConflict() {
      if (this._conflictInfo == null) {
        return false;
      }
      return this._conflictInfo.isExact;
    }
    get dipsIntoOuterContext() {
      return this._dipsIntoOuterContext;
    }
    get(index) {
      return this.configs[index];
    }
    ensureWritable() {
      if (this.isReadOnly) {
        throw new Error("This ATNConfigSet is read only.");
      }
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ATNConfigSet.prototype, "getRepresentedAlternatives", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "isEmpty", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "contains", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, Symbol.iterator, null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "toArray", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "containsAll", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "clear", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], ATNConfigSet.prototype, "hashCode", null);
  exports.ATNConfigSet = ATNConfigSet;
});

// node_modules/antlr4ts/dfa/DFAState.js
var require_DFAState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DFAState = void 0;
  var ATN_1 = require_ATN();
  var BitSet_1 = require_BitSet();
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var PredictionContext_1 = require_PredictionContext();
  var assert = require("assert");
  var DFAState = class {
    constructor(configs) {
      this.stateNumber = -1;
      this.configs = configs;
      this.edges = new Map();
      this.contextEdges = new Map();
    }
    get isContextSensitive() {
      return !!this.contextSymbols;
    }
    isContextSymbol(symbol) {
      if (!this.isContextSensitive) {
        return false;
      }
      return this.contextSymbols.get(symbol);
    }
    setContextSymbol(symbol) {
      assert(this.isContextSensitive);
      this.contextSymbols.set(symbol);
    }
    setContextSensitive(atn) {
      assert(!this.configs.isOutermostConfigSet);
      if (this.isContextSensitive) {
        return;
      }
      if (!this.contextSymbols) {
        this.contextSymbols = new BitSet_1.BitSet();
      }
    }
    get acceptStateInfo() {
      return this._acceptStateInfo;
    }
    set acceptStateInfo(acceptStateInfo) {
      this._acceptStateInfo = acceptStateInfo;
    }
    get isAcceptState() {
      return !!this._acceptStateInfo;
    }
    get prediction() {
      if (!this._acceptStateInfo) {
        return ATN_1.ATN.INVALID_ALT_NUMBER;
      }
      return this._acceptStateInfo.prediction;
    }
    get lexerActionExecutor() {
      if (!this._acceptStateInfo) {
        return void 0;
      }
      return this._acceptStateInfo.lexerActionExecutor;
    }
    getTarget(symbol) {
      return this.edges.get(symbol);
    }
    setTarget(symbol, target) {
      this.edges.set(symbol, target);
    }
    getEdgeMap() {
      return this.edges;
    }
    getContextTarget(invokingState) {
      if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
        invokingState = -1;
      }
      return this.contextEdges.get(invokingState);
    }
    setContextTarget(invokingState, target) {
      if (!this.isContextSensitive) {
        throw new Error("The state is not context sensitive.");
      }
      if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
        invokingState = -1;
      }
      this.contextEdges.set(invokingState, target);
    }
    getContextEdgeMap() {
      let map = new Map(this.contextEdges);
      let existing = map.get(-1);
      if (existing !== void 0) {
        if (map.size === 1) {
          let result = new Map();
          result.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
          return result;
        } else {
          map.delete(-1);
          map.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
        }
      }
      return map;
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize(7);
      hash = MurmurHash_1.MurmurHash.update(hash, this.configs.hashCode());
      hash = MurmurHash_1.MurmurHash.finish(hash, 1);
      return hash;
    }
    equals(o) {
      if (this === o) {
        return true;
      }
      if (!(o instanceof DFAState)) {
        return false;
      }
      let other = o;
      let sameSet = this.configs.equals(other.configs);
      return sameSet;
    }
    toString() {
      let buf = "";
      buf += this.stateNumber + ":" + this.configs;
      if (this.isAcceptState) {
        buf += "=>";
        if (this.predicates) {
          buf += this.predicates;
        } else {
          buf += this.prediction;
        }
      }
      return buf.toString();
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], DFAState.prototype, "configs", void 0);
  __decorate([
    Decorators_1.NotNull
  ], DFAState.prototype, "edges", void 0);
  __decorate([
    Decorators_1.NotNull
  ], DFAState.prototype, "contextEdges", void 0);
  __decorate([
    Decorators_1.Override
  ], DFAState.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], DFAState.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], DFAState.prototype, "toString", null);
  exports.DFAState = DFAState;
  (function(DFAState2) {
    let PredPrediction = class PredPrediction {
      constructor(pred, alt) {
        this.alt = alt;
        this.pred = pred;
      }
      toString() {
        return "(" + this.pred + ", " + this.alt + ")";
      }
    };
    __decorate([
      Decorators_1.NotNull
    ], PredPrediction.prototype, "pred", void 0);
    __decorate([
      Decorators_1.Override
    ], PredPrediction.prototype, "toString", null);
    PredPrediction = __decorate([
      __param(0, Decorators_1.NotNull)
    ], PredPrediction);
    DFAState2.PredPrediction = PredPrediction;
  })(DFAState = exports.DFAState || (exports.DFAState = {}));
});

// node_modules/antlr4ts/atn/ATNSimulator.js
var require_ATNSimulator = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATNSimulator = void 0;
  var ATNConfigSet_1 = require_ATNConfigSet();
  var DFAState_1 = require_DFAState();
  var Decorators_1 = require_Decorators();
  var PredictionContext_1 = require_PredictionContext();
  var ATNSimulator = class ATNSimulator2 {
    constructor(atn) {
      this.atn = atn;
    }
    static get ERROR() {
      if (!ATNSimulator2._ERROR) {
        ATNSimulator2._ERROR = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
        ATNSimulator2._ERROR.stateNumber = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
      }
      return ATNSimulator2._ERROR;
    }
    clearDFA() {
      this.atn.clearDFA();
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ATNSimulator.prototype, "atn", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATNSimulator, "ERROR", null);
  ATNSimulator = __decorate([
    __param(0, Decorators_1.NotNull)
  ], ATNSimulator);
  exports.ATNSimulator = ATNSimulator;
  (function(ATNSimulator2) {
    const RULE_VARIANT_DELIMITER = "$";
    const RULE_LF_VARIANT_MARKER = "$lf$";
    const RULE_NOLF_VARIANT_MARKER = "$nolf$";
  })(ATNSimulator = exports.ATNSimulator || (exports.ATNSimulator = {}));
  exports.ATNSimulator = ATNSimulator;
});

// node_modules/antlr4ts/ConsoleErrorListener.js
var require_ConsoleErrorListener = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ConsoleErrorListener = void 0;
  var ConsoleErrorListener = class {
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
      console.error(`line ${line}:${charPositionInLine} ${msg}`);
    }
  };
  exports.ConsoleErrorListener = ConsoleErrorListener;
  ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();
});

// node_modules/antlr4ts/ProxyErrorListener.js
var require_ProxyErrorListener = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ProxyErrorListener = void 0;
  var Decorators_1 = require_Decorators();
  var ProxyErrorListener = class {
    constructor(delegates) {
      this.delegates = delegates;
      if (!delegates) {
        throw new Error("Invalid delegates");
      }
    }
    getDelegates() {
      return this.delegates;
    }
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
      this.delegates.forEach((listener) => {
        if (listener.syntaxError) {
          listener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);
        }
      });
    }
  };
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull)
  ], ProxyErrorListener.prototype, "syntaxError", null);
  exports.ProxyErrorListener = ProxyErrorListener;
});

// node_modules/antlr4ts/Recognizer.js
var require_Recognizer = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Recognizer = void 0;
  var ConsoleErrorListener_1 = require_ConsoleErrorListener();
  var ProxyErrorListener_1 = require_ProxyErrorListener();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var Utils3 = require_Utils();
  var Recognizer = class {
    constructor() {
      this._listeners = [ConsoleErrorListener_1.ConsoleErrorListener.INSTANCE];
      this._stateNumber = -1;
    }
    getTokenTypeMap() {
      let vocabulary = this.vocabulary;
      let result = Recognizer.tokenTypeMapCache.get(vocabulary);
      if (result == null) {
        let intermediateResult = new Map();
        for (let i = 0; i <= this.atn.maxTokenType; i++) {
          let literalName = vocabulary.getLiteralName(i);
          if (literalName != null) {
            intermediateResult.set(literalName, i);
          }
          let symbolicName = vocabulary.getSymbolicName(i);
          if (symbolicName != null) {
            intermediateResult.set(symbolicName, i);
          }
        }
        intermediateResult.set("EOF", Token_1.Token.EOF);
        result = intermediateResult;
        Recognizer.tokenTypeMapCache.set(vocabulary, result);
      }
      return result;
    }
    getRuleIndexMap() {
      let ruleNames = this.ruleNames;
      if (ruleNames == null) {
        throw new Error("The current recognizer does not provide a list of rule names.");
      }
      let result = Recognizer.ruleIndexMapCache.get(ruleNames);
      if (result == null) {
        result = Utils3.toMap(ruleNames);
        Recognizer.ruleIndexMapCache.set(ruleNames, result);
      }
      return result;
    }
    getTokenType(tokenName) {
      let ttype = this.getTokenTypeMap().get(tokenName);
      if (ttype != null) {
        return ttype;
      }
      return Token_1.Token.INVALID_TYPE;
    }
    get serializedATN() {
      throw new Error("there is no serialized ATN");
    }
    get atn() {
      return this._interp.atn;
    }
    get interpreter() {
      return this._interp;
    }
    set interpreter(interpreter) {
      this._interp = interpreter;
    }
    get parseInfo() {
      return Promise.resolve(void 0);
    }
    getErrorHeader(e) {
      let token = e.getOffendingToken();
      if (!token) {
        return "";
      }
      let line = token.line;
      let charPositionInLine = token.charPositionInLine;
      return "line " + line + ":" + charPositionInLine;
    }
    addErrorListener(listener) {
      if (!listener) {
        throw new TypeError("listener must not be null");
      }
      this._listeners.push(listener);
    }
    removeErrorListener(listener) {
      let position = this._listeners.indexOf(listener);
      if (position !== -1) {
        this._listeners.splice(position, 1);
      }
    }
    removeErrorListeners() {
      this._listeners.length = 0;
    }
    getErrorListeners() {
      return this._listeners.slice(0);
    }
    getErrorListenerDispatch() {
      return new ProxyErrorListener_1.ProxyErrorListener(this.getErrorListeners());
    }
    sempred(_localctx, ruleIndex, actionIndex) {
      return true;
    }
    precpred(localctx, precedence) {
      return true;
    }
    action(_localctx, ruleIndex, actionIndex) {
    }
    get state() {
      return this._stateNumber;
    }
    set state(atnState) {
      this._stateNumber = atnState;
    }
  };
  Recognizer.EOF = -1;
  Recognizer.tokenTypeMapCache = new WeakMap();
  Recognizer.ruleIndexMapCache = new WeakMap();
  __decorate([
    Decorators_1.SuppressWarnings("serial"),
    Decorators_1.NotNull
  ], Recognizer.prototype, "_listeners", void 0);
  __decorate([
    Decorators_1.NotNull
  ], Recognizer.prototype, "getTokenTypeMap", null);
  __decorate([
    Decorators_1.NotNull
  ], Recognizer.prototype, "getRuleIndexMap", null);
  __decorate([
    Decorators_1.NotNull
  ], Recognizer.prototype, "serializedATN", null);
  __decorate([
    Decorators_1.NotNull
  ], Recognizer.prototype, "atn", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], Recognizer.prototype, "interpreter", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], Recognizer.prototype, "getErrorHeader", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], Recognizer.prototype, "addErrorListener", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], Recognizer.prototype, "removeErrorListener", null);
  __decorate([
    Decorators_1.NotNull
  ], Recognizer.prototype, "getErrorListeners", null);
  exports.Recognizer = Recognizer;
});

// node_modules/antlr4ts/VocabularyImpl.js
var require_VocabularyImpl = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.VocabularyImpl = void 0;
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var VocabularyImpl3 = class {
    constructor(literalNames, symbolicNames, displayNames) {
      this.literalNames = literalNames;
      this.symbolicNames = symbolicNames;
      this.displayNames = displayNames;
      this._maxTokenType = Math.max(this.displayNames.length, Math.max(this.literalNames.length, this.symbolicNames.length)) - 1;
    }
    get maxTokenType() {
      return this._maxTokenType;
    }
    getLiteralName(tokenType) {
      if (tokenType >= 0 && tokenType < this.literalNames.length) {
        return this.literalNames[tokenType];
      }
      return void 0;
    }
    getSymbolicName(tokenType) {
      if (tokenType >= 0 && tokenType < this.symbolicNames.length) {
        return this.symbolicNames[tokenType];
      }
      if (tokenType === Token_1.Token.EOF) {
        return "EOF";
      }
      return void 0;
    }
    getDisplayName(tokenType) {
      if (tokenType >= 0 && tokenType < this.displayNames.length) {
        let displayName = this.displayNames[tokenType];
        if (displayName) {
          return displayName;
        }
      }
      let literalName = this.getLiteralName(tokenType);
      if (literalName) {
        return literalName;
      }
      let symbolicName = this.getSymbolicName(tokenType);
      if (symbolicName) {
        return symbolicName;
      }
      return String(tokenType);
    }
  };
  VocabularyImpl3.EMPTY_VOCABULARY = new VocabularyImpl3([], [], []);
  __decorate([
    Decorators_1.NotNull
  ], VocabularyImpl3.prototype, "literalNames", void 0);
  __decorate([
    Decorators_1.NotNull
  ], VocabularyImpl3.prototype, "symbolicNames", void 0);
  __decorate([
    Decorators_1.NotNull
  ], VocabularyImpl3.prototype, "displayNames", void 0);
  __decorate([
    Decorators_1.Override
  ], VocabularyImpl3.prototype, "maxTokenType", null);
  __decorate([
    Decorators_1.Override
  ], VocabularyImpl3.prototype, "getLiteralName", null);
  __decorate([
    Decorators_1.Override
  ], VocabularyImpl3.prototype, "getSymbolicName", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], VocabularyImpl3.prototype, "getDisplayName", null);
  __decorate([
    Decorators_1.NotNull
  ], VocabularyImpl3, "EMPTY_VOCABULARY", void 0);
  exports.VocabularyImpl = VocabularyImpl3;
});

// node_modules/antlr4ts/dfa/DFASerializer.js
var require_DFASerializer = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DFASerializer = void 0;
  var ATNSimulator_1 = require_ATNSimulator();
  var Decorators_1 = require_Decorators();
  var PredictionContext_1 = require_PredictionContext();
  var Recognizer_1 = require_Recognizer();
  var VocabularyImpl_1 = require_VocabularyImpl();
  var DFASerializer = class {
    constructor(dfa, vocabulary, ruleNames, atn) {
      if (vocabulary instanceof Recognizer_1.Recognizer) {
        ruleNames = vocabulary.ruleNames;
        atn = vocabulary.atn;
        vocabulary = vocabulary.vocabulary;
      } else if (!vocabulary) {
        vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
      }
      this.dfa = dfa;
      this.vocabulary = vocabulary;
      this.ruleNames = ruleNames;
      this.atn = atn;
    }
    toString() {
      if (!this.dfa.s0) {
        return "";
      }
      let buf = "";
      if (this.dfa.states) {
        let states = new Array(...this.dfa.states.toArray());
        states.sort((o1, o2) => o1.stateNumber - o2.stateNumber);
        for (let s of states) {
          let edges = s.getEdgeMap();
          let edgeKeys = [...edges.keys()].sort((a, b) => a - b);
          let contextEdges = s.getContextEdgeMap();
          let contextEdgeKeys = [...contextEdges.keys()].sort((a, b) => a - b);
          for (let entry of edgeKeys) {
            let value = edges.get(entry);
            if ((value == null || value === ATNSimulator_1.ATNSimulator.ERROR) && !s.isContextSymbol(entry)) {
              continue;
            }
            let contextSymbol = false;
            buf += this.getStateString(s) + "-" + this.getEdgeLabel(entry) + "->";
            if (s.isContextSymbol(entry)) {
              buf += "!";
              contextSymbol = true;
            }
            let t = value;
            if (t && t.stateNumber !== ATNSimulator_1.ATNSimulator.ERROR.stateNumber) {
              buf += this.getStateString(t) + "\n";
            } else if (contextSymbol) {
              buf += "ctx\n";
            }
          }
          if (s.isContextSensitive) {
            for (let entry of contextEdgeKeys) {
              buf += this.getStateString(s) + "-" + this.getContextLabel(entry) + "->" + this.getStateString(contextEdges.get(entry)) + "\n";
            }
          }
        }
      }
      let output = buf;
      if (output.length === 0) {
        return "";
      }
      return output;
    }
    getContextLabel(i) {
      if (i === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
        return "ctx:EMPTY_FULL";
      } else if (i === PredictionContext_1.PredictionContext.EMPTY_LOCAL_STATE_KEY) {
        return "ctx:EMPTY_LOCAL";
      }
      if (this.atn && i > 0 && i <= this.atn.states.length) {
        let state = this.atn.states[i];
        let ruleIndex = state.ruleIndex;
        if (this.ruleNames && ruleIndex >= 0 && ruleIndex < this.ruleNames.length) {
          return "ctx:" + String(i) + "(" + this.ruleNames[ruleIndex] + ")";
        }
      }
      return "ctx:" + String(i);
    }
    getEdgeLabel(i) {
      return this.vocabulary.getDisplayName(i);
    }
    getStateString(s) {
      if (s === ATNSimulator_1.ATNSimulator.ERROR) {
        return "ERROR";
      }
      let n = s.stateNumber;
      let stateStr = "s" + n;
      if (s.isAcceptState) {
        if (s.predicates) {
          stateStr = ":s" + n + "=>" + s.predicates;
        } else {
          stateStr = ":s" + n + "=>" + s.prediction;
        }
      }
      if (s.isContextSensitive) {
        stateStr += "*";
        for (let config of s.configs) {
          if (config.reachesIntoOuterContext) {
            stateStr += "*";
            break;
          }
        }
      }
      return stateStr;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], DFASerializer.prototype, "dfa", void 0);
  __decorate([
    Decorators_1.NotNull
  ], DFASerializer.prototype, "vocabulary", void 0);
  __decorate([
    Decorators_1.Override
  ], DFASerializer.prototype, "toString", null);
  exports.DFASerializer = DFASerializer;
});

// node_modules/antlr4ts/dfa/LexerDFASerializer.js
var require_LexerDFASerializer = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerDFASerializer = void 0;
  var DFASerializer_1 = require_DFASerializer();
  var Decorators_1 = require_Decorators();
  var VocabularyImpl_1 = require_VocabularyImpl();
  var LexerDFASerializer = class LexerDFASerializer extends DFASerializer_1.DFASerializer {
    constructor(dfa) {
      super(dfa, VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY);
    }
    getEdgeLabel(i) {
      return "'" + String.fromCodePoint(i) + "'";
    }
  };
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], LexerDFASerializer.prototype, "getEdgeLabel", null);
  LexerDFASerializer = __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerDFASerializer);
  exports.LexerDFASerializer = LexerDFASerializer;
});

// node_modules/antlr4ts/atn/StarLoopEntryState.js
var require_StarLoopEntryState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.StarLoopEntryState = void 0;
  var ATNStateType_1 = require_ATNStateType();
  var BitSet_1 = require_BitSet();
  var DecisionState_1 = require_DecisionState();
  var Decorators_1 = require_Decorators();
  var StarLoopEntryState = class extends DecisionState_1.DecisionState {
    constructor() {
      super(...arguments);
      this.precedenceRuleDecision = false;
      this.precedenceLoopbackStates = new BitSet_1.BitSet();
    }
    get stateType() {
      return ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY;
    }
  };
  __decorate([
    Decorators_1.Override
  ], StarLoopEntryState.prototype, "stateType", null);
  exports.StarLoopEntryState = StarLoopEntryState;
});

// node_modules/antlr4ts/dfa/DFA.js
var require_DFA = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DFA = void 0;
  var Array2DHashSet_1 = require_Array2DHashSet();
  var ATNConfigSet_1 = require_ATNConfigSet();
  var DFASerializer_1 = require_DFASerializer();
  var DFAState_1 = require_DFAState();
  var LexerDFASerializer_1 = require_LexerDFASerializer();
  var Decorators_1 = require_Decorators();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var StarLoopEntryState_1 = require_StarLoopEntryState();
  var VocabularyImpl_1 = require_VocabularyImpl();
  var DFA = class DFA {
    constructor(atnStartState, decision = 0) {
      this.states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
      this.nextStateNumber = 0;
      if (!atnStartState.atn) {
        throw new Error("The ATNState must be associated with an ATN");
      }
      this.atnStartState = atnStartState;
      this.atn = atnStartState.atn;
      this.decision = decision;
      let isPrecedenceDfa = false;
      if (atnStartState instanceof StarLoopEntryState_1.StarLoopEntryState) {
        if (atnStartState.precedenceRuleDecision) {
          isPrecedenceDfa = true;
          this.s0 = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
          this.s0full = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
        }
      }
      this.precedenceDfa = isPrecedenceDfa;
    }
    get isPrecedenceDfa() {
      return this.precedenceDfa;
    }
    getPrecedenceStartState(precedence, fullContext) {
      if (!this.isPrecedenceDfa) {
        throw new Error("Only precedence DFAs may contain a precedence start state.");
      }
      if (fullContext) {
        return this.s0full.getTarget(precedence);
      } else {
        return this.s0.getTarget(precedence);
      }
    }
    setPrecedenceStartState(precedence, fullContext, startState) {
      if (!this.isPrecedenceDfa) {
        throw new Error("Only precedence DFAs may contain a precedence start state.");
      }
      if (precedence < 0) {
        return;
      }
      if (fullContext) {
        this.s0full.setTarget(precedence, startState);
      } else {
        this.s0.setTarget(precedence, startState);
      }
    }
    get isEmpty() {
      if (this.isPrecedenceDfa) {
        return this.s0.getEdgeMap().size === 0 && this.s0full.getEdgeMap().size === 0;
      }
      return this.s0 == null && this.s0full == null;
    }
    get isContextSensitive() {
      if (this.isPrecedenceDfa) {
        return this.s0full.getEdgeMap().size > 0;
      }
      return this.s0full != null;
    }
    addState(state) {
      state.stateNumber = this.nextStateNumber++;
      return this.states.getOrAdd(state);
    }
    toString(vocabulary, ruleNames) {
      if (!vocabulary) {
        vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
      }
      if (!this.s0) {
        return "";
      }
      let serializer;
      if (ruleNames) {
        serializer = new DFASerializer_1.DFASerializer(this, vocabulary, ruleNames, this.atnStartState.atn);
      } else {
        serializer = new DFASerializer_1.DFASerializer(this, vocabulary);
      }
      return serializer.toString();
    }
    toLexerString() {
      if (!this.s0) {
        return "";
      }
      let serializer = new LexerDFASerializer_1.LexerDFASerializer(this);
      return serializer.toString();
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], DFA.prototype, "states", void 0);
  __decorate([
    Decorators_1.NotNull
  ], DFA.prototype, "atnStartState", void 0);
  __decorate([
    Decorators_1.NotNull
  ], DFA.prototype, "atn", void 0);
  DFA = __decorate([
    __param(0, Decorators_1.NotNull)
  ], DFA);
  exports.DFA = DFA;
});

// node_modules/antlr4ts/atn/BasicState.js
var require_BasicState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BasicState = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var Decorators_1 = require_Decorators();
  var BasicState = class extends ATNState_1.ATNState {
    get stateType() {
      return ATNStateType_1.ATNStateType.BASIC;
    }
  };
  __decorate([
    Decorators_1.Override
  ], BasicState.prototype, "stateType", null);
  exports.BasicState = BasicState;
});

// node_modules/antlr4ts/atn/InvalidState.js
var require_InvalidState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.InvalidState = void 0;
  var ATNStateType_1 = require_ATNStateType();
  var BasicState_1 = require_BasicState();
  var Decorators_1 = require_Decorators();
  var InvalidState = class extends BasicState_1.BasicState {
    get stateType() {
      return ATNStateType_1.ATNStateType.INVALID_TYPE;
    }
  };
  __decorate([
    Decorators_1.Override
  ], InvalidState.prototype, "stateType", null);
  exports.InvalidState = InvalidState;
});

// node_modules/antlr4ts/atn/SetTransition.js
var require_SetTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SetTransition = void 0;
  var IntervalSet_1 = require_IntervalSet();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var Transition_1 = require_Transition();
  var SetTransition = class SetTransition extends Transition_1.Transition {
    constructor(target, set) {
      super(target);
      if (set == null) {
        set = IntervalSet_1.IntervalSet.of(Token_1.Token.INVALID_TYPE);
      }
      this.set = set;
    }
    get serializationType() {
      return 7;
    }
    get label() {
      return this.set;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return this.set.contains(symbol);
    }
    toString() {
      return this.set.toString();
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], SetTransition.prototype, "set", void 0);
  __decorate([
    Decorators_1.Override
  ], SetTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], SetTransition.prototype, "label", null);
  __decorate([
    Decorators_1.Override
  ], SetTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], SetTransition.prototype, "toString", null);
  SetTransition = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.Nullable)
  ], SetTransition);
  exports.SetTransition = SetTransition;
});

// node_modules/antlr4ts/atn/NotSetTransition.js
var require_NotSetTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.NotSetTransition = void 0;
  var Decorators_1 = require_Decorators();
  var SetTransition_1 = require_SetTransition();
  var NotSetTransition = class NotSetTransition extends SetTransition_1.SetTransition {
    constructor(target, set) {
      super(target, set);
    }
    get serializationType() {
      return 8;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
    }
    toString() {
      return "~" + super.toString();
    }
  };
  __decorate([
    Decorators_1.Override
  ], NotSetTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override
  ], NotSetTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override
  ], NotSetTransition.prototype, "toString", null);
  NotSetTransition = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.Nullable)
  ], NotSetTransition);
  exports.NotSetTransition = NotSetTransition;
});

// node_modules/antlr4ts/atn/RuleStopState.js
var require_RuleStopState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleStopState = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var Decorators_1 = require_Decorators();
  var RuleStopState = class extends ATNState_1.ATNState {
    get nonStopStateNumber() {
      return -1;
    }
    get stateType() {
      return ATNStateType_1.ATNStateType.RULE_STOP;
    }
  };
  __decorate([
    Decorators_1.Override
  ], RuleStopState.prototype, "nonStopStateNumber", null);
  __decorate([
    Decorators_1.Override
  ], RuleStopState.prototype, "stateType", null);
  exports.RuleStopState = RuleStopState;
});

// node_modules/antlr4ts/atn/RuleTransition.js
var require_RuleTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleTransition = void 0;
  var Decorators_1 = require_Decorators();
  var Transition_1 = require_Transition();
  var RuleTransition = class RuleTransition extends Transition_1.Transition {
    constructor(ruleStart, ruleIndex, precedence, followState) {
      super(ruleStart);
      this.tailCall = false;
      this.optimizedTailCall = false;
      this.ruleIndex = ruleIndex;
      this.precedence = precedence;
      this.followState = followState;
    }
    get serializationType() {
      return 3;
    }
    get isEpsilon() {
      return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], RuleTransition.prototype, "followState", void 0);
  __decorate([
    Decorators_1.Override
  ], RuleTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override
  ], RuleTransition.prototype, "isEpsilon", null);
  __decorate([
    Decorators_1.Override
  ], RuleTransition.prototype, "matches", null);
  RuleTransition = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
  ], RuleTransition);
  exports.RuleTransition = RuleTransition;
});

// node_modules/antlr4ts/atn/WildcardTransition.js
var require_WildcardTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.WildcardTransition = void 0;
  var Decorators_1 = require_Decorators();
  var Transition_1 = require_Transition();
  var WildcardTransition = class WildcardTransition extends Transition_1.Transition {
    constructor(target) {
      super(target);
    }
    get serializationType() {
      return 9;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }
    toString() {
      return ".";
    }
  };
  __decorate([
    Decorators_1.Override
  ], WildcardTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override
  ], WildcardTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], WildcardTransition.prototype, "toString", null);
  WildcardTransition = __decorate([
    __param(0, Decorators_1.NotNull)
  ], WildcardTransition);
  exports.WildcardTransition = WildcardTransition;
});

// node_modules/antlr4ts/atn/LL1Analyzer.js
var require_LL1Analyzer = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LL1Analyzer = void 0;
  var AbstractPredicateTransition_1 = require_AbstractPredicateTransition();
  var Array2DHashSet_1 = require_Array2DHashSet();
  var ATNConfig_1 = require_ATNConfig();
  var BitSet_1 = require_BitSet();
  var IntervalSet_1 = require_IntervalSet();
  var Decorators_1 = require_Decorators();
  var NotSetTransition_1 = require_NotSetTransition();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var PredictionContext_1 = require_PredictionContext();
  var RuleStopState_1 = require_RuleStopState();
  var RuleTransition_1 = require_RuleTransition();
  var Token_1 = require_Token();
  var WildcardTransition_1 = require_WildcardTransition();
  var LL1Analyzer = class LL1Analyzer2 {
    constructor(atn) {
      this.atn = atn;
    }
    getDecisionLookahead(s) {
      if (s == null) {
        return void 0;
      }
      let look = new Array(s.numberOfTransitions);
      for (let alt = 0; alt < s.numberOfTransitions; alt++) {
        let current = new IntervalSet_1.IntervalSet();
        look[alt] = current;
        let lookBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        let seeThruPreds = false;
        this._LOOK(s.transition(alt).target, void 0, PredictionContext_1.PredictionContext.EMPTY_LOCAL, current, lookBusy, new BitSet_1.BitSet(), seeThruPreds, false);
        if (current.size === 0 || current.contains(LL1Analyzer2.HIT_PRED)) {
          current = void 0;
          look[alt] = current;
        }
      }
      return look;
    }
    LOOK(s, ctx, stopState) {
      if (stopState === void 0) {
        if (s.atn == null) {
          throw new Error("Illegal state");
        }
        stopState = s.atn.ruleToStopState[s.ruleIndex];
      } else if (stopState === null) {
        stopState = void 0;
      }
      let r = new IntervalSet_1.IntervalSet();
      let seeThruPreds = true;
      let addEOF = true;
      this._LOOK(s, stopState, ctx, r, new Array2DHashSet_1.Array2DHashSet(), new BitSet_1.BitSet(), seeThruPreds, addEOF);
      return r;
    }
    _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
      let c = ATNConfig_1.ATNConfig.create(s, 0, ctx);
      if (!lookBusy.add(c)) {
        return;
      }
      if (s === stopState) {
        if (PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
          look.add(Token_1.Token.EPSILON);
          return;
        } else if (ctx.isEmpty) {
          if (addEOF) {
            look.add(Token_1.Token.EOF);
          }
          return;
        }
      }
      if (s instanceof RuleStopState_1.RuleStopState) {
        if (ctx.isEmpty && !PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
          if (addEOF) {
            look.add(Token_1.Token.EOF);
          }
          return;
        }
        let removed = calledRuleStack.get(s.ruleIndex);
        try {
          calledRuleStack.clear(s.ruleIndex);
          for (let i = 0; i < ctx.size; i++) {
            if (ctx.getReturnState(i) === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
              continue;
            }
            let returnState = this.atn.states[ctx.getReturnState(i)];
            this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          }
        } finally {
          if (removed) {
            calledRuleStack.set(s.ruleIndex);
          }
        }
      }
      let n = s.numberOfTransitions;
      for (let i = 0; i < n; i++) {
        let t = s.transition(i);
        if (t instanceof RuleTransition_1.RuleTransition) {
          if (calledRuleStack.get(t.ruleIndex)) {
            continue;
          }
          let newContext = ctx.getChild(t.followState.stateNumber);
          try {
            calledRuleStack.set(t.ruleIndex);
            this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          } finally {
            calledRuleStack.clear(t.ruleIndex);
          }
        } else if (t instanceof AbstractPredicateTransition_1.AbstractPredicateTransition) {
          if (seeThruPreds) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          } else {
            look.add(LL1Analyzer2.HIT_PRED);
          }
        } else if (t.isEpsilon) {
          this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t instanceof WildcardTransition_1.WildcardTransition) {
          look.addAll(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
        } else {
          let set = t.label;
          if (set != null) {
            if (t instanceof NotSetTransition_1.NotSetTransition) {
              set = set.complement(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
            }
            look.addAll(set);
          }
        }
      }
    }
  };
  LL1Analyzer.HIT_PRED = Token_1.Token.INVALID_TYPE;
  __decorate([
    Decorators_1.NotNull
  ], LL1Analyzer.prototype, "atn", void 0);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], LL1Analyzer.prototype, "LOOK", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
  ], LL1Analyzer.prototype, "_LOOK", null);
  LL1Analyzer = __decorate([
    __param(0, Decorators_1.NotNull)
  ], LL1Analyzer);
  exports.LL1Analyzer = LL1Analyzer;
});

// node_modules/antlr4ts/atn/ATN.js
var require_ATN = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATN = void 0;
  var Array2DHashMap_1 = require_Array2DHashMap();
  var DFA_1 = require_DFA();
  var IntervalSet_1 = require_IntervalSet();
  var InvalidState_1 = require_InvalidState();
  var LL1Analyzer_1 = require_LL1Analyzer();
  var Decorators_1 = require_Decorators();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var PredictionContext_1 = require_PredictionContext();
  var Token_1 = require_Token();
  var assert = require("assert");
  var ATN2 = class ATN {
    constructor(grammarType, maxTokenType) {
      this.states = [];
      this.decisionToState = [];
      this.modeNameToStartState = new Map();
      this.modeToStartState = [];
      this.contextCache = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
      this.decisionToDFA = [];
      this.modeToDFA = [];
      this.LL1Table = new Map();
      this.grammarType = grammarType;
      this.maxTokenType = maxTokenType;
    }
    clearDFA() {
      this.decisionToDFA = new Array(this.decisionToState.length);
      for (let i = 0; i < this.decisionToDFA.length; i++) {
        this.decisionToDFA[i] = new DFA_1.DFA(this.decisionToState[i], i);
      }
      this.modeToDFA = new Array(this.modeToStartState.length);
      for (let i = 0; i < this.modeToDFA.length; i++) {
        this.modeToDFA[i] = new DFA_1.DFA(this.modeToStartState[i]);
      }
      this.contextCache.clear();
      this.LL1Table.clear();
    }
    get contextCacheSize() {
      return this.contextCache.size;
    }
    getCachedContext(context) {
      return PredictionContext_1.PredictionContext.getCachedContext(context, this.contextCache, new PredictionContext_1.PredictionContext.IdentityHashMap());
    }
    getDecisionToDFA() {
      assert(this.decisionToDFA != null && this.decisionToDFA.length === this.decisionToState.length);
      return this.decisionToDFA;
    }
    nextTokens(s, ctx) {
      if (ctx) {
        let anal = new LL1Analyzer_1.LL1Analyzer(this);
        let next = anal.LOOK(s, ctx);
        return next;
      } else {
        if (s.nextTokenWithinRule) {
          return s.nextTokenWithinRule;
        }
        s.nextTokenWithinRule = this.nextTokens(s, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
        s.nextTokenWithinRule.setReadonly(true);
        return s.nextTokenWithinRule;
      }
    }
    addState(state) {
      state.atn = this;
      state.stateNumber = this.states.length;
      this.states.push(state);
    }
    removeState(state) {
      let invalidState = new InvalidState_1.InvalidState();
      invalidState.atn = this;
      invalidState.stateNumber = state.stateNumber;
      this.states[state.stateNumber] = invalidState;
    }
    defineMode(name, s) {
      this.modeNameToStartState.set(name, s);
      this.modeToStartState.push(s);
      this.modeToDFA.push(new DFA_1.DFA(s));
      this.defineDecisionState(s);
    }
    defineDecisionState(s) {
      this.decisionToState.push(s);
      s.decision = this.decisionToState.length - 1;
      this.decisionToDFA.push(new DFA_1.DFA(s, s.decision));
      return s.decision;
    }
    getDecisionState(decision) {
      if (this.decisionToState.length > 0) {
        return this.decisionToState[decision];
      }
      return void 0;
    }
    get numberOfDecisions() {
      return this.decisionToState.length;
    }
    getExpectedTokens(stateNumber, context) {
      if (stateNumber < 0 || stateNumber >= this.states.length) {
        throw new RangeError("Invalid state number.");
      }
      let ctx = context;
      let s = this.states[stateNumber];
      let following = this.nextTokens(s);
      if (!following.contains(Token_1.Token.EPSILON)) {
        return following;
      }
      let expected = new IntervalSet_1.IntervalSet();
      expected.addAll(following);
      expected.remove(Token_1.Token.EPSILON);
      while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
        let invokingState = this.states[ctx.invokingState];
        let rt = invokingState.transition(0);
        following = this.nextTokens(rt.followState);
        expected.addAll(following);
        expected.remove(Token_1.Token.EPSILON);
        ctx = ctx._parent;
      }
      if (following.contains(Token_1.Token.EPSILON)) {
        expected.add(Token_1.Token.EOF);
      }
      return expected;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "states", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "decisionToState", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "modeNameToStartState", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "modeToStartState", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "decisionToDFA", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "modeToDFA", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "nextTokens", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ATN2.prototype, "removeState", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ATN2.prototype, "defineMode", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ATN2.prototype, "defineDecisionState", null);
  __decorate([
    Decorators_1.NotNull
  ], ATN2.prototype, "getExpectedTokens", null);
  ATN2 = __decorate([
    __param(0, Decorators_1.NotNull)
  ], ATN2);
  exports.ATN = ATN2;
  (function(ATN3) {
    ATN3.INVALID_ALT_NUMBER = 0;
  })(ATN2 = exports.ATN || (exports.ATN = {}));
  exports.ATN = ATN2;
});

// node_modules/antlr4ts/atn/LexerIndexedCustomAction.js
var require_LexerIndexedCustomAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerIndexedCustomAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerIndexedCustomAction = class LexerIndexedCustomAction2 {
    constructor(offset, action) {
      this._offset = offset;
      this._action = action;
    }
    get offset() {
      return this._offset;
    }
    get action() {
      return this._action;
    }
    get actionType() {
      return this._action.actionType;
    }
    get isPositionDependent() {
      return true;
    }
    execute(lexer) {
      this._action.execute(lexer);
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this._offset);
      hash = MurmurHash_1.MurmurHash.update(hash, this._action);
      return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof LexerIndexedCustomAction2)) {
        return false;
      }
      return this._offset === obj._offset && this._action.equals(obj._action);
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], LexerIndexedCustomAction.prototype, "action", null);
  __decorate([
    Decorators_1.Override
  ], LexerIndexedCustomAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerIndexedCustomAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override
  ], LexerIndexedCustomAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerIndexedCustomAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerIndexedCustomAction.prototype, "equals", null);
  LexerIndexedCustomAction = __decorate([
    __param(1, Decorators_1.NotNull)
  ], LexerIndexedCustomAction);
  exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
});

// node_modules/antlr4ts/atn/LexerActionExecutor.js
var require_LexerActionExecutor = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerActionExecutor = void 0;
  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();
  var LexerIndexedCustomAction_1 = require_LexerIndexedCustomAction();
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerActionExecutor = class LexerActionExecutor2 {
    constructor(lexerActions) {
      this._lexerActions = lexerActions;
      let hash = MurmurHash_1.MurmurHash.initialize();
      for (let lexerAction of lexerActions) {
        hash = MurmurHash_1.MurmurHash.update(hash, lexerAction);
      }
      this.cachedHashCode = MurmurHash_1.MurmurHash.finish(hash, lexerActions.length);
    }
    static append(lexerActionExecutor, lexerAction) {
      if (!lexerActionExecutor) {
        return new LexerActionExecutor2([lexerAction]);
      }
      let lexerActions = lexerActionExecutor._lexerActions.slice(0);
      lexerActions.push(lexerAction);
      return new LexerActionExecutor2(lexerActions);
    }
    fixOffsetBeforeMatch(offset) {
      let updatedLexerActions;
      for (let i = 0; i < this._lexerActions.length; i++) {
        if (this._lexerActions[i].isPositionDependent && !(this._lexerActions[i] instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction)) {
          if (!updatedLexerActions) {
            updatedLexerActions = this._lexerActions.slice(0);
          }
          updatedLexerActions[i] = new LexerIndexedCustomAction_1.LexerIndexedCustomAction(offset, this._lexerActions[i]);
        }
      }
      if (!updatedLexerActions) {
        return this;
      }
      return new LexerActionExecutor2(updatedLexerActions);
    }
    get lexerActions() {
      return this._lexerActions;
    }
    execute(lexer, input, startIndex) {
      let requiresSeek = false;
      let stopIndex = input.index;
      try {
        for (let lexerAction of this._lexerActions) {
          if (lexerAction instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction) {
            let offset = lexerAction.offset;
            input.seek(startIndex + offset);
            lexerAction = lexerAction.action;
            requiresSeek = startIndex + offset !== stopIndex;
          } else if (lexerAction.isPositionDependent) {
            input.seek(stopIndex);
            requiresSeek = false;
          }
          lexerAction.execute(lexer);
        }
      } finally {
        if (requiresSeek) {
          input.seek(stopIndex);
        }
      }
    }
    hashCode() {
      return this.cachedHashCode;
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof LexerActionExecutor2)) {
        return false;
      }
      return this.cachedHashCode === obj.cachedHashCode && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions, obj._lexerActions);
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], LexerActionExecutor.prototype, "_lexerActions", void 0);
  __decorate([
    Decorators_1.NotNull
  ], LexerActionExecutor.prototype, "lexerActions", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerActionExecutor.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerActionExecutor.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerActionExecutor.prototype, "equals", null);
  __decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
  ], LexerActionExecutor, "append", null);
  LexerActionExecutor = __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerActionExecutor);
  exports.LexerActionExecutor = LexerActionExecutor;
});

// node_modules/antlr4ts/LexerNoViableAltException.js
var require_LexerNoViableAltException = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerNoViableAltException = void 0;
  var RecognitionException_1 = require_RecognitionException();
  var Decorators_1 = require_Decorators();
  var Interval_1 = require_Interval();
  var Utils3 = require_Utils();
  var LexerNoViableAltException = class LexerNoViableAltException extends RecognitionException_1.RecognitionException {
    constructor(lexer, input, startIndex, deadEndConfigs) {
      super(lexer, input);
      this._startIndex = startIndex;
      this._deadEndConfigs = deadEndConfigs;
    }
    get startIndex() {
      return this._startIndex;
    }
    get deadEndConfigs() {
      return this._deadEndConfigs;
    }
    get inputStream() {
      return super.inputStream;
    }
    toString() {
      let symbol = "";
      if (this._startIndex >= 0 && this._startIndex < this.inputStream.size) {
        symbol = this.inputStream.getText(Interval_1.Interval.of(this._startIndex, this._startIndex));
        symbol = Utils3.escapeWhitespace(symbol, false);
      }
      return `LexerNoViableAltException('${symbol}')`;
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerNoViableAltException.prototype, "inputStream", null);
  __decorate([
    Decorators_1.Override
  ], LexerNoViableAltException.prototype, "toString", null);
  LexerNoViableAltException = __decorate([
    __param(1, Decorators_1.NotNull)
  ], LexerNoViableAltException);
  exports.LexerNoViableAltException = LexerNoViableAltException;
});

// node_modules/antlr4ts/atn/OrderedATNConfigSet.js
var require_OrderedATNConfigSet = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.OrderedATNConfigSet = void 0;
  var ATNConfigSet_1 = require_ATNConfigSet();
  var Decorators_1 = require_Decorators();
  var OrderedATNConfigSet = class extends ATNConfigSet_1.ATNConfigSet {
    constructor(set, readonly) {
      if (set != null && readonly != null) {
        super(set, readonly);
      } else {
        super();
      }
    }
    clone(readonly) {
      let copy = new OrderedATNConfigSet(this, readonly);
      if (!readonly && this.isReadOnly) {
        copy.addAll(this);
      }
      return copy;
    }
    getKey(e) {
      return {state: 0, alt: e.hashCode()};
    }
    canMerge(left, leftKey, right) {
      return left.equals(right);
    }
  };
  __decorate([
    Decorators_1.Override
  ], OrderedATNConfigSet.prototype, "clone", null);
  __decorate([
    Decorators_1.Override
  ], OrderedATNConfigSet.prototype, "getKey", null);
  __decorate([
    Decorators_1.Override
  ], OrderedATNConfigSet.prototype, "canMerge", null);
  exports.OrderedATNConfigSet = OrderedATNConfigSet;
});

// node_modules/antlr4ts/atn/LexerATNSimulator.js
var require_LexerATNSimulator = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerATNSimulator = void 0;
  var AcceptStateInfo_1 = require_AcceptStateInfo();
  var ATN_1 = require_ATN();
  var ATNConfig_1 = require_ATNConfig();
  var ATNConfigSet_1 = require_ATNConfigSet();
  var ATNSimulator_1 = require_ATNSimulator();
  var DFAState_1 = require_DFAState();
  var Interval_1 = require_Interval();
  var IntStream_1 = require_IntStream();
  var Lexer_1 = require_Lexer();
  var LexerActionExecutor_1 = require_LexerActionExecutor();
  var LexerNoViableAltException_1 = require_LexerNoViableAltException();
  var Decorators_1 = require_Decorators();
  var OrderedATNConfigSet_1 = require_OrderedATNConfigSet();
  var PredictionContext_1 = require_PredictionContext();
  var RuleStopState_1 = require_RuleStopState();
  var Token_1 = require_Token();
  var assert = require("assert");
  var LexerATNSimulator2 = class LexerATNSimulator3 extends ATNSimulator_1.ATNSimulator {
    constructor(atn, recog) {
      super(atn);
      this.optimize_tail_calls = true;
      this.startIndex = -1;
      this._line = 1;
      this._charPositionInLine = 0;
      this.mode = Lexer_1.Lexer.DEFAULT_MODE;
      this.prevAccept = new LexerATNSimulator3.SimState();
      this.recog = recog;
    }
    copyState(simulator) {
      this._charPositionInLine = simulator.charPositionInLine;
      this._line = simulator._line;
      this.mode = simulator.mode;
      this.startIndex = simulator.startIndex;
    }
    match(input, mode) {
      this.mode = mode;
      let mark = input.mark();
      try {
        this.startIndex = input.index;
        this.prevAccept.reset();
        let s0 = this.atn.modeToDFA[mode].s0;
        if (s0 == null) {
          return this.matchATN(input);
        } else {
          return this.execATN(input, s0);
        }
      } finally {
        input.release(mark);
      }
    }
    reset() {
      this.prevAccept.reset();
      this.startIndex = -1;
      this._line = 1;
      this._charPositionInLine = 0;
      this.mode = Lexer_1.Lexer.DEFAULT_MODE;
    }
    matchATN(input) {
      let startState = this.atn.modeToStartState[this.mode];
      if (LexerATNSimulator3.debug) {
        console.log(`matchATN mode ${this.mode} start: ${startState}`);
      }
      let old_mode = this.mode;
      let s0_closure = this.computeStartState(input, startState);
      let suppressEdge = s0_closure.hasSemanticContext;
      if (suppressEdge) {
        s0_closure.hasSemanticContext = false;
      }
      let next = this.addDFAState(s0_closure);
      if (!suppressEdge) {
        let dfa = this.atn.modeToDFA[this.mode];
        if (!dfa.s0) {
          dfa.s0 = next;
        } else {
          next = dfa.s0;
        }
      }
      let predict = this.execATN(input, next);
      if (LexerATNSimulator3.debug) {
        console.log(`DFA after matchATN: ${this.atn.modeToDFA[old_mode].toLexerString()}`);
      }
      return predict;
    }
    execATN(input, ds0) {
      if (LexerATNSimulator3.debug) {
        console.log(`start state closure=${ds0.configs}`);
      }
      if (ds0.isAcceptState) {
        this.captureSimState(this.prevAccept, input, ds0);
      }
      let t = input.LA(1);
      let s = ds0;
      while (true) {
        if (LexerATNSimulator3.debug) {
          console.log(`execATN loop starting closure: ${s.configs}`);
        }
        let target = this.getExistingTargetState(s, t);
        if (target == null) {
          target = this.computeTargetState(input, s, t);
        }
        if (target === ATNSimulator_1.ATNSimulator.ERROR) {
          break;
        }
        if (t !== IntStream_1.IntStream.EOF) {
          this.consume(input);
        }
        if (target.isAcceptState) {
          this.captureSimState(this.prevAccept, input, target);
          if (t === IntStream_1.IntStream.EOF) {
            break;
          }
        }
        t = input.LA(1);
        s = target;
      }
      return this.failOrAccept(this.prevAccept, input, s.configs, t);
    }
    getExistingTargetState(s, t) {
      let target = s.getTarget(t);
      if (LexerATNSimulator3.debug && target != null) {
        console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
      }
      return target;
    }
    computeTargetState(input, s, t) {
      let reach = new OrderedATNConfigSet_1.OrderedATNConfigSet();
      this.getReachableConfigSet(input, s.configs, reach, t);
      if (reach.isEmpty) {
        if (!reach.hasSemanticContext) {
          this.addDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
        }
        return ATNSimulator_1.ATNSimulator.ERROR;
      }
      return this.addDFAEdge(s, t, reach);
    }
    failOrAccept(prevAccept, input, reach, t) {
      if (prevAccept.dfaState != null) {
        let lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
        this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.charPos);
        return prevAccept.dfaState.prediction;
      } else {
        if (t === IntStream_1.IntStream.EOF && input.index === this.startIndex) {
          return Token_1.Token.EOF;
        }
        throw new LexerNoViableAltException_1.LexerNoViableAltException(this.recog, input, this.startIndex, reach);
      }
    }
    getReachableConfigSet(input, closure, reach, t) {
      let skipAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
      for (let c of closure) {
        let currentAltReachedAcceptState = c.alt === skipAlt;
        if (currentAltReachedAcceptState && c.hasPassedThroughNonGreedyDecision) {
          continue;
        }
        if (LexerATNSimulator3.debug) {
          console.log(`testing ${this.getTokenName(t)} at ${c.toString(this.recog, true)}`);
        }
        let n = c.state.numberOfOptimizedTransitions;
        for (let ti = 0; ti < n; ti++) {
          let trans = c.state.getOptimizedTransition(ti);
          let target = this.getReachableTarget(trans, t);
          if (target != null) {
            let lexerActionExecutor = c.lexerActionExecutor;
            let config;
            if (lexerActionExecutor != null) {
              lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
              config = c.transform(target, true, lexerActionExecutor);
            } else {
              assert(c.lexerActionExecutor == null);
              config = c.transform(target, true);
            }
            let treatEofAsEpsilon = t === IntStream_1.IntStream.EOF;
            if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
              skipAlt = c.alt;
              break;
            }
          }
        }
      }
    }
    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {
      if (LexerATNSimulator3.debug) {
        console.log(`ACTION ${lexerActionExecutor}`);
      }
      input.seek(index);
      this._line = line;
      this._charPositionInLine = charPos;
      if (lexerActionExecutor != null && this.recog != null) {
        lexerActionExecutor.execute(this.recog, input, startIndex);
      }
    }
    getReachableTarget(trans, t) {
      if (trans.matches(t, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
        return trans.target;
      }
      return void 0;
    }
    computeStartState(input, p) {
      let initialContext = PredictionContext_1.PredictionContext.EMPTY_FULL;
      let configs = new OrderedATNConfigSet_1.OrderedATNConfigSet();
      for (let i = 0; i < p.numberOfTransitions; i++) {
        let target = p.transition(i).target;
        let c = ATNConfig_1.ATNConfig.create(target, i + 1, initialContext);
        this.closure(input, c, configs, false, false, false);
      }
      return configs;
    }
    closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
      if (LexerATNSimulator3.debug) {
        console.log("closure(" + config.toString(this.recog, true) + ")");
      }
      if (config.state instanceof RuleStopState_1.RuleStopState) {
        if (LexerATNSimulator3.debug) {
          if (this.recog != null) {
            console.log(`closure at ${this.recog.ruleNames[config.state.ruleIndex]} rule stop ${config}`);
          } else {
            console.log(`closure at rule stop ${config}`);
          }
        }
        let context = config.context;
        if (context.isEmpty) {
          configs.add(config);
          return true;
        } else if (context.hasEmpty) {
          configs.add(config.transform(config.state, true, PredictionContext_1.PredictionContext.EMPTY_FULL));
          currentAltReachedAcceptState = true;
        }
        for (let i = 0; i < context.size; i++) {
          let returnStateNumber = context.getReturnState(i);
          if (returnStateNumber === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            continue;
          }
          let newContext = context.getParent(i);
          let returnState = this.atn.states[returnStateNumber];
          let c = config.transform(returnState, false, newContext);
          currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
        }
        return currentAltReachedAcceptState;
      }
      if (!config.state.onlyHasEpsilonTransitions) {
        if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision) {
          configs.add(config);
        }
      }
      let p = config.state;
      for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
        let t = p.getOptimizedTransition(i);
        let c = this.getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon);
        if (c != null) {
          currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
        }
      }
      return currentAltReachedAcceptState;
    }
    getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon) {
      let c;
      switch (t.serializationType) {
        case 3:
          let ruleTransition = t;
          if (this.optimize_tail_calls && ruleTransition.optimizedTailCall && !config.context.hasEmpty) {
            c = config.transform(t.target, true);
          } else {
            let newContext = config.context.getChild(ruleTransition.followState.stateNumber);
            c = config.transform(t.target, true, newContext);
          }
          break;
        case 10:
          throw new Error("Precedence predicates are not supported in lexers.");
        case 4:
          let pt = t;
          if (LexerATNSimulator3.debug) {
            console.log("EVAL rule " + pt.ruleIndex + ":" + pt.predIndex);
          }
          configs.hasSemanticContext = true;
          if (this.evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative)) {
            c = config.transform(t.target, true);
          } else {
            c = void 0;
          }
          break;
        case 6:
          if (config.context.hasEmpty) {
            let lexerActionExecutor = LexerActionExecutor_1.LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[t.actionIndex]);
            c = config.transform(t.target, true, lexerActionExecutor);
            break;
          } else {
            c = config.transform(t.target, true);
            break;
          }
        case 1:
          c = config.transform(t.target, true);
          break;
        case 5:
        case 2:
        case 7:
          if (treatEofAsEpsilon) {
            if (t.matches(IntStream_1.IntStream.EOF, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
              c = config.transform(t.target, false);
              break;
            }
          }
          c = void 0;
          break;
        default:
          c = void 0;
          break;
      }
      return c;
    }
    evaluatePredicate(input, ruleIndex, predIndex, speculative) {
      if (this.recog == null) {
        return true;
      }
      if (!speculative) {
        return this.recog.sempred(void 0, ruleIndex, predIndex);
      }
      let savedCharPositionInLine = this._charPositionInLine;
      let savedLine = this._line;
      let index = input.index;
      let marker = input.mark();
      try {
        this.consume(input);
        return this.recog.sempred(void 0, ruleIndex, predIndex);
      } finally {
        this._charPositionInLine = savedCharPositionInLine;
        this._line = savedLine;
        input.seek(index);
        input.release(marker);
      }
    }
    captureSimState(settings, input, dfaState) {
      settings.index = input.index;
      settings.line = this._line;
      settings.charPos = this._charPositionInLine;
      settings.dfaState = dfaState;
    }
    addDFAEdge(p, t, q) {
      if (q instanceof ATNConfigSet_1.ATNConfigSet) {
        let suppressEdge = q.hasSemanticContext;
        if (suppressEdge) {
          q.hasSemanticContext = false;
        }
        let to = this.addDFAState(q);
        if (suppressEdge) {
          return to;
        }
        this.addDFAEdge(p, t, to);
        return to;
      } else {
        if (LexerATNSimulator3.debug) {
          console.log("EDGE " + p + " -> " + q + " upon " + String.fromCharCode(t));
        }
        if (p != null) {
          p.setTarget(t, q);
        }
      }
    }
    addDFAState(configs) {
      assert(!configs.hasSemanticContext);
      let proposed = new DFAState_1.DFAState(configs);
      let existing = this.atn.modeToDFA[this.mode].states.get(proposed);
      if (existing != null) {
        return existing;
      }
      configs.optimizeConfigs(this);
      let newState = new DFAState_1.DFAState(configs.clone(true));
      let firstConfigWithRuleStopState;
      for (let c of configs) {
        if (c.state instanceof RuleStopState_1.RuleStopState) {
          firstConfigWithRuleStopState = c;
          break;
        }
      }
      if (firstConfigWithRuleStopState != null) {
        let prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
        let lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
        newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(prediction, lexerActionExecutor);
      }
      return this.atn.modeToDFA[this.mode].addState(newState);
    }
    getDFA(mode) {
      return this.atn.modeToDFA[mode];
    }
    getText(input) {
      return input.getText(Interval_1.Interval.of(this.startIndex, input.index - 1));
    }
    get line() {
      return this._line;
    }
    set line(line) {
      this._line = line;
    }
    get charPositionInLine() {
      return this._charPositionInLine;
    }
    set charPositionInLine(charPositionInLine) {
      this._charPositionInLine = charPositionInLine;
    }
    consume(input) {
      let curChar = input.LA(1);
      if (curChar === "\n".charCodeAt(0)) {
        this._line++;
        this._charPositionInLine = 0;
      } else {
        this._charPositionInLine++;
      }
      input.consume();
    }
    getTokenName(t) {
      if (t === -1) {
        return "EOF";
      }
      return "'" + String.fromCharCode(t) + "'";
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], LexerATNSimulator2.prototype, "prevAccept", void 0);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "copyState", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "match", null);
  __decorate([
    Decorators_1.Override
  ], LexerATNSimulator2.prototype, "reset", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "matchATN", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "execATN", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "getExistingTargetState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "computeTargetState", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "getReachableConfigSet", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "accept", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "computeStartState", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "closure", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "getEpsilonTarget", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "evaluatePredicate", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "captureSimState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "addDFAState", null);
  __decorate([
    Decorators_1.NotNull
  ], LexerATNSimulator2.prototype, "getDFA", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "getText", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2.prototype, "consume", null);
  __decorate([
    Decorators_1.NotNull
  ], LexerATNSimulator2.prototype, "getTokenName", null);
  LexerATNSimulator2 = __decorate([
    __param(0, Decorators_1.NotNull)
  ], LexerATNSimulator2);
  exports.LexerATNSimulator = LexerATNSimulator2;
  (function(LexerATNSimulator3) {
    LexerATNSimulator3.debug = false;
    LexerATNSimulator3.dfa_debug = false;
    class SimState {
      constructor() {
        this.index = -1;
        this.line = 0;
        this.charPos = -1;
      }
      reset() {
        this.index = -1;
        this.line = 0;
        this.charPos = -1;
        this.dfaState = void 0;
      }
    }
    LexerATNSimulator3.SimState = SimState;
  })(LexerATNSimulator2 = exports.LexerATNSimulator || (exports.LexerATNSimulator = {}));
  exports.LexerATNSimulator = LexerATNSimulator2;
});

// node_modules/antlr4ts/Lexer.js
var require_Lexer = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Lexer = void 0;
  var CommonTokenFactory_1 = require_CommonTokenFactory();
  var IntegerStack_1 = require_IntegerStack();
  var Interval_1 = require_Interval();
  var IntStream_1 = require_IntStream();
  var LexerATNSimulator_1 = require_LexerATNSimulator();
  var LexerNoViableAltException_1 = require_LexerNoViableAltException();
  var Decorators_1 = require_Decorators();
  var Recognizer_1 = require_Recognizer();
  var Token_1 = require_Token();
  var Lexer2 = class extends Recognizer_1.Recognizer {
    constructor(input) {
      super();
      this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
      this._tokenStartCharIndex = -1;
      this._tokenStartLine = 0;
      this._tokenStartCharPositionInLine = 0;
      this._hitEOF = false;
      this._channel = 0;
      this._type = 0;
      this._modeStack = new IntegerStack_1.IntegerStack();
      this._mode = Lexer2.DEFAULT_MODE;
      this._input = input;
      this._tokenFactorySourcePair = {source: this, stream: input};
    }
    static get DEFAULT_TOKEN_CHANNEL() {
      return Token_1.Token.DEFAULT_CHANNEL;
    }
    static get HIDDEN() {
      return Token_1.Token.HIDDEN_CHANNEL;
    }
    reset(resetInput) {
      if (resetInput === void 0 || resetInput) {
        this._input.seek(0);
      }
      this._token = void 0;
      this._type = Token_1.Token.INVALID_TYPE;
      this._channel = Token_1.Token.DEFAULT_CHANNEL;
      this._tokenStartCharIndex = -1;
      this._tokenStartCharPositionInLine = -1;
      this._tokenStartLine = -1;
      this._text = void 0;
      this._hitEOF = false;
      this._mode = Lexer2.DEFAULT_MODE;
      this._modeStack.clear();
      this.interpreter.reset();
    }
    nextToken() {
      if (this._input == null) {
        throw new Error("nextToken requires a non-null input stream.");
      }
      let tokenStartMarker = this._input.mark();
      try {
        outer:
          while (true) {
            if (this._hitEOF) {
              return this.emitEOF();
            }
            this._token = void 0;
            this._channel = Token_1.Token.DEFAULT_CHANNEL;
            this._tokenStartCharIndex = this._input.index;
            this._tokenStartCharPositionInLine = this.interpreter.charPositionInLine;
            this._tokenStartLine = this.interpreter.line;
            this._text = void 0;
            do {
              this._type = Token_1.Token.INVALID_TYPE;
              let ttype;
              try {
                ttype = this.interpreter.match(this._input, this._mode);
              } catch (e) {
                if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                  this.notifyListeners(e);
                  this.recover(e);
                  ttype = Lexer2.SKIP;
                } else {
                  throw e;
                }
              }
              if (this._input.LA(1) === IntStream_1.IntStream.EOF) {
                this._hitEOF = true;
              }
              if (this._type === Token_1.Token.INVALID_TYPE) {
                this._type = ttype;
              }
              if (this._type === Lexer2.SKIP) {
                continue outer;
              }
            } while (this._type === Lexer2.MORE);
            if (this._token == null) {
              return this.emit();
            }
            return this._token;
          }
      } finally {
        this._input.release(tokenStartMarker);
      }
    }
    skip() {
      this._type = Lexer2.SKIP;
    }
    more() {
      this._type = Lexer2.MORE;
    }
    mode(m) {
      this._mode = m;
    }
    pushMode(m) {
      if (LexerATNSimulator_1.LexerATNSimulator.debug) {
        console.log("pushMode " + m);
      }
      this._modeStack.push(this._mode);
      this.mode(m);
    }
    popMode() {
      if (this._modeStack.isEmpty) {
        throw new Error("EmptyStackException");
      }
      if (LexerATNSimulator_1.LexerATNSimulator.debug) {
        console.log("popMode back to " + this._modeStack.peek());
      }
      this.mode(this._modeStack.pop());
      return this._mode;
    }
    get tokenFactory() {
      return this._factory;
    }
    set tokenFactory(factory) {
      this._factory = factory;
    }
    get inputStream() {
      return this._input;
    }
    set inputStream(input) {
      this.reset(false);
      this._input = input;
      this._tokenFactorySourcePair = {source: this, stream: this._input};
    }
    get sourceName() {
      return this._input.sourceName;
    }
    emit(token) {
      if (!token) {
        token = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.charIndex - 1, this._tokenStartLine, this._tokenStartCharPositionInLine);
      }
      this._token = token;
      return token;
    }
    emitEOF() {
      let cpos = this.charPositionInLine;
      let line = this.line;
      let eof = this._factory.create(this._tokenFactorySourcePair, Token_1.Token.EOF, void 0, Token_1.Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, line, cpos);
      this.emit(eof);
      return eof;
    }
    get line() {
      return this.interpreter.line;
    }
    set line(line) {
      this.interpreter.line = line;
    }
    get charPositionInLine() {
      return this.interpreter.charPositionInLine;
    }
    set charPositionInLine(charPositionInLine) {
      this.interpreter.charPositionInLine = charPositionInLine;
    }
    get charIndex() {
      return this._input.index;
    }
    get text() {
      if (this._text != null) {
        return this._text;
      }
      return this.interpreter.getText(this._input);
    }
    set text(text) {
      this._text = text;
    }
    get token() {
      return this._token;
    }
    set token(_token) {
      this._token = _token;
    }
    set type(ttype) {
      this._type = ttype;
    }
    get type() {
      return this._type;
    }
    set channel(channel) {
      this._channel = channel;
    }
    get channel() {
      return this._channel;
    }
    getAllTokens() {
      let tokens2 = [];
      let t = this.nextToken();
      while (t.type !== Token_1.Token.EOF) {
        tokens2.push(t);
        t = this.nextToken();
      }
      return tokens2;
    }
    notifyListeners(e) {
      let text = this._input.getText(Interval_1.Interval.of(this._tokenStartCharIndex, this._input.index));
      let msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
      let listener = this.getErrorListenerDispatch();
      if (listener.syntaxError) {
        listener.syntaxError(this, void 0, this._tokenStartLine, this._tokenStartCharPositionInLine, msg, e);
      }
    }
    getErrorDisplay(s) {
      if (typeof s === "number") {
        switch (s) {
          case Token_1.Token.EOF:
            return "<EOF>";
          case 10:
            return "\\n";
          case 9:
            return "\\t";
          case 13:
            return "\\r";
        }
        return String.fromCharCode(s);
      }
      return s.replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r");
    }
    getCharErrorDisplay(c) {
      let s = this.getErrorDisplay(c);
      return "'" + s + "'";
    }
    recover(re) {
      if (re instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
        if (this._input.LA(1) !== IntStream_1.IntStream.EOF) {
          this.interpreter.consume(this._input);
        }
      } else {
        this._input.consume();
      }
    }
  };
  Lexer2.DEFAULT_MODE = 0;
  Lexer2.MORE = -2;
  Lexer2.SKIP = -3;
  Lexer2.MIN_CHAR_VALUE = 0;
  Lexer2.MAX_CHAR_VALUE = 1114111;
  __decorate([
    Decorators_1.Override
  ], Lexer2.prototype, "nextToken", null);
  __decorate([
    Decorators_1.Override
  ], Lexer2.prototype, "tokenFactory", null);
  __decorate([
    Decorators_1.Override
  ], Lexer2.prototype, "inputStream", null);
  __decorate([
    Decorators_1.Override
  ], Lexer2.prototype, "sourceName", null);
  __decorate([
    Decorators_1.Override
  ], Lexer2.prototype, "line", null);
  __decorate([
    Decorators_1.Override
  ], Lexer2.prototype, "charPositionInLine", null);
  exports.Lexer = Lexer2;
});

// node_modules/antlr4ts/misc/IntervalSet.js
var require_IntervalSet = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.IntervalSet = void 0;
  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();
  var IntegerList_1 = require_IntegerList();
  var Interval_1 = require_Interval();
  var Lexer_1 = require_Lexer();
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var IntervalSet = class {
    constructor(intervals) {
      this.readonly = false;
      if (intervals != null) {
        this._intervals = intervals.slice(0);
      } else {
        this._intervals = [];
      }
    }
    static get COMPLETE_CHAR_SET() {
      if (IntervalSet._COMPLETE_CHAR_SET === void 0) {
        IntervalSet._COMPLETE_CHAR_SET = IntervalSet.of(Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE);
        IntervalSet._COMPLETE_CHAR_SET.setReadonly(true);
      }
      return IntervalSet._COMPLETE_CHAR_SET;
    }
    static get EMPTY_SET() {
      if (IntervalSet._EMPTY_SET == null) {
        IntervalSet._EMPTY_SET = new IntervalSet();
        IntervalSet._EMPTY_SET.setReadonly(true);
      }
      return IntervalSet._EMPTY_SET;
    }
    static of(a, b = a) {
      let s = new IntervalSet();
      s.add(a, b);
      return s;
    }
    clear() {
      if (this.readonly) {
        throw new Error("can't alter readonly IntervalSet");
      }
      this._intervals.length = 0;
    }
    add(a, b = a) {
      this.addRange(Interval_1.Interval.of(a, b));
    }
    addRange(addition) {
      if (this.readonly) {
        throw new Error("can't alter readonly IntervalSet");
      }
      if (addition.b < addition.a) {
        return;
      }
      for (let i = 0; i < this._intervals.length; i++) {
        let r = this._intervals[i];
        if (addition.equals(r)) {
          return;
        }
        if (addition.adjacent(r) || !addition.disjoint(r)) {
          let bigger = addition.union(r);
          this._intervals[i] = bigger;
          while (i < this._intervals.length - 1) {
            i++;
            let next = this._intervals[i];
            if (!bigger.adjacent(next) && bigger.disjoint(next)) {
              break;
            }
            this._intervals.splice(i, 1);
            i--;
            this._intervals[i] = bigger.union(next);
          }
          return;
        }
        if (addition.startsBeforeDisjoint(r)) {
          this._intervals.splice(i, 0, addition);
          return;
        }
      }
      this._intervals.push(addition);
    }
    static or(sets) {
      let r = new IntervalSet();
      for (let s of sets) {
        r.addAll(s);
      }
      return r;
    }
    addAll(set) {
      if (set == null) {
        return this;
      }
      if (set instanceof IntervalSet) {
        let other = set;
        let n = other._intervals.length;
        for (let i = 0; i < n; i++) {
          let I = other._intervals[i];
          this.add(I.a, I.b);
        }
      } else {
        for (let value of set.toArray()) {
          this.add(value);
        }
      }
      return this;
    }
    complementRange(minElement, maxElement) {
      return this.complement(IntervalSet.of(minElement, maxElement));
    }
    complement(vocabulary) {
      if (vocabulary.isNil) {
        return IntervalSet.EMPTY_SET;
      }
      let vocabularyIS;
      if (vocabulary instanceof IntervalSet) {
        vocabularyIS = vocabulary;
      } else {
        vocabularyIS = new IntervalSet();
        vocabularyIS.addAll(vocabulary);
      }
      return vocabularyIS.subtract(this);
    }
    subtract(a) {
      if (a == null || a.isNil) {
        return new IntervalSet(this._intervals);
      }
      if (a instanceof IntervalSet) {
        return IntervalSet.subtract(this, a);
      }
      let other = new IntervalSet();
      other.addAll(a);
      return IntervalSet.subtract(this, other);
    }
    static subtract(left, right) {
      if (left.isNil) {
        return new IntervalSet();
      }
      let result = new IntervalSet(left._intervals);
      if (right.isNil) {
        return result;
      }
      let resultI = 0;
      let rightI = 0;
      while (resultI < result._intervals.length && rightI < right._intervals.length) {
        let resultInterval = result._intervals[resultI];
        let rightInterval = right._intervals[rightI];
        if (rightInterval.b < resultInterval.a) {
          rightI++;
          continue;
        }
        if (rightInterval.a > resultInterval.b) {
          resultI++;
          continue;
        }
        let beforeCurrent;
        let afterCurrent;
        if (rightInterval.a > resultInterval.a) {
          beforeCurrent = new Interval_1.Interval(resultInterval.a, rightInterval.a - 1);
        }
        if (rightInterval.b < resultInterval.b) {
          afterCurrent = new Interval_1.Interval(rightInterval.b + 1, resultInterval.b);
        }
        if (beforeCurrent) {
          if (afterCurrent) {
            result._intervals[resultI] = beforeCurrent;
            result._intervals.splice(resultI + 1, 0, afterCurrent);
            resultI++;
            rightI++;
            continue;
          } else {
            result._intervals[resultI] = beforeCurrent;
            resultI++;
            continue;
          }
        } else {
          if (afterCurrent) {
            result._intervals[resultI] = afterCurrent;
            rightI++;
            continue;
          } else {
            result._intervals.splice(resultI, 1);
            continue;
          }
        }
      }
      return result;
    }
    or(a) {
      let o = new IntervalSet();
      o.addAll(this);
      o.addAll(a);
      return o;
    }
    and(other) {
      if (other.isNil) {
        return new IntervalSet();
      }
      let myIntervals = this._intervals;
      let theirIntervals = other._intervals;
      let intersection;
      let mySize = myIntervals.length;
      let theirSize = theirIntervals.length;
      let i = 0;
      let j = 0;
      while (i < mySize && j < theirSize) {
        let mine = myIntervals[i];
        let theirs = theirIntervals[j];
        if (mine.startsBeforeDisjoint(theirs)) {
          i++;
        } else if (theirs.startsBeforeDisjoint(mine)) {
          j++;
        } else if (mine.properlyContains(theirs)) {
          if (!intersection) {
            intersection = new IntervalSet();
          }
          intersection.addRange(mine.intersection(theirs));
          j++;
        } else if (theirs.properlyContains(mine)) {
          if (!intersection) {
            intersection = new IntervalSet();
          }
          intersection.addRange(mine.intersection(theirs));
          i++;
        } else if (!mine.disjoint(theirs)) {
          if (!intersection) {
            intersection = new IntervalSet();
          }
          intersection.addRange(mine.intersection(theirs));
          if (mine.startsAfterNonDisjoint(theirs)) {
            j++;
          } else if (theirs.startsAfterNonDisjoint(mine)) {
            i++;
          }
        }
      }
      if (!intersection) {
        return new IntervalSet();
      }
      return intersection;
    }
    contains(el) {
      let n = this._intervals.length;
      let l = 0;
      let r = n - 1;
      while (l <= r) {
        let m = l + r >> 1;
        let I = this._intervals[m];
        let a = I.a;
        let b = I.b;
        if (b < el) {
          l = m + 1;
        } else if (a > el) {
          r = m - 1;
        } else {
          return true;
        }
      }
      return false;
    }
    get isNil() {
      return this._intervals == null || this._intervals.length === 0;
    }
    get maxElement() {
      if (this.isNil) {
        throw new RangeError("set is empty");
      }
      let last = this._intervals[this._intervals.length - 1];
      return last.b;
    }
    get minElement() {
      if (this.isNil) {
        throw new RangeError("set is empty");
      }
      return this._intervals[0].a;
    }
    get intervals() {
      return this._intervals;
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      for (let I of this._intervals) {
        hash = MurmurHash_1.MurmurHash.update(hash, I.a);
        hash = MurmurHash_1.MurmurHash.update(hash, I.b);
      }
      hash = MurmurHash_1.MurmurHash.finish(hash, this._intervals.length * 2);
      return hash;
    }
    equals(o) {
      if (o == null || !(o instanceof IntervalSet)) {
        return false;
      }
      return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._intervals, o._intervals);
    }
    toString(elemAreChar = false) {
      let buf = "";
      if (this._intervals == null || this._intervals.length === 0) {
        return "{}";
      }
      if (this.size > 1) {
        buf += "{";
      }
      let first = true;
      for (let I of this._intervals) {
        if (first) {
          first = false;
        } else {
          buf += ", ";
        }
        let a = I.a;
        let b = I.b;
        if (a === b) {
          if (a === Token_1.Token.EOF) {
            buf += "<EOF>";
          } else if (elemAreChar) {
            buf += "'" + String.fromCodePoint(a) + "'";
          } else {
            buf += a;
          }
        } else {
          if (elemAreChar) {
            buf += "'" + String.fromCodePoint(a) + "'..'" + String.fromCodePoint(b) + "'";
          } else {
            buf += a + ".." + b;
          }
        }
      }
      if (this.size > 1) {
        buf += "}";
      }
      return buf;
    }
    toStringVocabulary(vocabulary) {
      if (this._intervals == null || this._intervals.length === 0) {
        return "{}";
      }
      let buf = "";
      if (this.size > 1) {
        buf += "{";
      }
      let first = true;
      for (let I of this._intervals) {
        if (first) {
          first = false;
        } else {
          buf += ", ";
        }
        let a = I.a;
        let b = I.b;
        if (a === b) {
          buf += this.elementName(vocabulary, a);
        } else {
          for (let i = a; i <= b; i++) {
            if (i > a) {
              buf += ", ";
            }
            buf += this.elementName(vocabulary, i);
          }
        }
      }
      if (this.size > 1) {
        buf += "}";
      }
      return buf;
    }
    elementName(vocabulary, a) {
      if (a === Token_1.Token.EOF) {
        return "<EOF>";
      } else if (a === Token_1.Token.EPSILON) {
        return "<EPSILON>";
      } else {
        return vocabulary.getDisplayName(a);
      }
    }
    get size() {
      let n = 0;
      let numIntervals = this._intervals.length;
      if (numIntervals === 1) {
        let firstInterval = this._intervals[0];
        return firstInterval.b - firstInterval.a + 1;
      }
      for (let i = 0; i < numIntervals; i++) {
        let I = this._intervals[i];
        n += I.b - I.a + 1;
      }
      return n;
    }
    toIntegerList() {
      let values = new IntegerList_1.IntegerList(this.size);
      let n = this._intervals.length;
      for (let i = 0; i < n; i++) {
        let I = this._intervals[i];
        let a = I.a;
        let b = I.b;
        for (let v = a; v <= b; v++) {
          values.add(v);
        }
      }
      return values;
    }
    toSet() {
      let s = new Set();
      for (let I of this._intervals) {
        let a = I.a;
        let b = I.b;
        for (let v = a; v <= b; v++) {
          s.add(v);
        }
      }
      return s;
    }
    toArray() {
      let values = new Array();
      let n = this._intervals.length;
      for (let i = 0; i < n; i++) {
        let I = this._intervals[i];
        let a = I.a;
        let b = I.b;
        for (let v = a; v <= b; v++) {
          values.push(v);
        }
      }
      return values;
    }
    remove(el) {
      if (this.readonly) {
        throw new Error("can't alter readonly IntervalSet");
      }
      let n = this._intervals.length;
      for (let i = 0; i < n; i++) {
        let I = this._intervals[i];
        let a = I.a;
        let b = I.b;
        if (el < a) {
          break;
        }
        if (el === a && el === b) {
          this._intervals.splice(i, 1);
          break;
        }
        if (el === a) {
          this._intervals[i] = Interval_1.Interval.of(I.a + 1, I.b);
          break;
        }
        if (el === b) {
          this._intervals[i] = Interval_1.Interval.of(I.a, I.b - 1);
          break;
        }
        if (el > a && el < b) {
          let oldb = I.b;
          this._intervals[i] = Interval_1.Interval.of(I.a, el - 1);
          this.add(el + 1, oldb);
        }
      }
    }
    get isReadonly() {
      return this.readonly;
    }
    setReadonly(readonly) {
      if (this.readonly && !readonly) {
        throw new Error("can't alter readonly IntervalSet");
      }
      this.readonly = readonly;
    }
  };
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "addAll", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "complement", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "subtract", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "or", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "and", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "contains", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "isNil", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "equals", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], IntervalSet.prototype, "toStringVocabulary", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], IntervalSet.prototype, "elementName", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], IntervalSet.prototype, "remove", null);
  __decorate([
    Decorators_1.NotNull
  ], IntervalSet, "of", null);
  __decorate([
    Decorators_1.NotNull
  ], IntervalSet, "subtract", null);
  exports.IntervalSet = IntervalSet;
});

// node_modules/antlr4ts/atn/ATNDeserializationOptions.js
var require_ATNDeserializationOptions = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATNDeserializationOptions = void 0;
  var Decorators_1 = require_Decorators();
  var ATNDeserializationOptions = class {
    constructor(options) {
      this.readOnly = false;
      if (options) {
        this.verifyATN = options.verifyATN;
        this.generateRuleBypassTransitions = options.generateRuleBypassTransitions;
        this.optimize = options.optimize;
      } else {
        this.verifyATN = true;
        this.generateRuleBypassTransitions = false;
        this.optimize = true;
      }
    }
    static get defaultOptions() {
      if (ATNDeserializationOptions._defaultOptions == null) {
        ATNDeserializationOptions._defaultOptions = new ATNDeserializationOptions();
        ATNDeserializationOptions._defaultOptions.makeReadOnly();
      }
      return ATNDeserializationOptions._defaultOptions;
    }
    get isReadOnly() {
      return this.readOnly;
    }
    makeReadOnly() {
      this.readOnly = true;
    }
    get isVerifyATN() {
      return this.verifyATN;
    }
    set isVerifyATN(verifyATN) {
      this.throwIfReadOnly();
      this.verifyATN = verifyATN;
    }
    get isGenerateRuleBypassTransitions() {
      return this.generateRuleBypassTransitions;
    }
    set isGenerateRuleBypassTransitions(generateRuleBypassTransitions) {
      this.throwIfReadOnly();
      this.generateRuleBypassTransitions = generateRuleBypassTransitions;
    }
    get isOptimize() {
      return this.optimize;
    }
    set isOptimize(optimize) {
      this.throwIfReadOnly();
      this.optimize = optimize;
    }
    throwIfReadOnly() {
      if (this.isReadOnly) {
        throw new Error("The object is read only.");
      }
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ATNDeserializationOptions, "defaultOptions", null);
  exports.ATNDeserializationOptions = ATNDeserializationOptions;
});

// node_modules/antlr4ts/atn/ActionTransition.js
var require_ActionTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ActionTransition = void 0;
  var Decorators_1 = require_Decorators();
  var Transition_1 = require_Transition();
  var ActionTransition = class ActionTransition extends Transition_1.Transition {
    constructor(target, ruleIndex, actionIndex = -1, isCtxDependent = false) {
      super(target);
      this.ruleIndex = ruleIndex;
      this.actionIndex = actionIndex;
      this.isCtxDependent = isCtxDependent;
    }
    get serializationType() {
      return 6;
    }
    get isEpsilon() {
      return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    toString() {
      return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
  };
  __decorate([
    Decorators_1.Override
  ], ActionTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override
  ], ActionTransition.prototype, "isEpsilon", null);
  __decorate([
    Decorators_1.Override
  ], ActionTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override
  ], ActionTransition.prototype, "toString", null);
  ActionTransition = __decorate([
    __param(0, Decorators_1.NotNull)
  ], ActionTransition);
  exports.ActionTransition = ActionTransition;
});

// node_modules/antlr4ts/atn/AtomTransition.js
var require_AtomTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.AtomTransition = void 0;
  var IntervalSet_1 = require_IntervalSet();
  var Decorators_1 = require_Decorators();
  var Transition_1 = require_Transition();
  var AtomTransition2 = class AtomTransition extends Transition_1.Transition {
    constructor(target, label) {
      super(target);
      this._label = label;
    }
    get serializationType() {
      return 5;
    }
    get label() {
      return IntervalSet_1.IntervalSet.of(this._label);
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return this._label === symbol;
    }
    toString() {
      return String(this.label);
    }
  };
  __decorate([
    Decorators_1.Override
  ], AtomTransition2.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], AtomTransition2.prototype, "label", null);
  __decorate([
    Decorators_1.Override
  ], AtomTransition2.prototype, "matches", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], AtomTransition2.prototype, "toString", null);
  AtomTransition2 = __decorate([
    __param(0, Decorators_1.NotNull)
  ], AtomTransition2);
  exports.AtomTransition = AtomTransition2;
});

// node_modules/antlr4ts/atn/BlockStartState.js
var require_BlockStartState = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BlockStartState = void 0;
  var DecisionState_1 = require_DecisionState();
  var BlockStartState = class extends DecisionState_1.DecisionState {
  };
  exports.BlockStartState = BlockStartState;
});

// node_modules/antlr4ts/atn/BasicBlockStartState.js
var require_BasicBlockStartState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BasicBlockStartState = void 0;
  var ATNStateType_1 = require_ATNStateType();
  var BlockStartState_1 = require_BlockStartState();
  var Decorators_1 = require_Decorators();
  var BasicBlockStartState = class extends BlockStartState_1.BlockStartState {
    get stateType() {
      return ATNStateType_1.ATNStateType.BLOCK_START;
    }
  };
  __decorate([
    Decorators_1.Override
  ], BasicBlockStartState.prototype, "stateType", null);
  exports.BasicBlockStartState = BasicBlockStartState;
});

// node_modules/antlr4ts/atn/BlockEndState.js
var require_BlockEndState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BlockEndState = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var Decorators_1 = require_Decorators();
  var BlockEndState = class extends ATNState_1.ATNState {
    get stateType() {
      return ATNStateType_1.ATNStateType.BLOCK_END;
    }
  };
  __decorate([
    Decorators_1.Override
  ], BlockEndState.prototype, "stateType", null);
  exports.BlockEndState = BlockEndState;
});

// node_modules/antlr4ts/atn/EpsilonTransition.js
var require_EpsilonTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.EpsilonTransition = void 0;
  var Decorators_1 = require_Decorators();
  var Transition_1 = require_Transition();
  var EpsilonTransition = class EpsilonTransition extends Transition_1.Transition {
    constructor(target, outermostPrecedenceReturn = -1) {
      super(target);
      this._outermostPrecedenceReturn = outermostPrecedenceReturn;
    }
    get outermostPrecedenceReturn() {
      return this._outermostPrecedenceReturn;
    }
    get serializationType() {
      return 1;
    }
    get isEpsilon() {
      return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    toString() {
      return "epsilon";
    }
  };
  __decorate([
    Decorators_1.Override
  ], EpsilonTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override
  ], EpsilonTransition.prototype, "isEpsilon", null);
  __decorate([
    Decorators_1.Override
  ], EpsilonTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], EpsilonTransition.prototype, "toString", null);
  EpsilonTransition = __decorate([
    __param(0, Decorators_1.NotNull)
  ], EpsilonTransition);
  exports.EpsilonTransition = EpsilonTransition;
});

// node_modules/antlr4ts/atn/LexerChannelAction.js
var require_LexerChannelAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerChannelAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerChannelAction = class {
    constructor(channel) {
      this._channel = channel;
    }
    get channel() {
      return this._channel;
    }
    get actionType() {
      return 0;
    }
    get isPositionDependent() {
      return false;
    }
    execute(lexer) {
      lexer.channel = this._channel;
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      hash = MurmurHash_1.MurmurHash.update(hash, this._channel);
      return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof LexerChannelAction)) {
        return false;
      }
      return this._channel === obj._channel;
    }
    toString() {
      return `channel(${this._channel})`;
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerChannelAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerChannelAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerChannelAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerChannelAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerChannelAction.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], LexerChannelAction.prototype, "toString", null);
  exports.LexerChannelAction = LexerChannelAction;
});

// node_modules/antlr4ts/atn/LexerCustomAction.js
var require_LexerCustomAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerCustomAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerCustomAction = class {
    constructor(ruleIndex, actionIndex) {
      this._ruleIndex = ruleIndex;
      this._actionIndex = actionIndex;
    }
    get ruleIndex() {
      return this._ruleIndex;
    }
    get actionIndex() {
      return this._actionIndex;
    }
    get actionType() {
      return 1;
    }
    get isPositionDependent() {
      return true;
    }
    execute(lexer) {
      lexer.action(void 0, this._ruleIndex, this._actionIndex);
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      hash = MurmurHash_1.MurmurHash.update(hash, this._ruleIndex);
      hash = MurmurHash_1.MurmurHash.update(hash, this._actionIndex);
      return MurmurHash_1.MurmurHash.finish(hash, 3);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof LexerCustomAction)) {
        return false;
      }
      return this._ruleIndex === obj._ruleIndex && this._actionIndex === obj._actionIndex;
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerCustomAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerCustomAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerCustomAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerCustomAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerCustomAction.prototype, "equals", null);
  exports.LexerCustomAction = LexerCustomAction;
});

// node_modules/antlr4ts/atn/LexerModeAction.js
var require_LexerModeAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerModeAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerModeAction = class {
    constructor(mode) {
      this._mode = mode;
    }
    get mode() {
      return this._mode;
    }
    get actionType() {
      return 2;
    }
    get isPositionDependent() {
      return false;
    }
    execute(lexer) {
      lexer.mode(this._mode);
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
      return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof LexerModeAction)) {
        return false;
      }
      return this._mode === obj._mode;
    }
    toString() {
      return `mode(${this._mode})`;
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerModeAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerModeAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerModeAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerModeAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerModeAction.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], LexerModeAction.prototype, "toString", null);
  exports.LexerModeAction = LexerModeAction;
});

// node_modules/antlr4ts/atn/LexerMoreAction.js
var require_LexerMoreAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerMoreAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerMoreAction = class {
    constructor() {
    }
    get actionType() {
      return 3;
    }
    get isPositionDependent() {
      return false;
    }
    execute(lexer) {
      lexer.more();
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
      return obj === this;
    }
    toString() {
      return "more";
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerMoreAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerMoreAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerMoreAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerMoreAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerMoreAction.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], LexerMoreAction.prototype, "toString", null);
  exports.LexerMoreAction = LexerMoreAction;
  (function(LexerMoreAction2) {
    LexerMoreAction2.INSTANCE = new LexerMoreAction2();
  })(LexerMoreAction = exports.LexerMoreAction || (exports.LexerMoreAction = {}));
});

// node_modules/antlr4ts/atn/LexerPopModeAction.js
var require_LexerPopModeAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerPopModeAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerPopModeAction = class {
    constructor() {
    }
    get actionType() {
      return 4;
    }
    get isPositionDependent() {
      return false;
    }
    execute(lexer) {
      lexer.popMode();
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
      return obj === this;
    }
    toString() {
      return "popMode";
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerPopModeAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerPopModeAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerPopModeAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerPopModeAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerPopModeAction.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], LexerPopModeAction.prototype, "toString", null);
  exports.LexerPopModeAction = LexerPopModeAction;
  (function(LexerPopModeAction2) {
    LexerPopModeAction2.INSTANCE = new LexerPopModeAction2();
  })(LexerPopModeAction = exports.LexerPopModeAction || (exports.LexerPopModeAction = {}));
});

// node_modules/antlr4ts/atn/LexerPushModeAction.js
var require_LexerPushModeAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerPushModeAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerPushModeAction = class {
    constructor(mode) {
      this._mode = mode;
    }
    get mode() {
      return this._mode;
    }
    get actionType() {
      return 5;
    }
    get isPositionDependent() {
      return false;
    }
    execute(lexer) {
      lexer.pushMode(this._mode);
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
      return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof LexerPushModeAction)) {
        return false;
      }
      return this._mode === obj._mode;
    }
    toString() {
      return `pushMode(${this._mode})`;
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerPushModeAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerPushModeAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerPushModeAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerPushModeAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerPushModeAction.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], LexerPushModeAction.prototype, "toString", null);
  exports.LexerPushModeAction = LexerPushModeAction;
});

// node_modules/antlr4ts/atn/LexerSkipAction.js
var require_LexerSkipAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerSkipAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerSkipAction = class {
    constructor() {
    }
    get actionType() {
      return 6;
    }
    get isPositionDependent() {
      return false;
    }
    execute(lexer) {
      lexer.skip();
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
      return obj === this;
    }
    toString() {
      return "skip";
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerSkipAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerSkipAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerSkipAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerSkipAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerSkipAction.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], LexerSkipAction.prototype, "toString", null);
  exports.LexerSkipAction = LexerSkipAction;
  (function(LexerSkipAction2) {
    LexerSkipAction2.INSTANCE = new LexerSkipAction2();
  })(LexerSkipAction = exports.LexerSkipAction || (exports.LexerSkipAction = {}));
});

// node_modules/antlr4ts/atn/LexerTypeAction.js
var require_LexerTypeAction = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerTypeAction = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var LexerTypeAction = class {
    constructor(type) {
      this._type = type;
    }
    get type() {
      return this._type;
    }
    get actionType() {
      return 7;
    }
    get isPositionDependent() {
      return false;
    }
    execute(lexer) {
      lexer.type = this._type;
    }
    hashCode() {
      let hash = MurmurHash_1.MurmurHash.initialize();
      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
      hash = MurmurHash_1.MurmurHash.update(hash, this._type);
      return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof LexerTypeAction)) {
        return false;
      }
      return this._type === obj._type;
    }
    toString() {
      return `type(${this._type})`;
    }
  };
  __decorate([
    Decorators_1.Override
  ], LexerTypeAction.prototype, "actionType", null);
  __decorate([
    Decorators_1.Override
  ], LexerTypeAction.prototype, "isPositionDependent", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], LexerTypeAction.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], LexerTypeAction.prototype, "hashCode", null);
  __decorate([
    Decorators_1.Override
  ], LexerTypeAction.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], LexerTypeAction.prototype, "toString", null);
  exports.LexerTypeAction = LexerTypeAction;
});

// node_modules/antlr4ts/atn/LoopEndState.js
var require_LoopEndState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LoopEndState = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var Decorators_1 = require_Decorators();
  var LoopEndState = class extends ATNState_1.ATNState {
    get stateType() {
      return ATNStateType_1.ATNStateType.LOOP_END;
    }
  };
  __decorate([
    Decorators_1.Override
  ], LoopEndState.prototype, "stateType", null);
  exports.LoopEndState = LoopEndState;
});

// node_modules/antlr4ts/atn/ConflictInfo.js
var require_ConflictInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ConflictInfo = void 0;
  var Decorators_1 = require_Decorators();
  var Utils3 = require_Utils();
  var ConflictInfo = class {
    constructor(conflictedAlts, exact) {
      this._conflictedAlts = conflictedAlts;
      this.exact = exact;
    }
    get conflictedAlts() {
      return this._conflictedAlts;
    }
    get isExact() {
      return this.exact;
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof ConflictInfo)) {
        return false;
      }
      return this.isExact === obj.isExact && Utils3.equals(this.conflictedAlts, obj.conflictedAlts);
    }
    hashCode() {
      return this.conflictedAlts.hashCode();
    }
  };
  __decorate([
    Decorators_1.Override
  ], ConflictInfo.prototype, "equals", null);
  __decorate([
    Decorators_1.Override
  ], ConflictInfo.prototype, "hashCode", null);
  exports.ConflictInfo = ConflictInfo;
});

// node_modules/antlr4ts/tree/TerminalNode.js
var require_TerminalNode = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TerminalNode = void 0;
  var Interval_1 = require_Interval();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var TerminalNode = class {
    constructor(symbol) {
      this._symbol = symbol;
    }
    getChild(i) {
      throw new RangeError("Terminal Node has no children.");
    }
    get symbol() {
      return this._symbol;
    }
    get parent() {
      return this._parent;
    }
    setParent(parent) {
      this._parent = parent;
    }
    get payload() {
      return this._symbol;
    }
    get sourceInterval() {
      let tokenIndex = this._symbol.tokenIndex;
      return new Interval_1.Interval(tokenIndex, tokenIndex);
    }
    get childCount() {
      return 0;
    }
    accept(visitor) {
      return visitor.visitTerminal(this);
    }
    get text() {
      return this._symbol.text || "";
    }
    toStringTree(parser) {
      return this.toString();
    }
    toString() {
      if (this._symbol.type === Token_1.Token.EOF) {
        return "<EOF>";
      }
      return this._symbol.text || "";
    }
  };
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "getChild", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "parent", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "setParent", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "payload", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "sourceInterval", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "childCount", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "accept", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "text", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "toStringTree", null);
  __decorate([
    Decorators_1.Override
  ], TerminalNode.prototype, "toString", null);
  exports.TerminalNode = TerminalNode;
});

// node_modules/antlr4ts/tree/ErrorNode.js
var require_ErrorNode = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ErrorNode = void 0;
  var Decorators_1 = require_Decorators();
  var TerminalNode_1 = require_TerminalNode();
  var ErrorNode2 = class extends TerminalNode_1.TerminalNode {
    constructor(token) {
      super(token);
    }
    accept(visitor) {
      return visitor.visitErrorNode(this);
    }
  };
  __decorate([
    Decorators_1.Override
  ], ErrorNode2.prototype, "accept", null);
  exports.ErrorNode = ErrorNode2;
});

// node_modules/antlr4ts/tree/RuleNode.js
var require_RuleNode = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleNode = void 0;
  var RuleNode = class {
  };
  exports.RuleNode = RuleNode;
});

// node_modules/antlr4ts/tree/Trees.js
var require_Trees = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Trees = void 0;
  var ATN_1 = require_ATN();
  var CommonToken_1 = require_CommonToken();
  var ErrorNode_1 = require_ErrorNode();
  var Decorators_1 = require_Decorators();
  var Parser_1 = require_Parser();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var RuleNode_1 = require_RuleNode();
  var TerminalNode_1 = require_TerminalNode();
  var Token_1 = require_Token();
  var Utils3 = require_Utils();
  var Trees = class {
    static toStringTree(t, arg2) {
      let ruleNames;
      if (arg2 instanceof Parser_1.Parser) {
        ruleNames = arg2.ruleNames;
      } else {
        ruleNames = arg2;
      }
      let s = Utils3.escapeWhitespace(this.getNodeText(t, ruleNames), false);
      if (t.childCount === 0) {
        return s;
      }
      let buf = "";
      buf += "(";
      s = Utils3.escapeWhitespace(this.getNodeText(t, ruleNames), false);
      buf += s;
      buf += " ";
      for (let i = 0; i < t.childCount; i++) {
        if (i > 0) {
          buf += " ";
        }
        buf += this.toStringTree(t.getChild(i), ruleNames);
      }
      buf += ")";
      return buf;
    }
    static getNodeText(t, arg2) {
      let ruleNames;
      if (arg2 instanceof Parser_1.Parser) {
        ruleNames = arg2.ruleNames;
      } else if (arg2) {
        ruleNames = arg2;
      } else {
        let payload = t.payload;
        if (typeof payload.text === "string") {
          return payload.text;
        }
        return t.payload.toString();
      }
      if (t instanceof RuleNode_1.RuleNode) {
        let ruleContext = t.ruleContext;
        let ruleIndex = ruleContext.ruleIndex;
        let ruleName = ruleNames[ruleIndex];
        let altNumber = ruleContext.altNumber;
        if (altNumber !== ATN_1.ATN.INVALID_ALT_NUMBER) {
          return ruleName + ":" + altNumber;
        }
        return ruleName;
      } else if (t instanceof ErrorNode_1.ErrorNode) {
        return t.toString();
      } else if (t instanceof TerminalNode_1.TerminalNode) {
        let symbol = t.symbol;
        return symbol.text || "";
      }
      throw new TypeError("Unexpected node type");
    }
    static getChildren(t) {
      let kids = [];
      for (let i = 0; i < t.childCount; i++) {
        kids.push(t.getChild(i));
      }
      return kids;
    }
    static getAncestors(t) {
      let ancestors = [];
      let p = t.parent;
      while (p) {
        ancestors.unshift(p);
        p = p.parent;
      }
      return ancestors;
    }
    static isAncestorOf(t, u) {
      if (!t || !u || !t.parent) {
        return false;
      }
      let p = u.parent;
      while (p) {
        if (t === p) {
          return true;
        }
        p = p.parent;
      }
      return false;
    }
    static findAllTokenNodes(t, ttype) {
      return Trees.findAllNodes(t, ttype, true);
    }
    static findAllRuleNodes(t, ruleIndex) {
      return Trees.findAllNodes(t, ruleIndex, false);
    }
    static findAllNodes(t, index, findTokens) {
      let nodes = [];
      Trees._findAllNodes(t, index, findTokens, nodes);
      return nodes;
    }
    static _findAllNodes(t, index, findTokens, nodes) {
      if (findTokens && t instanceof TerminalNode_1.TerminalNode) {
        if (t.symbol.type === index) {
          nodes.push(t);
        }
      } else if (!findTokens && t instanceof ParserRuleContext_1.ParserRuleContext) {
        if (t.ruleIndex === index) {
          nodes.push(t);
        }
      }
      for (let i = 0; i < t.childCount; i++) {
        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
      }
    }
    static getDescendants(t) {
      let nodes = [];
      function recurse(e) {
        nodes.push(e);
        const n = e.childCount;
        for (let i = 0; i < n; i++) {
          recurse(e.getChild(i));
        }
      }
      recurse(t);
      return nodes;
    }
    static getRootOfSubtreeEnclosingRegion(t, startTokenIndex, stopTokenIndex) {
      let n = t.childCount;
      for (let i = 0; i < n; i++) {
        let child = t.getChild(i);
        let r = Trees.getRootOfSubtreeEnclosingRegion(child, startTokenIndex, stopTokenIndex);
        if (r) {
          return r;
        }
      }
      if (t instanceof ParserRuleContext_1.ParserRuleContext) {
        let stopToken = t.stop;
        if (startTokenIndex >= t.start.tokenIndex && (stopToken == null || stopTokenIndex <= stopToken.tokenIndex)) {
          return t;
        }
      }
      return void 0;
    }
    static stripChildrenOutOfRange(t, root, startIndex, stopIndex) {
      if (!t) {
        return;
      }
      let count = t.childCount;
      for (let i = 0; i < count; i++) {
        let child = t.getChild(i);
        let range = child.sourceInterval;
        if (child instanceof ParserRuleContext_1.ParserRuleContext && (range.b < startIndex || range.a > stopIndex)) {
          if (Trees.isAncestorOf(child, root)) {
            let abbrev = new CommonToken_1.CommonToken(Token_1.Token.INVALID_TYPE, "...");
            t.children[i] = new TerminalNode_1.TerminalNode(abbrev);
          }
        }
      }
    }
    static findNodeSuchThat(t, pred) {
      if (pred(t)) {
        return t;
      }
      let n = t.childCount;
      for (let i = 0; i < n; i++) {
        let u = Trees.findNodeSuchThat(t.getChild(i), pred);
        if (u !== void 0) {
          return u;
        }
      }
      return void 0;
    }
  };
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], Trees, "toStringTree", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], Trees, "getAncestors", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], Trees, "getRootOfSubtreeEnclosingRegion", null);
  exports.Trees = Trees;
});

// node_modules/antlr4ts/RuleContext.js
var require_RuleContext = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleContext = void 0;
  var ATN_1 = require_ATN();
  var Recognizer_1 = require_Recognizer();
  var RuleNode_1 = require_RuleNode();
  var Interval_1 = require_Interval();
  var Decorators_1 = require_Decorators();
  var Trees_1 = require_Trees();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var RuleContext = class extends RuleNode_1.RuleNode {
    constructor(parent, invokingState) {
      super();
      this._parent = parent;
      this.invokingState = invokingState != null ? invokingState : -1;
    }
    static getChildContext(parent, invokingState) {
      return new RuleContext(parent, invokingState);
    }
    depth() {
      let n = 0;
      let p = this;
      while (p) {
        p = p._parent;
        n++;
      }
      return n;
    }
    get isEmpty() {
      return this.invokingState === -1;
    }
    get sourceInterval() {
      return Interval_1.Interval.INVALID;
    }
    get ruleContext() {
      return this;
    }
    get parent() {
      return this._parent;
    }
    setParent(parent) {
      this._parent = parent;
    }
    get payload() {
      return this;
    }
    get text() {
      if (this.childCount === 0) {
        return "";
      }
      let builder = "";
      for (let i = 0; i < this.childCount; i++) {
        builder += this.getChild(i).text;
      }
      return builder.toString();
    }
    get ruleIndex() {
      return -1;
    }
    get altNumber() {
      return ATN_1.ATN.INVALID_ALT_NUMBER;
    }
    set altNumber(altNumber) {
    }
    getChild(i) {
      throw new RangeError("i must be greater than or equal to 0 and less than childCount");
    }
    get childCount() {
      return 0;
    }
    accept(visitor) {
      return visitor.visitChildren(this);
    }
    toStringTree(recog) {
      return Trees_1.Trees.toStringTree(this, recog);
    }
    toString(arg1, stop) {
      const ruleNames = arg1 instanceof Recognizer_1.Recognizer ? arg1.ruleNames : arg1;
      stop = stop || ParserRuleContext_1.ParserRuleContext.emptyContext();
      let buf = "";
      let p = this;
      buf += "[";
      while (p && p !== stop) {
        if (!ruleNames) {
          if (!p.isEmpty) {
            buf += p.invokingState;
          }
        } else {
          let ruleIndex = p.ruleIndex;
          let ruleName = ruleIndex >= 0 && ruleIndex < ruleNames.length ? ruleNames[ruleIndex] : ruleIndex.toString();
          buf += ruleName;
        }
        if (p._parent && (ruleNames || !p._parent.isEmpty)) {
          buf += " ";
        }
        p = p._parent;
      }
      buf += "]";
      return buf.toString();
    }
  };
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "sourceInterval", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "ruleContext", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "parent", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "setParent", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "payload", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "text", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "getChild", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "childCount", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "accept", null);
  __decorate([
    Decorators_1.Override
  ], RuleContext.prototype, "toStringTree", null);
  exports.RuleContext = RuleContext;
});

// node_modules/antlr4ts/ParserRuleContext.js
var require_ParserRuleContext = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParserRuleContext = void 0;
  var ErrorNode_1 = require_ErrorNode();
  var Interval_1 = require_Interval();
  var Decorators_1 = require_Decorators();
  var RuleContext_1 = require_RuleContext();
  var TerminalNode_1 = require_TerminalNode();
  var ParserRuleContext2 = class extends RuleContext_1.RuleContext {
    constructor(parent, invokingStateNumber) {
      if (invokingStateNumber == null) {
        super();
      } else {
        super(parent, invokingStateNumber);
      }
    }
    static emptyContext() {
      return ParserRuleContext2.EMPTY;
    }
    copyFrom(ctx) {
      this._parent = ctx._parent;
      this.invokingState = ctx.invokingState;
      this._start = ctx._start;
      this._stop = ctx._stop;
      if (ctx.children) {
        this.children = [];
        for (let child of ctx.children) {
          if (child instanceof ErrorNode_1.ErrorNode) {
            this.addChild(child);
          }
        }
      }
    }
    enterRule(listener) {
    }
    exitRule(listener) {
    }
    addAnyChild(t) {
      if (!this.children) {
        this.children = [t];
      } else {
        this.children.push(t);
      }
      return t;
    }
    addChild(t) {
      let result;
      if (t instanceof TerminalNode_1.TerminalNode) {
        t.setParent(this);
        this.addAnyChild(t);
        return;
      } else if (t instanceof RuleContext_1.RuleContext) {
        this.addAnyChild(t);
        return;
      } else {
        t = new TerminalNode_1.TerminalNode(t);
        this.addAnyChild(t);
        t.setParent(this);
        return t;
      }
    }
    addErrorNode(node) {
      if (node instanceof ErrorNode_1.ErrorNode) {
        const errorNode = node;
        errorNode.setParent(this);
        return this.addAnyChild(errorNode);
      } else {
        const badToken = node;
        let t = new ErrorNode_1.ErrorNode(badToken);
        this.addAnyChild(t);
        t.setParent(this);
        return t;
      }
    }
    removeLastChild() {
      if (this.children) {
        this.children.pop();
      }
    }
    get parent() {
      let parent = super.parent;
      if (parent === void 0 || parent instanceof ParserRuleContext2) {
        return parent;
      }
      throw new TypeError("Invalid parent type for ParserRuleContext");
    }
    getChild(i, ctxType) {
      if (!this.children || i < 0 || i >= this.children.length) {
        throw new RangeError("index parameter must be between >= 0 and <= number of children.");
      }
      if (ctxType == null) {
        return this.children[i];
      }
      let result = this.tryGetChild(i, ctxType);
      if (result === void 0) {
        throw new Error("The specified node does not exist");
      }
      return result;
    }
    tryGetChild(i, ctxType) {
      if (!this.children || i < 0 || i >= this.children.length) {
        return void 0;
      }
      let j = -1;
      for (let o of this.children) {
        if (o instanceof ctxType) {
          j++;
          if (j === i) {
            return o;
          }
        }
      }
      return void 0;
    }
    getToken(ttype, i) {
      let result = this.tryGetToken(ttype, i);
      if (result === void 0) {
        throw new Error("The specified token does not exist");
      }
      return result;
    }
    tryGetToken(ttype, i) {
      if (!this.children || i < 0 || i >= this.children.length) {
        return void 0;
      }
      let j = -1;
      for (let o of this.children) {
        if (o instanceof TerminalNode_1.TerminalNode) {
          let symbol = o.symbol;
          if (symbol.type === ttype) {
            j++;
            if (j === i) {
              return o;
            }
          }
        }
      }
      return void 0;
    }
    getTokens(ttype) {
      let tokens2 = [];
      if (!this.children) {
        return tokens2;
      }
      for (let o of this.children) {
        if (o instanceof TerminalNode_1.TerminalNode) {
          let symbol = o.symbol;
          if (symbol.type === ttype) {
            tokens2.push(o);
          }
        }
      }
      return tokens2;
    }
    get ruleContext() {
      return this;
    }
    getRuleContext(i, ctxType) {
      return this.getChild(i, ctxType);
    }
    tryGetRuleContext(i, ctxType) {
      return this.tryGetChild(i, ctxType);
    }
    getRuleContexts(ctxType) {
      let contexts = [];
      if (!this.children) {
        return contexts;
      }
      for (let o of this.children) {
        if (o instanceof ctxType) {
          contexts.push(o);
        }
      }
      return contexts;
    }
    get childCount() {
      return this.children ? this.children.length : 0;
    }
    get sourceInterval() {
      if (!this._start) {
        return Interval_1.Interval.INVALID;
      }
      if (!this._stop || this._stop.tokenIndex < this._start.tokenIndex) {
        return Interval_1.Interval.of(this._start.tokenIndex, this._start.tokenIndex - 1);
      }
      return Interval_1.Interval.of(this._start.tokenIndex, this._stop.tokenIndex);
    }
    get start() {
      return this._start;
    }
    get stop() {
      return this._stop;
    }
    toInfoString(recognizer) {
      let rules = recognizer.getRuleInvocationStack(this).reverse();
      return "ParserRuleContext" + rules + "{start=" + this._start + ", stop=" + this._stop + "}";
    }
  };
  ParserRuleContext2.EMPTY = new ParserRuleContext2();
  __decorate([
    Decorators_1.Override
  ], ParserRuleContext2.prototype, "parent", null);
  __decorate([
    Decorators_1.Override
  ], ParserRuleContext2.prototype, "childCount", null);
  __decorate([
    Decorators_1.Override
  ], ParserRuleContext2.prototype, "sourceInterval", null);
  exports.ParserRuleContext = ParserRuleContext2;
});

// node_modules/antlr4ts/atn/PredictionMode.js
var require_PredictionMode = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.PredictionMode = void 0;
  var Array2DHashMap_1 = require_Array2DHashMap();
  var MurmurHash_1 = require_MurmurHash();
  var Decorators_1 = require_Decorators();
  var RuleStopState_1 = require_RuleStopState();
  var PredictionMode;
  (function(PredictionMode2) {
    PredictionMode2[PredictionMode2["SLL"] = 0] = "SLL";
    PredictionMode2[PredictionMode2["LL"] = 1] = "LL";
    PredictionMode2[PredictionMode2["LL_EXACT_AMBIG_DETECTION"] = 2] = "LL_EXACT_AMBIG_DETECTION";
  })(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));
  (function(PredictionMode2) {
    class AltAndContextMap extends Array2DHashMap_1.Array2DHashMap {
      constructor() {
        super(AltAndContextConfigEqualityComparator.INSTANCE);
      }
    }
    class AltAndContextConfigEqualityComparator {
      AltAndContextConfigEqualityComparator() {
      }
      hashCode(o) {
        let hashCode = MurmurHash_1.MurmurHash.initialize(7);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.state.stateNumber);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.context);
        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 2);
        return hashCode;
      }
      equals(a, b) {
        if (a === b) {
          return true;
        }
        if (a == null || b == null) {
          return false;
        }
        return a.state.stateNumber === b.state.stateNumber && a.context.equals(b.context);
      }
    }
    AltAndContextConfigEqualityComparator.INSTANCE = new AltAndContextConfigEqualityComparator();
    __decorate([
      Decorators_1.Override
    ], AltAndContextConfigEqualityComparator.prototype, "hashCode", null);
    __decorate([
      Decorators_1.Override
    ], AltAndContextConfigEqualityComparator.prototype, "equals", null);
    function hasConfigInRuleStopState(configs) {
      for (let c of configs) {
        if (c.state instanceof RuleStopState_1.RuleStopState) {
          return true;
        }
      }
      return false;
    }
    PredictionMode2.hasConfigInRuleStopState = hasConfigInRuleStopState;
    function allConfigsInRuleStopStates(configs) {
      for (let config of configs) {
        if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
          return false;
        }
      }
      return true;
    }
    PredictionMode2.allConfigsInRuleStopStates = allConfigsInRuleStopStates;
  })(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));
});

// node_modules/antlr4ts/atn/SimulatorState.js
var require_SimulatorState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SimulatorState = void 0;
  var Decorators_1 = require_Decorators();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var SimulatorState = class SimulatorState {
    constructor(outerContext, s0, useContext, remainingOuterContext) {
      this.outerContext = outerContext != null ? outerContext : ParserRuleContext_1.ParserRuleContext.emptyContext();
      this.s0 = s0;
      this.useContext = useContext;
      this.remainingOuterContext = remainingOuterContext;
    }
  };
  SimulatorState = __decorate([
    __param(1, Decorators_1.NotNull)
  ], SimulatorState);
  exports.SimulatorState = SimulatorState;
});

// node_modules/antlr4ts/atn/ParserATNSimulator.js
var require_ParserATNSimulator = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParserATNSimulator = void 0;
  var AcceptStateInfo_1 = require_AcceptStateInfo();
  var ActionTransition_1 = require_ActionTransition();
  var Array2DHashSet_1 = require_Array2DHashSet();
  var Arrays_1 = require_Arrays();
  var ATN_1 = require_ATN();
  var ATNConfig_1 = require_ATNConfig();
  var ATNConfigSet_1 = require_ATNConfigSet();
  var ATNSimulator_1 = require_ATNSimulator();
  var ATNStateType_1 = require_ATNStateType();
  var AtomTransition_1 = require_AtomTransition();
  var BitSet_1 = require_BitSet();
  var ConflictInfo_1 = require_ConflictInfo();
  var DecisionState_1 = require_DecisionState();
  var DFAState_1 = require_DFAState();
  var IntegerList_1 = require_IntegerList();
  var Interval_1 = require_Interval();
  var IntStream_1 = require_IntStream();
  var Decorators_1 = require_Decorators();
  var NotSetTransition_1 = require_NotSetTransition();
  var NoViableAltException_1 = require_NoViableAltException();
  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var PredictionContext_1 = require_PredictionContext();
  var PredictionContextCache_1 = require_PredictionContextCache();
  var PredictionMode_1 = require_PredictionMode();
  var RuleStopState_1 = require_RuleStopState();
  var RuleTransition_1 = require_RuleTransition();
  var SemanticContext_1 = require_SemanticContext();
  var SetTransition_1 = require_SetTransition();
  var SimulatorState_1 = require_SimulatorState();
  var Token_1 = require_Token();
  var VocabularyImpl_1 = require_VocabularyImpl();
  var assert = require("assert");
  var MAX_SHORT_VALUE = 65535;
  var MIN_INTEGER_VALUE = -(1 << 31 >>> 0);
  var ParserATNSimulator2 = class ParserATNSimulator3 extends ATNSimulator_1.ATNSimulator {
    constructor(atn, parser) {
      super(atn);
      this.predictionMode = PredictionMode_1.PredictionMode.LL;
      this.force_global_context = false;
      this.always_try_local_context = true;
      this.enable_global_context_dfa = false;
      this.optimize_unique_closure = true;
      this.optimize_ll1 = true;
      this.optimize_tail_calls = true;
      this.tail_call_preserves_sll = true;
      this.treat_sllk1_conflict_as_ambiguity = false;
      this.reportAmbiguities = false;
      this.userWantsCtxSensitive = true;
      this._parser = parser;
    }
    getPredictionMode() {
      return this.predictionMode;
    }
    setPredictionMode(predictionMode) {
      this.predictionMode = predictionMode;
    }
    reset() {
    }
    adaptivePredict(input, decision, outerContext, useContext) {
      if (useContext === void 0) {
        useContext = false;
      }
      let dfa = this.atn.decisionToDFA[decision];
      assert(dfa != null);
      if (this.optimize_ll1 && !dfa.isPrecedenceDfa && !dfa.isEmpty) {
        let ll_1 = input.LA(1);
        if (ll_1 >= 0 && ll_1 <= 65535) {
          let key = (decision << 16 >>> 0) + ll_1;
          let alt = this.atn.LL1Table.get(key);
          if (alt != null) {
            return alt;
          }
        }
      }
      this.dfa = dfa;
      if (this.force_global_context) {
        useContext = true;
      } else if (!this.always_try_local_context) {
        useContext = useContext || dfa.isContextSensitive;
      }
      this.userWantsCtxSensitive = useContext || this.predictionMode !== PredictionMode_1.PredictionMode.SLL && outerContext != null && !this.atn.decisionToState[decision].sll;
      if (outerContext == null) {
        outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
      }
      let state;
      if (!dfa.isEmpty) {
        state = this.getStartState(dfa, input, outerContext, useContext);
      }
      if (state == null) {
        if (outerContext == null) {
          outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
        }
        if (ParserATNSimulator3.debug) {
          console.log("ATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + ", outerContext=" + outerContext.toString(this._parser));
        }
        state = this.computeStartState(dfa, outerContext, useContext);
      }
      let m = input.mark();
      let index = input.index;
      try {
        let alt = this.execDFA(dfa, input, index, state);
        if (ParserATNSimulator3.debug) {
          console.log("DFA after predictATN: " + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
        }
        return alt;
      } finally {
        this.dfa = void 0;
        input.seek(index);
        input.release(m);
      }
    }
    getStartState(dfa, input, outerContext, useContext) {
      if (!useContext) {
        if (dfa.isPrecedenceDfa) {
          let state = dfa.getPrecedenceStartState(this._parser.precedence, false);
          if (state == null) {
            return void 0;
          }
          return new SimulatorState_1.SimulatorState(outerContext, state, false, outerContext);
        } else {
          if (dfa.s0 == null) {
            return void 0;
          }
          return new SimulatorState_1.SimulatorState(outerContext, dfa.s0, false, outerContext);
        }
      }
      if (!this.enable_global_context_dfa) {
        return void 0;
      }
      let remainingContext = outerContext;
      assert(outerContext != null);
      let s0;
      if (dfa.isPrecedenceDfa) {
        s0 = dfa.getPrecedenceStartState(this._parser.precedence, true);
      } else {
        s0 = dfa.s0full;
      }
      while (remainingContext != null && s0 != null && s0.isContextSensitive) {
        remainingContext = this.skipTailCalls(remainingContext);
        s0 = s0.getContextTarget(this.getReturnState(remainingContext));
        if (remainingContext.isEmpty) {
          assert(s0 == null || !s0.isContextSensitive);
        } else {
          remainingContext = remainingContext.parent;
        }
      }
      if (s0 == null) {
        return void 0;
      }
      return new SimulatorState_1.SimulatorState(outerContext, s0, useContext, remainingContext);
    }
    execDFA(dfa, input, startIndex, state) {
      let outerContext = state.outerContext;
      if (ParserATNSimulator3.dfa_debug) {
        console.log("DFA decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + ", outerContext=" + outerContext.toString(this._parser));
      }
      if (ParserATNSimulator3.dfa_debug) {
        console.log(dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
      }
      let s = state.s0;
      let t = input.LA(1);
      let remainingOuterContext = state.remainingOuterContext;
      while (true) {
        if (ParserATNSimulator3.dfa_debug) {
          console.log("DFA state " + s.stateNumber + " LA(1)==" + this.getLookaheadName(input));
        }
        if (state.useContext) {
          while (s.isContextSymbol(t)) {
            let next;
            if (remainingOuterContext != null) {
              remainingOuterContext = this.skipTailCalls(remainingOuterContext);
              next = s.getContextTarget(this.getReturnState(remainingOuterContext));
            }
            if (next == null) {
              let initialState = new SimulatorState_1.SimulatorState(state.outerContext, s, state.useContext, remainingOuterContext);
              return this.execATN(dfa, input, startIndex, initialState);
            }
            assert(remainingOuterContext != null);
            remainingOuterContext = remainingOuterContext.parent;
            s = next;
          }
        }
        if (this.isAcceptState(s, state.useContext)) {
          if (s.predicates != null) {
            if (ParserATNSimulator3.dfa_debug) {
              console.log("accept " + s);
            }
          } else {
            if (ParserATNSimulator3.dfa_debug) {
              console.log("accept; predict " + s.prediction + " in state " + s.stateNumber);
            }
          }
          break;
        }
        assert(!this.isAcceptState(s, state.useContext));
        let target = this.getExistingTargetState(s, t);
        if (target == null) {
          if (ParserATNSimulator3.dfa_debug && t >= 0) {
            console.log("no edge for " + this._parser.vocabulary.getDisplayName(t));
          }
          let alt;
          if (ParserATNSimulator3.dfa_debug) {
            let interval = Interval_1.Interval.of(startIndex, this._parser.inputStream.index);
            console.log("ATN exec upon " + this._parser.inputStream.getText(interval) + " at DFA state " + s.stateNumber);
          }
          let initialState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
          alt = this.execATN(dfa, input, startIndex, initialState);
          if (ParserATNSimulator3.dfa_debug) {
            console.log("back from DFA update, alt=" + alt + ", dfa=\n" + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
          }
          if (ParserATNSimulator3.dfa_debug) {
            console.log("DFA decision " + dfa.decision + " predicts " + alt);
          }
          return alt;
        } else if (target === ATNSimulator_1.ATNSimulator.ERROR) {
          let errorState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
          return this.handleNoViableAlt(input, startIndex, errorState);
        }
        s = target;
        if (!this.isAcceptState(s, state.useContext) && t !== IntStream_1.IntStream.EOF) {
          input.consume();
          t = input.LA(1);
        }
      }
      if (!state.useContext && s.configs.conflictInfo != null) {
        if (dfa.atnStartState instanceof DecisionState_1.DecisionState) {
          if (!this.userWantsCtxSensitive || !s.configs.dipsIntoOuterContext && s.configs.isExactConflict || this.treat_sllk1_conflict_as_ambiguity && input.index === startIndex) {
          } else {
            assert(!state.useContext);
            let conflictingAlts;
            let predicates2 = s.predicates;
            if (predicates2 != null) {
              let conflictIndex = input.index;
              if (conflictIndex !== startIndex) {
                input.seek(startIndex);
              }
              conflictingAlts = this.evalSemanticContext(predicates2, outerContext, true);
              if (conflictingAlts.cardinality() === 1) {
                return conflictingAlts.nextSetBit(0);
              }
              if (conflictIndex !== startIndex) {
                input.seek(conflictIndex);
              }
            }
            if (this.reportAmbiguities) {
              let conflictState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
              this.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, input.index);
            }
            input.seek(startIndex);
            return this.adaptivePredict(input, dfa.decision, outerContext, true);
          }
        }
      }
      let predicates = s.predicates;
      if (predicates != null) {
        let stopIndex = input.index;
        if (startIndex !== stopIndex) {
          input.seek(startIndex);
        }
        let alts = this.evalSemanticContext(predicates, outerContext, this.reportAmbiguities && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION);
        switch (alts.cardinality()) {
          case 0:
            throw this.noViableAlt(input, outerContext, s.configs, startIndex);
          case 1:
            return alts.nextSetBit(0);
          default:
            if (startIndex !== stopIndex) {
              input.seek(stopIndex);
            }
            this.reportAmbiguity(dfa, s, startIndex, stopIndex, s.configs.isExactConflict, alts, s.configs);
            return alts.nextSetBit(0);
        }
      }
      if (ParserATNSimulator3.dfa_debug) {
        console.log("DFA decision " + dfa.decision + " predicts " + s.prediction);
      }
      return s.prediction;
    }
    isAcceptState(state, useContext) {
      if (!state.isAcceptState) {
        return false;
      }
      if (state.configs.conflictingAlts == null) {
        return true;
      }
      if (useContext && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION) {
        return state.configs.isExactConflict;
      }
      return true;
    }
    execATN(dfa, input, startIndex, initialState) {
      if (ParserATNSimulator3.debug) {
        console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input));
      }
      let outerContext = initialState.outerContext;
      let useContext = initialState.useContext;
      let t = input.LA(1);
      let previous = initialState;
      let contextCache = new PredictionContextCache_1.PredictionContextCache();
      while (true) {
        let nextState = this.computeReachSet(dfa, previous, t, contextCache);
        if (nextState == null) {
          this.setDFAEdge(previous.s0, input.LA(1), ATNSimulator_1.ATNSimulator.ERROR);
          return this.handleNoViableAlt(input, startIndex, previous);
        }
        let D = nextState.s0;
        assert(D.isAcceptState || D.prediction === ATN_1.ATN.INVALID_ALT_NUMBER);
        assert(D.isAcceptState || D.configs.conflictInfo == null);
        if (this.isAcceptState(D, useContext)) {
          let conflictingAlts = D.configs.conflictingAlts;
          let predictedAlt = conflictingAlts == null ? D.prediction : ATN_1.ATN.INVALID_ALT_NUMBER;
          if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
            if (this.optimize_ll1 && input.index === startIndex && !dfa.isPrecedenceDfa && nextState.outerContext === nextState.remainingOuterContext && dfa.decision >= 0 && !D.configs.hasSemanticContext) {
              if (t >= 0 && t <= MAX_SHORT_VALUE) {
                let key = (dfa.decision << 16 >>> 0) + t;
                this.atn.LL1Table.set(key, predictedAlt);
              }
            }
            if (useContext && this.always_try_local_context) {
              this.reportContextSensitivity(dfa, predictedAlt, nextState, startIndex, input.index);
            }
          }
          predictedAlt = D.prediction;
          let attemptFullContext = conflictingAlts != null && this.userWantsCtxSensitive;
          if (attemptFullContext) {
            attemptFullContext = !useContext && (D.configs.dipsIntoOuterContext || !D.configs.isExactConflict) && (!this.treat_sllk1_conflict_as_ambiguity || input.index !== startIndex);
          }
          if (D.configs.hasSemanticContext) {
            let predPredictions = D.predicates;
            if (predPredictions != null) {
              let conflictIndex = input.index;
              if (conflictIndex !== startIndex) {
                input.seek(startIndex);
              }
              conflictingAlts = this.evalSemanticContext(predPredictions, outerContext, attemptFullContext || this.reportAmbiguities);
              switch (conflictingAlts.cardinality()) {
                case 0:
                  throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                case 1:
                  return conflictingAlts.nextSetBit(0);
                default:
                  break;
              }
              if (conflictIndex !== startIndex) {
                input.seek(conflictIndex);
              }
            }
          }
          if (!attemptFullContext) {
            if (conflictingAlts != null) {
              if (this.reportAmbiguities && conflictingAlts.cardinality() > 1) {
                this.reportAmbiguity(dfa, D, startIndex, input.index, D.configs.isExactConflict, conflictingAlts, D.configs);
              }
              predictedAlt = conflictingAlts.nextSetBit(0);
            }
            return predictedAlt;
          } else {
            assert(!useContext);
            assert(this.isAcceptState(D, false));
            if (ParserATNSimulator3.debug) {
              console.log("RETRY with outerContext=" + outerContext);
            }
            let fullContextState = this.computeStartState(dfa, outerContext, true);
            if (this.reportAmbiguities) {
              this.reportAttemptingFullContext(dfa, conflictingAlts, nextState, startIndex, input.index);
            }
            input.seek(startIndex);
            return this.execATN(dfa, input, startIndex, fullContextState);
          }
        }
        previous = nextState;
        if (t !== IntStream_1.IntStream.EOF) {
          input.consume();
          t = input.LA(1);
        }
      }
    }
    handleNoViableAlt(input, startIndex, previous) {
      if (previous.s0 != null) {
        let alts = new BitSet_1.BitSet();
        let maxAlt = 0;
        for (let config of previous.s0.configs) {
          if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
            alts.set(config.alt);
            maxAlt = Math.max(maxAlt, config.alt);
          }
        }
        switch (alts.cardinality()) {
          case 0:
            break;
          case 1:
            return alts.nextSetBit(0);
          default:
            if (!previous.s0.configs.hasSemanticContext) {
              return alts.nextSetBit(0);
            }
            let filteredConfigs = new ATNConfigSet_1.ATNConfigSet();
            for (let config of previous.s0.configs) {
              if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
                filteredConfigs.add(config);
              }
            }
            let altToPred = this.getPredsForAmbigAlts(alts, filteredConfigs, maxAlt);
            if (altToPred != null) {
              let predicates = this.getPredicatePredictions(alts, altToPred);
              if (predicates != null) {
                let stopIndex = input.index;
                try {
                  input.seek(startIndex);
                  let filteredAlts = this.evalSemanticContext(predicates, previous.outerContext, false);
                  if (!filteredAlts.isEmpty) {
                    return filteredAlts.nextSetBit(0);
                  }
                } finally {
                  input.seek(stopIndex);
                }
              }
            }
            return alts.nextSetBit(0);
        }
      }
      throw this.noViableAlt(input, previous.outerContext, previous.s0.configs, startIndex);
    }
    computeReachSet(dfa, previous, t, contextCache) {
      let useContext = previous.useContext;
      let remainingGlobalContext = previous.remainingOuterContext;
      let s = previous.s0;
      if (useContext) {
        while (s.isContextSymbol(t)) {
          let next;
          if (remainingGlobalContext != null) {
            remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
            next = s.getContextTarget(this.getReturnState(remainingGlobalContext));
          }
          if (next == null) {
            break;
          }
          assert(remainingGlobalContext != null);
          remainingGlobalContext = remainingGlobalContext.parent;
          s = next;
        }
      }
      assert(!this.isAcceptState(s, useContext));
      if (this.isAcceptState(s, useContext)) {
        return new SimulatorState_1.SimulatorState(previous.outerContext, s, useContext, remainingGlobalContext);
      }
      let s0 = s;
      let target = this.getExistingTargetState(s0, t);
      if (target == null) {
        let result = this.computeTargetState(dfa, s0, remainingGlobalContext, t, useContext, contextCache);
        target = result[0];
        remainingGlobalContext = result[1];
      }
      if (target === ATNSimulator_1.ATNSimulator.ERROR) {
        return void 0;
      }
      assert(!useContext || !target.configs.dipsIntoOuterContext);
      return new SimulatorState_1.SimulatorState(previous.outerContext, target, useContext, remainingGlobalContext);
    }
    getExistingTargetState(s, t) {
      return s.getTarget(t);
    }
    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {
      let closureConfigs = s.configs.toArray();
      let contextElements;
      let reach = new ATNConfigSet_1.ATNConfigSet();
      let stepIntoGlobal;
      do {
        let hasMoreContext = !useContext || remainingGlobalContext != null;
        if (!hasMoreContext) {
          reach.isOutermostConfigSet = true;
        }
        let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
        let skippedStopStates;
        for (let c of closureConfigs) {
          if (ParserATNSimulator3.debug) {
            console.log("testing " + this.getTokenName(t) + " at " + c.toString());
          }
          if (c.state instanceof RuleStopState_1.RuleStopState) {
            assert(c.context.isEmpty);
            if (useContext && !c.reachesIntoOuterContext || t === IntStream_1.IntStream.EOF) {
              if (skippedStopStates == null) {
                skippedStopStates = [];
              }
              skippedStopStates.push(c);
            }
            continue;
          }
          let n = c.state.numberOfOptimizedTransitions;
          for (let ti = 0; ti < n; ti++) {
            let trans = c.state.getOptimizedTransition(ti);
            let target = this.getReachableTarget(c, trans, t);
            if (target != null) {
              reachIntermediate.add(c.transform(target, false), contextCache);
            }
          }
        }
        if (this.optimize_unique_closure && skippedStopStates == null && t !== Token_1.Token.EOF && reachIntermediate.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
          reachIntermediate.isOutermostConfigSet = reach.isOutermostConfigSet;
          reach = reachIntermediate;
          break;
        }
        let collectPredicates = false;
        let treatEofAsEpsilon = t === Token_1.Token.EOF;
        this.closure(reachIntermediate, reach, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon);
        stepIntoGlobal = reach.dipsIntoOuterContext;
        if (t === IntStream_1.IntStream.EOF) {
          reach = this.removeAllConfigsNotInRuleStopState(reach, contextCache);
        }
        if (skippedStopStates != null && (!useContext || !PredictionMode_1.PredictionMode.hasConfigInRuleStopState(reach))) {
          assert(skippedStopStates.length > 0);
          for (let c of skippedStopStates) {
            reach.add(c, contextCache);
          }
        }
        if (useContext && stepIntoGlobal) {
          reach.clear();
          remainingGlobalContext = remainingGlobalContext;
          remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
          let nextContextElement = this.getReturnState(remainingGlobalContext);
          if (contextElements == null) {
            contextElements = new IntegerList_1.IntegerList();
          }
          if (remainingGlobalContext.isEmpty) {
            remainingGlobalContext = void 0;
          } else {
            remainingGlobalContext = remainingGlobalContext.parent;
          }
          contextElements.add(nextContextElement);
          if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            for (let i = 0; i < closureConfigs.length; i++) {
              closureConfigs[i] = closureConfigs[i].appendContext(nextContextElement, contextCache);
            }
          }
        }
      } while (useContext && stepIntoGlobal);
      if (reach.isEmpty) {
        this.setDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
        return [ATNSimulator_1.ATNSimulator.ERROR, remainingGlobalContext];
      }
      let result = this.addDFAEdge(dfa, s, t, contextElements, reach, contextCache);
      return [result, remainingGlobalContext];
    }
    removeAllConfigsNotInRuleStopState(configs, contextCache) {
      if (PredictionMode_1.PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
      }
      let result = new ATNConfigSet_1.ATNConfigSet();
      for (let config of configs) {
        if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
          continue;
        }
        result.add(config, contextCache);
      }
      return result;
    }
    computeStartState(dfa, globalContext, useContext) {
      let s0 = dfa.isPrecedenceDfa ? dfa.getPrecedenceStartState(this._parser.precedence, useContext) : useContext ? dfa.s0full : dfa.s0;
      if (s0 != null) {
        if (!useContext) {
          return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, globalContext);
        }
        s0.setContextSensitive(this.atn);
      }
      let decision = dfa.decision;
      let p = dfa.atnStartState;
      let previousContext = 0;
      let remainingGlobalContext = globalContext;
      let initialContext = useContext ? PredictionContext_1.PredictionContext.EMPTY_FULL : PredictionContext_1.PredictionContext.EMPTY_LOCAL;
      let contextCache = new PredictionContextCache_1.PredictionContextCache();
      if (useContext) {
        if (!this.enable_global_context_dfa) {
          while (remainingGlobalContext != null) {
            if (remainingGlobalContext.isEmpty) {
              previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
              remainingGlobalContext = void 0;
            } else {
              previousContext = this.getReturnState(remainingGlobalContext);
              initialContext = initialContext.appendSingleContext(previousContext, contextCache);
              remainingGlobalContext = remainingGlobalContext.parent;
            }
          }
        }
        while (s0 != null && s0.isContextSensitive && remainingGlobalContext != null) {
          let next;
          remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
          if (remainingGlobalContext.isEmpty) {
            next = s0.getContextTarget(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY);
            previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
            remainingGlobalContext = void 0;
          } else {
            previousContext = this.getReturnState(remainingGlobalContext);
            next = s0.getContextTarget(previousContext);
            initialContext = initialContext.appendSingleContext(previousContext, contextCache);
            remainingGlobalContext = remainingGlobalContext.parent;
          }
          if (next == null) {
            break;
          }
          s0 = next;
        }
      }
      if (s0 != null && !s0.isContextSensitive) {
        return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
      }
      let configs = new ATNConfigSet_1.ATNConfigSet();
      while (true) {
        let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
        let n = p.numberOfTransitions;
        for (let ti = 0; ti < n; ti++) {
          let target = p.transition(ti).target;
          reachIntermediate.add(ATNConfig_1.ATNConfig.create(target, ti + 1, initialContext));
        }
        let hasMoreContext = remainingGlobalContext != null;
        if (!hasMoreContext) {
          configs.isOutermostConfigSet = true;
        }
        let collectPredicates = true;
        this.closure(reachIntermediate, configs, collectPredicates, hasMoreContext, contextCache, false);
        let stepIntoGlobal = configs.dipsIntoOuterContext;
        let next;
        if (useContext && !this.enable_global_context_dfa) {
          s0 = this.addDFAState(dfa, configs, contextCache);
          break;
        } else if (s0 == null) {
          if (!dfa.isPrecedenceDfa) {
            next = this.addDFAState(dfa, configs, contextCache);
            if (useContext) {
              if (!dfa.s0full) {
                dfa.s0full = next;
              } else {
                next = dfa.s0full;
              }
            } else {
              if (!dfa.s0) {
                dfa.s0 = next;
              } else {
                next = dfa.s0;
              }
            }
          } else {
            configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
            next = this.addDFAState(dfa, configs, contextCache);
            dfa.setPrecedenceStartState(this._parser.precedence, useContext, next);
          }
        } else {
          if (dfa.isPrecedenceDfa) {
            configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
          }
          next = this.addDFAState(dfa, configs, contextCache);
          s0.setContextTarget(previousContext, next);
        }
        s0 = next;
        if (!useContext || !stepIntoGlobal) {
          break;
        }
        next.setContextSensitive(this.atn);
        remainingGlobalContext = remainingGlobalContext;
        configs.clear();
        remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
        let nextContextElement = this.getReturnState(remainingGlobalContext);
        if (remainingGlobalContext.isEmpty) {
          remainingGlobalContext = void 0;
        } else {
          remainingGlobalContext = remainingGlobalContext.parent;
        }
        if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
          initialContext = initialContext.appendSingleContext(nextContextElement, contextCache);
        }
        previousContext = nextContextElement;
      }
      return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
    }
    applyPrecedenceFilter(configs, globalContext, contextCache) {
      let statesFromAlt1 = new Map();
      let configSet = new ATNConfigSet_1.ATNConfigSet();
      for (let config of configs) {
        if (config.alt !== 1) {
          continue;
        }
        let updatedContext = config.semanticContext.evalPrecedence(this._parser, globalContext);
        if (updatedContext == null) {
          continue;
        }
        statesFromAlt1.set(config.state.stateNumber, config.context);
        if (updatedContext !== config.semanticContext) {
          configSet.add(config.transform(config.state, false, updatedContext), contextCache);
        } else {
          configSet.add(config, contextCache);
        }
      }
      for (let config of configs) {
        if (config.alt === 1) {
          continue;
        }
        if (!config.isPrecedenceFilterSuppressed) {
          let context = statesFromAlt1.get(config.state.stateNumber);
          if (context != null && context.equals(config.context)) {
            continue;
          }
        }
        configSet.add(config, contextCache);
      }
      return configSet;
    }
    getReachableTarget(source, trans, ttype) {
      if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
      }
      return void 0;
    }
    predicateDFAState(D, configs, nalts) {
      let conflictingAlts = this.getConflictingAltsFromConfigSet(configs);
      if (!conflictingAlts) {
        throw new Error("This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.");
      }
      if (ParserATNSimulator3.debug) {
        console.log("predicateDFAState " + D);
      }
      let altToPred = this.getPredsForAmbigAlts(conflictingAlts, configs, nalts);
      let predPredictions;
      if (altToPred != null) {
        predPredictions = this.getPredicatePredictions(conflictingAlts, altToPred);
        D.predicates = predPredictions;
      }
      return predPredictions;
    }
    getPredsForAmbigAlts(ambigAlts, configs, nalts) {
      let altToPred = new Array(nalts + 1);
      let n = altToPred.length;
      for (let c of configs) {
        if (ambigAlts.get(c.alt)) {
          altToPred[c.alt] = SemanticContext_1.SemanticContext.or(altToPred[c.alt], c.semanticContext);
        }
      }
      let nPredAlts = 0;
      for (let i = 0; i < n; i++) {
        if (altToPred[i] == null) {
          altToPred[i] = SemanticContext_1.SemanticContext.NONE;
        } else if (altToPred[i] !== SemanticContext_1.SemanticContext.NONE) {
          nPredAlts++;
        }
      }
      let result = altToPred;
      if (nPredAlts === 0) {
        result = void 0;
      }
      if (ParserATNSimulator3.debug) {
        console.log("getPredsForAmbigAlts result " + (result ? Arrays_1.Arrays.toString(result) : "undefined"));
      }
      return result;
    }
    getPredicatePredictions(ambigAlts, altToPred) {
      let pairs = [];
      let containsPredicate = false;
      for (let i = 1; i < altToPred.length; i++) {
        let pred = altToPred[i];
        assert(pred != null);
        if (ambigAlts != null && ambigAlts.get(i) && pred === SemanticContext_1.SemanticContext.NONE) {
          pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
        } else if (pred !== SemanticContext_1.SemanticContext.NONE) {
          containsPredicate = true;
          pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
        }
      }
      if (!containsPredicate) {
        return void 0;
      }
      return pairs;
    }
    evalSemanticContext(predPredictions, outerContext, complete) {
      let predictions = new BitSet_1.BitSet();
      for (let pair of predPredictions) {
        if (pair.pred === SemanticContext_1.SemanticContext.NONE) {
          predictions.set(pair.alt);
          if (!complete) {
            break;
          }
          continue;
        }
        let evaluatedResult = this.evalSemanticContextImpl(pair.pred, outerContext, pair.alt);
        if (ParserATNSimulator3.debug || ParserATNSimulator3.dfa_debug) {
          console.log("eval pred " + pair + "=" + evaluatedResult);
        }
        if (evaluatedResult) {
          if (ParserATNSimulator3.debug || ParserATNSimulator3.dfa_debug) {
            console.log("PREDICT " + pair.alt);
          }
          predictions.set(pair.alt);
          if (!complete) {
            break;
          }
        }
      }
      return predictions;
    }
    evalSemanticContextImpl(pred, parserCallStack, alt) {
      return pred.eval(this._parser, parserCallStack);
    }
    closure(sourceConfigs, configs, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon) {
      if (contextCache == null) {
        contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
      }
      let currentConfigs = sourceConfigs;
      let closureBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
      while (currentConfigs.size > 0) {
        let intermediate = new ATNConfigSet_1.ATNConfigSet();
        for (let config of currentConfigs) {
          this.closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContext, contextCache, 0, treatEofAsEpsilon);
        }
        currentConfigs = intermediate;
      }
    }
    closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth, treatEofAsEpsilon) {
      if (ParserATNSimulator3.debug) {
        console.log("closure(" + config.toString(this._parser, true) + ")");
      }
      if (config.state instanceof RuleStopState_1.RuleStopState) {
        if (!config.context.isEmpty) {
          let hasEmpty = config.context.hasEmpty;
          let nonEmptySize = config.context.size - (hasEmpty ? 1 : 0);
          for (let i = 0; i < nonEmptySize; i++) {
            let newContext = config.context.getParent(i);
            let returnState = this.atn.states[config.context.getReturnState(i)];
            let c = ATNConfig_1.ATNConfig.create(returnState, config.alt, newContext, config.semanticContext);
            c.outerContextDepth = config.outerContextDepth;
            c.isPrecedenceFilterSuppressed = config.isPrecedenceFilterSuppressed;
            assert(depth > MIN_INTEGER_VALUE);
            this.closureImpl(c, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth - 1, treatEofAsEpsilon);
          }
          if (!hasEmpty || !hasMoreContexts) {
            return;
          }
          config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
        } else if (!hasMoreContexts) {
          configs.add(config, contextCache);
          return;
        } else {
          if (ParserATNSimulator3.debug) {
            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
          }
          if (config.context === PredictionContext_1.PredictionContext.EMPTY_FULL) {
            config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
          } else if (!config.reachesIntoOuterContext && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
            configs.add(config, contextCache);
          }
        }
      }
      let p = config.state;
      if (!p.onlyHasEpsilonTransitions) {
        configs.add(config, contextCache);
        if (ParserATNSimulator3.debug) {
          console.log("added config " + configs);
        }
      }
      for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
        if (i === 0 && p.stateType === ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY && p.precedenceRuleDecision && !config.context.hasEmpty) {
          let precedenceDecision = p;
          let suppress = true;
          for (let j = 0; j < config.context.size; j++) {
            if (!precedenceDecision.precedenceLoopbackStates.get(config.context.getReturnState(j))) {
              suppress = false;
              break;
            }
          }
          if (suppress) {
            continue;
          }
        }
        let t = p.getOptimizedTransition(i);
        let continueCollecting = !(t instanceof ActionTransition_1.ActionTransition) && collectPredicates;
        let c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, contextCache, treatEofAsEpsilon);
        if (c != null) {
          if (t instanceof RuleTransition_1.RuleTransition) {
            if (intermediate != null && !collectPredicates) {
              intermediate.add(c, contextCache);
              continue;
            }
          }
          let newDepth = depth;
          if (config.state instanceof RuleStopState_1.RuleStopState) {
            if (this.dfa != null && this.dfa.isPrecedenceDfa) {
              let outermostPrecedenceReturn = t.outermostPrecedenceReturn;
              if (outermostPrecedenceReturn === this.dfa.atnStartState.ruleIndex) {
                c.isPrecedenceFilterSuppressed = true;
              }
            }
            c.outerContextDepth = c.outerContextDepth + 1;
            if (!closureBusy.add(c)) {
              continue;
            }
            assert(newDepth > MIN_INTEGER_VALUE);
            newDepth--;
            if (ParserATNSimulator3.debug) {
              console.log("dips into outer ctx: " + c);
            }
          } else if (t instanceof RuleTransition_1.RuleTransition) {
            if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
              assert(c.context === config.context);
              if (newDepth === 0) {
                newDepth--;
                if (!this.tail_call_preserves_sll && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
                  c.outerContextDepth = c.outerContextDepth + 1;
                }
              }
            } else {
              if (newDepth >= 0) {
                newDepth++;
              }
            }
          } else {
            if (!t.isEpsilon && !closureBusy.add(c)) {
              continue;
            }
          }
          this.closureImpl(c, configs, intermediate, closureBusy, continueCollecting, hasMoreContexts, contextCache, newDepth, treatEofAsEpsilon);
        }
      }
    }
    getRuleName(index) {
      if (this._parser != null && index >= 0) {
        return this._parser.ruleNames[index];
      }
      return "<rule " + index + ">";
    }
    getEpsilonTarget(config, t, collectPredicates, inContext, contextCache, treatEofAsEpsilon) {
      switch (t.serializationType) {
        case 3:
          return this.ruleTransition(config, t, contextCache);
        case 10:
          return this.precedenceTransition(config, t, collectPredicates, inContext);
        case 4:
          return this.predTransition(config, t, collectPredicates, inContext);
        case 6:
          return this.actionTransition(config, t);
        case 1:
          return config.transform(t.target, false);
        case 5:
        case 2:
        case 7:
          if (treatEofAsEpsilon) {
            if (t.matches(Token_1.Token.EOF, 0, 1)) {
              return config.transform(t.target, false);
            }
          }
          return void 0;
        default:
          return void 0;
      }
    }
    actionTransition(config, t) {
      if (ParserATNSimulator3.debug) {
        console.log("ACTION edge " + t.ruleIndex + ":" + t.actionIndex);
      }
      return config.transform(t.target, false);
    }
    precedenceTransition(config, pt, collectPredicates, inContext) {
      if (ParserATNSimulator3.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.precedence + ">=_p, ctx dependent=true");
        if (this._parser != null) {
          console.log("context surrounding pred is " + this._parser.getRuleInvocationStack());
        }
      }
      let c;
      if (collectPredicates && inContext) {
        let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
        c = config.transform(pt.target, false, newSemCtx);
      } else {
        c = config.transform(pt.target, false);
      }
      if (ParserATNSimulator3.debug) {
        console.log("config from pred transition=" + c);
      }
      return c;
    }
    predTransition(config, pt, collectPredicates, inContext) {
      if (ParserATNSimulator3.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex + ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this._parser != null) {
          console.log("context surrounding pred is " + this._parser.getRuleInvocationStack());
        }
      }
      let c;
      if (collectPredicates && (!pt.isCtxDependent || pt.isCtxDependent && inContext)) {
        let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
        c = config.transform(pt.target, false, newSemCtx);
      } else {
        c = config.transform(pt.target, false);
      }
      if (ParserATNSimulator3.debug) {
        console.log("config from pred transition=" + c);
      }
      return c;
    }
    ruleTransition(config, t, contextCache) {
      if (ParserATNSimulator3.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
      }
      let returnState = t.followState;
      let newContext;
      if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
        newContext = config.context;
      } else if (contextCache != null) {
        newContext = contextCache.getChild(config.context, returnState.stateNumber);
      } else {
        newContext = config.context.getChild(returnState.stateNumber);
      }
      return config.transform(t.target, false, newContext);
    }
    isConflicted(configset, contextCache) {
      if (configset.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER || configset.size <= 1) {
        return void 0;
      }
      let configs = configset.toArray();
      configs.sort(ParserATNSimulator3.STATE_ALT_SORT_COMPARATOR);
      let exact = !configset.dipsIntoOuterContext;
      let alts = new BitSet_1.BitSet();
      let minAlt = configs[0].alt;
      alts.set(minAlt);
      let currentState = configs[0].state.nonStopStateNumber;
      for (let config of configs) {
        let stateNumber = config.state.nonStopStateNumber;
        if (stateNumber !== currentState) {
          if (config.alt !== minAlt) {
            return void 0;
          }
          currentState = stateNumber;
        }
      }
      let representedAlts;
      if (exact) {
        currentState = configs[0].state.nonStopStateNumber;
        representedAlts = new BitSet_1.BitSet();
        let maxAlt = minAlt;
        for (let config of configs) {
          if (config.state.nonStopStateNumber !== currentState) {
            break;
          }
          let alt = config.alt;
          representedAlts.set(alt);
          maxAlt = alt;
        }
        currentState = configs[0].state.nonStopStateNumber;
        let currentAlt = minAlt;
        for (let config of configs) {
          let stateNumber = config.state.nonStopStateNumber;
          let alt = config.alt;
          if (stateNumber !== currentState) {
            if (currentAlt !== maxAlt) {
              exact = false;
              break;
            }
            currentState = stateNumber;
            currentAlt = minAlt;
          } else if (alt !== currentAlt) {
            if (alt !== representedAlts.nextSetBit(currentAlt + 1)) {
              exact = false;
              break;
            }
            currentAlt = alt;
          }
        }
      }
      currentState = configs[0].state.nonStopStateNumber;
      let firstIndexCurrentState = 0;
      let lastIndexCurrentStateMinAlt = 0;
      let joinedCheckContext = configs[0].context;
      for (let i = 1; i < configs.length; i++) {
        let config = configs[i];
        if (config.alt !== minAlt) {
          break;
        }
        if (config.state.nonStopStateNumber !== currentState) {
          break;
        }
        lastIndexCurrentStateMinAlt = i;
        joinedCheckContext = contextCache.join(joinedCheckContext, configs[i].context);
      }
      for (let i = lastIndexCurrentStateMinAlt + 1; i < configs.length; i++) {
        let config = configs[i];
        let state = config.state;
        alts.set(config.alt);
        if (state.nonStopStateNumber !== currentState) {
          currentState = state.nonStopStateNumber;
          firstIndexCurrentState = i;
          lastIndexCurrentStateMinAlt = i;
          joinedCheckContext = config.context;
          for (let j = firstIndexCurrentState + 1; j < configs.length; j++) {
            let config2 = configs[j];
            if (config2.alt !== minAlt) {
              break;
            }
            if (config2.state.nonStopStateNumber !== currentState) {
              break;
            }
            lastIndexCurrentStateMinAlt = j;
            joinedCheckContext = contextCache.join(joinedCheckContext, config2.context);
          }
          i = lastIndexCurrentStateMinAlt;
          continue;
        }
        let joinedCheckContext2 = config.context;
        let currentAlt = config.alt;
        let lastIndexCurrentStateCurrentAlt = i;
        for (let j = lastIndexCurrentStateCurrentAlt + 1; j < configs.length; j++) {
          let config2 = configs[j];
          if (config2.alt !== currentAlt) {
            break;
          }
          if (config2.state.nonStopStateNumber !== currentState) {
            break;
          }
          lastIndexCurrentStateCurrentAlt = j;
          joinedCheckContext2 = contextCache.join(joinedCheckContext2, config2.context);
        }
        i = lastIndexCurrentStateCurrentAlt;
        let check = contextCache.join(joinedCheckContext, joinedCheckContext2);
        if (!joinedCheckContext.equals(check)) {
          return void 0;
        }
        exact = exact && joinedCheckContext.equals(joinedCheckContext2);
      }
      return new ConflictInfo_1.ConflictInfo(alts, exact);
    }
    getConflictingAltsFromConfigSet(configs) {
      let conflictingAlts = configs.conflictingAlts;
      if (conflictingAlts == null && configs.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet_1.BitSet();
        conflictingAlts.set(configs.uniqueAlt);
      }
      return conflictingAlts;
    }
    getTokenName(t) {
      if (t === Token_1.Token.EOF) {
        return "EOF";
      }
      let vocabulary = this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
      let displayName = vocabulary.getDisplayName(t);
      if (displayName === String(t)) {
        return displayName;
      }
      return displayName + "<" + t + ">";
    }
    getLookaheadName(input) {
      return this.getTokenName(input.LA(1));
    }
    dumpDeadEndConfigs(nvae) {
      console.log("dead end configs: ");
      let deadEndConfigs = nvae.deadEndConfigs;
      if (!deadEndConfigs) {
        return;
      }
      for (let c of deadEndConfigs) {
        let trans = "no edges";
        if (c.state.numberOfOptimizedTransitions > 0) {
          let t = c.state.getOptimizedTransition(0);
          if (t instanceof AtomTransition_1.AtomTransition) {
            trans = "Atom " + this.getTokenName(t._label);
          } else if (t instanceof SetTransition_1.SetTransition) {
            let not = t instanceof NotSetTransition_1.NotSetTransition;
            trans = (not ? "~" : "") + "Set " + t.set.toString();
          }
        }
        console.log(c.toString(this._parser, true) + ":" + trans);
      }
    }
    noViableAlt(input, outerContext, configs, startIndex) {
      return new NoViableAltException_1.NoViableAltException(this._parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }
    getUniqueAlt(configs) {
      let alt = ATN_1.ATN.INVALID_ALT_NUMBER;
      for (let c of configs) {
        if (alt === ATN_1.ATN.INVALID_ALT_NUMBER) {
          alt = c.alt;
        } else if (c.alt !== alt) {
          return ATN_1.ATN.INVALID_ALT_NUMBER;
        }
      }
      return alt;
    }
    configWithAltAtStopState(configs, alt) {
      for (let c of configs) {
        if (c.alt === alt) {
          if (c.state instanceof RuleStopState_1.RuleStopState) {
            return true;
          }
        }
      }
      return false;
    }
    addDFAEdge(dfa, fromState, t, contextTransitions, toConfigs, contextCache) {
      assert(contextTransitions == null || contextTransitions.isEmpty || dfa.isContextSensitive);
      let from = fromState;
      let to = this.addDFAState(dfa, toConfigs, contextCache);
      if (contextTransitions != null) {
        for (let context of contextTransitions.toArray()) {
          if (context === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            if (from.configs.isOutermostConfigSet) {
              continue;
            }
          }
          from.setContextSensitive(this.atn);
          from.setContextSymbol(t);
          let next = from.getContextTarget(context);
          if (next != null) {
            from = next;
            continue;
          }
          next = this.addDFAContextState(dfa, from.configs, context, contextCache);
          assert(context !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY || next.configs.isOutermostConfigSet);
          from.setContextTarget(context, next);
          from = next;
        }
      }
      if (ParserATNSimulator3.debug) {
        console.log("EDGE " + from + " -> " + to + " upon " + this.getTokenName(t));
      }
      this.setDFAEdge(from, t, to);
      if (ParserATNSimulator3.debug) {
        console.log("DFA=\n" + dfa.toString(this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY, this._parser != null ? this._parser.ruleNames : void 0));
      }
      return to;
    }
    setDFAEdge(p, t, q) {
      if (p != null) {
        p.setTarget(t, q);
      }
    }
    addDFAContextState(dfa, configs, returnContext, contextCache) {
      if (returnContext !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
        let contextConfigs = new ATNConfigSet_1.ATNConfigSet();
        for (let config of configs) {
          contextConfigs.add(config.appendContext(returnContext, contextCache));
        }
        return this.addDFAState(dfa, contextConfigs, contextCache);
      } else {
        assert(!configs.isOutermostConfigSet, "Shouldn't be adding a duplicate edge.");
        configs = configs.clone(true);
        configs.isOutermostConfigSet = true;
        return this.addDFAState(dfa, configs, contextCache);
      }
    }
    addDFAState(dfa, configs, contextCache) {
      let enableDfa = this.enable_global_context_dfa || !configs.isOutermostConfigSet;
      if (enableDfa) {
        if (!configs.isReadOnly) {
          configs.optimizeConfigs(this);
        }
        let proposed = this.createDFAState(dfa, configs);
        let existing = dfa.states.get(proposed);
        if (existing != null) {
          return existing;
        }
      }
      if (!configs.isReadOnly) {
        if (configs.conflictInfo == null) {
          configs.conflictInfo = this.isConflicted(configs, contextCache);
        }
      }
      let newState = this.createDFAState(dfa, configs.clone(true));
      let decisionState = this.atn.getDecisionState(dfa.decision);
      let predictedAlt = this.getUniqueAlt(configs);
      if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
        newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(predictedAlt);
      } else if (configs.conflictingAlts != null) {
        let conflictingAlts = configs.conflictingAlts;
        if (conflictingAlts) {
          newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(conflictingAlts.nextSetBit(0));
        }
      }
      if (newState.isAcceptState && configs.hasSemanticContext) {
        this.predicateDFAState(newState, configs, decisionState.numberOfTransitions);
      }
      if (!enableDfa) {
        return newState;
      }
      let added = dfa.addState(newState);
      if (ParserATNSimulator3.debug && added === newState) {
        console.log("adding new DFA state: " + newState);
      }
      return added;
    }
    createDFAState(dfa, configs) {
      return new DFAState_1.DFAState(configs);
    }
    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {
      if (ParserATNSimulator3.debug || ParserATNSimulator3.retry_debug) {
        let interval = Interval_1.Interval.of(startIndex, stopIndex);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + conflictState.s0.configs + ", input=" + this._parser.inputStream.getText(interval));
      }
      if (this._parser != null) {
        let listener = this._parser.getErrorListenerDispatch();
        if (listener.reportAttemptingFullContext) {
          listener.reportAttemptingFullContext(this._parser, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
        }
      }
    }
    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {
      if (ParserATNSimulator3.debug || ParserATNSimulator3.retry_debug) {
        let interval = Interval_1.Interval.of(startIndex, stopIndex);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + acceptState.s0.configs + ", input=" + this._parser.inputStream.getText(interval));
      }
      if (this._parser != null) {
        let listener = this._parser.getErrorListenerDispatch();
        if (listener.reportContextSensitivity) {
          listener.reportContextSensitivity(this._parser, dfa, startIndex, stopIndex, prediction, acceptState);
        }
      }
    }
    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
      if (ParserATNSimulator3.debug || ParserATNSimulator3.retry_debug) {
        let interval = Interval_1.Interval.of(startIndex, stopIndex);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs + ", input=" + this._parser.inputStream.getText(interval));
      }
      if (this._parser != null) {
        let listener = this._parser.getErrorListenerDispatch();
        if (listener.reportAmbiguity) {
          listener.reportAmbiguity(this._parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
        }
      }
    }
    getReturnState(context) {
      if (context.isEmpty) {
        return PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
      }
      let state = this.atn.states[context.invokingState];
      let transition = state.transition(0);
      return transition.followState.stateNumber;
    }
    skipTailCalls(context) {
      if (!this.optimize_tail_calls) {
        return context;
      }
      while (!context.isEmpty) {
        let state = this.atn.states[context.invokingState];
        assert(state.numberOfTransitions === 1 && state.transition(0).serializationType === 3);
        let transition = state.transition(0);
        if (!transition.tailCall) {
          break;
        }
        context = context.parent;
      }
      return context;
    }
    get parser() {
      return this._parser;
    }
  };
  ParserATNSimulator2.debug = false;
  ParserATNSimulator2.dfa_debug = false;
  ParserATNSimulator2.retry_debug = false;
  ParserATNSimulator2.STATE_ALT_SORT_COMPARATOR = (o1, o2) => {
    let diff = o1.state.nonStopStateNumber - o2.state.nonStopStateNumber;
    if (diff !== 0) {
      return diff;
    }
    diff = o1.alt - o2.alt;
    if (diff !== 0) {
      return diff;
    }
    return 0;
  };
  __decorate([
    Decorators_1.NotNull
  ], ParserATNSimulator2.prototype, "predictionMode", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ParserATNSimulator2.prototype, "getPredictionMode", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "setPredictionMode", null);
  __decorate([
    Decorators_1.Override
  ], ParserATNSimulator2.prototype, "reset", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "adaptivePredict", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "getStartState", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "execDFA", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "execATN", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "handleNoViableAlt", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "getExistingTargetState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "computeTargetState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "removeAllConfigsNotInRuleStopState", null);
  __decorate([
    Decorators_1.NotNull
  ], ParserATNSimulator2.prototype, "computeStartState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "applyPrecedenceFilter", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "getReachableTarget", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "getPredsForAmbigAlts", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "evalSemanticContext", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "evalSemanticContextImpl", null);
  __decorate([
    __param(1, Decorators_1.NotNull),
    __param(4, Decorators_1.Nullable)
  ], ParserATNSimulator2.prototype, "closure", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.Nullable),
    __param(3, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "closureImpl", null);
  __decorate([
    Decorators_1.NotNull
  ], ParserATNSimulator2.prototype, "getRuleName", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "getEpsilonTarget", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "actionTransition", null);
  __decorate([
    Decorators_1.Nullable,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "precedenceTransition", null);
  __decorate([
    Decorators_1.Nullable,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "predTransition", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.Nullable)
  ], ParserATNSimulator2.prototype, "ruleTransition", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "isConflicted", null);
  __decorate([
    Decorators_1.NotNull
  ], ParserATNSimulator2.prototype, "getTokenName", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "dumpDeadEndConfigs", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "noViableAlt", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "getUniqueAlt", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "configWithAltAtStopState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "addDFAEdge", null);
  __decorate([
    __param(0, Decorators_1.Nullable),
    __param(2, Decorators_1.Nullable)
  ], ParserATNSimulator2.prototype, "setDFAEdge", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "addDFAContextState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "addDFAState", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "createDFAState", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "reportAttemptingFullContext", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "reportContextSensitivity", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
  ], ParserATNSimulator2.prototype, "reportAmbiguity", null);
  ParserATNSimulator2 = __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParserATNSimulator2);
  exports.ParserATNSimulator = ParserATNSimulator2;
});

// node_modules/antlr4ts/atn/PlusBlockStartState.js
var require_PlusBlockStartState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.PlusBlockStartState = void 0;
  var ATNStateType_1 = require_ATNStateType();
  var BlockStartState_1 = require_BlockStartState();
  var Decorators_1 = require_Decorators();
  var PlusBlockStartState = class extends BlockStartState_1.BlockStartState {
    get stateType() {
      return ATNStateType_1.ATNStateType.PLUS_BLOCK_START;
    }
  };
  __decorate([
    Decorators_1.Override
  ], PlusBlockStartState.prototype, "stateType", null);
  exports.PlusBlockStartState = PlusBlockStartState;
});

// node_modules/antlr4ts/atn/PlusLoopbackState.js
var require_PlusLoopbackState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.PlusLoopbackState = void 0;
  var ATNStateType_1 = require_ATNStateType();
  var DecisionState_1 = require_DecisionState();
  var Decorators_1 = require_Decorators();
  var PlusLoopbackState = class extends DecisionState_1.DecisionState {
    get stateType() {
      return ATNStateType_1.ATNStateType.PLUS_LOOP_BACK;
    }
  };
  __decorate([
    Decorators_1.Override
  ], PlusLoopbackState.prototype, "stateType", null);
  exports.PlusLoopbackState = PlusLoopbackState;
});

// node_modules/antlr4ts/atn/PrecedencePredicateTransition.js
var require_PrecedencePredicateTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.PrecedencePredicateTransition = void 0;
  var AbstractPredicateTransition_1 = require_AbstractPredicateTransition();
  var Decorators_1 = require_Decorators();
  var SemanticContext_1 = require_SemanticContext();
  var PrecedencePredicateTransition = class PrecedencePredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
    constructor(target, precedence) {
      super(target);
      this.precedence = precedence;
    }
    get serializationType() {
      return 10;
    }
    get isEpsilon() {
      return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    get predicate() {
      return new SemanticContext_1.SemanticContext.PrecedencePredicate(this.precedence);
    }
    toString() {
      return this.precedence + " >= _p";
    }
  };
  __decorate([
    Decorators_1.Override
  ], PrecedencePredicateTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override
  ], PrecedencePredicateTransition.prototype, "isEpsilon", null);
  __decorate([
    Decorators_1.Override
  ], PrecedencePredicateTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override
  ], PrecedencePredicateTransition.prototype, "toString", null);
  PrecedencePredicateTransition = __decorate([
    __param(0, Decorators_1.NotNull)
  ], PrecedencePredicateTransition);
  exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
});

// node_modules/antlr4ts/atn/RangeTransition.js
var require_RangeTransition = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RangeTransition = void 0;
  var IntervalSet_1 = require_IntervalSet();
  var Decorators_1 = require_Decorators();
  var Transition_1 = require_Transition();
  var RangeTransition = class RangeTransition extends Transition_1.Transition {
    constructor(target, from, to) {
      super(target);
      this.from = from;
      this.to = to;
    }
    get serializationType() {
      return 2;
    }
    get label() {
      return IntervalSet_1.IntervalSet.of(this.from, this.to);
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= this.from && symbol <= this.to;
    }
    toString() {
      return "'" + String.fromCodePoint(this.from) + "'..'" + String.fromCodePoint(this.to) + "'";
    }
  };
  __decorate([
    Decorators_1.Override
  ], RangeTransition.prototype, "serializationType", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], RangeTransition.prototype, "label", null);
  __decorate([
    Decorators_1.Override
  ], RangeTransition.prototype, "matches", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
  ], RangeTransition.prototype, "toString", null);
  RangeTransition = __decorate([
    __param(0, Decorators_1.NotNull)
  ], RangeTransition);
  exports.RangeTransition = RangeTransition;
});

// node_modules/antlr4ts/atn/RuleStartState.js
var require_RuleStartState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleStartState = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var Decorators_1 = require_Decorators();
  var RuleStartState = class extends ATNState_1.ATNState {
    constructor() {
      super(...arguments);
      this.isPrecedenceRule = false;
      this.leftFactored = false;
    }
    get stateType() {
      return ATNStateType_1.ATNStateType.RULE_START;
    }
  };
  __decorate([
    Decorators_1.Override
  ], RuleStartState.prototype, "stateType", null);
  exports.RuleStartState = RuleStartState;
});

// node_modules/antlr4ts/atn/StarBlockStartState.js
var require_StarBlockStartState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.StarBlockStartState = void 0;
  var ATNStateType_1 = require_ATNStateType();
  var BlockStartState_1 = require_BlockStartState();
  var Decorators_1 = require_Decorators();
  var StarBlockStartState = class extends BlockStartState_1.BlockStartState {
    get stateType() {
      return ATNStateType_1.ATNStateType.STAR_BLOCK_START;
    }
  };
  __decorate([
    Decorators_1.Override
  ], StarBlockStartState.prototype, "stateType", null);
  exports.StarBlockStartState = StarBlockStartState;
});

// node_modules/antlr4ts/atn/StarLoopbackState.js
var require_StarLoopbackState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.StarLoopbackState = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var Decorators_1 = require_Decorators();
  var StarLoopbackState = class extends ATNState_1.ATNState {
    get loopEntryState() {
      return this.transition(0).target;
    }
    get stateType() {
      return ATNStateType_1.ATNStateType.STAR_LOOP_BACK;
    }
  };
  __decorate([
    Decorators_1.Override
  ], StarLoopbackState.prototype, "stateType", null);
  exports.StarLoopbackState = StarLoopbackState;
});

// node_modules/antlr4ts/atn/TokensStartState.js
var require_TokensStartState = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TokensStartState = void 0;
  var ATNStateType_1 = require_ATNStateType();
  var DecisionState_1 = require_DecisionState();
  var Decorators_1 = require_Decorators();
  var TokensStartState = class extends DecisionState_1.DecisionState {
    get stateType() {
      return ATNStateType_1.ATNStateType.TOKEN_START;
    }
  };
  __decorate([
    Decorators_1.Override
  ], TokensStartState.prototype, "stateType", null);
  exports.TokensStartState = TokensStartState;
});

// node_modules/antlr4ts/misc/UUID.js
var require_UUID = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.UUID = void 0;
  var MurmurHash_1 = require_MurmurHash();
  var UUID = class {
    constructor(mostSigBits, moreSigBits, lessSigBits, leastSigBits) {
      this.data = new Uint32Array(4);
      this.data[0] = mostSigBits;
      this.data[1] = moreSigBits;
      this.data[2] = lessSigBits;
      this.data[3] = leastSigBits;
    }
    static fromString(data) {
      if (!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(data)) {
        throw new Error("Incorrectly formatted UUID");
      }
      let segments = data.split("-");
      let mostSigBits = parseInt(segments[0], 16);
      let moreSigBits = (parseInt(segments[1], 16) << 16 >>> 0) + parseInt(segments[2], 16);
      let lessSigBits = (parseInt(segments[3], 16) << 16 >>> 0) + parseInt(segments[4].substr(0, 4), 16);
      let leastSigBits = parseInt(segments[4].substr(-8), 16);
      return new UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
    }
    hashCode() {
      return MurmurHash_1.MurmurHash.hashCode([this.data[0], this.data[1], this.data[2], this.data[3]]);
    }
    equals(obj) {
      if (obj === this) {
        return true;
      } else if (!(obj instanceof UUID)) {
        return false;
      }
      return this.data[0] === obj.data[0] && this.data[1] === obj.data[1] && this.data[2] === obj.data[2] && this.data[3] === obj.data[3];
    }
    toString() {
      return ("00000000" + this.data[0].toString(16)).substr(-8) + "-" + ("0000" + (this.data[1] >>> 16).toString(16)).substr(-4) + "-" + ("0000" + this.data[1].toString(16)).substr(-4) + "-" + ("0000" + (this.data[2] >>> 16).toString(16)).substr(-4) + "-" + ("0000" + this.data[2].toString(16)).substr(-4) + ("00000000" + this.data[3].toString(16)).substr(-8);
    }
  };
  exports.UUID = UUID;
});

// node_modules/antlr4ts/atn/ATNDeserializer.js
var require_ATNDeserializer = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ATNDeserializer = void 0;
  var ActionTransition_1 = require_ActionTransition();
  var Array2DHashSet_1 = require_Array2DHashSet();
  var ATN_1 = require_ATN();
  var ATNDeserializationOptions_1 = require_ATNDeserializationOptions();
  var ATNStateType_1 = require_ATNStateType();
  var AtomTransition_1 = require_AtomTransition();
  var BasicBlockStartState_1 = require_BasicBlockStartState();
  var BasicState_1 = require_BasicState();
  var BitSet_1 = require_BitSet();
  var BlockEndState_1 = require_BlockEndState();
  var BlockStartState_1 = require_BlockStartState();
  var DecisionState_1 = require_DecisionState();
  var DFA_1 = require_DFA();
  var EpsilonTransition_1 = require_EpsilonTransition();
  var IntervalSet_1 = require_IntervalSet();
  var InvalidState_1 = require_InvalidState();
  var LexerChannelAction_1 = require_LexerChannelAction();
  var LexerCustomAction_1 = require_LexerCustomAction();
  var LexerModeAction_1 = require_LexerModeAction();
  var LexerMoreAction_1 = require_LexerMoreAction();
  var LexerPopModeAction_1 = require_LexerPopModeAction();
  var LexerPushModeAction_1 = require_LexerPushModeAction();
  var LexerSkipAction_1 = require_LexerSkipAction();
  var LexerTypeAction_1 = require_LexerTypeAction();
  var LoopEndState_1 = require_LoopEndState();
  var Decorators_1 = require_Decorators();
  var NotSetTransition_1 = require_NotSetTransition();
  var ParserATNSimulator_1 = require_ParserATNSimulator();
  var PlusBlockStartState_1 = require_PlusBlockStartState();
  var PlusLoopbackState_1 = require_PlusLoopbackState();
  var PrecedencePredicateTransition_1 = require_PrecedencePredicateTransition();
  var PredicateTransition_1 = require_PredicateTransition();
  var RangeTransition_1 = require_RangeTransition();
  var RuleStartState_1 = require_RuleStartState();
  var RuleStopState_1 = require_RuleStopState();
  var RuleTransition_1 = require_RuleTransition();
  var SetTransition_1 = require_SetTransition();
  var StarBlockStartState_1 = require_StarBlockStartState();
  var StarLoopbackState_1 = require_StarLoopbackState();
  var StarLoopEntryState_1 = require_StarLoopEntryState();
  var Token_1 = require_Token();
  var TokensStartState_1 = require_TokensStartState();
  var UUID_1 = require_UUID();
  var WildcardTransition_1 = require_WildcardTransition();
  var UnicodeDeserializingMode;
  (function(UnicodeDeserializingMode2) {
    UnicodeDeserializingMode2[UnicodeDeserializingMode2["UNICODE_BMP"] = 0] = "UNICODE_BMP";
    UnicodeDeserializingMode2[UnicodeDeserializingMode2["UNICODE_SMP"] = 1] = "UNICODE_SMP";
  })(UnicodeDeserializingMode || (UnicodeDeserializingMode = {}));
  var ATNDeserializer3 = class {
    constructor(deserializationOptions) {
      if (deserializationOptions === void 0) {
        deserializationOptions = ATNDeserializationOptions_1.ATNDeserializationOptions.defaultOptions;
      }
      this.deserializationOptions = deserializationOptions;
    }
    static get SERIALIZED_VERSION() {
      return 3;
    }
    static isFeatureSupported(feature, actualUuid) {
      let featureIndex = ATNDeserializer3.SUPPORTED_UUIDS.findIndex((e) => e.equals(feature));
      if (featureIndex < 0) {
        return false;
      }
      return ATNDeserializer3.SUPPORTED_UUIDS.findIndex((e) => e.equals(actualUuid)) >= featureIndex;
    }
    static getUnicodeDeserializer(mode) {
      if (mode === 0) {
        return {
          readUnicode: (data, p) => {
            return ATNDeserializer3.toInt(data[p]);
          },
          size: 1
        };
      } else {
        return {
          readUnicode: (data, p) => {
            return ATNDeserializer3.toInt32(data, p);
          },
          size: 2
        };
      }
    }
    deserialize(data) {
      data = data.slice(0);
      for (let i = 1; i < data.length; i++) {
        data[i] = data[i] - 2 & 65535;
      }
      let p = 0;
      let version = ATNDeserializer3.toInt(data[p++]);
      if (version !== ATNDeserializer3.SERIALIZED_VERSION) {
        let reason = `Could not deserialize ATN with version ${version} (expected ${ATNDeserializer3.SERIALIZED_VERSION}).`;
        throw new Error(reason);
      }
      let uuid = ATNDeserializer3.toUUID(data, p);
      p += 8;
      if (ATNDeserializer3.SUPPORTED_UUIDS.findIndex((e) => e.equals(uuid)) < 0) {
        let reason = `Could not deserialize ATN with UUID ${uuid} (expected ${ATNDeserializer3.SERIALIZED_UUID} or a legacy UUID).`;
        throw new Error(reason);
      }
      let supportsLexerActions = ATNDeserializer3.isFeatureSupported(ATNDeserializer3.ADDED_LEXER_ACTIONS, uuid);
      let grammarType = ATNDeserializer3.toInt(data[p++]);
      let maxTokenType = ATNDeserializer3.toInt(data[p++]);
      let atn = new ATN_1.ATN(grammarType, maxTokenType);
      let loopBackStateNumbers = [];
      let endStateNumbers = [];
      let nstates = ATNDeserializer3.toInt(data[p++]);
      for (let i = 0; i < nstates; i++) {
        let stype = ATNDeserializer3.toInt(data[p++]);
        if (stype === ATNStateType_1.ATNStateType.INVALID_TYPE) {
          atn.addState(new InvalidState_1.InvalidState());
          continue;
        }
        let ruleIndex = ATNDeserializer3.toInt(data[p++]);
        if (ruleIndex === 65535) {
          ruleIndex = -1;
        }
        let s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNStateType_1.ATNStateType.LOOP_END) {
          let loopBackStateNumber = ATNDeserializer3.toInt(data[p++]);
          loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if (s instanceof BlockStartState_1.BlockStartState) {
          let endStateNumber = ATNDeserializer3.toInt(data[p++]);
          endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
      }
      for (let pair of loopBackStateNumbers) {
        pair[0].loopBackState = atn.states[pair[1]];
      }
      for (let pair of endStateNumbers) {
        pair[0].endState = atn.states[pair[1]];
      }
      let numNonGreedyStates = ATNDeserializer3.toInt(data[p++]);
      for (let i = 0; i < numNonGreedyStates; i++) {
        let stateNumber = ATNDeserializer3.toInt(data[p++]);
        atn.states[stateNumber].nonGreedy = true;
      }
      let numSllDecisions = ATNDeserializer3.toInt(data[p++]);
      for (let i = 0; i < numSllDecisions; i++) {
        let stateNumber = ATNDeserializer3.toInt(data[p++]);
        atn.states[stateNumber].sll = true;
      }
      let numPrecedenceStates = ATNDeserializer3.toInt(data[p++]);
      for (let i = 0; i < numPrecedenceStates; i++) {
        let stateNumber = ATNDeserializer3.toInt(data[p++]);
        atn.states[stateNumber].isPrecedenceRule = true;
      }
      let nrules = ATNDeserializer3.toInt(data[p++]);
      if (atn.grammarType === 0) {
        atn.ruleToTokenType = new Int32Array(nrules);
      }
      atn.ruleToStartState = new Array(nrules);
      for (let i = 0; i < nrules; i++) {
        let s = ATNDeserializer3.toInt(data[p++]);
        let startState = atn.states[s];
        startState.leftFactored = ATNDeserializer3.toInt(data[p++]) !== 0;
        atn.ruleToStartState[i] = startState;
        if (atn.grammarType === 0) {
          let tokenType = ATNDeserializer3.toInt(data[p++]);
          if (tokenType === 65535) {
            tokenType = Token_1.Token.EOF;
          }
          atn.ruleToTokenType[i] = tokenType;
          if (!ATNDeserializer3.isFeatureSupported(ATNDeserializer3.ADDED_LEXER_ACTIONS, uuid)) {
            let actionIndexIgnored = ATNDeserializer3.toInt(data[p++]);
            if (actionIndexIgnored === 65535) {
              actionIndexIgnored = -1;
            }
          }
        }
      }
      atn.ruleToStopState = new Array(nrules);
      for (let state of atn.states) {
        if (!(state instanceof RuleStopState_1.RuleStopState)) {
          continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
      }
      let nmodes = ATNDeserializer3.toInt(data[p++]);
      for (let i = 0; i < nmodes; i++) {
        let s = ATNDeserializer3.toInt(data[p++]);
        atn.modeToStartState.push(atn.states[s]);
      }
      atn.modeToDFA = new Array(nmodes);
      for (let i = 0; i < nmodes; i++) {
        atn.modeToDFA[i] = new DFA_1.DFA(atn.modeToStartState[i]);
      }
      let sets = [];
      p = this.deserializeSets(data, p, sets, ATNDeserializer3.getUnicodeDeserializer(0));
      if (ATNDeserializer3.isFeatureSupported(ATNDeserializer3.ADDED_UNICODE_SMP, uuid)) {
        p = this.deserializeSets(data, p, sets, ATNDeserializer3.getUnicodeDeserializer(1));
      }
      let nedges = ATNDeserializer3.toInt(data[p++]);
      for (let i = 0; i < nedges; i++) {
        let src = ATNDeserializer3.toInt(data[p]);
        let trg = ATNDeserializer3.toInt(data[p + 1]);
        let ttype = ATNDeserializer3.toInt(data[p + 2]);
        let arg1 = ATNDeserializer3.toInt(data[p + 3]);
        let arg2 = ATNDeserializer3.toInt(data[p + 4]);
        let arg3 = ATNDeserializer3.toInt(data[p + 5]);
        let trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        let srcState = atn.states[src];
        srcState.addTransition(trans);
        p += 6;
      }
      let returnTransitionsSet = new Array2DHashSet_1.Array2DHashSet({
        hashCode: (o) => o.stopState ^ o.returnState ^ o.outermostPrecedenceReturn,
        equals: (a, b) => {
          return a.stopState === b.stopState && a.returnState === b.returnState && a.outermostPrecedenceReturn === b.outermostPrecedenceReturn;
        }
      });
      let returnTransitions = [];
      for (let state of atn.states) {
        let returningToLeftFactored = state.ruleIndex >= 0 && atn.ruleToStartState[state.ruleIndex].leftFactored;
        for (let i = 0; i < state.numberOfTransitions; i++) {
          let t = state.transition(i);
          if (!(t instanceof RuleTransition_1.RuleTransition)) {
            continue;
          }
          let ruleTransition = t;
          let returningFromLeftFactored = atn.ruleToStartState[ruleTransition.target.ruleIndex].leftFactored;
          if (!returningFromLeftFactored && returningToLeftFactored) {
            continue;
          }
          let outermostPrecedenceReturn = -1;
          if (atn.ruleToStartState[ruleTransition.target.ruleIndex].isPrecedenceRule) {
            if (ruleTransition.precedence === 0) {
              outermostPrecedenceReturn = ruleTransition.target.ruleIndex;
            }
          }
          let current = {stopState: ruleTransition.target.ruleIndex, returnState: ruleTransition.followState.stateNumber, outermostPrecedenceReturn};
          if (returnTransitionsSet.add(current)) {
            returnTransitions.push(current);
          }
        }
      }
      for (let returnTransition of returnTransitions) {
        let transition = new EpsilonTransition_1.EpsilonTransition(atn.states[returnTransition.returnState], returnTransition.outermostPrecedenceReturn);
        atn.ruleToStopState[returnTransition.stopState].addTransition(transition);
      }
      for (let state of atn.states) {
        if (state instanceof BlockStartState_1.BlockStartState) {
          if (state.endState === void 0) {
            throw new Error("IllegalStateException");
          }
          if (state.endState.startState !== void 0) {
            throw new Error("IllegalStateException");
          }
          state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState_1.PlusLoopbackState) {
          let loopbackState = state;
          for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
            let target = loopbackState.transition(i).target;
            if (target instanceof PlusBlockStartState_1.PlusBlockStartState) {
              target.loopBackState = loopbackState;
            }
          }
        } else if (state instanceof StarLoopbackState_1.StarLoopbackState) {
          let loopbackState = state;
          for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
            let target = loopbackState.transition(i).target;
            if (target instanceof StarLoopEntryState_1.StarLoopEntryState) {
              target.loopBackState = loopbackState;
            }
          }
        }
      }
      let ndecisions = ATNDeserializer3.toInt(data[p++]);
      for (let i = 1; i <= ndecisions; i++) {
        let s = ATNDeserializer3.toInt(data[p++]);
        let decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i - 1;
      }
      if (atn.grammarType === 0) {
        if (supportsLexerActions) {
          atn.lexerActions = new Array(ATNDeserializer3.toInt(data[p++]));
          for (let i = 0; i < atn.lexerActions.length; i++) {
            let actionType = ATNDeserializer3.toInt(data[p++]);
            let data1 = ATNDeserializer3.toInt(data[p++]);
            if (data1 === 65535) {
              data1 = -1;
            }
            let data2 = ATNDeserializer3.toInt(data[p++]);
            if (data2 === 65535) {
              data2 = -1;
            }
            let lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
          }
        } else {
          let legacyLexerActions = [];
          for (let state of atn.states) {
            for (let i = 0; i < state.numberOfTransitions; i++) {
              let transition = state.transition(i);
              if (!(transition instanceof ActionTransition_1.ActionTransition)) {
                continue;
              }
              let ruleIndex = transition.ruleIndex;
              let actionIndex = transition.actionIndex;
              let lexerAction = new LexerCustomAction_1.LexerCustomAction(ruleIndex, actionIndex);
              state.setTransition(i, new ActionTransition_1.ActionTransition(transition.target, ruleIndex, legacyLexerActions.length, false));
              legacyLexerActions.push(lexerAction);
            }
          }
          atn.lexerActions = legacyLexerActions;
        }
      }
      this.markPrecedenceDecisions(atn);
      atn.decisionToDFA = new Array(ndecisions);
      for (let i = 0; i < ndecisions; i++) {
        atn.decisionToDFA[i] = new DFA_1.DFA(atn.decisionToState[i], i);
      }
      if (this.deserializationOptions.isVerifyATN) {
        this.verifyATN(atn);
      }
      if (this.deserializationOptions.isGenerateRuleBypassTransitions && atn.grammarType === 1) {
        atn.ruleToTokenType = new Int32Array(atn.ruleToStartState.length);
        for (let i = 0; i < atn.ruleToStartState.length; i++) {
          atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
        }
        for (let i = 0; i < atn.ruleToStartState.length; i++) {
          let bypassStart = new BasicBlockStartState_1.BasicBlockStartState();
          bypassStart.ruleIndex = i;
          atn.addState(bypassStart);
          let bypassStop = new BlockEndState_1.BlockEndState();
          bypassStop.ruleIndex = i;
          atn.addState(bypassStop);
          bypassStart.endState = bypassStop;
          atn.defineDecisionState(bypassStart);
          bypassStop.startState = bypassStart;
          let endState;
          let excludeTransition;
          if (atn.ruleToStartState[i].isPrecedenceRule) {
            endState = void 0;
            for (let state of atn.states) {
              if (state.ruleIndex !== i) {
                continue;
              }
              if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                continue;
              }
              let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
              if (!(maybeLoopEndState instanceof LoopEndState_1.LoopEndState)) {
                continue;
              }
              if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
                endState = state;
                break;
              }
            }
            if (!endState) {
              throw new Error("Couldn't identify final state of the precedence rule prefix section.");
            }
            excludeTransition = endState.loopBackState.transition(0);
          } else {
            endState = atn.ruleToStopState[i];
          }
          for (let state of atn.states) {
            for (let i2 = 0; i2 < state.numberOfTransitions; i2++) {
              let transition = state.transition(i2);
              if (transition === excludeTransition) {
                continue;
              }
              if (transition.target === endState) {
                transition.target = bypassStop;
              }
            }
          }
          while (atn.ruleToStartState[i].numberOfTransitions > 0) {
            let transition = atn.ruleToStartState[i].removeTransition(atn.ruleToStartState[i].numberOfTransitions - 1);
            bypassStart.addTransition(transition);
          }
          atn.ruleToStartState[i].addTransition(new EpsilonTransition_1.EpsilonTransition(bypassStart));
          bypassStop.addTransition(new EpsilonTransition_1.EpsilonTransition(endState));
          let matchState = new BasicState_1.BasicState();
          atn.addState(matchState);
          matchState.addTransition(new AtomTransition_1.AtomTransition(bypassStop, atn.ruleToTokenType[i]));
          bypassStart.addTransition(new EpsilonTransition_1.EpsilonTransition(matchState));
        }
        if (this.deserializationOptions.isVerifyATN) {
          this.verifyATN(atn);
        }
      }
      if (this.deserializationOptions.isOptimize) {
        while (true) {
          let optimizationCount = 0;
          optimizationCount += ATNDeserializer3.inlineSetRules(atn);
          optimizationCount += ATNDeserializer3.combineChainedEpsilons(atn);
          let preserveOrder = atn.grammarType === 0;
          optimizationCount += ATNDeserializer3.optimizeSets(atn, preserveOrder);
          if (optimizationCount === 0) {
            break;
          }
        }
        if (this.deserializationOptions.isVerifyATN) {
          this.verifyATN(atn);
        }
      }
      ATNDeserializer3.identifyTailCalls(atn);
      return atn;
    }
    deserializeSets(data, p, sets, unicodeDeserializer) {
      let nsets = ATNDeserializer3.toInt(data[p++]);
      for (let i = 0; i < nsets; i++) {
        let nintervals = ATNDeserializer3.toInt(data[p]);
        p++;
        let set = new IntervalSet_1.IntervalSet();
        sets.push(set);
        let containsEof = ATNDeserializer3.toInt(data[p++]) !== 0;
        if (containsEof) {
          set.add(-1);
        }
        for (let j = 0; j < nintervals; j++) {
          let a = unicodeDeserializer.readUnicode(data, p);
          p += unicodeDeserializer.size;
          let b = unicodeDeserializer.readUnicode(data, p);
          p += unicodeDeserializer.size;
          set.add(a, b);
        }
      }
      return p;
    }
    markPrecedenceDecisions(atn) {
      let rulePrecedenceDecisions = new Map();
      for (let state of atn.states) {
        if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
          continue;
        }
        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
          let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
          if (maybeLoopEndState instanceof LoopEndState_1.LoopEndState) {
            if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
              rulePrecedenceDecisions.set(state.ruleIndex, state);
              state.precedenceRuleDecision = true;
              state.precedenceLoopbackStates = new BitSet_1.BitSet(atn.states.length);
            }
          }
        }
      }
      for (let precedenceDecision of rulePrecedenceDecisions) {
        for (let transition of atn.ruleToStopState[precedenceDecision[0]].getTransitions()) {
          if (transition.serializationType !== 1) {
            continue;
          }
          let epsilonTransition = transition;
          if (epsilonTransition.outermostPrecedenceReturn !== -1) {
            continue;
          }
          precedenceDecision[1].precedenceLoopbackStates.set(transition.target.stateNumber);
        }
      }
    }
    verifyATN(atn) {
      for (let state of atn.states) {
        this.checkCondition(state !== void 0, "ATN states should not be undefined.");
        if (state.stateType === ATNStateType_1.ATNStateType.INVALID_TYPE) {
          continue;
        }
        this.checkCondition(state.onlyHasEpsilonTransitions || state.numberOfTransitions <= 1);
        if (state instanceof PlusBlockStartState_1.PlusBlockStartState) {
          this.checkCondition(state.loopBackState !== void 0);
        }
        if (state instanceof StarLoopEntryState_1.StarLoopEntryState) {
          let starLoopEntryState = state;
          this.checkCondition(starLoopEntryState.loopBackState !== void 0);
          this.checkCondition(starLoopEntryState.numberOfTransitions === 2);
          if (starLoopEntryState.transition(0).target instanceof StarBlockStartState_1.StarBlockStartState) {
            this.checkCondition(starLoopEntryState.transition(1).target instanceof LoopEndState_1.LoopEndState);
            this.checkCondition(!starLoopEntryState.nonGreedy);
          } else if (starLoopEntryState.transition(0).target instanceof LoopEndState_1.LoopEndState) {
            this.checkCondition(starLoopEntryState.transition(1).target instanceof StarBlockStartState_1.StarBlockStartState);
            this.checkCondition(starLoopEntryState.nonGreedy);
          } else {
            throw new Error("IllegalStateException");
          }
        }
        if (state instanceof StarLoopbackState_1.StarLoopbackState) {
          this.checkCondition(state.numberOfTransitions === 1);
          this.checkCondition(state.transition(0).target instanceof StarLoopEntryState_1.StarLoopEntryState);
        }
        if (state instanceof LoopEndState_1.LoopEndState) {
          this.checkCondition(state.loopBackState !== void 0);
        }
        if (state instanceof RuleStartState_1.RuleStartState) {
          this.checkCondition(state.stopState !== void 0);
        }
        if (state instanceof BlockStartState_1.BlockStartState) {
          this.checkCondition(state.endState !== void 0);
        }
        if (state instanceof BlockEndState_1.BlockEndState) {
          this.checkCondition(state.startState !== void 0);
        }
        if (state instanceof DecisionState_1.DecisionState) {
          let decisionState = state;
          this.checkCondition(decisionState.numberOfTransitions <= 1 || decisionState.decision >= 0);
        } else {
          this.checkCondition(state.numberOfTransitions <= 1 || state instanceof RuleStopState_1.RuleStopState);
        }
      }
    }
    checkCondition(condition, message) {
      if (!condition) {
        throw new Error("IllegalStateException: " + message);
      }
    }
    static inlineSetRules(atn) {
      let inlinedCalls = 0;
      let ruleToInlineTransition = new Array(atn.ruleToStartState.length);
      for (let i = 0; i < atn.ruleToStartState.length; i++) {
        let startState = atn.ruleToStartState[i];
        let middleState = startState;
        while (middleState.onlyHasEpsilonTransitions && middleState.numberOfOptimizedTransitions === 1 && middleState.getOptimizedTransition(0).serializationType === 1) {
          middleState = middleState.getOptimizedTransition(0).target;
        }
        if (middleState.numberOfOptimizedTransitions !== 1) {
          continue;
        }
        let matchTransition = middleState.getOptimizedTransition(0);
        let matchTarget = matchTransition.target;
        if (matchTransition.isEpsilon || !matchTarget.onlyHasEpsilonTransitions || matchTarget.numberOfOptimizedTransitions !== 1 || !(matchTarget.getOptimizedTransition(0).target instanceof RuleStopState_1.RuleStopState)) {
          continue;
        }
        switch (matchTransition.serializationType) {
          case 5:
          case 2:
          case 7:
            ruleToInlineTransition[i] = matchTransition;
            break;
          case 8:
          case 9:
            continue;
          default:
            continue;
        }
      }
      for (let state of atn.states) {
        if (state.ruleIndex < 0) {
          continue;
        }
        let optimizedTransitions;
        for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
          let transition = state.getOptimizedTransition(i);
          if (!(transition instanceof RuleTransition_1.RuleTransition)) {
            if (optimizedTransitions !== void 0) {
              optimizedTransitions.push(transition);
            }
            continue;
          }
          let ruleTransition = transition;
          let effective = ruleToInlineTransition[ruleTransition.target.ruleIndex];
          if (effective === void 0) {
            if (optimizedTransitions !== void 0) {
              optimizedTransitions.push(transition);
            }
            continue;
          }
          if (optimizedTransitions === void 0) {
            optimizedTransitions = [];
            for (let j = 0; j < i; j++) {
              optimizedTransitions.push(state.getOptimizedTransition(i));
            }
          }
          inlinedCalls++;
          let target = ruleTransition.followState;
          let intermediateState = new BasicState_1.BasicState();
          intermediateState.setRuleIndex(target.ruleIndex);
          atn.addState(intermediateState);
          optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(intermediateState));
          switch (effective.serializationType) {
            case 5:
              intermediateState.addTransition(new AtomTransition_1.AtomTransition(target, effective._label));
              break;
            case 2:
              intermediateState.addTransition(new RangeTransition_1.RangeTransition(target, effective.from, effective.to));
              break;
            case 7:
              intermediateState.addTransition(new SetTransition_1.SetTransition(target, effective.label));
              break;
            default:
              throw new Error("UnsupportedOperationException");
          }
        }
        if (optimizedTransitions !== void 0) {
          if (state.isOptimized) {
            while (state.numberOfOptimizedTransitions > 0) {
              state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
            }
          }
          for (let transition of optimizedTransitions) {
            state.addOptimizedTransition(transition);
          }
        }
      }
      if (ParserATNSimulator_1.ParserATNSimulator.debug) {
        console.log("ATN runtime optimizer removed " + inlinedCalls + " rule invocations by inlining sets.");
      }
      return inlinedCalls;
    }
    static combineChainedEpsilons(atn) {
      let removedEdges = 0;
      for (let state of atn.states) {
        if (!state.onlyHasEpsilonTransitions || state instanceof RuleStopState_1.RuleStopState) {
          continue;
        }
        let optimizedTransitions;
        nextTransition:
          for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
            let transition = state.getOptimizedTransition(i);
            let intermediate = transition.target;
            if (transition.serializationType !== 1 || transition.outermostPrecedenceReturn !== -1 || intermediate.stateType !== ATNStateType_1.ATNStateType.BASIC || !intermediate.onlyHasEpsilonTransitions) {
              if (optimizedTransitions !== void 0) {
                optimizedTransitions.push(transition);
              }
              continue nextTransition;
            }
            for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
              if (intermediate.getOptimizedTransition(j).serializationType !== 1 || intermediate.getOptimizedTransition(j).outermostPrecedenceReturn !== -1) {
                if (optimizedTransitions !== void 0) {
                  optimizedTransitions.push(transition);
                }
                continue nextTransition;
              }
            }
            removedEdges++;
            if (optimizedTransitions === void 0) {
              optimizedTransitions = [];
              for (let j = 0; j < i; j++) {
                optimizedTransitions.push(state.getOptimizedTransition(j));
              }
            }
            for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
              let target = intermediate.getOptimizedTransition(j).target;
              optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(target));
            }
          }
        if (optimizedTransitions !== void 0) {
          if (state.isOptimized) {
            while (state.numberOfOptimizedTransitions > 0) {
              state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
            }
          }
          for (let transition of optimizedTransitions) {
            state.addOptimizedTransition(transition);
          }
        }
      }
      if (ParserATNSimulator_1.ParserATNSimulator.debug) {
        console.log("ATN runtime optimizer removed " + removedEdges + " transitions by combining chained epsilon transitions.");
      }
      return removedEdges;
    }
    static optimizeSets(atn, preserveOrder) {
      if (preserveOrder) {
        return 0;
      }
      let removedPaths = 0;
      let decisions = atn.decisionToState;
      for (let decision of decisions) {
        let setTransitions = new IntervalSet_1.IntervalSet();
        for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
          let epsTransition = decision.getOptimizedTransition(i);
          if (!(epsTransition instanceof EpsilonTransition_1.EpsilonTransition)) {
            continue;
          }
          if (epsTransition.target.numberOfOptimizedTransitions !== 1) {
            continue;
          }
          let transition = epsTransition.target.getOptimizedTransition(0);
          if (!(transition.target instanceof BlockEndState_1.BlockEndState)) {
            continue;
          }
          if (transition instanceof NotSetTransition_1.NotSetTransition) {
            continue;
          }
          if (transition instanceof AtomTransition_1.AtomTransition || transition instanceof RangeTransition_1.RangeTransition || transition instanceof SetTransition_1.SetTransition) {
            setTransitions.add(i);
          }
        }
        if (setTransitions.size <= 1) {
          continue;
        }
        let optimizedTransitions = [];
        for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
          if (!setTransitions.contains(i)) {
            optimizedTransitions.push(decision.getOptimizedTransition(i));
          }
        }
        let blockEndState = decision.getOptimizedTransition(setTransitions.minElement).target.getOptimizedTransition(0).target;
        let matchSet = new IntervalSet_1.IntervalSet();
        for (let interval of setTransitions.intervals) {
          for (let j = interval.a; j <= interval.b; j++) {
            let matchTransition = decision.getOptimizedTransition(j).target.getOptimizedTransition(0);
            if (matchTransition instanceof NotSetTransition_1.NotSetTransition) {
              throw new Error("Not yet implemented.");
            } else {
              matchSet.addAll(matchTransition.label);
            }
          }
        }
        let newTransition;
        if (matchSet.intervals.length === 1) {
          if (matchSet.size === 1) {
            newTransition = new AtomTransition_1.AtomTransition(blockEndState, matchSet.minElement);
          } else {
            let matchInterval = matchSet.intervals[0];
            newTransition = new RangeTransition_1.RangeTransition(blockEndState, matchInterval.a, matchInterval.b);
          }
        } else {
          newTransition = new SetTransition_1.SetTransition(blockEndState, matchSet);
        }
        let setOptimizedState = new BasicState_1.BasicState();
        setOptimizedState.setRuleIndex(decision.ruleIndex);
        atn.addState(setOptimizedState);
        setOptimizedState.addTransition(newTransition);
        optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(setOptimizedState));
        removedPaths += decision.numberOfOptimizedTransitions - optimizedTransitions.length;
        if (decision.isOptimized) {
          while (decision.numberOfOptimizedTransitions > 0) {
            decision.removeOptimizedTransition(decision.numberOfOptimizedTransitions - 1);
          }
        }
        for (let transition of optimizedTransitions) {
          decision.addOptimizedTransition(transition);
        }
      }
      if (ParserATNSimulator_1.ParserATNSimulator.debug) {
        console.log("ATN runtime optimizer removed " + removedPaths + " paths by collapsing sets.");
      }
      return removedPaths;
    }
    static identifyTailCalls(atn) {
      for (let state of atn.states) {
        for (let i = 0; i < state.numberOfTransitions; i++) {
          let transition = state.transition(i);
          if (!(transition instanceof RuleTransition_1.RuleTransition)) {
            continue;
          }
          transition.tailCall = this.testTailCall(atn, transition, false);
          transition.optimizedTailCall = this.testTailCall(atn, transition, true);
        }
        if (!state.isOptimized) {
          continue;
        }
        for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
          let transition = state.getOptimizedTransition(i);
          if (!(transition instanceof RuleTransition_1.RuleTransition)) {
            continue;
          }
          transition.tailCall = this.testTailCall(atn, transition, false);
          transition.optimizedTailCall = this.testTailCall(atn, transition, true);
        }
      }
    }
    static testTailCall(atn, transition, optimizedPath) {
      if (!optimizedPath && transition.tailCall) {
        return true;
      }
      if (optimizedPath && transition.optimizedTailCall) {
        return true;
      }
      let reachable = new BitSet_1.BitSet(atn.states.length);
      let worklist = [];
      worklist.push(transition.followState);
      while (true) {
        let state = worklist.pop();
        if (!state) {
          break;
        }
        if (reachable.get(state.stateNumber)) {
          continue;
        }
        if (state instanceof RuleStopState_1.RuleStopState) {
          continue;
        }
        if (!state.onlyHasEpsilonTransitions) {
          return false;
        }
        let transitionCount = optimizedPath ? state.numberOfOptimizedTransitions : state.numberOfTransitions;
        for (let i = 0; i < transitionCount; i++) {
          let t = optimizedPath ? state.getOptimizedTransition(i) : state.transition(i);
          if (t.serializationType !== 1) {
            return false;
          }
          worklist.push(t.target);
        }
      }
      return true;
    }
    static toInt(c) {
      return c;
    }
    static toInt32(data, offset) {
      return (data[offset] | data[offset + 1] << 16) >>> 0;
    }
    static toUUID(data, offset) {
      let leastSigBits = ATNDeserializer3.toInt32(data, offset);
      let lessSigBits = ATNDeserializer3.toInt32(data, offset + 2);
      let moreSigBits = ATNDeserializer3.toInt32(data, offset + 4);
      let mostSigBits = ATNDeserializer3.toInt32(data, offset + 6);
      return new UUID_1.UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
    }
    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
      let target = atn.states[trg];
      switch (type) {
        case 1:
          return new EpsilonTransition_1.EpsilonTransition(target);
        case 2:
          if (arg3 !== 0) {
            return new RangeTransition_1.RangeTransition(target, Token_1.Token.EOF, arg2);
          } else {
            return new RangeTransition_1.RangeTransition(target, arg1, arg2);
          }
        case 3:
          let rt = new RuleTransition_1.RuleTransition(atn.states[arg1], arg2, arg3, target);
          return rt;
        case 4:
          let pt = new PredicateTransition_1.PredicateTransition(target, arg1, arg2, arg3 !== 0);
          return pt;
        case 10:
          return new PrecedencePredicateTransition_1.PrecedencePredicateTransition(target, arg1);
        case 5:
          if (arg3 !== 0) {
            return new AtomTransition_1.AtomTransition(target, Token_1.Token.EOF);
          } else {
            return new AtomTransition_1.AtomTransition(target, arg1);
          }
        case 6:
          let a = new ActionTransition_1.ActionTransition(target, arg1, arg2, arg3 !== 0);
          return a;
        case 7:
          return new SetTransition_1.SetTransition(target, sets[arg1]);
        case 8:
          return new NotSetTransition_1.NotSetTransition(target, sets[arg1]);
        case 9:
          return new WildcardTransition_1.WildcardTransition(target);
      }
      throw new Error("The specified transition type is not valid.");
    }
    stateFactory(type, ruleIndex) {
      let s;
      switch (type) {
        case ATNStateType_1.ATNStateType.INVALID_TYPE:
          return new InvalidState_1.InvalidState();
        case ATNStateType_1.ATNStateType.BASIC:
          s = new BasicState_1.BasicState();
          break;
        case ATNStateType_1.ATNStateType.RULE_START:
          s = new RuleStartState_1.RuleStartState();
          break;
        case ATNStateType_1.ATNStateType.BLOCK_START:
          s = new BasicBlockStartState_1.BasicBlockStartState();
          break;
        case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
          s = new PlusBlockStartState_1.PlusBlockStartState();
          break;
        case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
          s = new StarBlockStartState_1.StarBlockStartState();
          break;
        case ATNStateType_1.ATNStateType.TOKEN_START:
          s = new TokensStartState_1.TokensStartState();
          break;
        case ATNStateType_1.ATNStateType.RULE_STOP:
          s = new RuleStopState_1.RuleStopState();
          break;
        case ATNStateType_1.ATNStateType.BLOCK_END:
          s = new BlockEndState_1.BlockEndState();
          break;
        case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
          s = new StarLoopbackState_1.StarLoopbackState();
          break;
        case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
          s = new StarLoopEntryState_1.StarLoopEntryState();
          break;
        case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
          s = new PlusLoopbackState_1.PlusLoopbackState();
          break;
        case ATNStateType_1.ATNStateType.LOOP_END:
          s = new LoopEndState_1.LoopEndState();
          break;
        default:
          let message = `The specified state type ${type} is not valid.`;
          throw new Error(message);
      }
      s.ruleIndex = ruleIndex;
      return s;
    }
    lexerActionFactory(type, data1, data2) {
      switch (type) {
        case 0:
          return new LexerChannelAction_1.LexerChannelAction(data1);
        case 1:
          return new LexerCustomAction_1.LexerCustomAction(data1, data2);
        case 2:
          return new LexerModeAction_1.LexerModeAction(data1);
        case 3:
          return LexerMoreAction_1.LexerMoreAction.INSTANCE;
        case 4:
          return LexerPopModeAction_1.LexerPopModeAction.INSTANCE;
        case 5:
          return new LexerPushModeAction_1.LexerPushModeAction(data1);
        case 6:
          return LexerSkipAction_1.LexerSkipAction.INSTANCE;
        case 7:
          return new LexerTypeAction_1.LexerTypeAction(data1);
        default:
          let message = `The specified lexer action type ${type} is not valid.`;
          throw new Error(message);
      }
    }
  };
  ATNDeserializer3.BASE_SERIALIZED_UUID = UUID_1.UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3");
  ATNDeserializer3.ADDED_LEXER_ACTIONS = UUID_1.UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D");
  ATNDeserializer3.ADDED_UNICODE_SMP = UUID_1.UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B");
  ATNDeserializer3.SUPPORTED_UUIDS = [
    ATNDeserializer3.BASE_SERIALIZED_UUID,
    ATNDeserializer3.ADDED_LEXER_ACTIONS,
    ATNDeserializer3.ADDED_UNICODE_SMP
  ];
  ATNDeserializer3.SERIALIZED_UUID = ATNDeserializer3.ADDED_UNICODE_SMP;
  __decorate([
    Decorators_1.NotNull
  ], ATNDeserializer3.prototype, "deserializationOptions", void 0);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ATNDeserializer3.prototype, "deserialize", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ATNDeserializer3.prototype, "markPrecedenceDecisions", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], ATNDeserializer3.prototype, "edgeFactory", null);
  exports.ATNDeserializer = ATNDeserializer3;
});

// node_modules/antlr4ts/atn/ParseInfo.js
var require_ParseInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParseInfo = void 0;
  var Decorators_1 = require_Decorators();
  var ParseInfo = class ParseInfo {
    constructor(atnSimulator) {
      this.atnSimulator = atnSimulator;
    }
    getDecisionInfo() {
      return this.atnSimulator.getDecisionInfo();
    }
    getLLDecisions() {
      let decisions = this.atnSimulator.getDecisionInfo();
      let LL = [];
      for (let i = 0; i < decisions.length; i++) {
        let fallBack = decisions[i].LL_Fallback;
        if (fallBack > 0) {
          LL.push(i);
        }
      }
      return LL;
    }
    getTotalTimeInPrediction() {
      let decisions = this.atnSimulator.getDecisionInfo();
      let t = 0;
      for (let decision of decisions) {
        t += decision.timeInPrediction;
      }
      return t;
    }
    getTotalSLLLookaheadOps() {
      let decisions = this.atnSimulator.getDecisionInfo();
      let k = 0;
      for (let decision of decisions) {
        k += decision.SLL_TotalLook;
      }
      return k;
    }
    getTotalLLLookaheadOps() {
      let decisions = this.atnSimulator.getDecisionInfo();
      let k = 0;
      for (let decision of decisions) {
        k += decision.LL_TotalLook;
      }
      return k;
    }
    getTotalSLLATNLookaheadOps() {
      let decisions = this.atnSimulator.getDecisionInfo();
      let k = 0;
      for (let decision of decisions) {
        k += decision.SLL_ATNTransitions;
      }
      return k;
    }
    getTotalLLATNLookaheadOps() {
      let decisions = this.atnSimulator.getDecisionInfo();
      let k = 0;
      for (let decision of decisions) {
        k += decision.LL_ATNTransitions;
      }
      return k;
    }
    getTotalATNLookaheadOps() {
      let decisions = this.atnSimulator.getDecisionInfo();
      let k = 0;
      for (let decision of decisions) {
        k += decision.SLL_ATNTransitions;
        k += decision.LL_ATNTransitions;
      }
      return k;
    }
    getDFASize(decision) {
      if (decision) {
        let decisionToDFA = this.atnSimulator.atn.decisionToDFA[decision];
        return decisionToDFA.states.size;
      } else {
        let n = 0;
        let decisionToDFA = this.atnSimulator.atn.decisionToDFA;
        for (let i = 0; i < decisionToDFA.length; i++) {
          n += this.getDFASize(i);
        }
        return n;
      }
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ParseInfo.prototype, "getDecisionInfo", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseInfo.prototype, "getLLDecisions", null);
  ParseInfo = __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParseInfo);
  exports.ParseInfo = ParseInfo;
});

// node_modules/antlr4ts/ProxyParserErrorListener.js
var require_ProxyParserErrorListener = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ProxyParserErrorListener = void 0;
  var ProxyErrorListener_1 = require_ProxyErrorListener();
  var Decorators_1 = require_Decorators();
  var ProxyParserErrorListener = class extends ProxyErrorListener_1.ProxyErrorListener {
    constructor(delegates) {
      super(delegates);
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
      this.getDelegates().forEach((listener) => {
        if (listener.reportAmbiguity) {
          listener.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
        }
      });
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {
      this.getDelegates().forEach((listener) => {
        if (listener.reportAttemptingFullContext) {
          listener.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
        }
      });
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {
      this.getDelegates().forEach((listener) => {
        if (listener.reportContextSensitivity) {
          listener.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState);
        }
      });
    }
  };
  __decorate([
    Decorators_1.Override
  ], ProxyParserErrorListener.prototype, "reportAmbiguity", null);
  __decorate([
    Decorators_1.Override
  ], ProxyParserErrorListener.prototype, "reportAttemptingFullContext", null);
  __decorate([
    Decorators_1.Override
  ], ProxyParserErrorListener.prototype, "reportContextSensitivity", null);
  exports.ProxyParserErrorListener = ProxyParserErrorListener;
});

// node_modules/antlr4ts/misc/Character.js
var require_Character = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.isSupplementaryCodePoint = exports.isLowSurrogate = exports.isHighSurrogate = void 0;
  function isHighSurrogate(ch) {
    return ch >= 55296 && ch <= 56319;
  }
  exports.isHighSurrogate = isHighSurrogate;
  function isLowSurrogate(ch) {
    return ch >= 56320 && ch <= 57343;
  }
  exports.isLowSurrogate = isLowSurrogate;
  function isSupplementaryCodePoint(ch) {
    return ch >= 65536;
  }
  exports.isSupplementaryCodePoint = isSupplementaryCodePoint;
});

// node_modules/antlr4ts/CodePointBuffer.js
var require_CodePointBuffer = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.CodePointBuffer = void 0;
  var assert = require("assert");
  var Character = require_Character();
  var CodePointBuffer = class {
    constructor(buffer, size) {
      this.buffer = buffer;
      this._position = 0;
      this._size = size;
    }
    static withArray(buffer) {
      return new CodePointBuffer(buffer, buffer.length);
    }
    get position() {
      return this._position;
    }
    set position(newPosition) {
      if (newPosition < 0 || newPosition > this._size) {
        throw new RangeError();
      }
      this._position = newPosition;
    }
    get remaining() {
      return this._size - this.position;
    }
    get(offset) {
      return this.buffer[offset];
    }
    array() {
      return this.buffer.slice(0, this._size);
    }
    static builder(initialBufferSize) {
      return new CodePointBuffer.Builder(initialBufferSize);
    }
  };
  exports.CodePointBuffer = CodePointBuffer;
  (function(CodePointBuffer2) {
    let Type;
    (function(Type2) {
      Type2[Type2["BYTE"] = 0] = "BYTE";
      Type2[Type2["CHAR"] = 1] = "CHAR";
      Type2[Type2["INT"] = 2] = "INT";
    })(Type || (Type = {}));
    class Builder {
      constructor(initialBufferSize) {
        this.type = 0;
        this.buffer = new Uint8Array(initialBufferSize);
        this.prevHighSurrogate = -1;
        this.position = 0;
      }
      build() {
        return new CodePointBuffer2(this.buffer, this.position);
      }
      static roundUpToNextPowerOfTwo(i) {
        let nextPowerOfTwo = 32 - Math.clz32(i - 1);
        return Math.pow(2, nextPowerOfTwo);
      }
      ensureRemaining(remainingNeeded) {
        switch (this.type) {
          case 0:
            if (this.buffer.length - this.position < remainingNeeded) {
              let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
              let newBuffer = new Uint8Array(newCapacity);
              newBuffer.set(this.buffer.subarray(0, this.position), 0);
              this.buffer = newBuffer;
            }
            break;
          case 1:
            if (this.buffer.length - this.position < remainingNeeded) {
              let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
              let newBuffer = new Uint16Array(newCapacity);
              newBuffer.set(this.buffer.subarray(0, this.position), 0);
              this.buffer = newBuffer;
            }
            break;
          case 2:
            if (this.buffer.length - this.position < remainingNeeded) {
              let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
              let newBuffer = new Int32Array(newCapacity);
              newBuffer.set(this.buffer.subarray(0, this.position), 0);
              this.buffer = newBuffer;
            }
            break;
        }
      }
      append(utf16In) {
        this.ensureRemaining(utf16In.length);
        this.appendArray(utf16In);
      }
      appendArray(utf16In) {
        switch (this.type) {
          case 0:
            this.appendArrayByte(utf16In);
            break;
          case 1:
            this.appendArrayChar(utf16In);
            break;
          case 2:
            this.appendArrayInt(utf16In);
            break;
        }
      }
      appendArrayByte(utf16In) {
        assert(this.prevHighSurrogate === -1);
        let input = utf16In;
        let inOffset = 0;
        let inLimit = utf16In.length;
        let outByte = this.buffer;
        let outOffset = this.position;
        while (inOffset < inLimit) {
          let c = input[inOffset];
          if (c <= 255) {
            outByte[outOffset] = c;
          } else {
            utf16In = utf16In.subarray(inOffset, inLimit);
            this.position = outOffset;
            if (!Character.isHighSurrogate(c)) {
              this.byteToCharBuffer(utf16In.length);
              this.appendArrayChar(utf16In);
              return;
            } else {
              this.byteToIntBuffer(utf16In.length);
              this.appendArrayInt(utf16In);
              return;
            }
          }
          inOffset++;
          outOffset++;
        }
        this.position = outOffset;
      }
      appendArrayChar(utf16In) {
        assert(this.prevHighSurrogate === -1);
        let input = utf16In;
        let inOffset = 0;
        let inLimit = utf16In.length;
        let outChar = this.buffer;
        let outOffset = this.position;
        while (inOffset < inLimit) {
          let c = input[inOffset];
          if (!Character.isHighSurrogate(c)) {
            outChar[outOffset] = c;
          } else {
            utf16In = utf16In.subarray(inOffset, inLimit);
            this.position = outOffset;
            this.charToIntBuffer(utf16In.length);
            this.appendArrayInt(utf16In);
            return;
          }
          inOffset++;
          outOffset++;
        }
        this.position = outOffset;
      }
      appendArrayInt(utf16In) {
        let input = utf16In;
        let inOffset = 0;
        let inLimit = utf16In.length;
        let outInt = this.buffer;
        let outOffset = this.position;
        while (inOffset < inLimit) {
          let c = input[inOffset];
          inOffset++;
          if (this.prevHighSurrogate !== -1) {
            if (Character.isLowSurrogate(c)) {
              outInt[outOffset] = String.fromCharCode(this.prevHighSurrogate, c).codePointAt(0);
              outOffset++;
              this.prevHighSurrogate = -1;
            } else {
              outInt[outOffset] = this.prevHighSurrogate;
              outOffset++;
              if (Character.isHighSurrogate(c)) {
                this.prevHighSurrogate = c;
              } else {
                outInt[outOffset] = c;
                outOffset++;
                this.prevHighSurrogate = -1;
              }
            }
          } else if (Character.isHighSurrogate(c)) {
            this.prevHighSurrogate = c;
          } else {
            outInt[outOffset] = c;
            outOffset++;
          }
        }
        if (this.prevHighSurrogate !== -1) {
          outInt[outOffset] = this.prevHighSurrogate;
          outOffset++;
        }
        this.position = outOffset;
      }
      byteToCharBuffer(toAppend) {
        let newBuffer = new Uint16Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
        newBuffer.set(this.buffer.subarray(0, this.position), 0);
        this.type = 1;
        this.buffer = newBuffer;
      }
      byteToIntBuffer(toAppend) {
        let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 2));
        newBuffer.set(this.buffer.subarray(0, this.position), 0);
        this.type = 2;
        this.buffer = newBuffer;
      }
      charToIntBuffer(toAppend) {
        let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
        newBuffer.set(this.buffer.subarray(0, this.position), 0);
        this.type = 2;
        this.buffer = newBuffer;
      }
    }
    CodePointBuffer2.Builder = Builder;
  })(CodePointBuffer = exports.CodePointBuffer || (exports.CodePointBuffer = {}));
});

// node_modules/antlr4ts/CodePointCharStream.js
var require_CodePointCharStream = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.CodePointCharStream = void 0;
  var assert = require("assert");
  var IntStream_1 = require_IntStream();
  var Interval_1 = require_Interval();
  var Decorators_1 = require_Decorators();
  var CodePointCharStream = class {
    constructor(array, position, remaining, name) {
      assert(position === 0);
      this._array = array;
      this._size = remaining;
      this._name = name;
      this._position = 0;
    }
    get internalStorage() {
      return this._array;
    }
    static fromBuffer(codePointBuffer, name) {
      if (name === void 0 || name.length === 0) {
        name = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
      }
      return new CodePointCharStream(codePointBuffer.array(), codePointBuffer.position, codePointBuffer.remaining, name);
    }
    consume() {
      if (this._size - this._position === 0) {
        assert(this.LA(1) === IntStream_1.IntStream.EOF);
        throw new RangeError("cannot consume EOF");
      }
      this._position++;
    }
    get index() {
      return this._position;
    }
    get size() {
      return this._size;
    }
    mark() {
      return -1;
    }
    release(marker) {
    }
    seek(index) {
      this._position = index;
    }
    get sourceName() {
      return this._name;
    }
    toString() {
      return this.getText(Interval_1.Interval.of(0, this.size - 1));
    }
    LA(i) {
      let offset;
      switch (Math.sign(i)) {
        case -1:
          offset = this.index + i;
          if (offset < 0) {
            return IntStream_1.IntStream.EOF;
          }
          return this._array[offset];
        case 0:
          return 0;
        case 1:
          offset = this.index + i - 1;
          if (offset >= this.size) {
            return IntStream_1.IntStream.EOF;
          }
          return this._array[offset];
      }
      throw new RangeError("Not reached");
    }
    getText(interval) {
      const startIdx = Math.min(interval.a, this.size);
      const len = Math.min(interval.b - interval.a + 1, this.size - startIdx);
      if (this._array instanceof Int32Array) {
        return String.fromCodePoint(...Array.from(this._array.subarray(startIdx, startIdx + len)));
      } else {
        return String.fromCharCode(...Array.from(this._array.subarray(startIdx, startIdx + len)));
      }
    }
  };
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "consume", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "index", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "mark", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "release", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "seek", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "sourceName", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "toString", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "LA", null);
  __decorate([
    Decorators_1.Override
  ], CodePointCharStream.prototype, "getText", null);
  exports.CodePointCharStream = CodePointCharStream;
});

// node_modules/antlr4ts/CharStreams.js
var require_CharStreams = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.CharStreams = void 0;
  var CodePointBuffer_1 = require_CodePointBuffer();
  var CodePointCharStream_1 = require_CodePointCharStream();
  var IntStream_1 = require_IntStream();
  var CharStreams;
  (function(CharStreams2) {
    function fromString(s, sourceName) {
      if (sourceName === void 0 || sourceName.length === 0) {
        sourceName = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
      }
      let codePointBufferBuilder = CodePointBuffer_1.CodePointBuffer.builder(s.length);
      let cb = new Uint16Array(s.length);
      for (let i = 0; i < s.length; i++) {
        cb[i] = s.charCodeAt(i);
      }
      codePointBufferBuilder.append(cb);
      return CodePointCharStream_1.CodePointCharStream.fromBuffer(codePointBufferBuilder.build(), sourceName);
    }
    CharStreams2.fromString = fromString;
  })(CharStreams = exports.CharStreams || (exports.CharStreams = {}));
});

// node_modules/antlr4ts/BufferedTokenStream.js
var require_BufferedTokenStream = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BufferedTokenStream = void 0;
  var assert = require("assert");
  var CommonToken_1 = require_CommonToken();
  var Interval_1 = require_Interval();
  var Lexer_1 = require_Lexer();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var BufferedTokenStream = class BufferedTokenStream {
    constructor(tokenSource) {
      this.tokens = [];
      this.p = -1;
      this.fetchedEOF = false;
      if (tokenSource == null) {
        throw new Error("tokenSource cannot be null");
      }
      this._tokenSource = tokenSource;
    }
    get tokenSource() {
      return this._tokenSource;
    }
    set tokenSource(tokenSource) {
      this._tokenSource = tokenSource;
      this.tokens.length = 0;
      this.p = -1;
      this.fetchedEOF = false;
    }
    get index() {
      return this.p;
    }
    mark() {
      return 0;
    }
    release(marker) {
    }
    seek(index) {
      this.lazyInit();
      this.p = this.adjustSeekIndex(index);
    }
    get size() {
      return this.tokens.length;
    }
    consume() {
      let skipEofCheck;
      if (this.p >= 0) {
        if (this.fetchedEOF) {
          skipEofCheck = this.p < this.tokens.length - 1;
        } else {
          skipEofCheck = this.p < this.tokens.length;
        }
      } else {
        skipEofCheck = false;
      }
      if (!skipEofCheck && this.LA(1) === Token_1.Token.EOF) {
        throw new Error("cannot consume EOF");
      }
      if (this.sync(this.p + 1)) {
        this.p = this.adjustSeekIndex(this.p + 1);
      }
    }
    sync(i) {
      assert(i >= 0);
      let n = i - this.tokens.length + 1;
      if (n > 0) {
        let fetched = this.fetch(n);
        return fetched >= n;
      }
      return true;
    }
    fetch(n) {
      if (this.fetchedEOF) {
        return 0;
      }
      for (let i = 0; i < n; i++) {
        let t = this.tokenSource.nextToken();
        if (this.isWritableToken(t)) {
          t.tokenIndex = this.tokens.length;
        }
        this.tokens.push(t);
        if (t.type === Token_1.Token.EOF) {
          this.fetchedEOF = true;
          return i + 1;
        }
      }
      return n;
    }
    get(i) {
      if (i < 0 || i >= this.tokens.length) {
        throw new RangeError("token index " + i + " out of range 0.." + (this.tokens.length - 1));
      }
      return this.tokens[i];
    }
    getRange(start, stop) {
      if (start < 0 || stop < 0) {
        return [];
      }
      this.lazyInit();
      let subset = new Array();
      if (stop >= this.tokens.length) {
        stop = this.tokens.length - 1;
      }
      for (let i = start; i <= stop; i++) {
        let t = this.tokens[i];
        if (t.type === Token_1.Token.EOF) {
          break;
        }
        subset.push(t);
      }
      return subset;
    }
    LA(i) {
      let token = this.LT(i);
      if (!token) {
        return Token_1.Token.INVALID_TYPE;
      }
      return token.type;
    }
    tryLB(k) {
      if (this.p - k < 0) {
        return void 0;
      }
      return this.tokens[this.p - k];
    }
    LT(k) {
      let result = this.tryLT(k);
      if (result === void 0) {
        throw new RangeError("requested lookback index out of range");
      }
      return result;
    }
    tryLT(k) {
      this.lazyInit();
      if (k === 0) {
        throw new RangeError("0 is not a valid lookahead index");
      }
      if (k < 0) {
        return this.tryLB(-k);
      }
      let i = this.p + k - 1;
      this.sync(i);
      if (i >= this.tokens.length) {
        return this.tokens[this.tokens.length - 1];
      }
      return this.tokens[i];
    }
    adjustSeekIndex(i) {
      return i;
    }
    lazyInit() {
      if (this.p === -1) {
        this.setup();
      }
    }
    setup() {
      this.sync(0);
      this.p = this.adjustSeekIndex(0);
    }
    getTokens(start, stop, types) {
      this.lazyInit();
      if (start === void 0) {
        assert(stop === void 0 && types === void 0);
        return this.tokens;
      } else if (stop === void 0) {
        stop = this.tokens.length - 1;
      }
      if (start < 0 || stop >= this.tokens.length || stop < 0 || start >= this.tokens.length) {
        throw new RangeError("start " + start + " or stop " + stop + " not in 0.." + (this.tokens.length - 1));
      }
      if (start > stop) {
        return [];
      }
      if (types === void 0) {
        return this.tokens.slice(start, stop + 1);
      } else if (typeof types === "number") {
        types = new Set().add(types);
      }
      let typesSet = types;
      let filteredTokens = this.tokens.slice(start, stop + 1);
      filteredTokens = filteredTokens.filter((value) => typesSet.has(value.type));
      return filteredTokens;
    }
    nextTokenOnChannel(i, channel) {
      this.sync(i);
      if (i >= this.size) {
        return this.size - 1;
      }
      let token = this.tokens[i];
      while (token.channel !== channel) {
        if (token.type === Token_1.Token.EOF) {
          return i;
        }
        i++;
        this.sync(i);
        token = this.tokens[i];
      }
      return i;
    }
    previousTokenOnChannel(i, channel) {
      this.sync(i);
      if (i >= this.size) {
        return this.size - 1;
      }
      while (i >= 0) {
        let token = this.tokens[i];
        if (token.type === Token_1.Token.EOF || token.channel === channel) {
          return i;
        }
        i--;
      }
      return i;
    }
    getHiddenTokensToRight(tokenIndex, channel = -1) {
      this.lazyInit();
      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
        throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
      }
      let nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
      let to;
      let from = tokenIndex + 1;
      if (nextOnChannel === -1) {
        to = this.size - 1;
      } else {
        to = nextOnChannel;
      }
      return this.filterForChannel(from, to, channel);
    }
    getHiddenTokensToLeft(tokenIndex, channel = -1) {
      this.lazyInit();
      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
        throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
      }
      if (tokenIndex === 0) {
        return [];
      }
      let prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
      if (prevOnChannel === tokenIndex - 1) {
        return [];
      }
      let from = prevOnChannel + 1;
      let to = tokenIndex - 1;
      return this.filterForChannel(from, to, channel);
    }
    filterForChannel(from, to, channel) {
      let hidden = new Array();
      for (let i = from; i <= to; i++) {
        let t = this.tokens[i];
        if (channel === -1) {
          if (t.channel !== Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL) {
            hidden.push(t);
          }
        } else {
          if (t.channel === channel) {
            hidden.push(t);
          }
        }
      }
      return hidden;
    }
    get sourceName() {
      return this.tokenSource.sourceName;
    }
    getText(interval) {
      if (interval === void 0) {
        interval = Interval_1.Interval.of(0, this.size - 1);
      } else if (!(interval instanceof Interval_1.Interval)) {
        interval = interval.sourceInterval;
      }
      let start = interval.a;
      let stop = interval.b;
      if (start < 0 || stop < 0) {
        return "";
      }
      this.fill();
      if (stop >= this.tokens.length) {
        stop = this.tokens.length - 1;
      }
      let buf = "";
      for (let i = start; i <= stop; i++) {
        let t = this.tokens[i];
        if (t.type === Token_1.Token.EOF) {
          break;
        }
        buf += t.text;
      }
      return buf.toString();
    }
    getTextFromRange(start, stop) {
      if (this.isToken(start) && this.isToken(stop)) {
        return this.getText(Interval_1.Interval.of(start.tokenIndex, stop.tokenIndex));
      }
      return "";
    }
    fill() {
      this.lazyInit();
      const blockSize = 1e3;
      while (true) {
        let fetched = this.fetch(blockSize);
        if (fetched < blockSize) {
          return;
        }
      }
    }
    isWritableToken(t) {
      return t instanceof CommonToken_1.CommonToken;
    }
    isToken(t) {
      return t instanceof CommonToken_1.CommonToken;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], BufferedTokenStream.prototype, "_tokenSource", void 0);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "tokenSource", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "index", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "mark", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "release", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "seek", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "size", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "consume", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "get", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "LA", null);
  __decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "LT", null);
  __decorate([
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "sourceName", null);
  __decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "getText", null);
  __decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
  ], BufferedTokenStream.prototype, "getTextFromRange", null);
  BufferedTokenStream = __decorate([
    __param(0, Decorators_1.NotNull)
  ], BufferedTokenStream);
  exports.BufferedTokenStream = BufferedTokenStream;
});

// node_modules/antlr4ts/CommonTokenStream.js
var require_CommonTokenStream = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.CommonTokenStream = void 0;
  var BufferedTokenStream_1 = require_BufferedTokenStream();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var CommonTokenStream2 = class CommonTokenStream extends BufferedTokenStream_1.BufferedTokenStream {
    constructor(tokenSource, channel = Token_1.Token.DEFAULT_CHANNEL) {
      super(tokenSource);
      this.channel = channel;
    }
    adjustSeekIndex(i) {
      return this.nextTokenOnChannel(i, this.channel);
    }
    tryLB(k) {
      if (this.p - k < 0) {
        return void 0;
      }
      let i = this.p;
      let n = 1;
      while (n <= k && i > 0) {
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n++;
      }
      if (i < 0) {
        return void 0;
      }
      return this.tokens[i];
    }
    tryLT(k) {
      this.lazyInit();
      if (k === 0) {
        throw new RangeError("0 is not a valid lookahead index");
      }
      if (k < 0) {
        return this.tryLB(-k);
      }
      let i = this.p;
      let n = 1;
      while (n < k) {
        if (this.sync(i + 1)) {
          i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n++;
      }
      return this.tokens[i];
    }
    getNumberOfOnChannelTokens() {
      let n = 0;
      this.fill();
      for (let t of this.tokens) {
        if (t.channel === this.channel) {
          n++;
        }
        if (t.type === Token_1.Token.EOF) {
          break;
        }
      }
      return n;
    }
  };
  __decorate([
    Decorators_1.Override
  ], CommonTokenStream2.prototype, "adjustSeekIndex", null);
  __decorate([
    Decorators_1.Override
  ], CommonTokenStream2.prototype, "tryLB", null);
  __decorate([
    Decorators_1.Override
  ], CommonTokenStream2.prototype, "tryLT", null);
  CommonTokenStream2 = __decorate([
    __param(0, Decorators_1.NotNull)
  ], CommonTokenStream2);
  exports.CommonTokenStream = CommonTokenStream2;
});

// node_modules/antlr4ts/ListTokenSource.js
var require_ListTokenSource = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ListTokenSource = void 0;
  var CommonTokenFactory_1 = require_CommonTokenFactory();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var ListTokenSource = class ListTokenSource {
    constructor(tokens2, sourceName) {
      this.i = 0;
      this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
      if (tokens2 == null) {
        throw new Error("tokens cannot be null");
      }
      this.tokens = tokens2;
      this._sourceName = sourceName;
    }
    get charPositionInLine() {
      if (this.i < this.tokens.length) {
        return this.tokens[this.i].charPositionInLine;
      } else if (this.eofToken != null) {
        return this.eofToken.charPositionInLine;
      } else if (this.tokens.length > 0) {
        let lastToken = this.tokens[this.tokens.length - 1];
        let tokenText = lastToken.text;
        if (tokenText != null) {
          let lastNewLine = tokenText.lastIndexOf("\n");
          if (lastNewLine >= 0) {
            return tokenText.length - lastNewLine - 1;
          }
        }
        return lastToken.charPositionInLine + lastToken.stopIndex - lastToken.startIndex + 1;
      }
      return 0;
    }
    nextToken() {
      if (this.i >= this.tokens.length) {
        if (this.eofToken == null) {
          let start = -1;
          if (this.tokens.length > 0) {
            let previousStop = this.tokens[this.tokens.length - 1].stopIndex;
            if (previousStop !== -1) {
              start = previousStop + 1;
            }
          }
          let stop = Math.max(-1, start - 1);
          this.eofToken = this._factory.create({source: this, stream: this.inputStream}, Token_1.Token.EOF, "EOF", Token_1.Token.DEFAULT_CHANNEL, start, stop, this.line, this.charPositionInLine);
        }
        return this.eofToken;
      }
      let t = this.tokens[this.i];
      if (this.i === this.tokens.length - 1 && t.type === Token_1.Token.EOF) {
        this.eofToken = t;
      }
      this.i++;
      return t;
    }
    get line() {
      if (this.i < this.tokens.length) {
        return this.tokens[this.i].line;
      } else if (this.eofToken != null) {
        return this.eofToken.line;
      } else if (this.tokens.length > 0) {
        let lastToken = this.tokens[this.tokens.length - 1];
        let line = lastToken.line;
        let tokenText = lastToken.text;
        if (tokenText != null) {
          for (let i = 0; i < tokenText.length; i++) {
            if (tokenText.charAt(i) === "\n") {
              line++;
            }
          }
        }
        return line;
      }
      return 1;
    }
    get inputStream() {
      if (this.i < this.tokens.length) {
        return this.tokens[this.i].inputStream;
      } else if (this.eofToken != null) {
        return this.eofToken.inputStream;
      } else if (this.tokens.length > 0) {
        return this.tokens[this.tokens.length - 1].inputStream;
      }
      return void 0;
    }
    get sourceName() {
      if (this._sourceName) {
        return this._sourceName;
      }
      let inputStream = this.inputStream;
      if (inputStream != null) {
        return inputStream.sourceName;
      }
      return "List";
    }
    set tokenFactory(factory) {
      this._factory = factory;
    }
    get tokenFactory() {
      return this._factory;
    }
  };
  __decorate([
    Decorators_1.Override
  ], ListTokenSource.prototype, "charPositionInLine", null);
  __decorate([
    Decorators_1.Override
  ], ListTokenSource.prototype, "nextToken", null);
  __decorate([
    Decorators_1.Override
  ], ListTokenSource.prototype, "line", null);
  __decorate([
    Decorators_1.Override
  ], ListTokenSource.prototype, "inputStream", null);
  __decorate([
    Decorators_1.Override
  ], ListTokenSource.prototype, "sourceName", null);
  __decorate([
    Decorators_1.Override,
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], ListTokenSource.prototype, "tokenFactory", null);
  ListTokenSource = __decorate([
    __param(0, Decorators_1.NotNull)
  ], ListTokenSource);
  exports.ListTokenSource = ListTokenSource;
});

// node_modules/antlr4ts/misc/MultiMap.js
var require_MultiMap = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.MultiMap = void 0;
  var MultiMap = class extends Map {
    constructor() {
      super();
    }
    map(key, value) {
      let elementsForKey = super.get(key);
      if (!elementsForKey) {
        elementsForKey = [];
        super.set(key, elementsForKey);
      }
      elementsForKey.push(value);
    }
    getPairs() {
      let pairs = [];
      this.forEach((values, key) => {
        values.forEach((v) => {
          pairs.push([key, v]);
        });
      });
      return pairs;
    }
  };
  exports.MultiMap = MultiMap;
});

// node_modules/antlr4ts/misc/ParseCancellationException.js
var require_ParseCancellationException = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParseCancellationException = void 0;
  var ParseCancellationException = class extends Error {
    constructor(cause) {
      super(cause.message);
      this.cause = cause;
      this.stack = cause.stack;
    }
    getCause() {
      return this.cause;
    }
  };
  exports.ParseCancellationException = ParseCancellationException;
});

// node_modules/antlr4ts/InterpreterRuleContext.js
var require_InterpreterRuleContext = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.InterpreterRuleContext = void 0;
  var Decorators_1 = require_Decorators();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var InterpreterRuleContext = class extends ParserRuleContext_1.ParserRuleContext {
    constructor(ruleIndex, parent, invokingStateNumber) {
      if (invokingStateNumber !== void 0) {
        super(parent, invokingStateNumber);
      } else {
        super();
      }
      this._ruleIndex = ruleIndex;
    }
    get ruleIndex() {
      return this._ruleIndex;
    }
  };
  __decorate([
    Decorators_1.Override
  ], InterpreterRuleContext.prototype, "ruleIndex", null);
  exports.InterpreterRuleContext = InterpreterRuleContext;
});

// node_modules/antlr4ts/ParserInterpreter.js
var require_ParserInterpreter = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParserInterpreter = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var BitSet_1 = require_BitSet();
  var FailedPredicateException_1 = require_FailedPredicateException();
  var InputMismatchException_1 = require_InputMismatchException();
  var InterpreterRuleContext_1 = require_InterpreterRuleContext();
  var LoopEndState_1 = require_LoopEndState();
  var Decorators_1 = require_Decorators();
  var Decorators_2 = require_Decorators();
  var Parser_1 = require_Parser();
  var ParserATNSimulator_1 = require_ParserATNSimulator();
  var RecognitionException_1 = require_RecognitionException();
  var StarLoopEntryState_1 = require_StarLoopEntryState();
  var Token_1 = require_Token();
  var ParserInterpreter = class ParserInterpreter2 extends Parser_1.Parser {
    constructor(grammarFileName, vocabulary, ruleNames, atn, input) {
      super(grammarFileName instanceof ParserInterpreter2 ? grammarFileName.inputStream : input);
      this._parentContextStack = [];
      this.overrideDecision = -1;
      this.overrideDecisionInputIndex = -1;
      this.overrideDecisionAlt = -1;
      this.overrideDecisionReached = false;
      this._overrideDecisionRoot = void 0;
      if (grammarFileName instanceof ParserInterpreter2) {
        let old = grammarFileName;
        this._grammarFileName = old._grammarFileName;
        this._atn = old._atn;
        this.pushRecursionContextStates = old.pushRecursionContextStates;
        this._ruleNames = old._ruleNames;
        this._vocabulary = old._vocabulary;
        this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this._atn, this);
      } else {
        vocabulary = vocabulary;
        ruleNames = ruleNames;
        atn = atn;
        this._grammarFileName = grammarFileName;
        this._atn = atn;
        this._ruleNames = ruleNames.slice(0);
        this._vocabulary = vocabulary;
        this.pushRecursionContextStates = new BitSet_1.BitSet(atn.states.length);
        for (let state of atn.states) {
          if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
            continue;
          }
          if (state.precedenceRuleDecision) {
            this.pushRecursionContextStates.set(state.stateNumber);
          }
        }
        this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(atn, this);
      }
    }
    reset(resetInput) {
      if (resetInput === void 0) {
        super.reset();
      } else {
        super.reset(resetInput);
      }
      this.overrideDecisionReached = false;
      this._overrideDecisionRoot = void 0;
    }
    get atn() {
      return this._atn;
    }
    get vocabulary() {
      return this._vocabulary;
    }
    get ruleNames() {
      return this._ruleNames;
    }
    get grammarFileName() {
      return this._grammarFileName;
    }
    parse(startRuleIndex) {
      let startRuleStartState = this._atn.ruleToStartState[startRuleIndex];
      this._rootContext = this.createInterpreterRuleContext(void 0, ATNState_1.ATNState.INVALID_STATE_NUMBER, startRuleIndex);
      if (startRuleStartState.isPrecedenceRule) {
        this.enterRecursionRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex, 0);
      } else {
        this.enterRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex);
      }
      while (true) {
        let p = this.atnState;
        switch (p.stateType) {
          case ATNStateType_1.ATNStateType.RULE_STOP:
            if (this._ctx.isEmpty) {
              if (startRuleStartState.isPrecedenceRule) {
                let result = this._ctx;
                let parentContext = this._parentContextStack.pop();
                this.unrollRecursionContexts(parentContext[0]);
                return result;
              } else {
                this.exitRule();
                return this._rootContext;
              }
            }
            this.visitRuleStopState(p);
            break;
          default:
            try {
              this.visitState(p);
            } catch (e) {
              if (e instanceof RecognitionException_1.RecognitionException) {
                this.state = this._atn.ruleToStopState[p.ruleIndex].stateNumber;
                this.context.exception = e;
                this.errorHandler.reportError(this, e);
                this.recover(e);
              } else {
                throw e;
              }
            }
            break;
        }
      }
    }
    enterRecursionRule(localctx, state, ruleIndex, precedence) {
      this._parentContextStack.push([this._ctx, localctx.invokingState]);
      super.enterRecursionRule(localctx, state, ruleIndex, precedence);
    }
    get atnState() {
      return this._atn.states[this.state];
    }
    visitState(p) {
      let predictedAlt = 1;
      if (p.numberOfTransitions > 1) {
        predictedAlt = this.visitDecisionState(p);
      }
      let transition = p.transition(predictedAlt - 1);
      switch (transition.serializationType) {
        case 1:
          if (this.pushRecursionContextStates.get(p.stateNumber) && !(transition.target instanceof LoopEndState_1.LoopEndState)) {
            let parentContext = this._parentContextStack[this._parentContextStack.length - 1];
            let localctx = this.createInterpreterRuleContext(parentContext[0], parentContext[1], this._ctx.ruleIndex);
            this.pushNewRecursionContext(localctx, this._atn.ruleToStartState[p.ruleIndex].stateNumber, this._ctx.ruleIndex);
          }
          break;
        case 5:
          this.match(transition._label);
          break;
        case 2:
        case 7:
        case 8:
          if (!transition.matches(this._input.LA(1), Token_1.Token.MIN_USER_TOKEN_TYPE, 65535)) {
            this.recoverInline();
          }
          this.matchWildcard();
          break;
        case 9:
          this.matchWildcard();
          break;
        case 3:
          let ruleStartState = transition.target;
          let ruleIndex = ruleStartState.ruleIndex;
          let newctx = this.createInterpreterRuleContext(this._ctx, p.stateNumber, ruleIndex);
          if (ruleStartState.isPrecedenceRule) {
            this.enterRecursionRule(newctx, ruleStartState.stateNumber, ruleIndex, transition.precedence);
          } else {
            this.enterRule(newctx, transition.target.stateNumber, ruleIndex);
          }
          break;
        case 4:
          let predicateTransition = transition;
          if (!this.sempred(this._ctx, predicateTransition.ruleIndex, predicateTransition.predIndex)) {
            throw new FailedPredicateException_1.FailedPredicateException(this);
          }
          break;
        case 6:
          let actionTransition = transition;
          this.action(this._ctx, actionTransition.ruleIndex, actionTransition.actionIndex);
          break;
        case 10:
          if (!this.precpred(this._ctx, transition.precedence)) {
            let precedence = transition.precedence;
            throw new FailedPredicateException_1.FailedPredicateException(this, `precpred(_ctx, ${precedence})`);
          }
          break;
        default:
          throw new Error("UnsupportedOperationException: Unrecognized ATN transition type.");
      }
      this.state = transition.target.stateNumber;
    }
    visitDecisionState(p) {
      let predictedAlt;
      this.errorHandler.sync(this);
      let decision = p.decision;
      if (decision === this.overrideDecision && this._input.index === this.overrideDecisionInputIndex && !this.overrideDecisionReached) {
        predictedAlt = this.overrideDecisionAlt;
        this.overrideDecisionReached = true;
      } else {
        predictedAlt = this.interpreter.adaptivePredict(this._input, decision, this._ctx);
      }
      return predictedAlt;
    }
    createInterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
      return new InterpreterRuleContext_1.InterpreterRuleContext(ruleIndex, parent, invokingStateNumber);
    }
    visitRuleStopState(p) {
      let ruleStartState = this._atn.ruleToStartState[p.ruleIndex];
      if (ruleStartState.isPrecedenceRule) {
        let parentContext = this._parentContextStack.pop();
        this.unrollRecursionContexts(parentContext[0]);
        this.state = parentContext[1];
      } else {
        this.exitRule();
      }
      let ruleTransition = this._atn.states[this.state].transition(0);
      this.state = ruleTransition.followState.stateNumber;
    }
    addDecisionOverride(decision, tokenIndex, forcedAlt) {
      this.overrideDecision = decision;
      this.overrideDecisionInputIndex = tokenIndex;
      this.overrideDecisionAlt = forcedAlt;
    }
    get overrideDecisionRoot() {
      return this._overrideDecisionRoot;
    }
    recover(e) {
      let i = this._input.index;
      this.errorHandler.recover(this, e);
      if (this._input.index === i) {
        let tok = e.getOffendingToken();
        if (!tok) {
          throw new Error("Expected exception to have an offending token");
        }
        let source = tok.tokenSource;
        let stream = source !== void 0 ? source.inputStream : void 0;
        let sourcePair = {source, stream};
        if (e instanceof InputMismatchException_1.InputMismatchException) {
          let expectedTokens = e.expectedTokens;
          if (expectedTokens === void 0) {
            throw new Error("Expected the exception to provide expected tokens");
          }
          let expectedTokenType = Token_1.Token.INVALID_TYPE;
          if (!expectedTokens.isNil) {
            expectedTokenType = expectedTokens.minElement;
          }
          let errToken = this.tokenFactory.create(sourcePair, expectedTokenType, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, tok.line, tok.charPositionInLine);
          this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
        } else {
          let source2 = tok.tokenSource;
          let errToken = this.tokenFactory.create(sourcePair, Token_1.Token.INVALID_TYPE, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, tok.line, tok.charPositionInLine);
          this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
        }
      }
    }
    recoverInline() {
      return this._errHandler.recoverInline(this);
    }
    get rootContext() {
      return this._rootContext;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ParserInterpreter.prototype, "_vocabulary", void 0);
  __decorate([
    Decorators_2.Override
  ], ParserInterpreter.prototype, "reset", null);
  __decorate([
    Decorators_2.Override
  ], ParserInterpreter.prototype, "atn", null);
  __decorate([
    Decorators_2.Override
  ], ParserInterpreter.prototype, "vocabulary", null);
  __decorate([
    Decorators_2.Override
  ], ParserInterpreter.prototype, "ruleNames", null);
  __decorate([
    Decorators_2.Override
  ], ParserInterpreter.prototype, "grammarFileName", null);
  __decorate([
    Decorators_2.Override
  ], ParserInterpreter.prototype, "enterRecursionRule", null);
  ParserInterpreter = __decorate([
    __param(1, Decorators_1.NotNull)
  ], ParserInterpreter);
  exports.ParserInterpreter = ParserInterpreter;
});

// node_modules/antlr4ts/tree/pattern/ParseTreeMatch.js
var require_ParseTreeMatch = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParseTreeMatch = void 0;
  var Decorators_1 = require_Decorators();
  var ParseTreeMatch = class ParseTreeMatch {
    constructor(tree, pattern, labels, mismatchedNode) {
      if (!tree) {
        throw new Error("tree cannot be null");
      }
      if (!pattern) {
        throw new Error("pattern cannot be null");
      }
      if (!labels) {
        throw new Error("labels cannot be null");
      }
      this._tree = tree;
      this._pattern = pattern;
      this._labels = labels;
      this._mismatchedNode = mismatchedNode;
    }
    get(label) {
      let parseTrees = this._labels.get(label);
      if (!parseTrees || parseTrees.length === 0) {
        return void 0;
      }
      return parseTrees[parseTrees.length - 1];
    }
    getAll(label) {
      const nodes = this._labels.get(label);
      if (!nodes) {
        return [];
      }
      return nodes;
    }
    get labels() {
      return this._labels;
    }
    get mismatchedNode() {
      return this._mismatchedNode;
    }
    get succeeded() {
      return !this._mismatchedNode;
    }
    get pattern() {
      return this._pattern;
    }
    get tree() {
      return this._tree;
    }
    toString() {
      return `Match ${this.succeeded ? "succeeded" : "failed"}; found ${this.labels.size} labels`;
    }
  };
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], ParseTreeMatch.prototype, "getAll", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreeMatch.prototype, "labels", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreeMatch.prototype, "pattern", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreeMatch.prototype, "tree", null);
  __decorate([
    Decorators_1.Override
  ], ParseTreeMatch.prototype, "toString", null);
  ParseTreeMatch = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ParseTreeMatch);
  exports.ParseTreeMatch = ParseTreeMatch;
});

// node_modules/antlr4ts/tree/xpath/XPathLexer.js
var require_XPathLexer = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathLexer = void 0;
  var ATNDeserializer_1 = require_ATNDeserializer();
  var Lexer_1 = require_Lexer();
  var LexerATNSimulator_1 = require_LexerATNSimulator();
  var VocabularyImpl_1 = require_VocabularyImpl();
  var Utils3 = require_Utils();
  var XPathLexer = class extends Lexer_1.Lexer {
    constructor(input) {
      super(input);
      this._interp = new LexerATNSimulator_1.LexerATNSimulator(XPathLexer._ATN, this);
    }
    get vocabulary() {
      return XPathLexer.VOCABULARY;
    }
    get grammarFileName() {
      return "XPathLexer.g4";
    }
    get ruleNames() {
      return XPathLexer.ruleNames;
    }
    get serializedATN() {
      return XPathLexer._serializedATN;
    }
    get channelNames() {
      return XPathLexer.channelNames;
    }
    get modeNames() {
      return XPathLexer.modeNames;
    }
    action(_localctx, ruleIndex, actionIndex) {
      switch (ruleIndex) {
        case 4:
          this.ID_action(_localctx, actionIndex);
          break;
      }
    }
    ID_action(_localctx, actionIndex) {
      switch (actionIndex) {
        case 0:
          let text = this.text;
          if (text.charAt(0) === text.charAt(0).toUpperCase()) {
            this.type = XPathLexer.TOKEN_REF;
          } else {
            this.type = XPathLexer.RULE_REF;
          }
          break;
      }
    }
    static get _ATN() {
      if (!XPathLexer.__ATN) {
        XPathLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils3.toCharArray(XPathLexer._serializedATN));
      }
      return XPathLexer.__ATN;
    }
  };
  exports.XPathLexer = XPathLexer;
  XPathLexer.TOKEN_REF = 1;
  XPathLexer.RULE_REF = 2;
  XPathLexer.ANYWHERE = 3;
  XPathLexer.ROOT = 4;
  XPathLexer.WILDCARD = 5;
  XPathLexer.BANG = 6;
  XPathLexer.ID = 7;
  XPathLexer.STRING = 8;
  XPathLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL",
    "HIDDEN"
  ];
  XPathLexer.modeNames = [
    "DEFAULT_MODE"
  ];
  XPathLexer.ruleNames = [
    "ANYWHERE",
    "ROOT",
    "WILDCARD",
    "BANG",
    "ID",
    "NameChar",
    "NameStartChar",
    "STRING"
  ];
  XPathLexer._LITERAL_NAMES = [
    void 0,
    void 0,
    void 0,
    "'//'",
    "'/'",
    "'*'",
    "'!'"
  ];
  XPathLexer._SYMBOLIC_NAMES = [
    void 0,
    "TOKEN_REF",
    "RULE_REF",
    "ANYWHERE",
    "ROOT",
    "WILDCARD",
    "BANG",
    "ID",
    "STRING"
  ];
  XPathLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(XPathLexer._LITERAL_NAMES, XPathLexer._SYMBOLIC_NAMES, []);
  XPathLexer._serializedATNSegments = 2;
  XPathLexer._serializedATNSegment0 = '\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\n2\b					\x07	\x07\b	\b			\x07\n\f"\v\x07\x07\b\b		\x07	,\n	\f		/\v			-\n\x07\x07	\b\v	\r\n\u02B6\n2;C\\aac|\x81\xA1\xAC\xAC\xAF\xAF\xB7\xB7\xBC\xBC\xC2\xD8\xDA\xF8\xFA\u02C3\u02C8\u02D3\u02E2\u02E6\u02EE\u02EE\u02F0\u02F0\u0302\u0376\u0378\u0379\u037C\u037F\u0381\u0381\u0388\u0388\u038A\u038C\u038E\u038E\u0390\u03A3\u03A5\u03F7\u03F9\u0483\u0485\u0489\u048C\u0531\u0533\u0558\u055B\u055B\u0563\u0589\u0593\u05BF\u05C1\u05C1\u05C3\u05C4\u05C6\u05C7\u05C9\u05C9\u05D2\u05EC\u05F2\u05F4\u0602\u0607\u0612\u061C\u061E\u061E\u0622\u066B\u0670\u06D5\u06D7\u06DF\u06E1\u06EA\u06EC\u06FE\u0701\u0701\u0711\u074C\u074F\u07B3\u07C2\u07F7\u07FC\u07FC\u0802\u082F\u0842\u085D\u08A2\u08B6\u08B8\u08BF\u08D6\u0965\u0968\u0971\u0973\u0985\u0987\u098E\u0991\u0992\u0995\u09AA\u09AC\u09B2\u09B4\u09B4\u09B8\u09BB\u09BE\u09C6\u09C9\u09CA\u09CD\u09D0\u09D9\u09D9\u09DE\u09DF\u09E1\u09E5\u09E8\u09F3\u0A03\u0A05\u0A07\u0A0C\u0A11\u0A12\u0A15\u0A2A\u0A2C\u0A32\u0A34\u0A35\u0A37\u0A38\u0A3A\u0A3B\u0A3E\u0A3E\u0A40\u0A44\u0A49\u0A4A\u0A4D\u0A4F\u0A53\u0A53\u0A5B\u0A5E\u0A60\u0A60\u0A68\u0A77\u0A83\u0A85\u0A87\u0A8F\u0A91\u0A93\u0A95\u0AAA\u0AAC\u0AB2\u0AB4\u0AB5\u0AB7\u0ABB\u0ABE\u0AC7\u0AC9\u0ACB\u0ACD\u0ACF\u0AD2\u0AD2\u0AE2\u0AE5\u0AE8\u0AF1\u0AFB\u0AFB\u0B03\u0B05\u0B07\u0B0E\u0B11\u0B12\u0B15\u0B2A\u0B2C\u0B32\u0B34\u0B35\u0B37\u0B3B\u0B3E\u0B46\u0B49\u0B4A\u0B4D\u0B4F\u0B58\u0B59\u0B5E\u0B5F\u0B61\u0B65\u0B68\u0B71\u0B73\u0B73\u0B84\u0B85\u0B87\u0B8C\u0B90\u0B92\u0B94\u0B97\u0B9B\u0B9C\u0B9E\u0B9E\u0BA0\u0BA1\u0BA5\u0BA6\u0BAA\u0BAC\u0BB0\u0BBB\u0BC0\u0BC4\u0BC8\u0BCA\u0BCC\u0BCF\u0BD2\u0BD2\u0BD9\u0BD9\u0BE8\u0BF1\u0C02\u0C05\u0C07\u0C0E\u0C10\u0C12\u0C14\u0C2A\u0C2C\u0C3B\u0C3F\u0C46\u0C48\u0C4A\u0C4C\u0C4F\u0C57\u0C58\u0C5A\u0C5C\u0C62\u0C65\u0C68\u0C71\u0C82\u0C85\u0C87\u0C8E\u0C90\u0C92\u0C94\u0CAA\u0CAC\u0CB5\u0CB7\u0CBB\u0CBE\u0CC6\u0CC8\u0CCA\u0CCC\u0CCF\u0CD7\u0CD8\u0CE0\u0CE0\u0CE2\u0CE5\u0CE8\u0CF1\u0CF3\u0CF4\u0D03\u0D05\u0D07\u0D0E\u0D10\u0D12\u0D14\u0D3C\u0D3F\u0D46\u0D48\u0D4A\u0D4C\u0D50\u0D56\u0D59\u0D61\u0D65\u0D68\u0D71\u0D7C\u0D81\u0D84\u0D85\u0D87\u0D98\u0D9C\u0DB3\u0DB5\u0DBD\u0DBF\u0DBF\u0DC2\u0DC8\u0DCC\u0DCC\u0DD1\u0DD6\u0DD8\u0DD8\u0DDA\u0DE1\u0DE8\u0DF1\u0DF4\u0DF5\u0E03\u0E3C\u0E42\u0E50\u0E52\u0E5B\u0E83\u0E84\u0E86\u0E86\u0E89\u0E8A\u0E8C\u0E8C\u0E8F\u0E8F\u0E96\u0E99\u0E9B\u0EA1\u0EA3\u0EA5\u0EA7\u0EA7\u0EA9\u0EA9\u0EAC\u0EAD\u0EAF\u0EBB\u0EBD\u0EBF\u0EC2\u0EC6\u0EC8\u0EC8\u0ECA\u0ECF\u0ED2\u0EDB\u0EDE\u0EE1\u0F02\u0F02\u0F1A\u0F1B\u0F22\u0F2B\u0F37\u0F37\u0F39\u0F39\u0F3B\u0F3B\u0F40\u0F49\u0F4B\u0F6E\u0F73\u0F86\u0F88\u0F99\u0F9B\u0FBE\u0FC8\u0FC8\u1002\u104B\u1052\u109F\u10A2\u10C7\u10C9\u10C9\u10CF\u10CF\u10D2\u10FC\u10FE\u124A\u124C\u124F\u1252\u1258\u125A\u125A\u125C\u125F\u1262\u128A\u128C\u128F\u1292\u12B2\u12B4\u12B7\u12BA\u12C0\u12C2\u12C2\u12C4\u12C7\u12CA\u12D8\u12DA\u1312\u1314\u1317\u131A\u135C\u135F\u1361\u1382\u1391\u13A2\u13F7\u13FA\u13FF\u1403\u166E\u1671\u1681\u1683\u169C\u16A2\u16EC\u16F0\u16FA\u1702\u170E\u1710\u1716\u1722\u1736\u1742\u1755\u1762\u176E\u1770\u1772\u1774\u1775\u1782\u17D5\u17D9\u17D9\u17DE\u17DF\u17E2\u17EB\u180D\u1810\u1812\u181B\u1822\u1879\u1882\u18AC\u18B2\u18F7\u1902\u1920\u1922\u192D\u1932\u193D\u1948\u196F\u1972\u1976\u1982\u19AD\u19B2\u19CB\u19D2\u19DB\u1A02\u1A1D\u1A22\u1A60\u1A62\u1A7E\u1A81\u1A8B\u1A92\u1A9B\u1AA9\u1AA9\u1AB2\u1ABF\u1B02\u1B4D\u1B52\u1B5B\u1B6D\u1B75\u1B82\u1BF5\u1C02\u1C39\u1C42\u1C4B\u1C4F\u1C7F\u1C82\u1C8A\u1CD2\u1CD4\u1CD6\u1CF8\u1CFA\u1CFB\u1D02\u1DF7\u1DFD\u1F17\u1F1A\u1F1F\u1F22\u1F47\u1F4A\u1F4F\u1F52\u1F59\u1F5B\u1F5B\u1F5D\u1F5D\u1F5F\u1F5F\u1F61\u1F7F\u1F82\u1FB6\u1FB8\u1FBE\u1FC0\u1FC0\u1FC4\u1FC6\u1FC8\u1FCE\u1FD2\u1FD5\u1FD8\u1FDD\u1FE2\u1FEE\u1FF4\u1FF6\u1FF8\u1FFE\u200D\u2011\u202C\u2030\u2041\u2042\u2056\u2056\u2062\u2066\u2068\u2071\u2073\u2073\u2081\u2081\u2092\u209E\u20D2\u20DE\u20E3\u20E3\u20E7\u20F2\u2104\u2104\u2109\u2109\u210C\u2115\u2117\u2117\u211B\u211F\u2126\u2126\u2128\u2128\u212A\u212A\u212C\u212F\u2131\u213B\u213E\u2141\u2147\u214B\u2150\u2150\u2162\u218A\u2C02\u2C30\u2C32\u2C60\u2C62\u2CE6\u2CED\u2CF5\u2D02\u2D27\u2D29\u2D29\u2D2F\u2D2F\u2D32\u2D69\u2D71\u2D71\u2D81\u2D98\u2DA2\u2DA8\u2DAA\u2DB0\u2DB2\u2DB8\u2DBA\u2DC0\u2DC2\u2DC8\u2DCA\u2DD0\u2DD2\u2DD8\u2DDA\u2DE0\u2DE2\u2E01\u2E31\u2E31\u3007\u3009\u3023\u3031\u3033\u3037\u303A\u303E\u3043\u3098\u309B\u309C\u309F\u30A1\u30A3\u30FC\u30FE\u3101\u3107\u312F\u3133\u3190\u31A2\u31BC\u31F2\u3201\u3402\u4DB7\u4E02\u9FD7\uA002\uA48E\uA4D2\uA4FF\uA502\uA60E\uA612\uA62D\uA642\uA671\uA676\uA67F\uA681\uA6F3\uA719\uA721\uA724\uA78A\uA78D\uA7B0\uA7B2\uA7B9\uA7F9\uA829\uA842\uA875\uA882\uA8C7\uA8D2\uA8DB\uA8E2\uA8F9\uA8FD\uA8FD\uA8FF\uA8FF\uA902\uA92F\uA932\uA955\uA962\uA97E\uA982\uA9C2\uA9D1\uA9DB\uA9E2\uAA00\uAA02\uAA38\uAA42\uAA4F\uAA52\uAA5B\uAA62\uAA78\uAA7C\uAAC4\uAADD\uAADF\uAAE2\uAAF1\uAAF4\uAAF8\uAB03\uAB08\uAB0B\uAB10\uAB13\uAB18\uAB22\uAB28\uAB2A\uAB30\uAB32\uAB5C\uAB5E\uAB67\uAB72\uABEC\uABEE\uABEF\uABF2\uABFB\uAC02\uD7A5\uD7B2\uD7C8\uD7CD\uD7FD\uF902\uFA6F\uFA72\uFADB\uFB02\uFB08\uFB15\uFB19\uFB1F\uFB2A\uFB2C\uFB38\uFB3A\uFB3E\uFB40\uFB40\uFB42\uFB43\uFB45\uFB46\uFB48\uFBB3\uFBD5\uFD3F\uFD52\uFD91\uFD94\uFDC9\uFDF2\uFDFD\uFE02\uFE11\uFE22\uFE31\uFE35\uFE36\uFE4F\uFE51\uFE72\uFE76\uFE78\uFEFE\uFF01\uFF01\uFF12\uFF1B\uFF23\uFF3C\uFF41\uFF41\uFF43\uFF5C\uFF68\uFFC0\uFFC4\uFFC9\uFFCC\uFFD1\uFFD4\uFFD9\uFFDC\uFFDE\uFFFB\uFFFD\r(*<>?AOR_\x82\xFC\u0142\u0176\u01FF\u01FF\u0282\u029E\u02A2\u02D2\u02E2\u02E2\u0302\u0321\u0332\u034C\u0352\u037C\u0382\u039F\u03A2\u03C5\u03CA\u03D1\u03D3\u03D7\u0402\u049F\u04A2\u04AB\u04B2\u04D5\u04DA\u04FD\u0502\u0529\u0532\u0565\u0602\u0738\u0742\u0757\u0762\u0769\u0802\u0807\u080A\u080A\u080C\u0837\u0839\u083A\u083E\u083E\u0841\u0857\u0862\u0878\u0882\u08A0\u08E2\u08F4\u08F6\u08F7\u0902\u0917\u0922\u093B\u0982\u09B9\u09C0\u09C1\u0A02\u0A05\u0A07\u0A08\u0A0E\u0A15\u0A17\u0A19\u0A1B\u0A35\u0A3A\u0A3C\u0A41\u0A41\u0A62\u0A7E\u0A82\u0A9E\u0AC2\u0AC9\u0ACB\u0AE8\u0B02\u0B37\u0B42\u0B57\u0B62\u0B74\u0B82\u0B93\u0C02\u0C4A\u0C82\u0CB4\u0CC2\u0CF4\u1002\u1048\u1068\u1071\u1081\u10BC\u10BF\u10BF\u10D2\u10EA\u10F2\u10FB\u1102\u1136\u1138\u1141\u1152\u1175\u1178\u1178\u1182\u11C6\u11CC\u11CE\u11D2\u11DC\u11DE\u11DE\u1202\u1213\u1215\u1239\u1240\u1240\u1282\u1288\u128A\u128A\u128C\u128F\u1291\u129F\u12A1\u12AA\u12B2\u12EC\u12F2\u12FB\u1302\u1305\u1307\u130E\u1311\u1312\u1315\u132A\u132C\u1332\u1334\u1335\u1337\u133B\u133E\u1346\u1349\u134A\u134D\u134F\u1352\u1352\u1359\u1359\u135F\u1365\u1368\u136E\u1372\u1376\u1402\u144C\u1452\u145B\u1482\u14C7\u14C9\u14C9\u14D2\u14DB\u1582\u15B7\u15BA\u15C2\u15DA\u15DF\u1602\u1642\u1646\u1646\u1652\u165B\u1682\u16B9\u16C2\u16CB\u1702\u171B\u171F\u172D\u1732\u173B\u18A2\u18EB\u1901\u1901\u1AC2\u1AFA\u1C02\u1C0A\u1C0C\u1C38\u1C3A\u1C42\u1C52\u1C5B\u1C74\u1C91\u1C94\u1CA9\u1CAB\u1CB8\u2002\u239B\u2402\u2470\u2482\u2545\u3002\u3430\u4402\u4648\u6802\u6A3A\u6A42\u6A60\u6A62\u6A6B\u6AD2\u6AEF\u6AF2\u6AF6\u6B02\u6B38\u6B42\u6B45\u6B52\u6B5B\u6B65\u6B79\u6B7F\u6B91\u6F02\u6F46\u6F52\u6F80\u6F91\u6FA1\u6FE2\u6FE2\u7002\u87EE\u8802\u8AF4\uB002\uB003\uBC02\uBC6C\uBC72\uBC7E\uBC82\uBC8A\uBC92\uBC9B\uBC9F\uBCA0\uBCA2\uBCA5\uD167\uD16B\uD16F\uD184\uD187\uD18D\uD1AC\uD1AF\uD244\uD246\uD402\uD456\uD458\uD49E\uD4A0\uD4A1\uD4A4\uD4A4\uD4A7\uD4A8\uD4AB\uD4AE\uD4B0\uD4BB\uD4BD\uD4BD\uD4BF\uD4C5\uD4C7\uD507\uD509\uD50C\uD50F\uD516\uD518\uD51E\uD520\uD53B\uD53D\uD540\uD542\uD546\uD548\uD548\uD54C\uD552\uD554\uD6A7\uD6AA\uD6C2\uD6C4\uD6DC\uD6DE\uD6FC\uD6FE\uD716\uD718\uD736\uD738\uD750\uD752\uD770\uD772\uD78A\uD78C\uD7AA\uD7AC\uD7C4\uD7C6\uD7CD\uD7D0\uD801\uDA02\uDA38\uDA3D\uDA6E\uDA77\uDA77\uDA86\uDA86\uDA9D\uDAA1\uDAA3\uDAB1\uE002\uE008\uE00A\uE01A\uE01D\uE023\uE025\uE026\uE028\uE02C\uE802\uE8C6\uE8D2\uE8D8\uE902\uE94C\uE952\uE95B\uEE02\uEE05\uEE07\uEE21\uEE23\uEE24\uEE26\uEE26\uEE29\uEE29\uEE2B\uEE34\uEE36\uEE39\uEE3B\uEE3B\uEE3D\uEE3D\uEE44\uEE44\uEE49\uEE49\uEE4B\uEE4B\uEE4D\uEE4D\uEE4F\uEE51\uEE53\uEE54\uEE56\uEE56\uEE59\uEE59\uEE5B\uEE5B\uEE5D\uEE5D\uEE5F\uEE5F\uEE61\uEE61\uEE63\uEE64\uEE66\uEE66\uEE69\uEE6C\uEE6E\uEE74\uEE76\uEE79\uEE7B\uEE7E\uEE80\uEE80\uEE82\uEE8B\uEE8D\uEE9D\uEEA3\uEEA5\uEEA7\uEEAB\uEEAD\uEEBD\uA6D8\uA702\uB736\uB742\uB81F\uB822\uCEA3\uF802\uFA1F"\x81\u0102\u01F1\u0240C\\c|\xAC\xAC\xB7\xB7\xBC\xBC\xC2\xD8\xDA\xF8\xFA\u02C3\u02C8\u02D3\u02E2\u02E6\u02EE\u02EE\u02F0\u02F0\u0372\u0376\u0378\u0379\u037C\u037F\u0381\u0381\u0388\u0388\u038A\u038C\u038E\u038E\u0390\u03A3\u03A5\u03F7\u03F9\u0483\u048C\u0531\u0533\u0558\u055B\u055B\u0563\u0589\u05D2\u05EC\u05F2\u05F4\u0622\u064C\u0670\u0671\u0673\u06D5\u06D7\u06D7\u06E7\u06E8\u06F0\u06F1\u06FC\u06FE\u0701\u0701\u0712\u0712\u0714\u0731\u074F\u07A7\u07B3\u07B3\u07CC\u07EC\u07F6\u07F7\u07FC\u07FC\u0802\u0817\u081C\u081C\u0826\u0826\u082A\u082A\u0842\u085A\u08A2\u08B6\u08B8\u08BF\u0906\u093B\u093F\u093F\u0952\u0952\u095A\u0963\u0973\u0982\u0987\u098E\u0991\u0992\u0995\u09AA\u09AC\u09B2\u09B4\u09B4\u09B8\u09BB\u09BF\u09BF\u09D0\u09D0\u09DE\u09DF\u09E1\u09E3\u09F2\u09F3\u0A07\u0A0C\u0A11\u0A12\u0A15\u0A2A\u0A2C\u0A32\u0A34\u0A35\u0A37\u0A38\u0A3A\u0A3B\u0A5B\u0A5E\u0A60\u0A60\u0A74\u0A76\u0A87\u0A8F\u0A91\u0A93\u0A95\u0AAA\u0AAC\u0AB2\u0AB4\u0AB5\u0AB7\u0ABB\u0ABF\u0ABF\u0AD2\u0AD2\u0AE2\u0AE3\u0AFB\u0AFB\u0B07\u0B0E\u0B11\u0B12\u0B15\u0B2A\u0B2C\u0B32\u0B34\u0B35\u0B37\u0B3B\u0B3F\u0B3F\u0B5E\u0B5F\u0B61\u0B63\u0B73\u0B73\u0B85\u0B85\u0B87\u0B8C\u0B90\u0B92\u0B94\u0B97\u0B9B\u0B9C\u0B9E\u0B9E\u0BA0\u0BA1\u0BA5\u0BA6\u0BAA\u0BAC\u0BB0\u0BBB\u0BD2\u0BD2\u0C07\u0C0E\u0C10\u0C12\u0C14\u0C2A\u0C2C\u0C3B\u0C3F\u0C3F\u0C5A\u0C5C\u0C62\u0C63\u0C82\u0C82\u0C87\u0C8E\u0C90\u0C92\u0C94\u0CAA\u0CAC\u0CB5\u0CB7\u0CBB\u0CBF\u0CBF\u0CE0\u0CE0\u0CE2\u0CE3\u0CF3\u0CF4\u0D07\u0D0E\u0D10\u0D12\u0D14\u0D3C\u0D3F\u0D3F\u0D50\u0D50\u0D56\u0D58\u0D61\u0D63\u0D7C\u0D81\u0D87\u0D98\u0D9C\u0DB3\u0DB5\u0DBD\u0DBF\u0DBF\u0DC2\u0DC8\u0E03\u0E32\u0E34\u0E35\u0E42\u0E48\u0E83\u0E84\u0E86\u0E86\u0E89\u0E8A\u0E8C\u0E8C\u0E8F\u0E8F\u0E96\u0E99\u0E9B\u0EA1\u0EA3\u0EA5\u0EA7\u0EA7\u0EA9\u0EA9\u0EAC\u0EAD\u0EAF\u0EB2\u0EB4\u0EB5\u0EBF\u0EBF\u0EC2\u0EC6\u0EC8\u0EC8\u0EDE\u0EE1\u0F02\u0F02\u0F42\u0F49\u0F4B\u0F6E\u0F8A\u0F8E\u1002\u102C\u1041\u1041\u1052\u1057\u105C\u105F\u1063\u1063\u1067\u1068\u1070\u1072\u1077\u1083\u1090\u1090\u10A2\u10C7\u10C9\u10C9\u10CF\u10CF\u10D2\u10FC\u10FE\u124A\u124C\u124F\u1252\u1258\u125A\u125A\u125C\u125F\u1262\u128A\u128C\u128F\u1292\u12B2\u12B4\u12B7\u12BA\u12C0\u12C2\u12C2\u12C4\u12C7\u12CA\u12D8\u12DA\u1312\u1314\u1317\u131A\u135C\u1382\u1391\u13A2\u13F7\u13FA\u13FF\u1403\u166E\u1671\u1681\u1683\u169C\u16A2\u16EC\u16F0\u16FA\u1702\u170E\u1710\u1713\u1722\u1733\u1742\u1753\u1762\u176E\u1770\u1772\u1782\u17B5\u17D9\u17D9\u17DE\u17DE\u1822\u1879\u1882\u1886\u1889\u18AA\u18AC\u18AC\u18B2\u18F7\u1902\u1920\u1952\u196F\u1972\u1976\u1982\u19AD\u19B2\u19CB\u1A02\u1A18\u1A22\u1A56\u1AA9\u1AA9\u1B07\u1B35\u1B47\u1B4D\u1B85\u1BA2\u1BB0\u1BB1\u1BBC\u1BE7\u1C02\u1C25\u1C4F\u1C51\u1C5C\u1C7F\u1C82\u1C8A\u1CEB\u1CEE\u1CF0\u1CF3\u1CF7\u1CF8\u1D02\u1DC1\u1E02\u1F17\u1F1A\u1F1F\u1F22\u1F47\u1F4A\u1F4F\u1F52\u1F59\u1F5B\u1F5B\u1F5D\u1F5D\u1F5F\u1F5F\u1F61\u1F7F\u1F82\u1FB6\u1FB8\u1FBE\u1FC0\u1FC0\u1FC4\u1FC6\u1FC8\u1FCE\u1FD2\u1FD5\u1FD8\u1FDD\u1FE2\u1FEE\u1FF4\u1FF6\u1FF8\u1FFE\u2073\u2073\u2081\u2081\u2092\u209E\u2104\u2104\u2109\u2109\u210C\u2115\u2117\u2117\u211B\u211F\u2126\u2126\u2128\u2128\u212A\u212A\u212C\u212F\u2131\u213B\u213E\u2141\u2147\u214B\u2150\u2150\u2162\u218A\u2C02\u2C30\u2C32\u2C60\u2C62\u2CE6\u2CED\u2CF0\u2CF4\u2CF5\u2D02\u2D27\u2D29\u2D29\u2D2F\u2D2F\u2D32\u2D69\u2D71\u2D71\u2D82\u2D98\u2DA2\u2DA8\u2DAA\u2DB0\u2DB2\u2DB8\u2DBA\u2DC0\u2DC2\u2DC8\u2DCA\u2DD0\u2DD2\u2DD8\u2DDA\u2DE0\u2E31\u2E31\u3007\u3009\u3023\u302B\u3033\u3037\u303A\u303E\u3043\u3098\u309F\u30A1\u30A3\u30FC\u30FE\u3101\u3107\u312F\u3133\u3190\u31A2\u31BC\u31F2\u3201\u3402\u4DB7\u4E02\u9FD7\uA002\uA48E\uA4D2\uA4FF\uA502\uA60E\uA612\uA621\uA62C\uA62D\uA642\uA670\uA681\uA69F\uA6A2\uA6F1\uA719\uA721\uA724\uA78A\uA78D\uA7B0\uA7B2\uA7B9\uA7F9\uA803\uA805\uA807\uA809\uA80C\uA80E\uA824\uA842\uA875\uA884\uA8B5\uA8F4\uA8F9\uA8FD\uA8FD\uA8FF\uA8FF\uA90C\uA927\uA932\uA948\uA962\uA97E\uA986\uA9B4\uA9D1\uA9D1\uA9E2\uA9E6\uA9E8\uA9F1\uA9FC\uAA00\uAA02\uAA2A\uAA42\uAA44\uAA46\uAA4D\uAA62\uAA78\uAA7C\uAA7C\uAA80\uAAB1\uAAB3\uAAB3\uAAB7\uAAB8\uAABB\uAABF\uAAC2\uAAC2\uAAC4\uAAC4\uAADD\uAADF\uAAE2\uAAEC\uAAF4\uAAF6\uAB03\uAB08\uAB0B\uAB10\uAB13\uAB18\uAB22\uAB28\uAB2A\uAB30\uAB32\uAB5C\uAB5E\uAB67\uAB72\uABE4\uAC02\uD7A5\uD7B2\uD7C8\uD7CD\uD7FD\uF902\uFA6F\uFA72\uFADB\uFB02\uFB08\uFB15\uFB19\uFB1F\uFB1F\uFB21\uFB2A\uFB2C\uFB38\uFB3A\uFB3E\uFB40\uFB40\uFB42\uFB43\uFB45\uFB46\uFB48\uFBB3\uFBD5\uFD3F\uFD52\uFD91\uFD94\uFDC9\uFDF2\uFDFD\uFE72\uFE76\uFE78\uFEFE\uFF23\uFF3C\uFF43\uFF5C\uFF68\uFFC0\uFFC4\uFFC9\uFFCC\uFFD1\uFFD4\uFFD9\uFFDC\uFFDE\r(*<>?AOR_\x82\xFC\u0142\u0176\u0282\u029E\u02A2\u02D2\u0302\u0321\u0332\u034C\u0352\u0377\u0382\u039F\u03A2\u03C5\u03CA\u03D1\u03D3\u03D7\u0402\u049F\u04B2\u04D5\u04DA\u04FD\u0502\u0529\u0532\u0565\u0602\u0738\u0742\u0757\u0762\u0769\u0802\u0807\u080A\u080A\u080C\u0837\u0839\u083A\u083E\u083E\u0841\u0857\u0862\u0878\u0882\u08A0\u08E2\u08F4\u08F6\u08F7\u0902\u0917\u0922\u093B\u0982\u09B9\u09C0\u09C1\u0A02\u0A02\u0A12\u0A15\u0A17\u0A19\u0A1B\u0A35\u0A62\u0A7E\u0A82\u0A9E\u0AC2\u0AC9\u0ACB\u0AE6\u0B02\u0B37\u0B42\u0B57\u0B62\u0B74\u0B82\u0B93\u0C02\u0C4A\u0C82\u0CB4\u0CC2\u0CF4\u1005\u1039\u1085\u10B1\u10D2\u10EA\u1105\u1128\u1152\u1174\u1178\u1178\u1185\u11B4\u11C3\u11C6\u11DC\u11DC\u11DE\u11DE\u1202\u1213\u1215\u122D\u1282\u1288\u128A\u128A\u128C\u128F\u1291\u129F\u12A1\u12AA\u12B2\u12E0\u1307\u130E\u1311\u1312\u1315\u132A\u132C\u1332\u1334\u1335\u1337\u133B\u133F\u133F\u1352\u1352\u135F\u1363\u1402\u1436\u1449\u144C\u1482\u14B1\u14C6\u14C7\u14C9\u14C9\u1582\u15B0\u15DA\u15DD\u1602\u1631\u1646\u1646\u1682\u16AC\u1702\u171B\u18A2\u18E1\u1901\u1901\u1AC2\u1AFA\u1C02\u1C0A\u1C0C\u1C30\u1C42\u1C42\u1C74\u1C91\u2002\u239B\u2402\u2470\u2482\u2545\u3002\u3430\u4402\u4648\u6802\u6A3A\u6A42\u6A60\u6AD2\u6AEF\u6B02\u6B31\u6B42\u6B45\u6B65\u6B79\u6B7F\u6B91\u6F02\u6F46\u6F52\u6F52\u6F95\u6FA1\u6FE2\u6FE2\u7002\u87EE\u8802\u8AF4\uB002\uB003\uBC02\uBC6C\uBC72\uBC7E\uBC82\uBC8A\uBC92\uBC9B\uD402\uD456\uD458\uD49E\uD4A0\uD4A1\uD4A4\uD4A4\uD4A7\uD4A8\uD4AB\uD4AE\uD4B0\uD4BB\uD4BD\uD4BD\uD4BF\uD4C5\uD4C7\uD507\uD509\uD50C\uD50F\uD516\uD518\uD51E\uD520\uD53B\uD53D\uD540\uD542\uD546\uD548\uD548';
  XPathLexer._serializedATNSegment1 = `\uD54C\uD552\uD554\uD6A7\uD6AA\uD6C2\uD6C4\uD6DC\uD6DE\uD6FC\uD6FE\uD716\uD718\uD736\uD738\uD750\uD752\uD770\uD772\uD78A\uD78C\uD7AA\uD7AC\uD7C4\uD7C6\uD7CD\uE802\uE8C6\uE902\uE945\uEE02\uEE05\uEE07\uEE21\uEE23\uEE24\uEE26\uEE26\uEE29\uEE29\uEE2B\uEE34\uEE36\uEE39\uEE3B\uEE3B\uEE3D\uEE3D\uEE44\uEE44\uEE49\uEE49\uEE4B\uEE4B\uEE4D\uEE4D\uEE4F\uEE51\uEE53\uEE54\uEE56\uEE56\uEE59\uEE59\uEE5B\uEE5B\uEE5D\uEE5D\uEE5F\uEE5F\uEE61\uEE61\uEE63\uEE64\uEE66\uEE66\uEE69\uEE6C\uEE6E\uEE74\uEE76\uEE79\uEE7B\uEE7E\uEE80\uEE80\uEE82\uEE8B\uEE8D\uEE9D\uEEA3\uEEA5\uEEA7\uEEAB\uEEAD\uEEBD\uA6D8\uA702\uB736\uB742\uB81F\uB822\uCEA3\uF802\uFA1F1\x07	\v\x07	\v\r%')\x071\x071\x071\x07,\b\x07#
 \b\r\x07"  !!#" #$\b$\f%&	&'(	()-\x07)*,\v+*,/-.-+.0/-01\x07)1 -`;
  XPathLexer._serializedATN = Utils3.join([
    XPathLexer._serializedATNSegment0,
    XPathLexer._serializedATNSegment1
  ], "");
});

// node_modules/antlr4ts/tree/xpath/XPathLexerErrorListener.js
var require_XPathLexerErrorListener = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathLexerErrorListener = void 0;
  var Decorators_1 = require_Decorators();
  var XPathLexerErrorListener = class {
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathLexerErrorListener.prototype, "syntaxError", null);
  exports.XPathLexerErrorListener = XPathLexerErrorListener;
});

// node_modules/antlr4ts/tree/xpath/XPathElement.js
var require_XPathElement = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathElement = void 0;
  var Decorators_1 = require_Decorators();
  var XPathElement = class {
    constructor(nodeName) {
      this.nodeName = nodeName;
      this.invert = false;
    }
    toString() {
      let inv = this.invert ? "!" : "";
      let className = Object.constructor.name;
      return className + "[" + inv + this.nodeName + "]";
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathElement.prototype, "toString", null);
  exports.XPathElement = XPathElement;
});

// node_modules/antlr4ts/tree/xpath/XPathRuleAnywhereElement.js
var require_XPathRuleAnywhereElement = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathRuleAnywhereElement = void 0;
  var Decorators_1 = require_Decorators();
  var Trees_1 = require_Trees();
  var XPathElement_1 = require_XPathElement();
  var XPathRuleAnywhereElement = class extends XPathElement_1.XPathElement {
    constructor(ruleName, ruleIndex) {
      super(ruleName);
      this.ruleIndex = ruleIndex;
    }
    evaluate(t) {
      return Trees_1.Trees.findAllRuleNodes(t, this.ruleIndex);
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathRuleAnywhereElement.prototype, "evaluate", null);
  exports.XPathRuleAnywhereElement = XPathRuleAnywhereElement;
});

// node_modules/antlr4ts/tree/xpath/XPathRuleElement.js
var require_XPathRuleElement = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathRuleElement = void 0;
  var ParserRuleContext_1 = require_ParserRuleContext();
  var Decorators_1 = require_Decorators();
  var Trees_1 = require_Trees();
  var XPathElement_1 = require_XPathElement();
  var XPathRuleElement = class extends XPathElement_1.XPathElement {
    constructor(ruleName, ruleIndex) {
      super(ruleName);
      this.ruleIndex = ruleIndex;
    }
    evaluate(t) {
      let nodes = [];
      for (let c of Trees_1.Trees.getChildren(t)) {
        if (c instanceof ParserRuleContext_1.ParserRuleContext) {
          if (c.ruleIndex === this.ruleIndex && !this.invert || c.ruleIndex !== this.ruleIndex && this.invert) {
            nodes.push(c);
          }
        }
      }
      return nodes;
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathRuleElement.prototype, "evaluate", null);
  exports.XPathRuleElement = XPathRuleElement;
});

// node_modules/antlr4ts/tree/xpath/XPathTokenAnywhereElement.js
var require_XPathTokenAnywhereElement = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathTokenAnywhereElement = void 0;
  var Decorators_1 = require_Decorators();
  var Trees_1 = require_Trees();
  var XPathElement_1 = require_XPathElement();
  var XPathTokenAnywhereElement = class extends XPathElement_1.XPathElement {
    constructor(tokenName, tokenType) {
      super(tokenName);
      this.tokenType = tokenType;
    }
    evaluate(t) {
      return Trees_1.Trees.findAllTokenNodes(t, this.tokenType);
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathTokenAnywhereElement.prototype, "evaluate", null);
  exports.XPathTokenAnywhereElement = XPathTokenAnywhereElement;
});

// node_modules/antlr4ts/tree/xpath/XPathTokenElement.js
var require_XPathTokenElement = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathTokenElement = void 0;
  var Decorators_1 = require_Decorators();
  var TerminalNode_1 = require_TerminalNode();
  var Trees_1 = require_Trees();
  var XPathElement_1 = require_XPathElement();
  var XPathTokenElement = class extends XPathElement_1.XPathElement {
    constructor(tokenName, tokenType) {
      super(tokenName);
      this.tokenType = tokenType;
    }
    evaluate(t) {
      let nodes = [];
      for (let c of Trees_1.Trees.getChildren(t)) {
        if (c instanceof TerminalNode_1.TerminalNode) {
          if (c.symbol.type === this.tokenType && !this.invert || c.symbol.type !== this.tokenType && this.invert) {
            nodes.push(c);
          }
        }
      }
      return nodes;
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathTokenElement.prototype, "evaluate", null);
  exports.XPathTokenElement = XPathTokenElement;
});

// node_modules/antlr4ts/tree/xpath/XPathWildcardAnywhereElement.js
var require_XPathWildcardAnywhereElement = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathWildcardAnywhereElement = void 0;
  var Decorators_1 = require_Decorators();
  var Trees_1 = require_Trees();
  var XPath_1 = require_XPath();
  var XPathElement_1 = require_XPathElement();
  var XPathWildcardAnywhereElement = class extends XPathElement_1.XPathElement {
    constructor() {
      super(XPath_1.XPath.WILDCARD);
    }
    evaluate(t) {
      if (this.invert) {
        return [];
      }
      return Trees_1.Trees.getDescendants(t);
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathWildcardAnywhereElement.prototype, "evaluate", null);
  exports.XPathWildcardAnywhereElement = XPathWildcardAnywhereElement;
});

// node_modules/antlr4ts/tree/xpath/XPathWildcardElement.js
var require_XPathWildcardElement = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPathWildcardElement = void 0;
  var Decorators_1 = require_Decorators();
  var Trees_1 = require_Trees();
  var XPath_1 = require_XPath();
  var XPathElement_1 = require_XPathElement();
  var XPathWildcardElement = class extends XPathElement_1.XPathElement {
    constructor() {
      super(XPath_1.XPath.WILDCARD);
    }
    evaluate(t) {
      let kids = [];
      if (this.invert) {
        return kids;
      }
      for (let c of Trees_1.Trees.getChildren(t)) {
        kids.push(c);
      }
      return kids;
    }
  };
  __decorate([
    Decorators_1.Override
  ], XPathWildcardElement.prototype, "evaluate", null);
  exports.XPathWildcardElement = XPathWildcardElement;
});

// node_modules/antlr4ts/tree/xpath/XPath.js
var require_XPath = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.XPath = void 0;
  var CharStreams_1 = require_CharStreams();
  var CommonTokenStream_1 = require_CommonTokenStream();
  var LexerNoViableAltException_1 = require_LexerNoViableAltException();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var Token_1 = require_Token();
  var XPathLexer_1 = require_XPathLexer();
  var XPathLexerErrorListener_1 = require_XPathLexerErrorListener();
  var XPathRuleAnywhereElement_1 = require_XPathRuleAnywhereElement();
  var XPathRuleElement_1 = require_XPathRuleElement();
  var XPathTokenAnywhereElement_1 = require_XPathTokenAnywhereElement();
  var XPathTokenElement_1 = require_XPathTokenElement();
  var XPathWildcardAnywhereElement_1 = require_XPathWildcardAnywhereElement();
  var XPathWildcardElement_1 = require_XPathWildcardElement();
  var XPath = class {
    constructor(parser, path) {
      this.parser = parser;
      this.path = path;
      this.elements = this.split(path);
    }
    split(path) {
      let lexer = new XPathLexer_1.XPathLexer(CharStreams_1.CharStreams.fromString(path));
      lexer.recover = (e) => {
        throw e;
      };
      lexer.removeErrorListeners();
      lexer.addErrorListener(new XPathLexerErrorListener_1.XPathLexerErrorListener());
      let tokenStream = new CommonTokenStream_1.CommonTokenStream(lexer);
      try {
        tokenStream.fill();
      } catch (e) {
        if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
          let pos = lexer.charPositionInLine;
          let msg = "Invalid tokens or characters at index " + pos + " in path '" + path + "' -- " + e.message;
          throw new RangeError(msg);
        }
        throw e;
      }
      let tokens2 = tokenStream.getTokens();
      let elements = [];
      let n = tokens2.length;
      let i = 0;
      loop:
        while (i < n) {
          let el = tokens2[i];
          let next;
          switch (el.type) {
            case XPathLexer_1.XPathLexer.ROOT:
            case XPathLexer_1.XPathLexer.ANYWHERE:
              let anywhere = el.type === XPathLexer_1.XPathLexer.ANYWHERE;
              i++;
              next = tokens2[i];
              let invert = next.type === XPathLexer_1.XPathLexer.BANG;
              if (invert) {
                i++;
                next = tokens2[i];
              }
              let pathElement = this.getXPathElement(next, anywhere);
              pathElement.invert = invert;
              elements.push(pathElement);
              i++;
              break;
            case XPathLexer_1.XPathLexer.TOKEN_REF:
            case XPathLexer_1.XPathLexer.RULE_REF:
            case XPathLexer_1.XPathLexer.WILDCARD:
              elements.push(this.getXPathElement(el, false));
              i++;
              break;
            case Token_1.Token.EOF:
              break loop;
            default:
              throw new Error("Unknowth path element " + el);
          }
        }
      return elements;
    }
    getXPathElement(wordToken, anywhere) {
      if (wordToken.type === Token_1.Token.EOF) {
        throw new Error("Missing path element at end of path");
      }
      let word = wordToken.text;
      if (word == null) {
        throw new Error("Expected wordToken to have text content.");
      }
      let ttype = this.parser.getTokenType(word);
      let ruleIndex = this.parser.getRuleIndex(word);
      switch (wordToken.type) {
        case XPathLexer_1.XPathLexer.WILDCARD:
          return anywhere ? new XPathWildcardAnywhereElement_1.XPathWildcardAnywhereElement() : new XPathWildcardElement_1.XPathWildcardElement();
        case XPathLexer_1.XPathLexer.TOKEN_REF:
        case XPathLexer_1.XPathLexer.STRING:
          if (ttype === Token_1.Token.INVALID_TYPE) {
            throw new Error(word + " at index " + wordToken.startIndex + " isn't a valid token name");
          }
          return anywhere ? new XPathTokenAnywhereElement_1.XPathTokenAnywhereElement(word, ttype) : new XPathTokenElement_1.XPathTokenElement(word, ttype);
        default:
          if (ruleIndex === -1) {
            throw new Error(word + " at index " + wordToken.startIndex + " isn't a valid rule name");
          }
          return anywhere ? new XPathRuleAnywhereElement_1.XPathRuleAnywhereElement(word, ruleIndex) : new XPathRuleElement_1.XPathRuleElement(word, ruleIndex);
      }
    }
    static findAll(tree, xpath, parser) {
      let p = new XPath(parser, xpath);
      return p.evaluate(tree);
    }
    evaluate(t) {
      let dummyRoot = new ParserRuleContext_1.ParserRuleContext();
      dummyRoot.addChild(t);
      let work = new Set([dummyRoot]);
      let i = 0;
      while (i < this.elements.length) {
        let next = new Set();
        for (let node of work) {
          if (node.childCount > 0) {
            let matching = this.elements[i].evaluate(node);
            matching.forEach(next.add, next);
          }
        }
        i++;
        work = next;
      }
      return work;
    }
  };
  exports.XPath = XPath;
  XPath.WILDCARD = "*";
  XPath.NOT = "!";
});

// node_modules/antlr4ts/tree/pattern/ParseTreePattern.js
var require_ParseTreePattern = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParseTreePattern = void 0;
  var Decorators_1 = require_Decorators();
  var XPath_1 = require_XPath();
  var ParseTreePattern = class ParseTreePattern {
    constructor(matcher, pattern, patternRuleIndex, patternTree) {
      this._matcher = matcher;
      this._patternRuleIndex = patternRuleIndex;
      this._pattern = pattern;
      this._patternTree = patternTree;
    }
    match(tree) {
      return this._matcher.match(tree, this);
    }
    matches(tree) {
      return this._matcher.match(tree, this).succeeded;
    }
    findAll(tree, xpath) {
      let subtrees = XPath_1.XPath.findAll(tree, xpath, this._matcher.parser);
      let matches = [];
      for (let t of subtrees) {
        let match = this.match(t);
        if (match.succeeded) {
          matches.push(match);
        }
      }
      return matches;
    }
    get matcher() {
      return this._matcher;
    }
    get pattern() {
      return this._pattern;
    }
    get patternRuleIndex() {
      return this._patternRuleIndex;
    }
    get patternTree() {
      return this._patternTree;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePattern.prototype, "_pattern", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePattern.prototype, "_patternTree", void 0);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePattern.prototype, "_matcher", void 0);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], ParseTreePattern.prototype, "match", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], ParseTreePattern.prototype, "matches", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], ParseTreePattern.prototype, "findAll", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePattern.prototype, "matcher", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePattern.prototype, "pattern", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePattern.prototype, "patternTree", null);
  ParseTreePattern = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
  ], ParseTreePattern);
  exports.ParseTreePattern = ParseTreePattern;
});

// node_modules/antlr4ts/tree/pattern/RuleTagToken.js
var require_RuleTagToken = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleTagToken = void 0;
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var RuleTagToken = class RuleTagToken {
    constructor(ruleName, bypassTokenType, label) {
      if (ruleName == null || ruleName.length === 0) {
        throw new Error("ruleName cannot be null or empty.");
      }
      this._ruleName = ruleName;
      this.bypassTokenType = bypassTokenType;
      this._label = label;
    }
    get ruleName() {
      return this._ruleName;
    }
    get label() {
      return this._label;
    }
    get channel() {
      return Token_1.Token.DEFAULT_CHANNEL;
    }
    get text() {
      if (this._label != null) {
        return "<" + this._label + ":" + this._ruleName + ">";
      }
      return "<" + this._ruleName + ">";
    }
    get type() {
      return this.bypassTokenType;
    }
    get line() {
      return 0;
    }
    get charPositionInLine() {
      return -1;
    }
    get tokenIndex() {
      return -1;
    }
    get startIndex() {
      return -1;
    }
    get stopIndex() {
      return -1;
    }
    get tokenSource() {
      return void 0;
    }
    get inputStream() {
      return void 0;
    }
    toString() {
      return this._ruleName + ":" + this.bypassTokenType;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], RuleTagToken.prototype, "ruleName", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "channel", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "text", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "type", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "line", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "charPositionInLine", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "tokenIndex", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "startIndex", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "stopIndex", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "tokenSource", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "inputStream", null);
  __decorate([
    Decorators_1.Override
  ], RuleTagToken.prototype, "toString", null);
  RuleTagToken = __decorate([
    __param(0, Decorators_1.NotNull)
  ], RuleTagToken);
  exports.RuleTagToken = RuleTagToken;
});

// node_modules/antlr4ts/tree/pattern/Chunk.js
var require_Chunk = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Chunk = void 0;
  var Chunk = class {
  };
  exports.Chunk = Chunk;
});

// node_modules/antlr4ts/tree/pattern/TagChunk.js
var require_TagChunk = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TagChunk = void 0;
  var Chunk_1 = require_Chunk();
  var Decorators_1 = require_Decorators();
  var TagChunk = class extends Chunk_1.Chunk {
    constructor(tag, label) {
      super();
      if (tag == null || tag.length === 0) {
        throw new Error("tag cannot be null or empty");
      }
      this._tag = tag;
      this._label = label;
    }
    get tag() {
      return this._tag;
    }
    get label() {
      return this._label;
    }
    toString() {
      if (this._label != null) {
        return this._label + ":" + this._tag;
      }
      return this._tag;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], TagChunk.prototype, "tag", null);
  __decorate([
    Decorators_1.Override
  ], TagChunk.prototype, "toString", null);
  exports.TagChunk = TagChunk;
});

// node_modules/antlr4ts/tree/pattern/TextChunk.js
var require_TextChunk = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TextChunk = void 0;
  var Chunk_1 = require_Chunk();
  var Decorators_1 = require_Decorators();
  var TextChunk = class TextChunk extends Chunk_1.Chunk {
    constructor(text) {
      super();
      if (text == null) {
        throw new Error("text cannot be null");
      }
      this._text = text;
    }
    get text() {
      return this._text;
    }
    toString() {
      return "'" + this._text + "'";
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], TextChunk.prototype, "_text", void 0);
  __decorate([
    Decorators_1.NotNull
  ], TextChunk.prototype, "text", null);
  __decorate([
    Decorators_1.Override
  ], TextChunk.prototype, "toString", null);
  TextChunk = __decorate([
    __param(0, Decorators_1.NotNull)
  ], TextChunk);
  exports.TextChunk = TextChunk;
});

// node_modules/antlr4ts/tree/pattern/TokenTagToken.js
var require_TokenTagToken = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TokenTagToken = void 0;
  var CommonToken_1 = require_CommonToken();
  var Decorators_1 = require_Decorators();
  var TokenTagToken = class TokenTagToken extends CommonToken_1.CommonToken {
    constructor(tokenName, type, label) {
      super(type);
      this._tokenName = tokenName;
      this._label = label;
    }
    get tokenName() {
      return this._tokenName;
    }
    get label() {
      return this._label;
    }
    get text() {
      if (this._label != null) {
        return "<" + this._label + ":" + this._tokenName + ">";
      }
      return "<" + this._tokenName + ">";
    }
    toString() {
      return this._tokenName + ":" + this.type;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], TokenTagToken.prototype, "_tokenName", void 0);
  __decorate([
    Decorators_1.NotNull
  ], TokenTagToken.prototype, "tokenName", null);
  __decorate([
    Decorators_1.Override
  ], TokenTagToken.prototype, "text", null);
  __decorate([
    Decorators_1.Override
  ], TokenTagToken.prototype, "toString", null);
  TokenTagToken = __decorate([
    __param(0, Decorators_1.NotNull)
  ], TokenTagToken);
  exports.TokenTagToken = TokenTagToken;
});

// node_modules/antlr4ts/tree/pattern/ParseTreePatternMatcher.js
var require_ParseTreePatternMatcher = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ParseTreePatternMatcher = void 0;
  var BailErrorStrategy_1 = require_BailErrorStrategy();
  var CharStreams_1 = require_CharStreams();
  var CommonTokenStream_1 = require_CommonTokenStream();
  var ListTokenSource_1 = require_ListTokenSource();
  var MultiMap_1 = require_MultiMap();
  var Decorators_1 = require_Decorators();
  var ParseCancellationException_1 = require_ParseCancellationException();
  var ParserInterpreter_1 = require_ParserInterpreter();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var ParseTreeMatch_1 = require_ParseTreeMatch();
  var ParseTreePattern_1 = require_ParseTreePattern();
  var RecognitionException_1 = require_RecognitionException();
  var RuleNode_1 = require_RuleNode();
  var RuleTagToken_1 = require_RuleTagToken();
  var TagChunk_1 = require_TagChunk();
  var TerminalNode_1 = require_TerminalNode();
  var TextChunk_1 = require_TextChunk();
  var Token_1 = require_Token();
  var TokenTagToken_1 = require_TokenTagToken();
  var ParseTreePatternMatcher2 = class {
    constructor(lexer, parser) {
      this.start = "<";
      this.stop = ">";
      this.escape = "\\";
      this.escapeRE = /\\/g;
      this._lexer = lexer;
      this._parser = parser;
    }
    setDelimiters(start, stop, escapeLeft) {
      if (!start) {
        throw new Error("start cannot be null or empty");
      }
      if (!stop) {
        throw new Error("stop cannot be null or empty");
      }
      this.start = start;
      this.stop = stop;
      this.escape = escapeLeft;
      this.escapeRE = new RegExp(escapeLeft.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
    }
    matches(tree, pattern, patternRuleIndex = 0) {
      if (typeof pattern === "string") {
        let p = this.compile(pattern, patternRuleIndex);
        return this.matches(tree, p);
      } else {
        let labels = new MultiMap_1.MultiMap();
        let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
        return !mismatchedNode;
      }
    }
    match(tree, pattern, patternRuleIndex = 0) {
      if (typeof pattern === "string") {
        let p = this.compile(pattern, patternRuleIndex);
        return this.match(tree, p);
      } else {
        let labels = new MultiMap_1.MultiMap();
        let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
        return new ParseTreeMatch_1.ParseTreeMatch(tree, pattern, labels, mismatchedNode);
      }
    }
    compile(pattern, patternRuleIndex) {
      let tokenList = this.tokenize(pattern);
      let tokenSrc = new ListTokenSource_1.ListTokenSource(tokenList);
      let tokens2 = new CommonTokenStream_1.CommonTokenStream(tokenSrc);
      const parser = this._parser;
      let parserInterp = new ParserInterpreter_1.ParserInterpreter(parser.grammarFileName, parser.vocabulary, parser.ruleNames, parser.getATNWithBypassAlts(), tokens2);
      let tree;
      try {
        parserInterp.errorHandler = new BailErrorStrategy_1.BailErrorStrategy();
        tree = parserInterp.parse(patternRuleIndex);
      } catch (e) {
        if (e instanceof ParseCancellationException_1.ParseCancellationException) {
          throw e.getCause();
        } else if (e instanceof RecognitionException_1.RecognitionException) {
          throw e;
        } else if (e instanceof Error) {
          throw new ParseTreePatternMatcher2.CannotInvokeStartRule(e);
        } else {
          throw e;
        }
      }
      if (tokens2.LA(1) !== Token_1.Token.EOF) {
        throw new ParseTreePatternMatcher2.StartRuleDoesNotConsumeFullPattern();
      }
      return new ParseTreePattern_1.ParseTreePattern(this, pattern, patternRuleIndex, tree);
    }
    get lexer() {
      return this._lexer;
    }
    get parser() {
      return this._parser;
    }
    matchImpl(tree, patternTree, labels) {
      if (!tree) {
        throw new TypeError("tree cannot be null");
      }
      if (!patternTree) {
        throw new TypeError("patternTree cannot be null");
      }
      if (tree instanceof TerminalNode_1.TerminalNode && patternTree instanceof TerminalNode_1.TerminalNode) {
        let mismatchedNode;
        if (tree.symbol.type === patternTree.symbol.type) {
          if (patternTree.symbol instanceof TokenTagToken_1.TokenTagToken) {
            let tokenTagToken = patternTree.symbol;
            labels.map(tokenTagToken.tokenName, tree);
            const l = tokenTagToken.label;
            if (l) {
              labels.map(l, tree);
            }
          } else if (tree.text === patternTree.text) {
          } else {
            if (!mismatchedNode) {
              mismatchedNode = tree;
            }
          }
        } else {
          if (!mismatchedNode) {
            mismatchedNode = tree;
          }
        }
        return mismatchedNode;
      }
      if (tree instanceof ParserRuleContext_1.ParserRuleContext && patternTree instanceof ParserRuleContext_1.ParserRuleContext) {
        let mismatchedNode;
        let ruleTagToken = this.getRuleTagToken(patternTree);
        if (ruleTagToken) {
          let m;
          if (tree.ruleContext.ruleIndex === patternTree.ruleContext.ruleIndex) {
            labels.map(ruleTagToken.ruleName, tree);
            const l = ruleTagToken.label;
            if (l) {
              labels.map(l, tree);
            }
          } else {
            if (!mismatchedNode) {
              mismatchedNode = tree;
            }
          }
          return mismatchedNode;
        }
        if (tree.childCount !== patternTree.childCount) {
          if (!mismatchedNode) {
            mismatchedNode = tree;
          }
          return mismatchedNode;
        }
        let n = tree.childCount;
        for (let i = 0; i < n; i++) {
          let childMatch = this.matchImpl(tree.getChild(i), patternTree.getChild(i), labels);
          if (childMatch) {
            return childMatch;
          }
        }
        return mismatchedNode;
      }
      return tree;
    }
    getRuleTagToken(t) {
      if (t instanceof RuleNode_1.RuleNode) {
        if (t.childCount === 1 && t.getChild(0) instanceof TerminalNode_1.TerminalNode) {
          let c = t.getChild(0);
          if (c.symbol instanceof RuleTagToken_1.RuleTagToken) {
            return c.symbol;
          }
        }
      }
      return void 0;
    }
    tokenize(pattern) {
      let chunks = this.split(pattern);
      let tokens2 = [];
      for (let chunk of chunks) {
        if (chunk instanceof TagChunk_1.TagChunk) {
          let tagChunk = chunk;
          const firstChar = tagChunk.tag.substr(0, 1);
          if (firstChar === firstChar.toUpperCase()) {
            let ttype = this._parser.getTokenType(tagChunk.tag);
            if (ttype === Token_1.Token.INVALID_TYPE) {
              throw new Error("Unknown token " + tagChunk.tag + " in pattern: " + pattern);
            }
            let t = new TokenTagToken_1.TokenTagToken(tagChunk.tag, ttype, tagChunk.label);
            tokens2.push(t);
          } else if (firstChar === firstChar.toLowerCase()) {
            let ruleIndex = this._parser.getRuleIndex(tagChunk.tag);
            if (ruleIndex === -1) {
              throw new Error("Unknown rule " + tagChunk.tag + " in pattern: " + pattern);
            }
            let ruleImaginaryTokenType = this._parser.getATNWithBypassAlts().ruleToTokenType[ruleIndex];
            tokens2.push(new RuleTagToken_1.RuleTagToken(tagChunk.tag, ruleImaginaryTokenType, tagChunk.label));
          } else {
            throw new Error("invalid tag: " + tagChunk.tag + " in pattern: " + pattern);
          }
        } else {
          let textChunk = chunk;
          this._lexer.inputStream = CharStreams_1.CharStreams.fromString(textChunk.text);
          let t = this._lexer.nextToken();
          while (t.type !== Token_1.Token.EOF) {
            tokens2.push(t);
            t = this._lexer.nextToken();
          }
        }
      }
      return tokens2;
    }
    split(pattern) {
      let p = 0;
      let n = pattern.length;
      let chunks = [];
      let buf;
      let starts = [];
      let stops = [];
      while (p < n) {
        if (p === pattern.indexOf(this.escape + this.start, p)) {
          p += this.escape.length + this.start.length;
        } else if (p === pattern.indexOf(this.escape + this.stop, p)) {
          p += this.escape.length + this.stop.length;
        } else if (p === pattern.indexOf(this.start, p)) {
          starts.push(p);
          p += this.start.length;
        } else if (p === pattern.indexOf(this.stop, p)) {
          stops.push(p);
          p += this.stop.length;
        } else {
          p++;
        }
      }
      if (starts.length > stops.length) {
        throw new Error("unterminated tag in pattern: " + pattern);
      }
      if (starts.length < stops.length) {
        throw new Error("missing start tag in pattern: " + pattern);
      }
      let ntags = starts.length;
      for (let i = 0; i < ntags; i++) {
        if (starts[i] >= stops[i]) {
          throw new Error("tag delimiters out of order in pattern: " + pattern);
        }
      }
      if (ntags === 0) {
        let text = pattern.substring(0, n);
        chunks.push(new TextChunk_1.TextChunk(text));
      }
      if (ntags > 0 && starts[0] > 0) {
        let text = pattern.substring(0, starts[0]);
        chunks.push(new TextChunk_1.TextChunk(text));
      }
      for (let i = 0; i < ntags; i++) {
        let tag = pattern.substring(starts[i] + this.start.length, stops[i]);
        let ruleOrToken = tag;
        let label;
        let colon = tag.indexOf(":");
        if (colon >= 0) {
          label = tag.substring(0, colon);
          ruleOrToken = tag.substring(colon + 1, tag.length);
        }
        chunks.push(new TagChunk_1.TagChunk(ruleOrToken, label));
        if (i + 1 < ntags) {
          let text = pattern.substring(stops[i] + this.stop.length, starts[i + 1]);
          chunks.push(new TextChunk_1.TextChunk(text));
        }
      }
      if (ntags > 0) {
        let afterLastTag = stops[ntags - 1] + this.stop.length;
        if (afterLastTag < n) {
          let text = pattern.substring(afterLastTag, n);
          chunks.push(new TextChunk_1.TextChunk(text));
        }
      }
      for (let i = 0; i < chunks.length; i++) {
        let c = chunks[i];
        if (c instanceof TextChunk_1.TextChunk) {
          let unescaped = c.text.replace(this.escapeRE, "");
          if (unescaped.length < c.text.length) {
            chunks[i] = new TextChunk_1.TextChunk(unescaped);
          }
        }
      }
      return chunks;
    }
  };
  __decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
  ], ParseTreePatternMatcher2.prototype, "match", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePatternMatcher2.prototype, "lexer", null);
  __decorate([
    Decorators_1.NotNull
  ], ParseTreePatternMatcher2.prototype, "parser", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ParseTreePatternMatcher2.prototype, "matchImpl", null);
  exports.ParseTreePatternMatcher = ParseTreePatternMatcher2;
  (function(ParseTreePatternMatcher3) {
    class CannotInvokeStartRule extends Error {
      constructor(error) {
        super(`CannotInvokeStartRule: ${error}`);
        this.error = error;
      }
    }
    ParseTreePatternMatcher3.CannotInvokeStartRule = CannotInvokeStartRule;
    class StartRuleDoesNotConsumeFullPattern extends Error {
      constructor() {
        super("StartRuleDoesNotConsumeFullPattern");
      }
    }
    ParseTreePatternMatcher3.StartRuleDoesNotConsumeFullPattern = StartRuleDoesNotConsumeFullPattern;
  })(ParseTreePatternMatcher2 = exports.ParseTreePatternMatcher || (exports.ParseTreePatternMatcher = {}));
});

// node_modules/antlr4ts/atn/DecisionEventInfo.js
var require_DecisionEventInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DecisionEventInfo = void 0;
  var Decorators_1 = require_Decorators();
  var DecisionEventInfo = class DecisionEventInfo {
    constructor(decision, state, input, startIndex, stopIndex, fullCtx) {
      this.decision = decision;
      this.fullCtx = fullCtx;
      this.stopIndex = stopIndex;
      this.input = input;
      this.startIndex = startIndex;
      this.state = state;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], DecisionEventInfo.prototype, "input", void 0);
  DecisionEventInfo = __decorate([
    __param(2, Decorators_1.NotNull)
  ], DecisionEventInfo);
  exports.DecisionEventInfo = DecisionEventInfo;
});

// node_modules/antlr4ts/atn/AmbiguityInfo.js
var require_AmbiguityInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.AmbiguityInfo = void 0;
  var DecisionEventInfo_1 = require_DecisionEventInfo();
  var Decorators_1 = require_Decorators();
  var AmbiguityInfo = class AmbiguityInfo extends DecisionEventInfo_1.DecisionEventInfo {
    constructor(decision, state, ambigAlts, input, startIndex, stopIndex) {
      super(decision, state, input, startIndex, stopIndex, state.useContext);
      this.ambigAlts = ambigAlts;
    }
    get ambiguousAlternatives() {
      return this.ambigAlts;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], AmbiguityInfo.prototype, "ambigAlts", void 0);
  __decorate([
    Decorators_1.NotNull
  ], AmbiguityInfo.prototype, "ambiguousAlternatives", null);
  AmbiguityInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
  ], AmbiguityInfo);
  exports.AmbiguityInfo = AmbiguityInfo;
});

// node_modules/antlr4ts/atn/ContextSensitivityInfo.js
var require_ContextSensitivityInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ContextSensitivityInfo = void 0;
  var DecisionEventInfo_1 = require_DecisionEventInfo();
  var Decorators_1 = require_Decorators();
  var ContextSensitivityInfo = class ContextSensitivityInfo extends DecisionEventInfo_1.DecisionEventInfo {
    constructor(decision, state, input, startIndex, stopIndex) {
      super(decision, state, input, startIndex, stopIndex, true);
    }
  };
  ContextSensitivityInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ContextSensitivityInfo);
  exports.ContextSensitivityInfo = ContextSensitivityInfo;
});

// node_modules/antlr4ts/atn/DecisionInfo.js
var require_DecisionInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DecisionInfo = void 0;
  var Decorators_1 = require_Decorators();
  var DecisionInfo = class {
    constructor(decision) {
      this.invocations = 0;
      this.timeInPrediction = 0;
      this.SLL_TotalLook = 0;
      this.SLL_MinLook = 0;
      this.SLL_MaxLook = 0;
      this.LL_TotalLook = 0;
      this.LL_MinLook = 0;
      this.LL_MaxLook = 0;
      this.contextSensitivities = [];
      this.errors = [];
      this.ambiguities = [];
      this.predicateEvals = [];
      this.SLL_ATNTransitions = 0;
      this.SLL_DFATransitions = 0;
      this.LL_Fallback = 0;
      this.LL_ATNTransitions = 0;
      this.LL_DFATransitions = 0;
      this.decision = decision;
    }
    toString() {
      return "{decision=" + this.decision + ", contextSensitivities=" + this.contextSensitivities.length + ", errors=" + this.errors.length + ", ambiguities=" + this.ambiguities.length + ", SLL_lookahead=" + this.SLL_TotalLook + ", SLL_ATNTransitions=" + this.SLL_ATNTransitions + ", SLL_DFATransitions=" + this.SLL_DFATransitions + ", LL_Fallback=" + this.LL_Fallback + ", LL_lookahead=" + this.LL_TotalLook + ", LL_ATNTransitions=" + this.LL_ATNTransitions + "}";
    }
  };
  __decorate([
    Decorators_1.Override
  ], DecisionInfo.prototype, "toString", null);
  exports.DecisionInfo = DecisionInfo;
});

// node_modules/antlr4ts/atn/ErrorInfo.js
var require_ErrorInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ErrorInfo = void 0;
  var DecisionEventInfo_1 = require_DecisionEventInfo();
  var Decorators_1 = require_Decorators();
  var ErrorInfo = class ErrorInfo extends DecisionEventInfo_1.DecisionEventInfo {
    constructor(decision, state, input, startIndex, stopIndex) {
      super(decision, state, input, startIndex, stopIndex, state.useContext);
    }
  };
  ErrorInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
  ], ErrorInfo);
  exports.ErrorInfo = ErrorInfo;
});

// node_modules/antlr4ts/atn/LookaheadEventInfo.js
var require_LookaheadEventInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LookaheadEventInfo = void 0;
  var DecisionEventInfo_1 = require_DecisionEventInfo();
  var Decorators_1 = require_Decorators();
  var LookaheadEventInfo = class LookaheadEventInfo extends DecisionEventInfo_1.DecisionEventInfo {
    constructor(decision, state, predictedAlt, input, startIndex, stopIndex, fullCtx) {
      super(decision, state, input, startIndex, stopIndex, fullCtx);
      this.predictedAlt = predictedAlt;
    }
  };
  LookaheadEventInfo = __decorate([
    __param(3, Decorators_1.NotNull)
  ], LookaheadEventInfo);
  exports.LookaheadEventInfo = LookaheadEventInfo;
});

// node_modules/antlr4ts/atn/PredicateEvalInfo.js
var require_PredicateEvalInfo = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.PredicateEvalInfo = void 0;
  var DecisionEventInfo_1 = require_DecisionEventInfo();
  var Decorators_1 = require_Decorators();
  var PredicateEvalInfo = class PredicateEvalInfo extends DecisionEventInfo_1.DecisionEventInfo {
    constructor(state, decision, input, startIndex, stopIndex, semctx, evalResult, predictedAlt) {
      super(decision, state, input, startIndex, stopIndex, state.useContext);
      this.semctx = semctx;
      this.evalResult = evalResult;
      this.predictedAlt = predictedAlt;
    }
  };
  PredicateEvalInfo = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
  ], PredicateEvalInfo);
  exports.PredicateEvalInfo = PredicateEvalInfo;
});

// node_modules/antlr4ts/atn/ProfilingATNSimulator.js
var require_ProfilingATNSimulator = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ProfilingATNSimulator = void 0;
  var AmbiguityInfo_1 = require_AmbiguityInfo();
  var ATN_1 = require_ATN();
  var ATNSimulator_1 = require_ATNSimulator();
  var ContextSensitivityInfo_1 = require_ContextSensitivityInfo();
  var DecisionInfo_1 = require_DecisionInfo();
  var ErrorInfo_1 = require_ErrorInfo();
  var Decorators_1 = require_Decorators();
  var LookaheadEventInfo_1 = require_LookaheadEventInfo();
  var ParserATNSimulator_1 = require_ParserATNSimulator();
  var PredicateEvalInfo_1 = require_PredicateEvalInfo();
  var SemanticContext_1 = require_SemanticContext();
  var SimulatorState_1 = require_SimulatorState();
  var ProfilingATNSimulator = class extends ParserATNSimulator_1.ParserATNSimulator {
    constructor(parser) {
      super(parser.interpreter.atn, parser);
      this._startIndex = 0;
      this._sllStopIndex = 0;
      this._llStopIndex = 0;
      this.currentDecision = 0;
      this.conflictingAltResolvedBySLL = 0;
      this.optimize_ll1 = false;
      this.reportAmbiguities = true;
      this.numDecisions = this.atn.decisionToState.length;
      this.decisions = [];
      for (let i = 0; i < this.numDecisions; i++) {
        this.decisions.push(new DecisionInfo_1.DecisionInfo(i));
      }
    }
    adaptivePredict(input, decision, outerContext, useContext) {
      if (useContext !== void 0) {
        return super.adaptivePredict(input, decision, outerContext, useContext);
      }
      try {
        this._input = input;
        this._startIndex = input.index;
        this._sllStopIndex = this._startIndex - 1;
        this._llStopIndex = -1;
        this.currentDecision = decision;
        this.currentState = void 0;
        this.conflictingAltResolvedBySLL = ATN_1.ATN.INVALID_ALT_NUMBER;
        let start = process.hrtime();
        let alt = super.adaptivePredict(input, decision, outerContext);
        let stop = process.hrtime();
        let nanoseconds = (stop[0] - start[0]) * 1e9;
        if (nanoseconds === 0) {
          nanoseconds = stop[1] - start[1];
        } else {
          nanoseconds += 1e9 - start[1] + stop[1];
        }
        this.decisions[decision].timeInPrediction += nanoseconds;
        this.decisions[decision].invocations++;
        let SLL_k = this._sllStopIndex - this._startIndex + 1;
        this.decisions[decision].SLL_TotalLook += SLL_k;
        this.decisions[decision].SLL_MinLook = this.decisions[decision].SLL_MinLook === 0 ? SLL_k : Math.min(this.decisions[decision].SLL_MinLook, SLL_k);
        if (SLL_k > this.decisions[decision].SLL_MaxLook) {
          this.decisions[decision].SLL_MaxLook = SLL_k;
          this.decisions[decision].SLL_MaxLookEvent = new LookaheadEventInfo_1.LookaheadEventInfo(decision, void 0, alt, input, this._startIndex, this._sllStopIndex, false);
        }
        if (this._llStopIndex >= 0) {
          let LL_k = this._llStopIndex - this._startIndex + 1;
          this.decisions[decision].LL_TotalLook += LL_k;
          this.decisions[decision].LL_MinLook = this.decisions[decision].LL_MinLook === 0 ? LL_k : Math.min(this.decisions[decision].LL_MinLook, LL_k);
          if (LL_k > this.decisions[decision].LL_MaxLook) {
            this.decisions[decision].LL_MaxLook = LL_k;
            this.decisions[decision].LL_MaxLookEvent = new LookaheadEventInfo_1.LookaheadEventInfo(decision, void 0, alt, input, this._startIndex, this._llStopIndex, true);
          }
        }
        return alt;
      } finally {
        this._input = void 0;
        this.currentDecision = -1;
      }
    }
    getStartState(dfa, input, outerContext, useContext) {
      let state = super.getStartState(dfa, input, outerContext, useContext);
      this.currentState = state;
      return state;
    }
    computeStartState(dfa, globalContext, useContext) {
      let state = super.computeStartState(dfa, globalContext, useContext);
      this.currentState = state;
      return state;
    }
    computeReachSet(dfa, previous, t, contextCache) {
      if (this._input === void 0) {
        throw new Error("Invalid state");
      }
      let reachState = super.computeReachSet(dfa, previous, t, contextCache);
      if (reachState == null) {
        this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, previous, this._input, this._startIndex, this._input.index));
      }
      this.currentState = reachState;
      return reachState;
    }
    getExistingTargetState(previousD, t) {
      if (this.currentState === void 0 || this._input === void 0) {
        throw new Error("Invalid state");
      }
      if (this.currentState.useContext) {
        this._llStopIndex = this._input.index;
      } else {
        this._sllStopIndex = this._input.index;
      }
      let existingTargetState = super.getExistingTargetState(previousD, t);
      if (existingTargetState != null) {
        this.currentState = new SimulatorState_1.SimulatorState(this.currentState.outerContext, existingTargetState, this.currentState.useContext, this.currentState.remainingOuterContext);
        if (this.currentState.useContext) {
          this.decisions[this.currentDecision].LL_DFATransitions++;
        } else {
          this.decisions[this.currentDecision].SLL_DFATransitions++;
        }
        if (existingTargetState === ATNSimulator_1.ATNSimulator.ERROR) {
          let state = new SimulatorState_1.SimulatorState(this.currentState.outerContext, previousD, this.currentState.useContext, this.currentState.remainingOuterContext);
          this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, state, this._input, this._startIndex, this._input.index));
        }
      }
      return existingTargetState;
    }
    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {
      let targetState = super.computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache);
      if (useContext) {
        this.decisions[this.currentDecision].LL_ATNTransitions++;
      } else {
        this.decisions[this.currentDecision].SLL_ATNTransitions++;
      }
      return targetState;
    }
    evalSemanticContextImpl(pred, parserCallStack, alt) {
      if (this.currentState === void 0 || this._input === void 0) {
        throw new Error("Invalid state");
      }
      let result = super.evalSemanticContextImpl(pred, parserCallStack, alt);
      if (!(pred instanceof SemanticContext_1.SemanticContext.PrecedencePredicate)) {
        let fullContext = this._llStopIndex >= 0;
        let stopIndex = fullContext ? this._llStopIndex : this._sllStopIndex;
        this.decisions[this.currentDecision].predicateEvals.push(new PredicateEvalInfo_1.PredicateEvalInfo(this.currentState, this.currentDecision, this._input, this._startIndex, stopIndex, pred, result, alt));
      }
      return result;
    }
    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {
      if (this._input === void 0) {
        throw new Error("Invalid state");
      }
      if (prediction !== this.conflictingAltResolvedBySLL) {
        this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, acceptState, this._input, startIndex, stopIndex));
      }
      super.reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex);
    }
    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {
      if (conflictingAlts != null) {
        this.conflictingAltResolvedBySLL = conflictingAlts.nextSetBit(0);
      } else {
        this.conflictingAltResolvedBySLL = conflictState.s0.configs.getRepresentedAlternatives().nextSetBit(0);
      }
      this.decisions[this.currentDecision].LL_Fallback++;
      super.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex);
    }
    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
      if (this.currentState === void 0 || this._input === void 0) {
        throw new Error("Invalid state");
      }
      let prediction;
      if (ambigAlts != null) {
        prediction = ambigAlts.nextSetBit(0);
      } else {
        prediction = configs.getRepresentedAlternatives().nextSetBit(0);
      }
      if (this.conflictingAltResolvedBySLL !== ATN_1.ATN.INVALID_ALT_NUMBER && prediction !== this.conflictingAltResolvedBySLL) {
        this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, this.currentState, this._input, startIndex, stopIndex));
      }
      this.decisions[this.currentDecision].ambiguities.push(new AmbiguityInfo_1.AmbiguityInfo(this.currentDecision, this.currentState, ambigAlts, this._input, startIndex, stopIndex));
      super.reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs);
    }
    getDecisionInfo() {
      return this.decisions;
    }
    getCurrentState() {
      return this.currentState;
    }
  };
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], ProfilingATNSimulator.prototype, "adaptivePredict", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "getStartState", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "computeStartState", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "computeReachSet", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "getExistingTargetState", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "computeTargetState", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "evalSemanticContextImpl", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "reportContextSensitivity", null);
  __decorate([
    Decorators_1.Override
  ], ProfilingATNSimulator.prototype, "reportAttemptingFullContext", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
  ], ProfilingATNSimulator.prototype, "reportAmbiguity", null);
  exports.ProfilingATNSimulator = ProfilingATNSimulator;
});

// node_modules/antlr4ts/Parser.js
var require_Parser = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Parser = void 0;
  var Utils3 = require_Utils();
  var ATNDeserializationOptions_1 = require_ATNDeserializationOptions();
  var ATNDeserializer_1 = require_ATNDeserializer();
  var DefaultErrorStrategy_1 = require_DefaultErrorStrategy();
  var ErrorNode_1 = require_ErrorNode();
  var IntegerStack_1 = require_IntegerStack();
  var Lexer_1 = require_Lexer();
  var Decorators_1 = require_Decorators();
  var ParseInfo_1 = require_ParseInfo();
  var ParserATNSimulator_1 = require_ParserATNSimulator();
  var ProxyParserErrorListener_1 = require_ProxyParserErrorListener();
  var Recognizer_1 = require_Recognizer();
  var TerminalNode_1 = require_TerminalNode();
  var Token_1 = require_Token();
  var TraceListener = class {
    constructor(ruleNames, tokenStream) {
      this.ruleNames = ruleNames;
      this.tokenStream = tokenStream;
    }
    enterEveryRule(ctx) {
      console.log("enter   " + this.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.tokenStream.LT(1).text);
    }
    exitEveryRule(ctx) {
      console.log("exit    " + this.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.tokenStream.LT(1).text);
    }
    visitErrorNode(node) {
    }
    visitTerminal(node) {
      let parent = node.parent.ruleContext;
      let token = node.symbol;
      console.log("consume " + token + " rule " + this.ruleNames[parent.ruleIndex]);
    }
  };
  __decorate([
    Decorators_1.Override
  ], TraceListener.prototype, "enterEveryRule", null);
  __decorate([
    Decorators_1.Override
  ], TraceListener.prototype, "exitEveryRule", null);
  __decorate([
    Decorators_1.Override
  ], TraceListener.prototype, "visitErrorNode", null);
  __decorate([
    Decorators_1.Override
  ], TraceListener.prototype, "visitTerminal", null);
  var Parser2 = class extends Recognizer_1.Recognizer {
    constructor(input) {
      super();
      this._errHandler = new DefaultErrorStrategy_1.DefaultErrorStrategy();
      this._precedenceStack = new IntegerStack_1.IntegerStack();
      this._buildParseTrees = true;
      this._parseListeners = [];
      this._syntaxErrors = 0;
      this.matchedEOF = false;
      this._precedenceStack.push(0);
      this.inputStream = input;
    }
    reset(resetInput) {
      if (resetInput === void 0 || resetInput) {
        this.inputStream.seek(0);
      }
      this._errHandler.reset(this);
      this._ctx = void 0;
      this._syntaxErrors = 0;
      this.matchedEOF = false;
      this.isTrace = false;
      this._precedenceStack.clear();
      this._precedenceStack.push(0);
      let interpreter = this.interpreter;
      if (interpreter != null) {
        interpreter.reset();
      }
    }
    match(ttype) {
      let t = this.currentToken;
      if (t.type === ttype) {
        if (ttype === Token_1.Token.EOF) {
          this.matchedEOF = true;
        }
        this._errHandler.reportMatch(this);
        this.consume();
      } else {
        t = this._errHandler.recoverInline(this);
        if (this._buildParseTrees && t.tokenIndex === -1) {
          this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
        }
      }
      return t;
    }
    matchWildcard() {
      let t = this.currentToken;
      if (t.type > 0) {
        this._errHandler.reportMatch(this);
        this.consume();
      } else {
        t = this._errHandler.recoverInline(this);
        if (this._buildParseTrees && t.tokenIndex === -1) {
          this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
        }
      }
      return t;
    }
    set buildParseTree(buildParseTrees) {
      this._buildParseTrees = buildParseTrees;
    }
    get buildParseTree() {
      return this._buildParseTrees;
    }
    getParseListeners() {
      return this._parseListeners;
    }
    addParseListener(listener) {
      if (listener == null) {
        throw new TypeError("listener cannot be null");
      }
      this._parseListeners.push(listener);
    }
    removeParseListener(listener) {
      let index = this._parseListeners.findIndex((l) => l === listener);
      if (index !== -1) {
        this._parseListeners.splice(index, 1);
      }
    }
    removeParseListeners() {
      this._parseListeners.length = 0;
    }
    triggerEnterRuleEvent() {
      for (let listener of this._parseListeners) {
        if (listener.enterEveryRule) {
          listener.enterEveryRule(this._ctx);
        }
        this._ctx.enterRule(listener);
      }
    }
    triggerExitRuleEvent() {
      for (let i = this._parseListeners.length - 1; i >= 0; i--) {
        let listener = this._parseListeners[i];
        this._ctx.exitRule(listener);
        if (listener.exitEveryRule) {
          listener.exitEveryRule(this._ctx);
        }
      }
    }
    get numberOfSyntaxErrors() {
      return this._syntaxErrors;
    }
    get tokenFactory() {
      return this._input.tokenSource.tokenFactory;
    }
    getATNWithBypassAlts() {
      let serializedAtn = this.serializedATN;
      if (serializedAtn == null) {
        throw new Error("The current parser does not support an ATN with bypass alternatives.");
      }
      let result = Parser2.bypassAltsAtnCache.get(serializedAtn);
      if (result == null) {
        let deserializationOptions = new ATNDeserializationOptions_1.ATNDeserializationOptions();
        deserializationOptions.isGenerateRuleBypassTransitions = true;
        result = new ATNDeserializer_1.ATNDeserializer(deserializationOptions).deserialize(Utils3.toCharArray(serializedAtn));
        Parser2.bypassAltsAtnCache.set(serializedAtn, result);
      }
      return result;
    }
    compileParseTreePattern(pattern, patternRuleIndex, lexer) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!lexer) {
          if (this.inputStream) {
            let tokenSource = this.inputStream.tokenSource;
            if (tokenSource instanceof Lexer_1.Lexer) {
              lexer = tokenSource;
            }
          }
          if (!lexer) {
            throw new Error("Parser can't discover a lexer to use");
          }
        }
        let currentLexer = lexer;
        let m = yield Promise.resolve().then(() => require_ParseTreePatternMatcher());
        let matcher = new m.ParseTreePatternMatcher(currentLexer, this);
        return matcher.compile(pattern, patternRuleIndex);
      });
    }
    get errorHandler() {
      return this._errHandler;
    }
    set errorHandler(handler) {
      this._errHandler = handler;
    }
    get inputStream() {
      return this._input;
    }
    set inputStream(input) {
      this.reset(false);
      this._input = input;
    }
    get currentToken() {
      return this._input.LT(1);
    }
    notifyErrorListeners(msg, offendingToken, e) {
      if (offendingToken === void 0) {
        offendingToken = this.currentToken;
      } else if (offendingToken === null) {
        offendingToken = void 0;
      }
      this._syntaxErrors++;
      let line = -1;
      let charPositionInLine = -1;
      if (offendingToken != null) {
        line = offendingToken.line;
        charPositionInLine = offendingToken.charPositionInLine;
      }
      let listener = this.getErrorListenerDispatch();
      if (listener.syntaxError) {
        listener.syntaxError(this, offendingToken, line, charPositionInLine, msg, e);
      }
    }
    consume() {
      let o = this.currentToken;
      if (o.type !== Parser2.EOF) {
        this.inputStream.consume();
      }
      let hasListener = this._parseListeners.length !== 0;
      if (this._buildParseTrees || hasListener) {
        if (this._errHandler.inErrorRecoveryMode(this)) {
          let node = this._ctx.addErrorNode(this.createErrorNode(this._ctx, o));
          if (hasListener) {
            for (let listener of this._parseListeners) {
              if (listener.visitErrorNode) {
                listener.visitErrorNode(node);
              }
            }
          }
        } else {
          let node = this.createTerminalNode(this._ctx, o);
          this._ctx.addChild(node);
          if (hasListener) {
            for (let listener of this._parseListeners) {
              if (listener.visitTerminal) {
                listener.visitTerminal(node);
              }
            }
          }
        }
      }
      return o;
    }
    createTerminalNode(parent, t) {
      return new TerminalNode_1.TerminalNode(t);
    }
    createErrorNode(parent, t) {
      return new ErrorNode_1.ErrorNode(t);
    }
    addContextToParseTree() {
      let parent = this._ctx._parent;
      if (parent != null) {
        parent.addChild(this._ctx);
      }
    }
    enterRule(localctx, state, ruleIndex) {
      this.state = state;
      this._ctx = localctx;
      this._ctx._start = this._input.LT(1);
      if (this._buildParseTrees) {
        this.addContextToParseTree();
      }
      this.triggerEnterRuleEvent();
    }
    enterLeftFactoredRule(localctx, state, ruleIndex) {
      this.state = state;
      if (this._buildParseTrees) {
        let factoredContext = this._ctx.getChild(this._ctx.childCount - 1);
        this._ctx.removeLastChild();
        factoredContext._parent = localctx;
        localctx.addChild(factoredContext);
      }
      this._ctx = localctx;
      this._ctx._start = this._input.LT(1);
      if (this._buildParseTrees) {
        this.addContextToParseTree();
      }
      this.triggerEnterRuleEvent();
    }
    exitRule() {
      if (this.matchedEOF) {
        this._ctx._stop = this._input.LT(1);
      } else {
        this._ctx._stop = this._input.tryLT(-1);
      }
      this.triggerExitRuleEvent();
      this.state = this._ctx.invokingState;
      this._ctx = this._ctx._parent;
    }
    enterOuterAlt(localctx, altNum) {
      localctx.altNumber = altNum;
      if (this._buildParseTrees && this._ctx !== localctx) {
        let parent = this._ctx._parent;
        if (parent != null) {
          parent.removeLastChild();
          parent.addChild(localctx);
        }
      }
      this._ctx = localctx;
    }
    get precedence() {
      if (this._precedenceStack.isEmpty) {
        return -1;
      }
      return this._precedenceStack.peek();
    }
    enterRecursionRule(localctx, state, ruleIndex, precedence) {
      this.state = state;
      this._precedenceStack.push(precedence);
      this._ctx = localctx;
      this._ctx._start = this._input.LT(1);
      this.triggerEnterRuleEvent();
    }
    pushNewRecursionContext(localctx, state, ruleIndex) {
      let previous = this._ctx;
      previous._parent = localctx;
      previous.invokingState = state;
      previous._stop = this._input.tryLT(-1);
      this._ctx = localctx;
      this._ctx._start = previous._start;
      if (this._buildParseTrees) {
        this._ctx.addChild(previous);
      }
      this.triggerEnterRuleEvent();
    }
    unrollRecursionContexts(_parentctx) {
      this._precedenceStack.pop();
      this._ctx._stop = this._input.tryLT(-1);
      let retctx = this._ctx;
      if (this._parseListeners.length > 0) {
        while (this._ctx !== _parentctx) {
          this.triggerExitRuleEvent();
          this._ctx = this._ctx._parent;
        }
      } else {
        this._ctx = _parentctx;
      }
      retctx._parent = _parentctx;
      if (this._buildParseTrees && _parentctx != null) {
        _parentctx.addChild(retctx);
      }
    }
    getInvokingContext(ruleIndex) {
      let p = this._ctx;
      while (p && p.ruleIndex !== ruleIndex) {
        p = p._parent;
      }
      return p;
    }
    get context() {
      return this._ctx;
    }
    set context(ctx) {
      this._ctx = ctx;
    }
    precpred(localctx, precedence) {
      return precedence >= this._precedenceStack.peek();
    }
    getErrorListenerDispatch() {
      return new ProxyParserErrorListener_1.ProxyParserErrorListener(this.getErrorListeners());
    }
    inContext(context) {
      return false;
    }
    isExpectedToken(symbol) {
      let atn = this.interpreter.atn;
      let ctx = this._ctx;
      let s = atn.states[this.state];
      let following = atn.nextTokens(s);
      if (following.contains(symbol)) {
        return true;
      }
      if (!following.contains(Token_1.Token.EPSILON)) {
        return false;
      }
      while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
        let invokingState = atn.states[ctx.invokingState];
        let rt = invokingState.transition(0);
        following = atn.nextTokens(rt.followState);
        if (following.contains(symbol)) {
          return true;
        }
        ctx = ctx._parent;
      }
      if (following.contains(Token_1.Token.EPSILON) && symbol === Token_1.Token.EOF) {
        return true;
      }
      return false;
    }
    get isMatchedEOF() {
      return this.matchedEOF;
    }
    getExpectedTokens() {
      return this.atn.getExpectedTokens(this.state, this.context);
    }
    getExpectedTokensWithinCurrentRule() {
      let atn = this.interpreter.atn;
      let s = atn.states[this.state];
      return atn.nextTokens(s);
    }
    getRuleIndex(ruleName) {
      let ruleIndex = this.getRuleIndexMap().get(ruleName);
      if (ruleIndex != null) {
        return ruleIndex;
      }
      return -1;
    }
    get ruleContext() {
      return this._ctx;
    }
    getRuleInvocationStack(ctx = this._ctx) {
      let p = ctx;
      let ruleNames = this.ruleNames;
      let stack = [];
      while (p != null) {
        let ruleIndex = p.ruleIndex;
        if (ruleIndex < 0) {
          stack.push("n/a");
        } else {
          stack.push(ruleNames[ruleIndex]);
        }
        p = p._parent;
      }
      return stack;
    }
    getDFAStrings() {
      let s = [];
      for (let dfa of this._interp.atn.decisionToDFA) {
        s.push(dfa.toString(this.vocabulary, this.ruleNames));
      }
      return s;
    }
    dumpDFA() {
      let seenOne = false;
      for (let dfa of this._interp.atn.decisionToDFA) {
        if (!dfa.isEmpty) {
          if (seenOne) {
            console.log();
          }
          console.log("Decision " + dfa.decision + ":");
          process.stdout.write(dfa.toString(this.vocabulary, this.ruleNames));
          seenOne = true;
        }
      }
    }
    get sourceName() {
      return this._input.sourceName;
    }
    get parseInfo() {
      return Promise.resolve().then(() => require_ProfilingATNSimulator()).then((m) => {
        let interp = this.interpreter;
        if (interp instanceof m.ProfilingATNSimulator) {
          return new ParseInfo_1.ParseInfo(interp);
        }
        return void 0;
      });
    }
    setProfile(profile) {
      return __awaiter(this, void 0, void 0, function* () {
        let m = yield Promise.resolve().then(() => require_ProfilingATNSimulator());
        let interp = this.interpreter;
        if (profile) {
          if (!(interp instanceof m.ProfilingATNSimulator)) {
            this.interpreter = new m.ProfilingATNSimulator(this);
          }
        } else if (interp instanceof m.ProfilingATNSimulator) {
          this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this.atn, this);
        }
        this.interpreter.setPredictionMode(interp.getPredictionMode());
      });
    }
    set isTrace(trace) {
      if (!trace) {
        if (this._tracer) {
          this.removeParseListener(this._tracer);
          this._tracer = void 0;
        }
      } else {
        if (this._tracer) {
          this.removeParseListener(this._tracer);
        } else {
          this._tracer = new TraceListener(this.ruleNames, this._input);
        }
        this.addParseListener(this._tracer);
      }
    }
    get isTrace() {
      return this._tracer != null;
    }
  };
  Parser2.bypassAltsAtnCache = new Map();
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "_errHandler", void 0);
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "match", null);
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "matchWildcard", null);
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "getParseListeners", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], Parser2.prototype, "addParseListener", null);
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "getATNWithBypassAlts", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], Parser2.prototype, "errorHandler", null);
  __decorate([
    Decorators_1.Override
  ], Parser2.prototype, "inputStream", null);
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "currentToken", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], Parser2.prototype, "enterRule", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.Nullable)
  ], Parser2.prototype, "precpred", null);
  __decorate([
    Decorators_1.Override
  ], Parser2.prototype, "getErrorListenerDispatch", null);
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "getExpectedTokens", null);
  __decorate([
    Decorators_1.NotNull
  ], Parser2.prototype, "getExpectedTokensWithinCurrentRule", null);
  __decorate([
    Decorators_1.Override
  ], Parser2.prototype, "parseInfo", null);
  exports.Parser = Parser2;
});

// node_modules/antlr4ts/NoViableAltException.js
var require_NoViableAltException = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.NoViableAltException = void 0;
  var Parser_1 = require_Parser();
  var RecognitionException_1 = require_RecognitionException();
  var Decorators_1 = require_Decorators();
  var NoViableAltException2 = class extends RecognitionException_1.RecognitionException {
    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
      if (recognizer instanceof Parser_1.Parser) {
        if (input === void 0) {
          input = recognizer.inputStream;
        }
        if (startToken === void 0) {
          startToken = recognizer.currentToken;
        }
        if (offendingToken === void 0) {
          offendingToken = recognizer.currentToken;
        }
        if (ctx === void 0) {
          ctx = recognizer.context;
        }
      }
      super(recognizer, input, ctx);
      this._deadEndConfigs = deadEndConfigs;
      this._startToken = startToken;
      this.setOffendingToken(recognizer, offendingToken);
    }
    get startToken() {
      return this._startToken;
    }
    get deadEndConfigs() {
      return this._deadEndConfigs;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], NoViableAltException2.prototype, "_startToken", void 0);
  exports.NoViableAltException = NoViableAltException2;
});

// node_modules/antlr4ts/DefaultErrorStrategy.js
var require_DefaultErrorStrategy = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DefaultErrorStrategy = void 0;
  var ATNState_1 = require_ATNState();
  var ATNStateType_1 = require_ATNStateType();
  var FailedPredicateException_1 = require_FailedPredicateException();
  var InputMismatchException_1 = require_InputMismatchException();
  var IntervalSet_1 = require_IntervalSet();
  var NoViableAltException_1 = require_NoViableAltException();
  var PredictionContext_1 = require_PredictionContext();
  var Token_1 = require_Token();
  var Decorators_1 = require_Decorators();
  var DefaultErrorStrategy = class {
    constructor() {
      this.errorRecoveryMode = false;
      this.lastErrorIndex = -1;
      this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
    }
    reset(recognizer) {
      this.endErrorCondition(recognizer);
    }
    beginErrorCondition(recognizer) {
      this.errorRecoveryMode = true;
    }
    inErrorRecoveryMode(recognizer) {
      return this.errorRecoveryMode;
    }
    endErrorCondition(recognizer) {
      this.errorRecoveryMode = false;
      this.lastErrorStates = void 0;
      this.lastErrorIndex = -1;
    }
    reportMatch(recognizer) {
      this.endErrorCondition(recognizer);
    }
    reportError(recognizer, e) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      this.beginErrorCondition(recognizer);
      if (e instanceof NoViableAltException_1.NoViableAltException) {
        this.reportNoViableAlternative(recognizer, e);
      } else if (e instanceof InputMismatchException_1.InputMismatchException) {
        this.reportInputMismatch(recognizer, e);
      } else if (e instanceof FailedPredicateException_1.FailedPredicateException) {
        this.reportFailedPredicate(recognizer, e);
      } else {
        console.error(`unknown recognition error type: ${e}`);
        this.notifyErrorListeners(recognizer, e.toString(), e);
      }
    }
    notifyErrorListeners(recognizer, message, e) {
      let offendingToken = e.getOffendingToken(recognizer);
      if (offendingToken === void 0) {
        offendingToken = null;
      }
      recognizer.notifyErrorListeners(message, offendingToken, e);
    }
    recover(recognizer, e) {
      if (this.lastErrorIndex === recognizer.inputStream.index && this.lastErrorStates && this.lastErrorStates.contains(recognizer.state)) {
        recognizer.consume();
      }
      this.lastErrorIndex = recognizer.inputStream.index;
      if (!this.lastErrorStates) {
        this.lastErrorStates = new IntervalSet_1.IntervalSet();
      }
      this.lastErrorStates.add(recognizer.state);
      let followSet = this.getErrorRecoverySet(recognizer);
      this.consumeUntil(recognizer, followSet);
    }
    sync(recognizer) {
      let s = recognizer.interpreter.atn.states[recognizer.state];
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      let tokens2 = recognizer.inputStream;
      let la = tokens2.LA(1);
      let nextTokens = recognizer.atn.nextTokens(s);
      if (nextTokens.contains(la)) {
        this.nextTokensContext = void 0;
        this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
        return;
      }
      if (nextTokens.contains(Token_1.Token.EPSILON)) {
        if (this.nextTokensContext === void 0) {
          this.nextTokensContext = recognizer.context;
          this.nextTokensState = recognizer.state;
        }
        return;
      }
      switch (s.stateType) {
        case ATNStateType_1.ATNStateType.BLOCK_START:
        case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
        case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
        case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
          if (this.singleTokenDeletion(recognizer)) {
            return;
          }
          throw new InputMismatchException_1.InputMismatchException(recognizer);
        case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
        case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
          this.reportUnwantedToken(recognizer);
          let expecting = recognizer.getExpectedTokens();
          let whatFollowsLoopIterationOrRule = expecting.or(this.getErrorRecoverySet(recognizer));
          this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
          break;
        default:
          break;
      }
    }
    reportNoViableAlternative(recognizer, e) {
      let tokens2 = recognizer.inputStream;
      let input;
      if (tokens2) {
        if (e.startToken.type === Token_1.Token.EOF) {
          input = "<EOF>";
        } else {
          input = tokens2.getTextFromRange(e.startToken, e.getOffendingToken());
        }
      } else {
        input = "<unknown input>";
      }
      let msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
      this.notifyErrorListeners(recognizer, msg, e);
    }
    reportInputMismatch(recognizer, e) {
      let expected = e.expectedTokens;
      let expectedString = expected ? expected.toStringVocabulary(recognizer.vocabulary) : "";
      let msg = "mismatched input " + this.getTokenErrorDisplay(e.getOffendingToken(recognizer)) + " expecting " + expectedString;
      this.notifyErrorListeners(recognizer, msg, e);
    }
    reportFailedPredicate(recognizer, e) {
      let ruleName = recognizer.ruleNames[recognizer.context.ruleIndex];
      let msg = "rule " + ruleName + " " + e.message;
      this.notifyErrorListeners(recognizer, msg, e);
    }
    reportUnwantedToken(recognizer) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      this.beginErrorCondition(recognizer);
      let t = recognizer.currentToken;
      let tokenName = this.getTokenErrorDisplay(t);
      let expecting = this.getExpectedTokens(recognizer);
      let msg = "extraneous input " + tokenName + " expecting " + expecting.toStringVocabulary(recognizer.vocabulary);
      recognizer.notifyErrorListeners(msg, t, void 0);
    }
    reportMissingToken(recognizer) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      this.beginErrorCondition(recognizer);
      let t = recognizer.currentToken;
      let expecting = this.getExpectedTokens(recognizer);
      let msg = "missing " + expecting.toStringVocabulary(recognizer.vocabulary) + " at " + this.getTokenErrorDisplay(t);
      recognizer.notifyErrorListeners(msg, t, void 0);
    }
    recoverInline(recognizer) {
      let matchedSymbol = this.singleTokenDeletion(recognizer);
      if (matchedSymbol) {
        recognizer.consume();
        return matchedSymbol;
      }
      if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
      }
      if (this.nextTokensContext === void 0) {
        throw new InputMismatchException_1.InputMismatchException(recognizer);
      } else {
        throw new InputMismatchException_1.InputMismatchException(recognizer, this.nextTokensState, this.nextTokensContext);
      }
    }
    singleTokenInsertion(recognizer) {
      let currentSymbolType = recognizer.inputStream.LA(1);
      let currentState = recognizer.interpreter.atn.states[recognizer.state];
      let next = currentState.transition(0).target;
      let atn = recognizer.interpreter.atn;
      let expectingAtLL2 = atn.nextTokens(next, PredictionContext_1.PredictionContext.fromRuleContext(atn, recognizer.context));
      if (expectingAtLL2.contains(currentSymbolType)) {
        this.reportMissingToken(recognizer);
        return true;
      }
      return false;
    }
    singleTokenDeletion(recognizer) {
      let nextTokenType = recognizer.inputStream.LA(2);
      let expecting = this.getExpectedTokens(recognizer);
      if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        recognizer.consume();
        let matchedSymbol = recognizer.currentToken;
        this.reportMatch(recognizer);
        return matchedSymbol;
      }
      return void 0;
    }
    getMissingSymbol(recognizer) {
      let currentSymbol = recognizer.currentToken;
      let expecting = this.getExpectedTokens(recognizer);
      let expectedTokenType = Token_1.Token.INVALID_TYPE;
      if (!expecting.isNil) {
        expectedTokenType = expecting.minElement;
      }
      let tokenText;
      if (expectedTokenType === Token_1.Token.EOF) {
        tokenText = "<missing EOF>";
      } else {
        tokenText = "<missing " + recognizer.vocabulary.getDisplayName(expectedTokenType) + ">";
      }
      let current = currentSymbol;
      let lookback = recognizer.inputStream.tryLT(-1);
      if (current.type === Token_1.Token.EOF && lookback != null) {
        current = lookback;
      }
      return this.constructToken(recognizer.inputStream.tokenSource, expectedTokenType, tokenText, current);
    }
    constructToken(tokenSource, expectedTokenType, tokenText, current) {
      let factory = tokenSource.tokenFactory;
      let x = current.tokenSource;
      let stream = x ? x.inputStream : void 0;
      return factory.create({source: tokenSource, stream}, expectedTokenType, tokenText, Token_1.Token.DEFAULT_CHANNEL, -1, -1, current.line, current.charPositionInLine);
    }
    getExpectedTokens(recognizer) {
      return recognizer.getExpectedTokens();
    }
    getTokenErrorDisplay(t) {
      if (!t) {
        return "<no token>";
      }
      let s = this.getSymbolText(t);
      if (!s) {
        if (this.getSymbolType(t) === Token_1.Token.EOF) {
          s = "<EOF>";
        } else {
          s = `<${this.getSymbolType(t)}>`;
        }
      }
      return this.escapeWSAndQuote(s);
    }
    getSymbolText(symbol) {
      return symbol.text;
    }
    getSymbolType(symbol) {
      return symbol.type;
    }
    escapeWSAndQuote(s) {
      s = s.replace("\n", "\\n");
      s = s.replace("\r", "\\r");
      s = s.replace("	", "\\t");
      return "'" + s + "'";
    }
    getErrorRecoverySet(recognizer) {
      let atn = recognizer.interpreter.atn;
      let ctx = recognizer.context;
      let recoverSet = new IntervalSet_1.IntervalSet();
      while (ctx && ctx.invokingState >= 0) {
        let invokingState = atn.states[ctx.invokingState];
        let rt = invokingState.transition(0);
        let follow = atn.nextTokens(rt.followState);
        recoverSet.addAll(follow);
        ctx = ctx._parent;
      }
      recoverSet.remove(Token_1.Token.EPSILON);
      return recoverSet;
    }
    consumeUntil(recognizer, set) {
      let ttype = recognizer.inputStream.LA(1);
      while (ttype !== Token_1.Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.inputStream.LA(1);
      }
    }
  };
  __decorate([
    Decorators_1.Override
  ], DefaultErrorStrategy.prototype, "reset", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "beginErrorCondition", null);
  __decorate([
    Decorators_1.Override
  ], DefaultErrorStrategy.prototype, "inErrorRecoveryMode", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "endErrorCondition", null);
  __decorate([
    Decorators_1.Override
  ], DefaultErrorStrategy.prototype, "reportMatch", null);
  __decorate([
    Decorators_1.Override
  ], DefaultErrorStrategy.prototype, "reportError", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "notifyErrorListeners", null);
  __decorate([
    Decorators_1.Override
  ], DefaultErrorStrategy.prototype, "recover", null);
  __decorate([
    Decorators_1.Override
  ], DefaultErrorStrategy.prototype, "sync", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "reportNoViableAlternative", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "reportInputMismatch", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "reportFailedPredicate", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "reportUnwantedToken", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "reportMissingToken", null);
  __decorate([
    Decorators_1.Override
  ], DefaultErrorStrategy.prototype, "recoverInline", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "singleTokenInsertion", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "singleTokenDeletion", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "getMissingSymbol", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "getExpectedTokens", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "getSymbolText", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "getSymbolType", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "escapeWSAndQuote", null);
  __decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "getErrorRecoverySet", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], DefaultErrorStrategy.prototype, "consumeUntil", null);
  exports.DefaultErrorStrategy = DefaultErrorStrategy;
});

// node_modules/antlr4ts/BailErrorStrategy.js
var require_BailErrorStrategy = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BailErrorStrategy = void 0;
  var DefaultErrorStrategy_1 = require_DefaultErrorStrategy();
  var InputMismatchException_1 = require_InputMismatchException();
  var Decorators_1 = require_Decorators();
  var ParseCancellationException_1 = require_ParseCancellationException();
  var BailErrorStrategy = class extends DefaultErrorStrategy_1.DefaultErrorStrategy {
    recover(recognizer, e) {
      for (let context = recognizer.context; context; context = context.parent) {
        context.exception = e;
      }
      throw new ParseCancellationException_1.ParseCancellationException(e);
    }
    recoverInline(recognizer) {
      let e = new InputMismatchException_1.InputMismatchException(recognizer);
      for (let context = recognizer.context; context; context = context.parent) {
        context.exception = e;
      }
      throw new ParseCancellationException_1.ParseCancellationException(e);
    }
    sync(recognizer) {
    }
  };
  __decorate([
    Decorators_1.Override
  ], BailErrorStrategy.prototype, "recover", null);
  __decorate([
    Decorators_1.Override
  ], BailErrorStrategy.prototype, "recoverInline", null);
  __decorate([
    Decorators_1.Override
  ], BailErrorStrategy.prototype, "sync", null);
  exports.BailErrorStrategy = BailErrorStrategy;
});

// node_modules/antlr4ts/CharStream.js
var require_CharStream = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/Dependents.js
var require_Dependents = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Dependents = void 0;
  var Dependents;
  (function(Dependents2) {
    Dependents2[Dependents2["SELF"] = 0] = "SELF";
    Dependents2[Dependents2["PARENTS"] = 1] = "PARENTS";
    Dependents2[Dependents2["CHILDREN"] = 2] = "CHILDREN";
    Dependents2[Dependents2["ANCESTORS"] = 3] = "ANCESTORS";
    Dependents2[Dependents2["DESCENDANTS"] = 4] = "DESCENDANTS";
    Dependents2[Dependents2["SIBLINGS"] = 5] = "SIBLINGS";
    Dependents2[Dependents2["PRECEEDING_SIBLINGS"] = 6] = "PRECEEDING_SIBLINGS";
    Dependents2[Dependents2["FOLLOWING_SIBLINGS"] = 7] = "FOLLOWING_SIBLINGS";
    Dependents2[Dependents2["PRECEEDING"] = 8] = "PRECEEDING";
    Dependents2[Dependents2["FOLLOWING"] = 9] = "FOLLOWING";
  })(Dependents = exports.Dependents || (exports.Dependents = {}));
});

// node_modules/antlr4ts/DiagnosticErrorListener.js
var require_DiagnosticErrorListener = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DiagnosticErrorListener = void 0;
  var BitSet_1 = require_BitSet();
  var Decorators_1 = require_Decorators();
  var Interval_1 = require_Interval();
  var DiagnosticErrorListener = class {
    constructor(exactOnly = true) {
      this.exactOnly = exactOnly;
      this.exactOnly = exactOnly;
    }
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
      if (this.exactOnly && !exact) {
        return;
      }
      let decision = this.getDecisionDescription(recognizer, dfa);
      let conflictingAlts = this.getConflictingAlts(ambigAlts, configs);
      let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
      let message = `reportAmbiguity d=${decision}: ambigAlts=${conflictingAlts}, input='${text}'`;
      recognizer.notifyErrorListeners(message);
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {
      let format = "reportAttemptingFullContext d=%s, input='%s'";
      let decision = this.getDecisionDescription(recognizer, dfa);
      let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
      let message = `reportAttemptingFullContext d=${decision}, input='${text}'`;
      recognizer.notifyErrorListeners(message);
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {
      let format = "reportContextSensitivity d=%s, input='%s'";
      let decision = this.getDecisionDescription(recognizer, dfa);
      let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
      let message = `reportContextSensitivity d=${decision}, input='${text}'`;
      recognizer.notifyErrorListeners(message);
    }
    getDecisionDescription(recognizer, dfa) {
      let decision = dfa.decision;
      let ruleIndex = dfa.atnStartState.ruleIndex;
      let ruleNames = recognizer.ruleNames;
      if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
        return decision.toString();
      }
      let ruleName = ruleNames[ruleIndex];
      if (!ruleName) {
        return decision.toString();
      }
      return `${decision} (${ruleName})`;
    }
    getConflictingAlts(reportedAlts, configs) {
      if (reportedAlts != null) {
        return reportedAlts;
      }
      let result = new BitSet_1.BitSet();
      for (let config of configs) {
        result.set(config.alt);
      }
      return result;
    }
  };
  __decorate([
    Decorators_1.Override
  ], DiagnosticErrorListener.prototype, "syntaxError", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
  ], DiagnosticErrorListener.prototype, "reportAmbiguity", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
  ], DiagnosticErrorListener.prototype, "reportAttemptingFullContext", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
  ], DiagnosticErrorListener.prototype, "reportContextSensitivity", null);
  __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
  ], DiagnosticErrorListener.prototype, "getDecisionDescription", null);
  __decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
  ], DiagnosticErrorListener.prototype, "getConflictingAlts", null);
  exports.DiagnosticErrorListener = DiagnosticErrorListener;
});

// node_modules/antlr4ts/LexerInterpreter.js
var require_LexerInterpreter = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LexerInterpreter = void 0;
  var Lexer_1 = require_Lexer();
  var LexerATNSimulator_1 = require_LexerATNSimulator();
  var Decorators_1 = require_Decorators();
  var Decorators_2 = require_Decorators();
  var LexerInterpreter = class LexerInterpreter extends Lexer_1.Lexer {
    constructor(grammarFileName, vocabulary, ruleNames, channelNames, modeNames, atn, input) {
      super(input);
      if (atn.grammarType !== 0) {
        throw new Error("IllegalArgumentException: The ATN must be a lexer ATN.");
      }
      this._grammarFileName = grammarFileName;
      this._atn = atn;
      this._ruleNames = ruleNames.slice(0);
      this._channelNames = channelNames.slice(0);
      this._modeNames = modeNames.slice(0);
      this._vocabulary = vocabulary;
      this._interp = new LexerATNSimulator_1.LexerATNSimulator(atn, this);
    }
    get atn() {
      return this._atn;
    }
    get grammarFileName() {
      return this._grammarFileName;
    }
    get ruleNames() {
      return this._ruleNames;
    }
    get channelNames() {
      return this._channelNames;
    }
    get modeNames() {
      return this._modeNames;
    }
    get vocabulary() {
      return this._vocabulary;
    }
  };
  __decorate([
    Decorators_1.NotNull
  ], LexerInterpreter.prototype, "_vocabulary", void 0);
  __decorate([
    Decorators_2.Override
  ], LexerInterpreter.prototype, "atn", null);
  __decorate([
    Decorators_2.Override
  ], LexerInterpreter.prototype, "grammarFileName", null);
  __decorate([
    Decorators_2.Override
  ], LexerInterpreter.prototype, "ruleNames", null);
  __decorate([
    Decorators_2.Override
  ], LexerInterpreter.prototype, "channelNames", null);
  __decorate([
    Decorators_2.Override
  ], LexerInterpreter.prototype, "modeNames", null);
  __decorate([
    Decorators_2.Override
  ], LexerInterpreter.prototype, "vocabulary", null);
  LexerInterpreter = __decorate([
    __param(1, Decorators_1.NotNull)
  ], LexerInterpreter);
  exports.LexerInterpreter = LexerInterpreter;
});

// node_modules/antlr4ts/ParserErrorListener.js
var require_ParserErrorListener = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/RuleContextWithAltNum.js
var require_RuleContextWithAltNum = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleContextWithAltNum = void 0;
  var ATN_1 = require_ATN();
  var Decorators_1 = require_Decorators();
  var ParserRuleContext_1 = require_ParserRuleContext();
  var RuleContextWithAltNum = class extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingStateNumber) {
      if (invokingStateNumber !== void 0) {
        super(parent, invokingStateNumber);
      } else {
        super();
      }
      this._altNumber = ATN_1.ATN.INVALID_ALT_NUMBER;
    }
    get altNumber() {
      return this._altNumber;
    }
    set altNumber(altNum) {
      this._altNumber = altNum;
    }
  };
  __decorate([
    Decorators_1.Override
  ], RuleContextWithAltNum.prototype, "altNumber", null);
  exports.RuleContextWithAltNum = RuleContextWithAltNum;
});

// node_modules/antlr4ts/RuleDependency.js
var require_RuleDependency = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleDependency = void 0;
  function RuleDependency(dependency) {
    return (target, propertyKey, propertyDescriptor) => {
    };
  }
  exports.RuleDependency = RuleDependency;
});

// node_modules/antlr4ts/RuleVersion.js
var require_RuleVersion = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RuleVersion = void 0;
  function RuleVersion(version) {
    return (target, propertyKey, propertyDescriptor) => {
    };
  }
  exports.RuleVersion = RuleVersion;
});

// node_modules/antlr4ts/TokenFactory.js
var require_TokenFactory = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/TokenSource.js
var require_TokenSource = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/TokenStream.js
var require_TokenStream = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/TokenStreamRewriter.js
var require_TokenStreamRewriter = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RewriteOperation = exports.TokenStreamRewriter = void 0;
  var Interval_1 = require_Interval();
  var Decorators_1 = require_Decorators();
  var Token_1 = require_Token();
  var TokenStreamRewriter = class {
    constructor(tokens2) {
      this.tokens = tokens2;
      this.programs = new Map();
      this.programs.set(TokenStreamRewriter.DEFAULT_PROGRAM_NAME, []);
      this.lastRewriteTokenIndexes = new Map();
    }
    getTokenStream() {
      return this.tokens;
    }
    rollback(instructionIndex, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      let is = this.programs.get(programName);
      if (is != null) {
        this.programs.set(programName, is.slice(TokenStreamRewriter.MIN_TOKEN_INDEX, instructionIndex));
      }
    }
    deleteProgram(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      this.rollback(TokenStreamRewriter.MIN_TOKEN_INDEX, programName);
    }
    insertAfter(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      let index;
      if (typeof tokenOrIndex === "number") {
        index = tokenOrIndex;
      } else {
        index = tokenOrIndex.tokenIndex;
      }
      let rewrites = this.getProgram(programName);
      let op = new InsertAfterOp(this.tokens, index, rewrites.length, text);
      rewrites.push(op);
    }
    insertBefore(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      let index;
      if (typeof tokenOrIndex === "number") {
        index = tokenOrIndex;
      } else {
        index = tokenOrIndex.tokenIndex;
      }
      let rewrites = this.getProgram(programName);
      let op = new InsertBeforeOp(this.tokens, index, rewrites.length, text);
      rewrites.push(op);
    }
    replaceSingle(index, text) {
      if (typeof index === "number") {
        this.replace(index, index, text);
      } else {
        this.replace(index, index, text);
      }
    }
    replace(from, to, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      if (typeof from !== "number") {
        from = from.tokenIndex;
      }
      if (typeof to !== "number") {
        to = to.tokenIndex;
      }
      if (from > to || from < 0 || to < 0 || to >= this.tokens.size) {
        throw new RangeError(`replace: range invalid: ${from}..${to}(size=${this.tokens.size})`);
      }
      let rewrites = this.getProgram(programName);
      let op = new ReplaceOp(this.tokens, from, to, rewrites.length, text);
      rewrites.push(op);
    }
    delete(from, to, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      if (to === void 0) {
        to = from;
      }
      if (typeof from === "number") {
        this.replace(from, to, "", programName);
      } else {
        this.replace(from, to, "", programName);
      }
    }
    getLastRewriteTokenIndex(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      let I = this.lastRewriteTokenIndexes.get(programName);
      if (I == null) {
        return -1;
      }
      return I;
    }
    setLastRewriteTokenIndex(programName, i) {
      this.lastRewriteTokenIndexes.set(programName, i);
    }
    getProgram(name) {
      let is = this.programs.get(name);
      if (is == null) {
        is = this.initializeProgram(name);
      }
      return is;
    }
    initializeProgram(name) {
      let is = [];
      this.programs.set(name, is);
      return is;
    }
    getText(intervalOrProgram, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
      let interval;
      if (intervalOrProgram instanceof Interval_1.Interval) {
        interval = intervalOrProgram;
      } else {
        interval = Interval_1.Interval.of(0, this.tokens.size - 1);
      }
      if (typeof intervalOrProgram === "string") {
        programName = intervalOrProgram;
      }
      let rewrites = this.programs.get(programName);
      let start = interval.a;
      let stop = interval.b;
      if (stop > this.tokens.size - 1) {
        stop = this.tokens.size - 1;
      }
      if (start < 0) {
        start = 0;
      }
      if (rewrites == null || rewrites.length === 0) {
        return this.tokens.getText(interval);
      }
      let buf = [];
      let indexToOp = this.reduceToSingleOperationPerIndex(rewrites);
      let i = start;
      while (i <= stop && i < this.tokens.size) {
        let op = indexToOp.get(i);
        indexToOp.delete(i);
        let t = this.tokens.get(i);
        if (op == null) {
          if (t.type !== Token_1.Token.EOF) {
            buf.push(String(t.text));
          }
          i++;
        } else {
          i = op.execute(buf);
        }
      }
      if (stop === this.tokens.size - 1) {
        for (let op of indexToOp.values()) {
          if (op.index >= this.tokens.size - 1) {
            buf.push(op.text.toString());
          }
        }
      }
      return buf.join("");
    }
    reduceToSingleOperationPerIndex(rewrites) {
      for (let i = 0; i < rewrites.length; i++) {
        let op = rewrites[i];
        if (op == null) {
          continue;
        }
        if (!(op instanceof ReplaceOp)) {
          continue;
        }
        let rop = op;
        let inserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
        for (let iop of inserts) {
          if (iop.index === rop.index) {
            rewrites[iop.instructionIndex] = void 0;
            rop.text = iop.text.toString() + (rop.text != null ? rop.text.toString() : "");
          } else if (iop.index > rop.index && iop.index <= rop.lastIndex) {
            rewrites[iop.instructionIndex] = void 0;
          }
        }
        let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
        for (let prevRop of prevReplaces) {
          if (prevRop.index >= rop.index && prevRop.lastIndex <= rop.lastIndex) {
            rewrites[prevRop.instructionIndex] = void 0;
            continue;
          }
          let disjoint = prevRop.lastIndex < rop.index || prevRop.index > rop.lastIndex;
          if (prevRop.text == null && rop.text == null && !disjoint) {
            rewrites[prevRop.instructionIndex] = void 0;
            rop.index = Math.min(prevRop.index, rop.index);
            rop.lastIndex = Math.max(prevRop.lastIndex, rop.lastIndex);
          } else if (!disjoint) {
            throw new Error(`replace op boundaries of ${rop} overlap with previous ${prevRop}`);
          }
        }
      }
      for (let i = 0; i < rewrites.length; i++) {
        let op = rewrites[i];
        if (op == null) {
          continue;
        }
        if (!(op instanceof InsertBeforeOp)) {
          continue;
        }
        let iop = op;
        let prevInserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
        for (let prevIop of prevInserts) {
          if (prevIop.index === iop.index) {
            if (prevIop instanceof InsertAfterOp) {
              iop.text = this.catOpText(prevIop.text, iop.text);
              rewrites[prevIop.instructionIndex] = void 0;
            } else if (prevIop instanceof InsertBeforeOp) {
              iop.text = this.catOpText(iop.text, prevIop.text);
              rewrites[prevIop.instructionIndex] = void 0;
            }
          }
        }
        let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
        for (let rop of prevReplaces) {
          if (iop.index === rop.index) {
            rop.text = this.catOpText(iop.text, rop.text);
            rewrites[i] = void 0;
            continue;
          }
          if (iop.index >= rop.index && iop.index <= rop.lastIndex) {
            throw new Error(`insert op ${iop} within boundaries of previous ${rop}`);
          }
        }
      }
      let m = new Map();
      for (let op of rewrites) {
        if (op == null) {
          continue;
        }
        if (m.get(op.index) != null) {
          throw new Error("should only be one op per index");
        }
        m.set(op.index, op);
      }
      return m;
    }
    catOpText(a, b) {
      let x = "";
      let y = "";
      if (a != null) {
        x = a.toString();
      }
      if (b != null) {
        y = b.toString();
      }
      return x + y;
    }
    getKindOfOps(rewrites, kind, before) {
      let ops = [];
      for (let i = 0; i < before && i < rewrites.length; i++) {
        let op = rewrites[i];
        if (op == null) {
          continue;
        }
        if (op instanceof kind) {
          ops.push(op);
        }
      }
      return ops;
    }
  };
  exports.TokenStreamRewriter = TokenStreamRewriter;
  TokenStreamRewriter.DEFAULT_PROGRAM_NAME = "default";
  TokenStreamRewriter.PROGRAM_INIT_SIZE = 100;
  TokenStreamRewriter.MIN_TOKEN_INDEX = 0;
  var RewriteOperation = class {
    constructor(tokens2, index, instructionIndex, text) {
      this.tokens = tokens2;
      this.instructionIndex = instructionIndex;
      this.index = index;
      this.text = text === void 0 ? "" : text;
    }
    execute(buf) {
      return this.index;
    }
    toString() {
      let opName = this.constructor.name;
      let $index = opName.indexOf("$");
      opName = opName.substring($index + 1, opName.length);
      return "<" + opName + "@" + this.tokens.get(this.index) + ':"' + this.text + '">';
    }
  };
  __decorate([
    Decorators_1.Override
  ], RewriteOperation.prototype, "toString", null);
  exports.RewriteOperation = RewriteOperation;
  var InsertBeforeOp = class extends RewriteOperation {
    constructor(tokens2, index, instructionIndex, text) {
      super(tokens2, index, instructionIndex, text);
    }
    execute(buf) {
      buf.push(this.text.toString());
      if (this.tokens.get(this.index).type !== Token_1.Token.EOF) {
        buf.push(String(this.tokens.get(this.index).text));
      }
      return this.index + 1;
    }
  };
  __decorate([
    Decorators_1.Override
  ], InsertBeforeOp.prototype, "execute", null);
  var InsertAfterOp = class extends InsertBeforeOp {
    constructor(tokens2, index, instructionIndex, text) {
      super(tokens2, index + 1, instructionIndex, text);
    }
  };
  var ReplaceOp = class extends RewriteOperation {
    constructor(tokens2, from, to, instructionIndex, text) {
      super(tokens2, from, instructionIndex, text);
      this.lastIndex = to;
    }
    execute(buf) {
      if (this.text != null) {
        buf.push(this.text.toString());
      }
      return this.lastIndex + 1;
    }
    toString() {
      if (this.text == null) {
        return "<DeleteOp@" + this.tokens.get(this.index) + ".." + this.tokens.get(this.lastIndex) + ">";
      }
      return "<ReplaceOp@" + this.tokens.get(this.index) + ".." + this.tokens.get(this.lastIndex) + ':"' + this.text + '">';
    }
  };
  __decorate([
    Decorators_1.Override
  ], ReplaceOp.prototype, "execute", null);
  __decorate([
    Decorators_1.Override
  ], ReplaceOp.prototype, "toString", null);
});

// node_modules/antlr4ts/Vocabulary.js
var require_Vocabulary = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/WritableToken.js
var require_WritableToken = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
});

// node_modules/antlr4ts/index.js
var require_antlr4ts = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  __exportStar(require_ANTLRErrorListener(), exports);
  __exportStar(require_ANTLRErrorStrategy(), exports);
  __exportStar(require_ANTLRInputStream(), exports);
  __exportStar(require_BailErrorStrategy(), exports);
  __exportStar(require_BufferedTokenStream(), exports);
  __exportStar(require_CharStream(), exports);
  __exportStar(require_CharStreams(), exports);
  __exportStar(require_CodePointBuffer(), exports);
  __exportStar(require_CodePointCharStream(), exports);
  __exportStar(require_CommonToken(), exports);
  __exportStar(require_CommonTokenFactory(), exports);
  __exportStar(require_CommonTokenStream(), exports);
  __exportStar(require_ConsoleErrorListener(), exports);
  __exportStar(require_DefaultErrorStrategy(), exports);
  __exportStar(require_Dependents(), exports);
  __exportStar(require_DiagnosticErrorListener(), exports);
  __exportStar(require_FailedPredicateException(), exports);
  __exportStar(require_InputMismatchException(), exports);
  __exportStar(require_InterpreterRuleContext(), exports);
  __exportStar(require_IntStream(), exports);
  __exportStar(require_Lexer(), exports);
  __exportStar(require_LexerInterpreter(), exports);
  __exportStar(require_LexerNoViableAltException(), exports);
  __exportStar(require_ListTokenSource(), exports);
  __exportStar(require_NoViableAltException(), exports);
  __exportStar(require_Parser(), exports);
  __exportStar(require_ParserErrorListener(), exports);
  __exportStar(require_ParserInterpreter(), exports);
  __exportStar(require_ParserRuleContext(), exports);
  __exportStar(require_ProxyErrorListener(), exports);
  __exportStar(require_ProxyParserErrorListener(), exports);
  __exportStar(require_RecognitionException(), exports);
  __exportStar(require_Recognizer(), exports);
  __exportStar(require_RuleContext(), exports);
  __exportStar(require_RuleContextWithAltNum(), exports);
  __exportStar(require_RuleDependency(), exports);
  __exportStar(require_RuleVersion(), exports);
  __exportStar(require_Token(), exports);
  __exportStar(require_TokenFactory(), exports);
  __exportStar(require_TokenSource(), exports);
  __exportStar(require_TokenStream(), exports);
  __exportStar(require_TokenStreamRewriter(), exports);
  __exportStar(require_Vocabulary(), exports);
  __exportStar(require_VocabularyImpl(), exports);
  __exportStar(require_WritableToken(), exports);
});

// node_modules/antlr4ts/tree/AbstractParseTreeVisitor.js
var require_AbstractParseTreeVisitor = __commonJS((exports) => {
  "use strict";
  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __param = exports && exports.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.AbstractParseTreeVisitor = void 0;
  var Decorators_1 = require_Decorators();
  var AbstractParseTreeVisitor2 = class {
    visit(tree) {
      return tree.accept(this);
    }
    visitChildren(node) {
      let result = this.defaultResult();
      let n = node.childCount;
      for (let i = 0; i < n; i++) {
        if (!this.shouldVisitNextChild(node, result)) {
          break;
        }
        let c = node.getChild(i);
        let childResult = c.accept(this);
        result = this.aggregateResult(result, childResult);
      }
      return result;
    }
    visitTerminal(node) {
      return this.defaultResult();
    }
    visitErrorNode(node) {
      return this.defaultResult();
    }
    aggregateResult(aggregate, nextResult) {
      return nextResult;
    }
    shouldVisitNextChild(node, currentResult) {
      return true;
    }
  };
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], AbstractParseTreeVisitor2.prototype, "visit", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], AbstractParseTreeVisitor2.prototype, "visitChildren", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], AbstractParseTreeVisitor2.prototype, "visitTerminal", null);
  __decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
  ], AbstractParseTreeVisitor2.prototype, "visitErrorNode", null);
  __decorate([
    __param(0, Decorators_1.NotNull)
  ], AbstractParseTreeVisitor2.prototype, "shouldVisitNextChild", null);
  exports.AbstractParseTreeVisitor = AbstractParseTreeVisitor2;
});

// node_modules/antlr4/src/antlr4/Utils.js
var require_Utils2 = __commonJS((exports, module2) => {
  function arrayToString(a) {
    return Array.isArray(a) ? "[" + a.join(", ") + "]" : "null";
  }
  String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));
  String.prototype.hashCode = function() {
    const key = this.toString();
    let h1b, k1;
    const remainder = key.length & 3;
    const bytes = key.length - remainder;
    let h1 = String.prototype.seed;
    const c1 = 3432918353;
    const c2 = 461845907;
    let i = 0;
    while (i < bytes) {
      k1 = key.charCodeAt(i) & 255 | (key.charCodeAt(++i) & 255) << 8 | (key.charCodeAt(++i) & 255) << 16 | (key.charCodeAt(++i) & 255) << 24;
      ++i;
      k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
      k1 = k1 << 15 | k1 >>> 17;
      k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
      h1 ^= k1;
      h1 = h1 << 13 | h1 >>> 19;
      h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;
      h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);
    }
    k1 = 0;
    switch (remainder) {
      case 3:
        k1 ^= (key.charCodeAt(i + 2) & 255) << 16;
      case 2:
        k1 ^= (key.charCodeAt(i + 1) & 255) << 8;
      case 1:
        k1 ^= key.charCodeAt(i) & 255;
        k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
        h1 ^= k1;
    }
    h1 ^= key.length;
    h1 ^= h1 >>> 16;
    h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;
    h1 ^= h1 >>> 13;
    h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;
    h1 ^= h1 >>> 16;
    return h1 >>> 0;
  };
  function standardEqualsFunction(a, b) {
    return a ? a.equals(b) : a == b;
  }
  function standardHashCodeFunction(a) {
    return a ? a.hashCode() : -1;
  }
  var Set2 = class {
    constructor(hashFunction, equalsFunction) {
      this.data = {};
      this.hashFunction = hashFunction || standardHashCodeFunction;
      this.equalsFunction = equalsFunction || standardEqualsFunction;
    }
    add(value) {
      const hash = this.hashFunction(value);
      const key = "hash_" + hash;
      if (key in this.data) {
        const values = this.data[key];
        for (let i = 0; i < values.length; i++) {
          if (this.equalsFunction(value, values[i])) {
            return values[i];
          }
        }
        values.push(value);
        return value;
      } else {
        this.data[key] = [value];
        return value;
      }
    }
    contains(value) {
      return this.get(value) != null;
    }
    get(value) {
      const hash = this.hashFunction(value);
      const key = "hash_" + hash;
      if (key in this.data) {
        const values = this.data[key];
        for (let i = 0; i < values.length; i++) {
          if (this.equalsFunction(value, values[i])) {
            return values[i];
          }
        }
      }
      return null;
    }
    values() {
      let l = [];
      for (const key in this.data) {
        if (key.indexOf("hash_") === 0) {
          l = l.concat(this.data[key]);
        }
      }
      return l;
    }
    toString() {
      return arrayToString(this.values());
    }
    get length() {
      let l = 0;
      for (const key in this.data) {
        if (key.indexOf("hash_") === 0) {
          l = l + this.data[key].length;
        }
      }
      return l;
    }
  };
  var BitSet = class {
    constructor() {
      this.data = [];
    }
    add(value) {
      this.data[value] = true;
    }
    or(set) {
      const bits = this;
      Object.keys(set.data).map(function(alt) {
        bits.add(alt);
      });
    }
    remove(value) {
      delete this.data[value];
    }
    contains(value) {
      return this.data[value] === true;
    }
    values() {
      return Object.keys(this.data);
    }
    minValue() {
      return Math.min.apply(null, this.values());
    }
    hashCode() {
      const hash = new Hash2();
      hash.update(this.values());
      return hash.finish();
    }
    equals(other) {
      if (!(other instanceof BitSet)) {
        return false;
      }
      return this.hashCode() === other.hashCode();
    }
    toString() {
      return "{" + this.values().join(", ") + "}";
    }
    get length() {
      return this.values().length;
    }
  };
  var Map2 = class {
    constructor(hashFunction, equalsFunction) {
      this.data = {};
      this.hashFunction = hashFunction || standardHashCodeFunction;
      this.equalsFunction = equalsFunction || standardEqualsFunction;
    }
    put(key, value) {
      const hashKey = "hash_" + this.hashFunction(key);
      if (hashKey in this.data) {
        const entries = this.data[hashKey];
        for (let i = 0; i < entries.length; i++) {
          const entry = entries[i];
          if (this.equalsFunction(key, entry.key)) {
            const oldValue = entry.value;
            entry.value = value;
            return oldValue;
          }
        }
        entries.push({key, value});
        return value;
      } else {
        this.data[hashKey] = [{key, value}];
        return value;
      }
    }
    containsKey(key) {
      const hashKey = "hash_" + this.hashFunction(key);
      if (hashKey in this.data) {
        const entries = this.data[hashKey];
        for (let i = 0; i < entries.length; i++) {
          const entry = entries[i];
          if (this.equalsFunction(key, entry.key))
            return true;
        }
      }
      return false;
    }
    get(key) {
      const hashKey = "hash_" + this.hashFunction(key);
      if (hashKey in this.data) {
        const entries = this.data[hashKey];
        for (let i = 0; i < entries.length; i++) {
          const entry = entries[i];
          if (this.equalsFunction(key, entry.key))
            return entry.value;
        }
      }
      return null;
    }
    entries() {
      let l = [];
      for (const key in this.data) {
        if (key.indexOf("hash_") === 0) {
          l = l.concat(this.data[key]);
        }
      }
      return l;
    }
    getKeys() {
      return this.entries().map(function(e) {
        return e.key;
      });
    }
    getValues() {
      return this.entries().map(function(e) {
        return e.value;
      });
    }
    toString() {
      const ss = this.entries().map(function(entry) {
        return "{" + entry.key + ":" + entry.value + "}";
      });
      return "[" + ss.join(", ") + "]";
    }
    get length() {
      let l = 0;
      for (const hashKey in this.data) {
        if (hashKey.indexOf("hash_") === 0) {
          l = l + this.data[hashKey].length;
        }
      }
      return l;
    }
  };
  var AltDict = class {
    constructor() {
      this.data = {};
    }
    get(key) {
      key = "k-" + key;
      if (key in this.data) {
        return this.data[key];
      } else {
        return null;
      }
    }
    put(key, value) {
      key = "k-" + key;
      this.data[key] = value;
    }
    values() {
      const data = this.data;
      const keys = Object.keys(this.data);
      return keys.map(function(key) {
        return data[key];
      });
    }
  };
  var DoubleDict = class {
    constructor(defaultMapCtor) {
      this.defaultMapCtor = defaultMapCtor || Map2;
      this.cacheMap = new this.defaultMapCtor();
    }
    get(a, b) {
      const d = this.cacheMap.get(a) || null;
      return d === null ? null : d.get(b) || null;
    }
    set(a, b, o) {
      let d = this.cacheMap.get(a) || null;
      if (d === null) {
        d = new this.defaultMapCtor();
        this.cacheMap.put(a, d);
      }
      d.put(b, o);
    }
  };
  var Hash2 = class {
    constructor() {
      this.count = 0;
      this.hash = 0;
    }
    update() {
      for (let i = 0; i < arguments.length; i++) {
        const value = arguments[i];
        if (value == null)
          continue;
        if (Array.isArray(value))
          this.update.apply(this, value);
        else {
          let k = 0;
          switch (typeof value) {
            case "undefined":
            case "function":
              continue;
            case "number":
            case "boolean":
              k = value;
              break;
            case "string":
              k = value.hashCode();
              break;
            default:
              if (value.updateHashCode)
                value.updateHashCode(this);
              else
                console.log("No updateHashCode for " + value.toString());
              continue;
          }
          k = k * 3432918353;
          k = k << 15 | k >>> 32 - 15;
          k = k * 461845907;
          this.count = this.count + 1;
          let hash = this.hash ^ k;
          hash = hash << 13 | hash >>> 32 - 13;
          hash = hash * 5 + 3864292196;
          this.hash = hash;
        }
      }
    }
    finish() {
      let hash = this.hash ^ this.count * 4;
      hash = hash ^ hash >>> 16;
      hash = hash * 2246822507;
      hash = hash ^ hash >>> 13;
      hash = hash * 3266489909;
      hash = hash ^ hash >>> 16;
      return hash;
    }
  };
  function hashStuff() {
    const hash = new Hash2();
    hash.update.apply(hash, arguments);
    return hash.finish();
  }
  function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r");
    if (escapeSpaces) {
      s = s.replace(/ /g, "\xB7");
    }
    return s;
  }
  function titleCase(str) {
    return str.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
  }
  function equalArrays(a, b) {
    if (!Array.isArray(a) || !Array.isArray(b))
      return false;
    if (a === b)
      return true;
    if (a.length !== b.length)
      return false;
    for (let i = 0; i < a.length; i++) {
      if (a[i] === b[i])
        continue;
      if (!a[i].equals || !a[i].equals(b[i]))
        return false;
    }
    return true;
  }
  module2.exports = {
    Hash: Hash2,
    Set: Set2,
    Map: Map2,
    BitSet,
    AltDict,
    DoubleDict,
    hashStuff,
    escapeWhitespace,
    arrayToString,
    titleCase,
    equalArrays
  };
});

// node_modules/antlr4/src/antlr4/Token.js
var require_Token2 = __commonJS((exports, module2) => {
  var Token2 = class {
    constructor() {
      this.source = null;
      this.type = null;
      this.channel = null;
      this.start = null;
      this.stop = null;
      this.tokenIndex = null;
      this.line = null;
      this.column = null;
      this._text = null;
    }
    getTokenSource() {
      return this.source[0];
    }
    getInputStream() {
      return this.source[1];
    }
    get text() {
      return this._text;
    }
    set text(text) {
      this._text = text;
    }
  };
  Token2.INVALID_TYPE = 0;
  Token2.EPSILON = -2;
  Token2.MIN_USER_TOKEN_TYPE = 1;
  Token2.EOF = -1;
  Token2.DEFAULT_CHANNEL = 0;
  Token2.HIDDEN_CHANNEL = 1;
  var CommonToken = class extends Token2 {
    constructor(source, type, channel, start, stop) {
      super();
      this.source = source !== void 0 ? source : CommonToken.EMPTY_SOURCE;
      this.type = type !== void 0 ? type : null;
      this.channel = channel !== void 0 ? channel : Token2.DEFAULT_CHANNEL;
      this.start = start !== void 0 ? start : -1;
      this.stop = stop !== void 0 ? stop : -1;
      this.tokenIndex = -1;
      if (this.source[0] !== null) {
        this.line = source[0].line;
        this.column = source[0].column;
      } else {
        this.column = -1;
      }
    }
    clone() {
      const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);
      t.tokenIndex = this.tokenIndex;
      t.line = this.line;
      t.column = this.column;
      t.text = this.text;
      return t;
    }
    toString() {
      let txt = this.text;
      if (txt !== null) {
        txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
      } else {
        txt = "<no text>";
      }
      return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + this.type + ">" + (this.channel > 0 ? ",channel=" + this.channel : "") + "," + this.line + ":" + this.column + "]";
    }
    get text() {
      if (this._text !== null) {
        return this._text;
      }
      const input = this.getInputStream();
      if (input === null) {
        return null;
      }
      const n = input.size;
      if (this.start < n && this.stop < n) {
        return input.getText(this.start, this.stop);
      } else {
        return "<EOF>";
      }
    }
    set text(text) {
      this._text = text;
    }
  };
  CommonToken.EMPTY_SOURCE = [null, null];
  module2.exports = {
    Token: Token2,
    CommonToken
  };
});

// node_modules/antlr4/src/antlr4/atn/ATNState.js
var require_ATNState2 = __commonJS((exports, module2) => {
  var ATNState = class {
    constructor() {
      this.atn = null;
      this.stateNumber = ATNState.INVALID_STATE_NUMBER;
      this.stateType = null;
      this.ruleIndex = 0;
      this.epsilonOnlyTransitions = false;
      this.transitions = [];
      this.nextTokenWithinRule = null;
    }
    toString() {
      return this.stateNumber;
    }
    equals(other) {
      if (other instanceof ATNState) {
        return this.stateNumber === other.stateNumber;
      } else {
        return false;
      }
    }
    isNonGreedyExitState() {
      return false;
    }
    addTransition(trans, index) {
      if (index === void 0) {
        index = -1;
      }
      if (this.transitions.length === 0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
      } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
      }
      if (index === -1) {
        this.transitions.push(trans);
      } else {
        this.transitions.splice(index, 1, trans);
      }
    }
  };
  ATNState.INVALID_TYPE = 0;
  ATNState.BASIC = 1;
  ATNState.RULE_START = 2;
  ATNState.BLOCK_START = 3;
  ATNState.PLUS_BLOCK_START = 4;
  ATNState.STAR_BLOCK_START = 5;
  ATNState.TOKEN_START = 6;
  ATNState.RULE_STOP = 7;
  ATNState.BLOCK_END = 8;
  ATNState.STAR_LOOP_BACK = 9;
  ATNState.STAR_LOOP_ENTRY = 10;
  ATNState.PLUS_LOOP_BACK = 11;
  ATNState.LOOP_END = 12;
  ATNState.serializationNames = [
    "INVALID",
    "BASIC",
    "RULE_START",
    "BLOCK_START",
    "PLUS_BLOCK_START",
    "STAR_BLOCK_START",
    "TOKEN_START",
    "RULE_STOP",
    "BLOCK_END",
    "STAR_LOOP_BACK",
    "STAR_LOOP_ENTRY",
    "PLUS_LOOP_BACK",
    "LOOP_END"
  ];
  ATNState.INVALID_STATE_NUMBER = -1;
  var BasicState = class extends ATNState {
    constructor() {
      super();
      this.stateType = ATNState.BASIC;
    }
  };
  var DecisionState = class extends ATNState {
    constructor() {
      super();
      this.decision = -1;
      this.nonGreedy = false;
      return this;
    }
  };
  var BlockStartState = class extends DecisionState {
    constructor() {
      super();
      this.endState = null;
      return this;
    }
  };
  var BasicBlockStartState = class extends BlockStartState {
    constructor() {
      super();
      this.stateType = ATNState.BLOCK_START;
      return this;
    }
  };
  var BlockEndState = class extends ATNState {
    constructor() {
      super();
      this.stateType = ATNState.BLOCK_END;
      this.startState = null;
      return this;
    }
  };
  var RuleStopState = class extends ATNState {
    constructor() {
      super();
      this.stateType = ATNState.RULE_STOP;
      return this;
    }
  };
  var RuleStartState = class extends ATNState {
    constructor() {
      super();
      this.stateType = ATNState.RULE_START;
      this.stopState = null;
      this.isPrecedenceRule = false;
      return this;
    }
  };
  var PlusLoopbackState = class extends DecisionState {
    constructor() {
      super();
      this.stateType = ATNState.PLUS_LOOP_BACK;
      return this;
    }
  };
  var PlusBlockStartState = class extends BlockStartState {
    constructor() {
      super();
      this.stateType = ATNState.PLUS_BLOCK_START;
      this.loopBackState = null;
      return this;
    }
  };
  var StarBlockStartState = class extends BlockStartState {
    constructor() {
      super();
      this.stateType = ATNState.STAR_BLOCK_START;
      return this;
    }
  };
  var StarLoopbackState = class extends ATNState {
    constructor() {
      super();
      this.stateType = ATNState.STAR_LOOP_BACK;
      return this;
    }
  };
  var StarLoopEntryState = class extends DecisionState {
    constructor() {
      super();
      this.stateType = ATNState.STAR_LOOP_ENTRY;
      this.loopBackState = null;
      this.isPrecedenceDecision = null;
      return this;
    }
  };
  var LoopEndState = class extends ATNState {
    constructor() {
      super();
      this.stateType = ATNState.LOOP_END;
      this.loopBackState = null;
      return this;
    }
  };
  var TokensStartState = class extends DecisionState {
    constructor() {
      super();
      this.stateType = ATNState.TOKEN_START;
      return this;
    }
  };
  module2.exports = {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
  };
});

// node_modules/antlr4/src/antlr4/atn/SemanticContext.js
var require_SemanticContext2 = __commonJS((exports, module2) => {
  var {Set: Set2, Hash: Hash2, equalArrays} = require_Utils2();
  var SemanticContext = class {
    hashCode() {
      const hash = new Hash2();
      this.updateHashCode(hash);
      return hash.finish();
    }
    evaluate(parser, outerContext) {
    }
    evalPrecedence(parser, outerContext) {
      return this;
    }
    static andContext(a, b) {
      if (a === null || a === SemanticContext.NONE) {
        return b;
      }
      if (b === null || b === SemanticContext.NONE) {
        return a;
      }
      const result = new AND(a, b);
      if (result.opnds.length === 1) {
        return result.opnds[0];
      } else {
        return result;
      }
    }
    static orContext(a, b) {
      if (a === null) {
        return b;
      }
      if (b === null) {
        return a;
      }
      if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
        return SemanticContext.NONE;
      }
      const result = new OR(a, b);
      if (result.opnds.length === 1) {
        return result.opnds[0];
      } else {
        return result;
      }
    }
  };
  var Predicate = class extends SemanticContext {
    constructor(ruleIndex, predIndex, isCtxDependent) {
      super();
      this.ruleIndex = ruleIndex === void 0 ? -1 : ruleIndex;
      this.predIndex = predIndex === void 0 ? -1 : predIndex;
      this.isCtxDependent = isCtxDependent === void 0 ? false : isCtxDependent;
    }
    evaluate(parser, outerContext) {
      const localctx = this.isCtxDependent ? outerContext : null;
      return parser.sempred(localctx, this.ruleIndex, this.predIndex);
    }
    updateHashCode(hash) {
      hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof Predicate)) {
        return false;
      } else {
        return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;
      }
    }
    toString() {
      return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
    }
  };
  SemanticContext.NONE = new Predicate();
  var PrecedencePredicate = class extends SemanticContext {
    constructor(precedence) {
      super();
      this.precedence = precedence === void 0 ? 0 : precedence;
    }
    evaluate(parser, outerContext) {
      return parser.precpred(outerContext, this.precedence);
    }
    evalPrecedence(parser, outerContext) {
      if (parser.precpred(outerContext, this.precedence)) {
        return SemanticContext.NONE;
      } else {
        return null;
      }
    }
    compareTo(other) {
      return this.precedence - other.precedence;
    }
    updateHashCode(hash) {
      hash.update(this.precedence);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof PrecedencePredicate)) {
        return false;
      } else {
        return this.precedence === other.precedence;
      }
    }
    toString() {
      return "{" + this.precedence + ">=prec}?";
    }
    static filterPrecedencePredicates(set) {
      const result = [];
      set.values().map(function(context) {
        if (context instanceof PrecedencePredicate) {
          result.push(context);
        }
      });
      return result;
    }
  };
  var AND = class extends SemanticContext {
    constructor(a, b) {
      super();
      const operands = new Set2();
      if (a instanceof AND) {
        a.opnds.map(function(o) {
          operands.add(o);
        });
      } else {
        operands.add(a);
      }
      if (b instanceof AND) {
        b.opnds.map(function(o) {
          operands.add(o);
        });
      } else {
        operands.add(b);
      }
      const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
      if (precedencePredicates.length > 0) {
        let reduced = null;
        precedencePredicates.map(function(p) {
          if (reduced === null || p.precedence < reduced.precedence) {
            reduced = p;
          }
        });
        operands.add(reduced);
      }
      this.opnds = Array.from(operands.values());
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof AND)) {
        return false;
      } else {
        return equalArrays(this.opnds, other.opnds);
      }
    }
    updateHashCode(hash) {
      hash.update(this.opnds, "AND");
    }
    evaluate(parser, outerContext) {
      for (let i = 0; i < this.opnds.length; i++) {
        if (!this.opnds[i].evaluate(parser, outerContext)) {
          return false;
        }
      }
      return true;
    }
    evalPrecedence(parser, outerContext) {
      let differs = false;
      const operands = [];
      for (let i = 0; i < this.opnds.length; i++) {
        const context = this.opnds[i];
        const evaluated = context.evalPrecedence(parser, outerContext);
        differs |= evaluated !== context;
        if (evaluated === null) {
          return null;
        } else if (evaluated !== SemanticContext.NONE) {
          operands.push(evaluated);
        }
      }
      if (!differs) {
        return this;
      }
      if (operands.length === 0) {
        return SemanticContext.NONE;
      }
      let result = null;
      operands.map(function(o) {
        result = result === null ? o : SemanticContext.andContext(result, o);
      });
      return result;
    }
    toString() {
      const s = this.opnds.map((o) => o.toString());
      return (s.length > 3 ? s.slice(3) : s).join("&&");
    }
  };
  var OR = class extends SemanticContext {
    constructor(a, b) {
      super();
      const operands = new Set2();
      if (a instanceof OR) {
        a.opnds.map(function(o) {
          operands.add(o);
        });
      } else {
        operands.add(a);
      }
      if (b instanceof OR) {
        b.opnds.map(function(o) {
          operands.add(o);
        });
      } else {
        operands.add(b);
      }
      const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
      if (precedencePredicates.length > 0) {
        const s = precedencePredicates.sort(function(a2, b2) {
          return a2.compareTo(b2);
        });
        const reduced = s[s.length - 1];
        operands.add(reduced);
      }
      this.opnds = Array.from(operands.values());
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof OR)) {
        return false;
      } else {
        return equalArrays(this.opnds, other.opnds);
      }
    }
    updateHashCode(hash) {
      hash.update(this.opnds, "OR");
    }
    evaluate(parser, outerContext) {
      for (let i = 0; i < this.opnds.length; i++) {
        if (this.opnds[i].evaluate(parser, outerContext)) {
          return true;
        }
      }
      return false;
    }
    evalPrecedence(parser, outerContext) {
      let differs = false;
      const operands = [];
      for (let i = 0; i < this.opnds.length; i++) {
        const context = this.opnds[i];
        const evaluated = context.evalPrecedence(parser, outerContext);
        differs |= evaluated !== context;
        if (evaluated === SemanticContext.NONE) {
          return SemanticContext.NONE;
        } else if (evaluated !== null) {
          operands.push(evaluated);
        }
      }
      if (!differs) {
        return this;
      }
      if (operands.length === 0) {
        return null;
      }
      const result = null;
      operands.map(function(o) {
        return result === null ? o : SemanticContext.orContext(result, o);
      });
      return result;
    }
    toString() {
      const s = this.opnds.map((o) => o.toString());
      return (s.length > 3 ? s.slice(3) : s).join("||");
    }
  };
  module2.exports = {
    SemanticContext,
    PrecedencePredicate,
    Predicate
  };
});

// node_modules/antlr4/src/antlr4/atn/ATNConfig.js
var require_ATNConfig2 = __commonJS((exports, module2) => {
  var {DecisionState} = require_ATNState2();
  var {SemanticContext} = require_SemanticContext2();
  var {Hash: Hash2} = require_Utils2();
  function checkParams(params, isCfg) {
    if (params === null) {
      const result = {state: null, alt: null, context: null, semanticContext: null};
      if (isCfg) {
        result.reachesIntoOuterContext = 0;
      }
      return result;
    } else {
      const props = {};
      props.state = params.state || null;
      props.alt = params.alt === void 0 ? null : params.alt;
      props.context = params.context || null;
      props.semanticContext = params.semanticContext || null;
      if (isCfg) {
        props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
        props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
      }
      return props;
    }
  }
  var ATNConfig = class {
    constructor(params, config) {
      this.checkContext(params, config);
      params = checkParams(params);
      config = checkParams(config, true);
      this.state = params.state !== null ? params.state : config.state;
      this.alt = params.alt !== null ? params.alt : config.alt;
      this.context = params.context !== null ? params.context : config.context;
      this.semanticContext = params.semanticContext !== null ? params.semanticContext : config.semanticContext !== null ? config.semanticContext : SemanticContext.NONE;
      this.reachesIntoOuterContext = config.reachesIntoOuterContext;
      this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    }
    checkContext(params, config) {
      if ((params.context === null || params.context === void 0) && (config === null || config.context === null || config.context === void 0)) {
        this.context = null;
      }
    }
    hashCode() {
      const hash = new Hash2();
      this.updateHashCode(hash);
      return hash.finish();
    }
    updateHashCode(hash) {
      hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof ATNConfig)) {
        return false;
      } else {
        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;
      }
    }
    hashCodeForConfigSet() {
      const hash = new Hash2();
      hash.update(this.state.stateNumber, this.alt, this.semanticContext);
      return hash.finish();
    }
    equalsForConfigSet(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof ATNConfig)) {
        return false;
      } else {
        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);
      }
    }
    toString() {
      return "(" + this.state + "," + this.alt + (this.context !== null ? ",[" + this.context.toString() + "]" : "") + (this.semanticContext !== SemanticContext.NONE ? "," + this.semanticContext.toString() : "") + (this.reachesIntoOuterContext > 0 ? ",up=" + this.reachesIntoOuterContext : "") + ")";
    }
  };
  var LexerATNConfig = class extends ATNConfig {
    constructor(params, config) {
      super(params, config);
      const lexerActionExecutor = params.lexerActionExecutor || null;
      this.lexerActionExecutor = lexerActionExecutor || (config !== null ? config.lexerActionExecutor : null);
      this.passedThroughNonGreedyDecision = config !== null ? this.checkNonGreedyDecision(config, this.state) : false;
      this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;
      this.equalsForConfigSet = LexerATNConfig.prototype.equals;
      return this;
    }
    updateHashCode(hash) {
      hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
    }
    equals(other) {
      return this === other || other instanceof LexerATNConfig && this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && super.equals(other);
    }
    checkNonGreedyDecision(source, target) {
      return source.passedThroughNonGreedyDecision || target instanceof DecisionState && target.nonGreedy;
    }
  };
  module2.exports.ATNConfig = ATNConfig;
  module2.exports.LexerATNConfig = LexerATNConfig;
});

// node_modules/antlr4/src/antlr4/IntervalSet.js
var require_IntervalSet2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var Interval = class {
    constructor(start, stop) {
      this.start = start;
      this.stop = stop;
    }
    contains(item) {
      return item >= this.start && item < this.stop;
    }
    toString() {
      if (this.start === this.stop - 1) {
        return this.start.toString();
      } else {
        return this.start.toString() + ".." + (this.stop - 1).toString();
      }
    }
    get length() {
      return this.stop - this.start;
    }
  };
  var IntervalSet = class {
    constructor() {
      this.intervals = null;
      this.readOnly = false;
    }
    first(v) {
      if (this.intervals === null || this.intervals.length === 0) {
        return Token2.INVALID_TYPE;
      } else {
        return this.intervals[0].start;
      }
    }
    addOne(v) {
      this.addInterval(new Interval(v, v + 1));
    }
    addRange(l, h) {
      this.addInterval(new Interval(l, h + 1));
    }
    addInterval(toAdd) {
      if (this.intervals === null) {
        this.intervals = [];
        this.intervals.push(toAdd);
      } else {
        for (let pos = 0; pos < this.intervals.length; pos++) {
          const existing = this.intervals[pos];
          if (toAdd.stop < existing.start) {
            this.intervals.splice(pos, 0, toAdd);
            return;
          } else if (toAdd.stop === existing.start) {
            this.intervals[pos].start = toAdd.start;
            return;
          } else if (toAdd.start <= existing.stop) {
            this.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));
            this.reduce(pos);
            return;
          }
        }
        this.intervals.push(toAdd);
      }
    }
    addSet(other) {
      if (other.intervals !== null) {
        other.intervals.forEach((toAdd) => this.addInterval(toAdd), this);
      }
      return this;
    }
    reduce(pos) {
      if (pos < this.intervals.length - 1) {
        const current = this.intervals[pos];
        const next = this.intervals[pos + 1];
        if (current.stop >= next.stop) {
          this.intervals.splice(pos + 1, 1);
          this.reduce(pos);
        } else if (current.stop >= next.start) {
          this.intervals[pos] = new Interval(current.start, next.stop);
          this.intervals.splice(pos + 1, 1);
        }
      }
    }
    complement(start, stop) {
      const result = new IntervalSet();
      result.addInterval(new Interval(start, stop + 1));
      if (this.intervals !== null)
        this.intervals.forEach((toRemove) => result.removeRange(toRemove));
      return result;
    }
    contains(item) {
      if (this.intervals === null) {
        return false;
      } else {
        for (let k = 0; k < this.intervals.length; k++) {
          if (this.intervals[k].contains(item)) {
            return true;
          }
        }
        return false;
      }
    }
    removeRange(toRemove) {
      if (toRemove.start === toRemove.stop - 1) {
        this.removeOne(toRemove.start);
      } else if (this.intervals !== null) {
        let pos = 0;
        for (let n = 0; n < this.intervals.length; n++) {
          const existing = this.intervals[pos];
          if (toRemove.stop <= existing.start) {
            return;
          } else if (toRemove.start > existing.start && toRemove.stop < existing.stop) {
            this.intervals[pos] = new Interval(existing.start, toRemove.start);
            const x = new Interval(toRemove.stop, existing.stop);
            this.intervals.splice(pos, 0, x);
            return;
          } else if (toRemove.start <= existing.start && toRemove.stop >= existing.stop) {
            this.intervals.splice(pos, 1);
            pos = pos - 1;
          } else if (toRemove.start < existing.stop) {
            this.intervals[pos] = new Interval(existing.start, toRemove.start);
          } else if (toRemove.stop < existing.stop) {
            this.intervals[pos] = new Interval(toRemove.stop, existing.stop);
          }
          pos += 1;
        }
      }
    }
    removeOne(value) {
      if (this.intervals !== null) {
        for (let i = 0; i < this.intervals.length; i++) {
          const existing = this.intervals[i];
          if (value < existing.start) {
            return;
          } else if (value === existing.start && value === existing.stop - 1) {
            this.intervals.splice(i, 1);
            return;
          } else if (value === existing.start) {
            this.intervals[i] = new Interval(existing.start + 1, existing.stop);
            return;
          } else if (value === existing.stop - 1) {
            this.intervals[i] = new Interval(existing.start, existing.stop - 1);
            return;
          } else if (value < existing.stop - 1) {
            const replace = new Interval(existing.start, value);
            existing.start = value + 1;
            this.intervals.splice(i, 0, replace);
            return;
          }
        }
      }
    }
    toString(literalNames, symbolicNames, elemsAreChar) {
      literalNames = literalNames || null;
      symbolicNames = symbolicNames || null;
      elemsAreChar = elemsAreChar || false;
      if (this.intervals === null) {
        return "{}";
      } else if (literalNames !== null || symbolicNames !== null) {
        return this.toTokenString(literalNames, symbolicNames);
      } else if (elemsAreChar) {
        return this.toCharString();
      } else {
        return this.toIndexString();
      }
    }
    toCharString() {
      const names = [];
      for (let i = 0; i < this.intervals.length; i++) {
        const existing = this.intervals[i];
        if (existing.stop === existing.start + 1) {
          if (existing.start === Token2.EOF) {
            names.push("<EOF>");
          } else {
            names.push("'" + String.fromCharCode(existing.start) + "'");
          }
        } else {
          names.push("'" + String.fromCharCode(existing.start) + "'..'" + String.fromCharCode(existing.stop - 1) + "'");
        }
      }
      if (names.length > 1) {
        return "{" + names.join(", ") + "}";
      } else {
        return names[0];
      }
    }
    toIndexString() {
      const names = [];
      for (let i = 0; i < this.intervals.length; i++) {
        const existing = this.intervals[i];
        if (existing.stop === existing.start + 1) {
          if (existing.start === Token2.EOF) {
            names.push("<EOF>");
          } else {
            names.push(existing.start.toString());
          }
        } else {
          names.push(existing.start.toString() + ".." + (existing.stop - 1).toString());
        }
      }
      if (names.length > 1) {
        return "{" + names.join(", ") + "}";
      } else {
        return names[0];
      }
    }
    toTokenString(literalNames, symbolicNames) {
      const names = [];
      for (let i = 0; i < this.intervals.length; i++) {
        const existing = this.intervals[i];
        for (let j = existing.start; j < existing.stop; j++) {
          names.push(this.elementName(literalNames, symbolicNames, j));
        }
      }
      if (names.length > 1) {
        return "{" + names.join(", ") + "}";
      } else {
        return names[0];
      }
    }
    elementName(literalNames, symbolicNames, token) {
      if (token === Token2.EOF) {
        return "<EOF>";
      } else if (token === Token2.EPSILON) {
        return "<EPSILON>";
      } else {
        return literalNames[token] || symbolicNames[token];
      }
    }
    get length() {
      return this.intervals.map((interval) => interval.length).reduce((acc, val) => acc + val);
    }
  };
  module2.exports = {
    Interval,
    IntervalSet
  };
});

// node_modules/antlr4/src/antlr4/atn/Transition.js
var require_Transition2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var {IntervalSet} = require_IntervalSet2();
  var {Predicate, PrecedencePredicate} = require_SemanticContext2();
  var Transition = class {
    constructor(target) {
      if (target === void 0 || target === null) {
        throw "target cannot be null.";
      }
      this.target = target;
      this.isEpsilon = false;
      this.label = null;
    }
  };
  Transition.EPSILON = 1;
  Transition.RANGE = 2;
  Transition.RULE = 3;
  Transition.PREDICATE = 4;
  Transition.ATOM = 5;
  Transition.ACTION = 6;
  Transition.SET = 7;
  Transition.NOT_SET = 8;
  Transition.WILDCARD = 9;
  Transition.PRECEDENCE = 10;
  Transition.serializationNames = [
    "INVALID",
    "EPSILON",
    "RANGE",
    "RULE",
    "PREDICATE",
    "ATOM",
    "ACTION",
    "SET",
    "NOT_SET",
    "WILDCARD",
    "PRECEDENCE"
  ];
  Transition.serializationTypes = {
    EpsilonTransition: Transition.EPSILON,
    RangeTransition: Transition.RANGE,
    RuleTransition: Transition.RULE,
    PredicateTransition: Transition.PREDICATE,
    AtomTransition: Transition.ATOM,
    ActionTransition: Transition.ACTION,
    SetTransition: Transition.SET,
    NotSetTransition: Transition.NOT_SET,
    WildcardTransition: Transition.WILDCARD,
    PrecedencePredicateTransition: Transition.PRECEDENCE
  };
  var AtomTransition2 = class extends Transition {
    constructor(target, label) {
      super(target);
      this.label_ = label;
      this.label = this.makeLabel();
      this.serializationType = Transition.ATOM;
    }
    makeLabel() {
      const s = new IntervalSet();
      s.addOne(this.label_);
      return s;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return this.label_ === symbol;
    }
    toString() {
      return this.label_;
    }
  };
  var RuleTransition = class extends Transition {
    constructor(ruleStart, ruleIndex, precedence, followState) {
      super(ruleStart);
      this.ruleIndex = ruleIndex;
      this.precedence = precedence;
      this.followState = followState;
      this.serializationType = Transition.RULE;
      this.isEpsilon = true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
  };
  var EpsilonTransition = class extends Transition {
    constructor(target, outermostPrecedenceReturn) {
      super(target);
      this.serializationType = Transition.EPSILON;
      this.isEpsilon = true;
      this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    toString() {
      return "epsilon";
    }
  };
  var RangeTransition = class extends Transition {
    constructor(target, start, stop) {
      super(target);
      this.serializationType = Transition.RANGE;
      this.start = start;
      this.stop = stop;
      this.label = this.makeLabel();
    }
    makeLabel() {
      const s = new IntervalSet();
      s.addRange(this.start, this.stop);
      return s;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= this.start && symbol <= this.stop;
    }
    toString() {
      return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
    }
  };
  var AbstractPredicateTransition = class extends Transition {
    constructor(target) {
      super(target);
    }
  };
  var PredicateTransition = class extends AbstractPredicateTransition {
    constructor(target, ruleIndex, predIndex, isCtxDependent) {
      super(target);
      this.serializationType = Transition.PREDICATE;
      this.ruleIndex = ruleIndex;
      this.predIndex = predIndex;
      this.isCtxDependent = isCtxDependent;
      this.isEpsilon = true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    getPredicate() {
      return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
    toString() {
      return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
  };
  var ActionTransition = class extends Transition {
    constructor(target, ruleIndex, actionIndex, isCtxDependent) {
      super(target);
      this.serializationType = Transition.ACTION;
      this.ruleIndex = ruleIndex;
      this.actionIndex = actionIndex === void 0 ? -1 : actionIndex;
      this.isCtxDependent = isCtxDependent === void 0 ? false : isCtxDependent;
      this.isEpsilon = true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    toString() {
      return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
  };
  var SetTransition = class extends Transition {
    constructor(target, set) {
      super(target);
      this.serializationType = Transition.SET;
      if (set !== void 0 && set !== null) {
        this.label = set;
      } else {
        this.label = new IntervalSet();
        this.label.addOne(Token2.INVALID_TYPE);
      }
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return this.label.contains(symbol);
    }
    toString() {
      return this.label.toString();
    }
  };
  var NotSetTransition = class extends SetTransition {
    constructor(target, set) {
      super(target, set);
      this.serializationType = Transition.NOT_SET;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
    }
    toString() {
      return "~" + super.toString();
    }
  };
  var WildcardTransition = class extends Transition {
    constructor(target) {
      super(target);
      this.serializationType = Transition.WILDCARD;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }
    toString() {
      return ".";
    }
  };
  var PrecedencePredicateTransition = class extends AbstractPredicateTransition {
    constructor(target, precedence) {
      super(target);
      this.serializationType = Transition.PRECEDENCE;
      this.precedence = precedence;
      this.isEpsilon = true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
      return false;
    }
    getPredicate() {
      return new PrecedencePredicate(this.precedence);
    }
    toString() {
      return this.precedence + " >= _p";
    }
  };
  module2.exports = {
    Transition,
    AtomTransition: AtomTransition2,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    ActionTransition,
    EpsilonTransition,
    RangeTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition,
    AbstractPredicateTransition
  };
});

// node_modules/antlr4/src/antlr4/tree/Tree.js
var require_Tree = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var {Interval} = require_IntervalSet2();
  var INVALID_INTERVAL = new Interval(-1, -2);
  var Tree = class {
  };
  var SyntaxTree = class extends Tree {
    constructor() {
      super();
    }
  };
  var ParseTree = class extends SyntaxTree {
    constructor() {
      super();
    }
  };
  var RuleNode = class extends ParseTree {
    constructor() {
      super();
    }
    getRuleContext() {
      throw new Error("missing interface implementation");
    }
  };
  var TerminalNode = class extends ParseTree {
    constructor() {
      super();
    }
  };
  var ErrorNode2 = class extends TerminalNode {
    constructor() {
      super();
    }
  };
  var ParseTreeVisitor = class {
    visit(ctx) {
      if (Array.isArray(ctx)) {
        return ctx.map(function(child) {
          return child.accept(this);
        }, this);
      } else {
        return ctx.accept(this);
      }
    }
    visitChildren(ctx) {
      if (ctx.children) {
        return this.visit(ctx.children);
      } else {
        return null;
      }
    }
    visitTerminal(node) {
    }
    visitErrorNode(node) {
    }
  };
  var ParseTreeListener = class {
    visitTerminal(node) {
    }
    visitErrorNode(node) {
    }
    enterEveryRule(node) {
    }
    exitEveryRule(node) {
    }
  };
  var TerminalNodeImpl = class extends TerminalNode {
    constructor(symbol) {
      super();
      this.parentCtx = null;
      this.symbol = symbol;
    }
    getChild(i) {
      return null;
    }
    getSymbol() {
      return this.symbol;
    }
    getParent() {
      return this.parentCtx;
    }
    getPayload() {
      return this.symbol;
    }
    getSourceInterval() {
      if (this.symbol === null) {
        return INVALID_INTERVAL;
      }
      const tokenIndex = this.symbol.tokenIndex;
      return new Interval(tokenIndex, tokenIndex);
    }
    getChildCount() {
      return 0;
    }
    accept(visitor) {
      return visitor.visitTerminal(this);
    }
    getText() {
      return this.symbol.text;
    }
    toString() {
      if (this.symbol.type === Token2.EOF) {
        return "<EOF>";
      } else {
        return this.symbol.text;
      }
    }
  };
  var ErrorNodeImpl = class extends TerminalNodeImpl {
    constructor(token) {
      super(token);
    }
    isErrorNode() {
      return true;
    }
    accept(visitor) {
      return visitor.visitErrorNode(this);
    }
  };
  var ParseTreeWalker = class {
    walk(listener, t) {
      const errorNode = t instanceof ErrorNode2 || t.isErrorNode !== void 0 && t.isErrorNode();
      if (errorNode) {
        listener.visitErrorNode(t);
      } else if (t instanceof TerminalNode) {
        listener.visitTerminal(t);
      } else {
        this.enterRule(listener, t);
        for (let i = 0; i < t.getChildCount(); i++) {
          const child = t.getChild(i);
          this.walk(listener, child);
        }
        this.exitRule(listener, t);
      }
    }
    enterRule(listener, r) {
      const ctx = r.getRuleContext();
      listener.enterEveryRule(ctx);
      ctx.enterRule(listener);
    }
    exitRule(listener, r) {
      const ctx = r.getRuleContext();
      ctx.exitRule(listener);
      listener.exitEveryRule(ctx);
    }
  };
  ParseTreeWalker.DEFAULT = new ParseTreeWalker();
  module2.exports = {
    RuleNode,
    ErrorNode: ErrorNode2,
    TerminalNode,
    ErrorNodeImpl,
    TerminalNodeImpl,
    ParseTreeListener,
    ParseTreeVisitor,
    ParseTreeWalker,
    INVALID_INTERVAL
  };
});

// node_modules/antlr4/src/antlr4/tree/Trees.js
var require_Trees2 = __commonJS((exports, module2) => {
  var Utils3 = require_Utils2();
  var {Token: Token2} = require_Token2();
  var {ErrorNode: ErrorNode2, TerminalNode, RuleNode} = require_Tree();
  var Trees = {
    toStringTree: function(tree, ruleNames, recog) {
      ruleNames = ruleNames || null;
      recog = recog || null;
      if (recog !== null) {
        ruleNames = recog.ruleNames;
      }
      let s = Trees.getNodeText(tree, ruleNames);
      s = Utils3.escapeWhitespace(s, false);
      const c = tree.getChildCount();
      if (c === 0) {
        return s;
      }
      let res = "(" + s + " ";
      if (c > 0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
      }
      for (let i = 1; i < c; i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(" " + s);
      }
      res = res.concat(")");
      return res;
    },
    getNodeText: function(t, ruleNames, recog) {
      ruleNames = ruleNames || null;
      recog = recog || null;
      if (recog !== null) {
        ruleNames = recog.ruleNames;
      }
      if (ruleNames !== null) {
        if (t instanceof RuleNode) {
          const context = t.getRuleContext();
          const altNumber = context.getAltNumber();
          if (altNumber != 0) {
            return ruleNames[t.ruleIndex] + ":" + altNumber;
          }
          return ruleNames[t.ruleIndex];
        } else if (t instanceof ErrorNode2) {
          return t.toString();
        } else if (t instanceof TerminalNode) {
          if (t.symbol !== null) {
            return t.symbol.text;
          }
        }
      }
      const payload = t.getPayload();
      if (payload instanceof Token2) {
        return payload.text;
      }
      return t.getPayload().toString();
    },
    getChildren: function(t) {
      const list = [];
      for (let i = 0; i < t.getChildCount(); i++) {
        list.push(t.getChild(i));
      }
      return list;
    },
    getAncestors: function(t) {
      let ancestors = [];
      t = t.getParent();
      while (t !== null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
      }
      return ancestors;
    },
    findAllTokenNodes: function(t, ttype) {
      return Trees.findAllNodes(t, ttype, true);
    },
    findAllRuleNodes: function(t, ruleIndex) {
      return Trees.findAllNodes(t, ruleIndex, false);
    },
    findAllNodes: function(t, index, findTokens) {
      const nodes = [];
      Trees._findAllNodes(t, index, findTokens, nodes);
      return nodes;
    },
    _findAllNodes: function(t, index, findTokens, nodes) {
      if (findTokens && t instanceof TerminalNode) {
        if (t.symbol.type === index) {
          nodes.push(t);
        }
      } else if (!findTokens && t instanceof RuleNode) {
        if (t.ruleIndex === index) {
          nodes.push(t);
        }
      }
      for (let i = 0; i < t.getChildCount(); i++) {
        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
      }
    },
    descendants: function(t) {
      let nodes = [t];
      for (let i = 0; i < t.getChildCount(); i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
      }
      return nodes;
    }
  };
  module2.exports = Trees;
});

// node_modules/antlr4/src/antlr4/RuleContext.js
var require_RuleContext2 = __commonJS((exports, module2) => {
  var {RuleNode} = require_Tree();
  var {INVALID_INTERVAL} = require_Tree();
  var Trees = require_Trees2();
  var RuleContext = class extends RuleNode {
    constructor(parent, invokingState) {
      super();
      this.parentCtx = parent || null;
      this.invokingState = invokingState || -1;
    }
    depth() {
      let n = 0;
      let p = this;
      while (p !== null) {
        p = p.parentCtx;
        n += 1;
      }
      return n;
    }
    isEmpty() {
      return this.invokingState === -1;
    }
    getSourceInterval() {
      return INVALID_INTERVAL;
    }
    getRuleContext() {
      return this;
    }
    getPayload() {
      return this;
    }
    getText() {
      if (this.getChildCount() === 0) {
        return "";
      } else {
        return this.children.map(function(child) {
          return child.getText();
        }).join("");
      }
    }
    getAltNumber() {
      return 0;
    }
    setAltNumber(altNumber) {
    }
    getChild(i) {
      return null;
    }
    getChildCount() {
      return 0;
    }
    accept(visitor) {
      return visitor.visitChildren(this);
    }
    toStringTree(ruleNames, recog) {
      return Trees.toStringTree(this, ruleNames, recog);
    }
    toString(ruleNames, stop) {
      ruleNames = ruleNames || null;
      stop = stop || null;
      let p = this;
      let s = "[";
      while (p !== null && p !== stop) {
        if (ruleNames === null) {
          if (!p.isEmpty()) {
            s += p.invokingState;
          }
        } else {
          const ri = p.ruleIndex;
          const ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : "" + ri;
          s += ruleName;
        }
        if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
          s += " ";
        }
        p = p.parentCtx;
      }
      s += "]";
      return s;
    }
  };
  module2.exports = RuleContext;
});

// node_modules/antlr4/src/antlr4/PredictionContext.js
var require_PredictionContext2 = __commonJS((exports, module2) => {
  var RuleContext = require_RuleContext2();
  var {Hash: Hash2, Map: Map2, equalArrays} = require_Utils2();
  var PredictionContext = class {
    constructor(cachedHashCode) {
      this.cachedHashCode = cachedHashCode;
    }
    isEmpty() {
      return this === PredictionContext.EMPTY;
    }
    hasEmptyPath() {
      return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
    }
    hashCode() {
      return this.cachedHashCode;
    }
    updateHashCode(hash) {
      hash.update(this.cachedHashCode);
    }
  };
  PredictionContext.EMPTY = null;
  PredictionContext.EMPTY_RETURN_STATE = 2147483647;
  PredictionContext.globalNodeCount = 1;
  PredictionContext.id = PredictionContext.globalNodeCount;
  var PredictionContextCache = class {
    constructor() {
      this.cache = new Map2();
    }
    add(ctx) {
      if (ctx === PredictionContext.EMPTY) {
        return PredictionContext.EMPTY;
      }
      const existing = this.cache.get(ctx) || null;
      if (existing !== null) {
        return existing;
      }
      this.cache.put(ctx, ctx);
      return ctx;
    }
    get(ctx) {
      return this.cache.get(ctx) || null;
    }
    get length() {
      return this.cache.length;
    }
  };
  var SingletonPredictionContext = class extends PredictionContext {
    constructor(parent, returnState) {
      let hashCode = 0;
      const hash = new Hash2();
      if (parent !== null) {
        hash.update(parent, returnState);
      } else {
        hash.update(1);
      }
      hashCode = hash.finish();
      super(hashCode);
      this.parentCtx = parent;
      this.returnState = returnState;
    }
    getParent(index) {
      return this.parentCtx;
    }
    getReturnState(index) {
      return this.returnState;
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof SingletonPredictionContext)) {
        return false;
      } else if (this.hashCode() !== other.hashCode()) {
        return false;
      } else {
        if (this.returnState !== other.returnState)
          return false;
        else if (this.parentCtx == null)
          return other.parentCtx == null;
        else
          return this.parentCtx.equals(other.parentCtx);
      }
    }
    toString() {
      const up = this.parentCtx === null ? "" : this.parentCtx.toString();
      if (up.length === 0) {
        if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
          return "$";
        } else {
          return "" + this.returnState;
        }
      } else {
        return "" + this.returnState + " " + up;
      }
    }
    get length() {
      return 1;
    }
    static create(parent, returnState) {
      if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
        return PredictionContext.EMPTY;
      } else {
        return new SingletonPredictionContext(parent, returnState);
      }
    }
  };
  var EmptyPredictionContext = class extends SingletonPredictionContext {
    constructor() {
      super(null, PredictionContext.EMPTY_RETURN_STATE);
    }
    isEmpty() {
      return true;
    }
    getParent(index) {
      return null;
    }
    getReturnState(index) {
      return this.returnState;
    }
    equals(other) {
      return this === other;
    }
    toString() {
      return "$";
    }
  };
  PredictionContext.EMPTY = new EmptyPredictionContext();
  var ArrayPredictionContext = class extends PredictionContext {
    constructor(parents, returnStates) {
      const h = new Hash2();
      h.update(parents, returnStates);
      const hashCode = h.finish();
      super(hashCode);
      this.parents = parents;
      this.returnStates = returnStates;
      return this;
    }
    isEmpty() {
      return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
    }
    getParent(index) {
      return this.parents[index];
    }
    getReturnState(index) {
      return this.returnStates[index];
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof ArrayPredictionContext)) {
        return false;
      } else if (this.hashCode() !== other.hashCode()) {
        return false;
      } else {
        return equalArrays(this.returnStates, other.returnStates) && equalArrays(this.parents, other.parents);
      }
    }
    toString() {
      if (this.isEmpty()) {
        return "[]";
      } else {
        let s = "[";
        for (let i = 0; i < this.returnStates.length; i++) {
          if (i > 0) {
            s = s + ", ";
          }
          if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
            s = s + "$";
            continue;
          }
          s = s + this.returnStates[i];
          if (this.parents[i] !== null) {
            s = s + " " + this.parents[i];
          } else {
            s = s + "null";
          }
        }
        return s + "]";
      }
    }
    get length() {
      return this.returnStates.length;
    }
  };
  function predictionContextFromRuleContext(atn, outerContext) {
    if (outerContext === void 0 || outerContext === null) {
      outerContext = RuleContext.EMPTY;
    }
    if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
      return PredictionContext.EMPTY;
    }
    const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
    const state = atn.states[outerContext.invokingState];
    const transition = state.transitions[0];
    return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
  }
  function merge(a, b, rootIsWildcard, mergeCache) {
    if (a === b) {
      return a;
    }
    if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
      return mergeSingletons(a, b, rootIsWildcard, mergeCache);
    }
    if (rootIsWildcard) {
      if (a instanceof EmptyPredictionContext) {
        return a;
      }
      if (b instanceof EmptyPredictionContext) {
        return b;
      }
    }
    if (a instanceof SingletonPredictionContext) {
      a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
    }
    if (b instanceof SingletonPredictionContext) {
      b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
    }
    return mergeArrays(a, b, rootIsWildcard, mergeCache);
  }
  function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
    if (mergeCache !== null) {
      let previous = mergeCache.get(a, b);
      if (previous !== null) {
        return previous;
      }
      previous = mergeCache.get(b, a);
      if (previous !== null) {
        return previous;
      }
    }
    const rootMerge = mergeRoot(a, b, rootIsWildcard);
    if (rootMerge !== null) {
      if (mergeCache !== null) {
        mergeCache.set(a, b, rootMerge);
      }
      return rootMerge;
    }
    if (a.returnState === b.returnState) {
      const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
      if (parent === a.parentCtx) {
        return a;
      }
      if (parent === b.parentCtx) {
        return b;
      }
      const spc = SingletonPredictionContext.create(parent, a.returnState);
      if (mergeCache !== null) {
        mergeCache.set(a, b, spc);
      }
      return spc;
    } else {
      let singleParent = null;
      if (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {
        singleParent = a.parentCtx;
      }
      if (singleParent !== null) {
        const payloads2 = [a.returnState, b.returnState];
        if (a.returnState > b.returnState) {
          payloads2[0] = b.returnState;
          payloads2[1] = a.returnState;
        }
        const parents2 = [singleParent, singleParent];
        const apc = new ArrayPredictionContext(parents2, payloads2);
        if (mergeCache !== null) {
          mergeCache.set(a, b, apc);
        }
        return apc;
      }
      const payloads = [a.returnState, b.returnState];
      let parents = [a.parentCtx, b.parentCtx];
      if (a.returnState > b.returnState) {
        payloads[0] = b.returnState;
        payloads[1] = a.returnState;
        parents = [b.parentCtx, a.parentCtx];
      }
      const a_ = new ArrayPredictionContext(parents, payloads);
      if (mergeCache !== null) {
        mergeCache.set(a, b, a_);
      }
      return a_;
    }
  }
  function mergeRoot(a, b, rootIsWildcard) {
    if (rootIsWildcard) {
      if (a === PredictionContext.EMPTY) {
        return PredictionContext.EMPTY;
      }
      if (b === PredictionContext.EMPTY) {
        return PredictionContext.EMPTY;
      }
    } else {
      if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
        return PredictionContext.EMPTY;
      } else if (a === PredictionContext.EMPTY) {
        const payloads = [
          b.returnState,
          PredictionContext.EMPTY_RETURN_STATE
        ];
        const parents = [b.parentCtx, null];
        return new ArrayPredictionContext(parents, payloads);
      } else if (b === PredictionContext.EMPTY) {
        const payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];
        const parents = [a.parentCtx, null];
        return new ArrayPredictionContext(parents, payloads);
      }
    }
    return null;
  }
  function mergeArrays(a, b, rootIsWildcard, mergeCache) {
    if (mergeCache !== null) {
      let previous = mergeCache.get(a, b);
      if (previous !== null) {
        return previous;
      }
      previous = mergeCache.get(b, a);
      if (previous !== null) {
        return previous;
      }
    }
    let i = 0;
    let j = 0;
    let k = 0;
    let mergedReturnStates = [];
    let mergedParents = [];
    while (i < a.returnStates.length && j < b.returnStates.length) {
      const a_parent = a.parents[i];
      const b_parent = b.parents[j];
      if (a.returnStates[i] === b.returnStates[j]) {
        const payload = a.returnStates[i];
        const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;
        const ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent;
        if (bothDollars || ax_ax) {
          mergedParents[k] = a_parent;
          mergedReturnStates[k] = payload;
        } else {
          mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
          mergedReturnStates[k] = payload;
        }
        i += 1;
        j += 1;
      } else if (a.returnStates[i] < b.returnStates[j]) {
        mergedParents[k] = a_parent;
        mergedReturnStates[k] = a.returnStates[i];
        i += 1;
      } else {
        mergedParents[k] = b_parent;
        mergedReturnStates[k] = b.returnStates[j];
        j += 1;
      }
      k += 1;
    }
    if (i < a.returnStates.length) {
      for (let p = i; p < a.returnStates.length; p++) {
        mergedParents[k] = a.parents[p];
        mergedReturnStates[k] = a.returnStates[p];
        k += 1;
      }
    } else {
      for (let p = j; p < b.returnStates.length; p++) {
        mergedParents[k] = b.parents[p];
        mergedReturnStates[k] = b.returnStates[p];
        k += 1;
      }
    }
    if (k < mergedParents.length) {
      if (k === 1) {
        const a_ = SingletonPredictionContext.create(mergedParents[0], mergedReturnStates[0]);
        if (mergeCache !== null) {
          mergeCache.set(a, b, a_);
        }
        return a_;
      }
      mergedParents = mergedParents.slice(0, k);
      mergedReturnStates = mergedReturnStates.slice(0, k);
    }
    const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);
    if (M === a) {
      if (mergeCache !== null) {
        mergeCache.set(a, b, a);
      }
      return a;
    }
    if (M === b) {
      if (mergeCache !== null) {
        mergeCache.set(a, b, b);
      }
      return b;
    }
    combineCommonParents(mergedParents);
    if (mergeCache !== null) {
      mergeCache.set(a, b, M);
    }
    return M;
  }
  function combineCommonParents(parents) {
    const uniqueParents = new Map2();
    for (let p = 0; p < parents.length; p++) {
      const parent = parents[p];
      if (!uniqueParents.containsKey(parent)) {
        uniqueParents.put(parent, parent);
      }
    }
    for (let q = 0; q < parents.length; q++) {
      parents[q] = uniqueParents.get(parents[q]);
    }
  }
  function getCachedPredictionContext(context, contextCache, visited) {
    if (context.isEmpty()) {
      return context;
    }
    let existing = visited.get(context) || null;
    if (existing !== null) {
      return existing;
    }
    existing = contextCache.get(context);
    if (existing !== null) {
      visited.put(context, existing);
      return existing;
    }
    let changed = false;
    let parents = [];
    for (let i = 0; i < parents.length; i++) {
      const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
      if (changed || parent !== context.getParent(i)) {
        if (!changed) {
          parents = [];
          for (let j = 0; j < context.length; j++) {
            parents[j] = context.getParent(j);
          }
          changed = true;
        }
        parents[i] = parent;
      }
    }
    if (!changed) {
      contextCache.add(context);
      visited.put(context, context);
      return context;
    }
    let updated = null;
    if (parents.length === 0) {
      updated = PredictionContext.EMPTY;
    } else if (parents.length === 1) {
      updated = SingletonPredictionContext.create(parents[0], context.getReturnState(0));
    } else {
      updated = new ArrayPredictionContext(parents, context.returnStates);
    }
    contextCache.add(updated);
    visited.put(updated, updated);
    visited.put(context, updated);
    return updated;
  }
  module2.exports = {
    merge,
    PredictionContext,
    PredictionContextCache,
    SingletonPredictionContext,
    predictionContextFromRuleContext,
    getCachedPredictionContext
  };
});

// node_modules/antlr4/src/antlr4/LL1Analyzer.js
var require_LL1Analyzer2 = __commonJS((exports, module2) => {
  var {Set: Set2, BitSet} = require_Utils2();
  var {Token: Token2} = require_Token2();
  var {ATNConfig} = require_ATNConfig2();
  var {IntervalSet} = require_IntervalSet2();
  var {RuleStopState} = require_ATNState2();
  var {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = require_Transition2();
  var {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = require_PredictionContext2();
  var LL1Analyzer = class {
    constructor(atn) {
      this.atn = atn;
    }
    getDecisionLookahead(s) {
      if (s === null) {
        return null;
      }
      const count = s.transitions.length;
      const look = [];
      for (let alt = 0; alt < count; alt++) {
        look[alt] = new IntervalSet();
        const lookBusy = new Set2();
        const seeThruPreds = false;
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY, look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        if (look[alt].length === 0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
          look[alt] = null;
        }
      }
      return look;
    }
    LOOK(s, stopState, ctx) {
      const r = new IntervalSet();
      const seeThruPreds = true;
      ctx = ctx || null;
      const lookContext = ctx !== null ? predictionContextFromRuleContext(s.atn, ctx) : null;
      this._LOOK(s, stopState, lookContext, r, new Set2(), new BitSet(), seeThruPreds, true);
      return r;
    }
    _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
      const c = new ATNConfig({state: s, alt: 0, context: ctx}, null);
      if (lookBusy.contains(c)) {
        return;
      }
      lookBusy.add(c);
      if (s === stopState) {
        if (ctx === null) {
          look.addOne(Token2.EPSILON);
          return;
        } else if (ctx.isEmpty() && addEOF) {
          look.addOne(Token2.EOF);
          return;
        }
      }
      if (s instanceof RuleStopState) {
        if (ctx === null) {
          look.addOne(Token2.EPSILON);
          return;
        } else if (ctx.isEmpty() && addEOF) {
          look.addOne(Token2.EOF);
          return;
        }
        if (ctx !== PredictionContext.EMPTY) {
          const removed = calledRuleStack.contains(s.ruleIndex);
          try {
            calledRuleStack.remove(s.ruleIndex);
            for (let i = 0; i < ctx.length; i++) {
              const returnState = this.atn.states[ctx.getReturnState(i)];
              this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            }
          } finally {
            if (removed) {
              calledRuleStack.add(s.ruleIndex);
            }
          }
          return;
        }
      }
      for (let j = 0; j < s.transitions.length; j++) {
        const t = s.transitions[j];
        if (t.constructor === RuleTransition) {
          if (calledRuleStack.contains(t.target.ruleIndex)) {
            continue;
          }
          const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
          try {
            calledRuleStack.add(t.target.ruleIndex);
            this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          } finally {
            calledRuleStack.remove(t.target.ruleIndex);
          }
        } else if (t instanceof AbstractPredicateTransition) {
          if (seeThruPreds) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
          } else {
            look.addOne(LL1Analyzer.HIT_PRED);
          }
        } else if (t.isEpsilon) {
          this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
          look.addRange(Token2.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
        } else {
          let set = t.label;
          if (set !== null) {
            if (t instanceof NotSetTransition) {
              set = set.complement(Token2.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
            }
            look.addSet(set);
          }
        }
      }
    }
  };
  LL1Analyzer.HIT_PRED = Token2.INVALID_TYPE;
  module2.exports = LL1Analyzer;
});

// node_modules/antlr4/src/antlr4/atn/ATN.js
var require_ATN2 = __commonJS((exports, module2) => {
  var LL1Analyzer = require_LL1Analyzer2();
  var {IntervalSet} = require_IntervalSet2();
  var {Token: Token2} = require_Token2();
  var ATN2 = class {
    constructor(grammarType, maxTokenType) {
      this.grammarType = grammarType;
      this.maxTokenType = maxTokenType;
      this.states = [];
      this.decisionToState = [];
      this.ruleToStartState = [];
      this.ruleToStopState = null;
      this.modeNameToStartState = {};
      this.ruleToTokenType = null;
      this.lexerActions = null;
      this.modeToStartState = [];
    }
    nextTokensInContext(s, ctx) {
      const anal = new LL1Analyzer(this);
      return anal.LOOK(s, null, ctx);
    }
    nextTokensNoContext(s) {
      if (s.nextTokenWithinRule !== null) {
        return s.nextTokenWithinRule;
      }
      s.nextTokenWithinRule = this.nextTokensInContext(s, null);
      s.nextTokenWithinRule.readOnly = true;
      return s.nextTokenWithinRule;
    }
    nextTokens(s, ctx) {
      if (ctx === void 0) {
        return this.nextTokensNoContext(s);
      } else {
        return this.nextTokensInContext(s, ctx);
      }
    }
    addState(state) {
      if (state !== null) {
        state.atn = this;
        state.stateNumber = this.states.length;
      }
      this.states.push(state);
    }
    removeState(state) {
      this.states[state.stateNumber] = null;
    }
    defineDecisionState(s) {
      this.decisionToState.push(s);
      s.decision = this.decisionToState.length - 1;
      return s.decision;
    }
    getDecisionState(decision) {
      if (this.decisionToState.length === 0) {
        return null;
      } else {
        return this.decisionToState[decision];
      }
    }
    getExpectedTokens(stateNumber, ctx) {
      if (stateNumber < 0 || stateNumber >= this.states.length) {
        throw "Invalid state number.";
      }
      const s = this.states[stateNumber];
      let following = this.nextTokens(s);
      if (!following.contains(Token2.EPSILON)) {
        return following;
      }
      const expected = new IntervalSet();
      expected.addSet(following);
      expected.removeOne(Token2.EPSILON);
      while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token2.EPSILON)) {
        const invokingState = this.states[ctx.invokingState];
        const rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token2.EPSILON);
        ctx = ctx.parentCtx;
      }
      if (following.contains(Token2.EPSILON)) {
        expected.addOne(Token2.EOF);
      }
      return expected;
    }
  };
  ATN2.INVALID_ALT_NUMBER = 0;
  module2.exports = ATN2;
});

// node_modules/antlr4/src/antlr4/atn/ATNType.js
var require_ATNType = __commonJS((exports, module2) => {
  module2.exports = {
    LEXER: 0,
    PARSER: 1
  };
});

// node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js
var require_ATNDeserializationOptions2 = __commonJS((exports, module2) => {
  var ATNDeserializationOptions = class {
    constructor(copyFrom) {
      if (copyFrom === void 0) {
        copyFrom = null;
      }
      this.readOnly = false;
      this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;
      this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;
    }
  };
  ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
  ATNDeserializationOptions.defaultOptions.readOnly = true;
  module2.exports = ATNDeserializationOptions;
});

// node_modules/antlr4/src/antlr4/atn/LexerAction.js
var require_LexerAction = __commonJS((exports, module2) => {
  var LexerActionType = {
    CHANNEL: 0,
    CUSTOM: 1,
    MODE: 2,
    MORE: 3,
    POP_MODE: 4,
    PUSH_MODE: 5,
    SKIP: 6,
    TYPE: 7
  };
  var LexerAction = class {
    constructor(action) {
      this.actionType = action;
      this.isPositionDependent = false;
    }
    hashCode() {
      const hash = new Hash();
      this.updateHashCode(hash);
      return hash.finish();
    }
    updateHashCode(hash) {
      hash.update(this.actionType);
    }
    equals(other) {
      return this === other;
    }
  };
  var LexerSkipAction = class extends LexerAction {
    constructor() {
      super(LexerActionType.SKIP);
    }
    execute(lexer) {
      lexer.skip();
    }
    toString() {
      return "skip";
    }
  };
  LexerSkipAction.INSTANCE = new LexerSkipAction();
  var LexerTypeAction = class extends LexerAction {
    constructor(type) {
      super(LexerActionType.TYPE);
      this.type = type;
    }
    execute(lexer) {
      lexer.type = this.type;
    }
    updateHashCode(hash) {
      hash.update(this.actionType, this.type);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerTypeAction)) {
        return false;
      } else {
        return this.type === other.type;
      }
    }
    toString() {
      return "type(" + this.type + ")";
    }
  };
  var LexerPushModeAction = class extends LexerAction {
    constructor(mode) {
      super(LexerActionType.PUSH_MODE);
      this.mode = mode;
    }
    execute(lexer) {
      lexer.pushMode(this.mode);
    }
    updateHashCode(hash) {
      hash.update(this.actionType, this.mode);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerPushModeAction)) {
        return false;
      } else {
        return this.mode === other.mode;
      }
    }
    toString() {
      return "pushMode(" + this.mode + ")";
    }
  };
  var LexerPopModeAction = class extends LexerAction {
    constructor() {
      super(LexerActionType.POP_MODE);
    }
    execute(lexer) {
      lexer.popMode();
    }
    toString() {
      return "popMode";
    }
  };
  LexerPopModeAction.INSTANCE = new LexerPopModeAction();
  var LexerMoreAction = class extends LexerAction {
    constructor() {
      super(LexerActionType.MORE);
    }
    execute(lexer) {
      lexer.more();
    }
    toString() {
      return "more";
    }
  };
  LexerMoreAction.INSTANCE = new LexerMoreAction();
  var LexerModeAction = class extends LexerAction {
    constructor(mode) {
      super(LexerActionType.MODE);
      this.mode = mode;
    }
    execute(lexer) {
      lexer.mode(this.mode);
    }
    updateHashCode(hash) {
      hash.update(this.actionType, this.mode);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerModeAction)) {
        return false;
      } else {
        return this.mode === other.mode;
      }
    }
    toString() {
      return "mode(" + this.mode + ")";
    }
  };
  var LexerCustomAction = class extends LexerAction {
    constructor(ruleIndex, actionIndex) {
      super(LexerActionType.CUSTOM);
      this.ruleIndex = ruleIndex;
      this.actionIndex = actionIndex;
      this.isPositionDependent = true;
    }
    execute(lexer) {
      lexer.action(null, this.ruleIndex, this.actionIndex);
    }
    updateHashCode(hash) {
      hash.update(this.actionType, this.ruleIndex, this.actionIndex);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerCustomAction)) {
        return false;
      } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
      }
    }
  };
  var LexerChannelAction = class extends LexerAction {
    constructor(channel) {
      super(LexerActionType.CHANNEL);
      this.channel = channel;
    }
    execute(lexer) {
      lexer._channel = this.channel;
    }
    updateHashCode(hash) {
      hash.update(this.actionType, this.channel);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerChannelAction)) {
        return false;
      } else {
        return this.channel === other.channel;
      }
    }
    toString() {
      return "channel(" + this.channel + ")";
    }
  };
  var LexerIndexedCustomAction = class extends LexerAction {
    constructor(offset, action) {
      super(action.actionType);
      this.offset = offset;
      this.action = action;
      this.isPositionDependent = true;
    }
    execute(lexer) {
      this.action.execute(lexer);
    }
    updateHashCode(hash) {
      hash.update(this.actionType, this.offset, this.action);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerIndexedCustomAction)) {
        return false;
      } else {
        return this.offset === other.offset && this.action === other.action;
      }
    }
  };
  module2.exports = {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerIndexedCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction
  };
});

// node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js
var require_ATNDeserializer2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var ATN2 = require_ATN2();
  var ATNType = require_ATNType();
  var {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
  } = require_ATNState2();
  var {
    Transition,
    AtomTransition: AtomTransition2,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    RangeTransition,
    ActionTransition,
    EpsilonTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition
  } = require_Transition2();
  var {IntervalSet} = require_IntervalSet2();
  var ATNDeserializationOptions = require_ATNDeserializationOptions2();
  var {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction
  } = require_LexerAction();
  var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";
  var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";
  var SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP];
  var SERIALIZED_VERSION = 3;
  var SERIALIZED_UUID = ADDED_UNICODE_SMP;
  function initArray(length, value) {
    const tmp = [];
    tmp[length - 1] = value;
    return tmp.map(function(i) {
      return value;
    });
  }
  var ATNDeserializer3 = class {
    constructor(options) {
      if (options === void 0 || options === null) {
        options = ATNDeserializationOptions.defaultOptions;
      }
      this.deserializationOptions = options;
      this.stateFactories = null;
      this.actionFactories = null;
    }
    isFeatureSupported(feature, actualUuid) {
      const idx1 = SUPPORTED_UUIDS.indexOf(feature);
      if (idx1 < 0) {
        return false;
      }
      const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
      return idx2 >= idx1;
    }
    deserialize(data) {
      this.reset(data);
      this.checkVersion();
      this.checkUUID();
      const atn = this.readATN();
      this.readStates(atn);
      this.readRules(atn);
      this.readModes(atn);
      const sets = [];
      this.readSets(atn, sets, this.readInt.bind(this));
      if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
      }
      this.readEdges(atn, sets);
      this.readDecisions(atn);
      this.readLexerActions(atn);
      this.markPrecedenceDecisions(atn);
      this.verifyATN(atn);
      if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {
        this.generateRuleBypassTransitions(atn);
        this.verifyATN(atn);
      }
      return atn;
    }
    reset(data) {
      const adjust = function(c) {
        const v = c.charCodeAt(0);
        return v > 1 ? v - 2 : v + 65534;
      };
      const temp = data.split("").map(adjust);
      temp[0] = data.charCodeAt(0);
      this.data = temp;
      this.pos = 0;
    }
    checkVersion() {
      const version = this.readInt();
      if (version !== SERIALIZED_VERSION) {
        throw "Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").";
      }
    }
    checkUUID() {
      const uuid = this.readUUID();
      if (SUPPORTED_UUIDS.indexOf(uuid) < 0) {
        throw "Could not deserialize ATN with UUID: " + uuid + " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID;
      }
      this.uuid = uuid;
    }
    readATN() {
      const grammarType = this.readInt();
      const maxTokenType = this.readInt();
      return new ATN2(grammarType, maxTokenType);
    }
    readStates(atn) {
      let j, pair, stateNumber;
      const loopBackStateNumbers = [];
      const endStateNumbers = [];
      const nstates = this.readInt();
      for (let i = 0; i < nstates; i++) {
        const stype = this.readInt();
        if (stype === ATNState.INVALID_TYPE) {
          atn.addState(null);
          continue;
        }
        let ruleIndex = this.readInt();
        if (ruleIndex === 65535) {
          ruleIndex = -1;
        }
        const s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) {
          const loopBackStateNumber = this.readInt();
          loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if (s instanceof BlockStartState) {
          const endStateNumber = this.readInt();
          endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
      }
      for (j = 0; j < loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
      }
      for (j = 0; j < endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
      }
      let numNonGreedyStates = this.readInt();
      for (j = 0; j < numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
      }
      let numPrecedenceStates = this.readInt();
      for (j = 0; j < numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
      }
    }
    readRules(atn) {
      let i;
      const nrules = this.readInt();
      if (atn.grammarType === ATNType.LEXER) {
        atn.ruleToTokenType = initArray(nrules, 0);
      }
      atn.ruleToStartState = initArray(nrules, 0);
      for (i = 0; i < nrules; i++) {
        const s = this.readInt();
        atn.ruleToStartState[i] = atn.states[s];
        if (atn.grammarType === ATNType.LEXER) {
          let tokenType = this.readInt();
          if (tokenType === 65535) {
            tokenType = Token2.EOF;
          }
          atn.ruleToTokenType[i] = tokenType;
        }
      }
      atn.ruleToStopState = initArray(nrules, 0);
      for (i = 0; i < atn.states.length; i++) {
        const state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
          continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
      }
    }
    readModes(atn) {
      const nmodes = this.readInt();
      for (let i = 0; i < nmodes; i++) {
        let s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
      }
    }
    readSets(atn, sets, readUnicode) {
      const m = this.readInt();
      for (let i = 0; i < m; i++) {
        const iset = new IntervalSet();
        sets.push(iset);
        const n = this.readInt();
        const containsEof = this.readInt();
        if (containsEof !== 0) {
          iset.addOne(-1);
        }
        for (let j = 0; j < n; j++) {
          const i1 = readUnicode();
          const i2 = readUnicode();
          iset.addRange(i1, i2);
        }
      }
    }
    readEdges(atn, sets) {
      let i, j, state, trans, target;
      const nedges = this.readInt();
      for (i = 0; i < nedges; i++) {
        const src = this.readInt();
        const trg = this.readInt();
        const ttype = this.readInt();
        const arg1 = this.readInt();
        const arg2 = this.readInt();
        const arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        const srcState = atn.states[src];
        srcState.addTransition(trans);
      }
      for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];
        for (j = 0; j < state.transitions.length; j++) {
          const t = state.transitions[j];
          if (!(t instanceof RuleTransition)) {
            continue;
          }
          let outermostPrecedenceReturn = -1;
          if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
            if (t.precedence === 0) {
              outermostPrecedenceReturn = t.target.ruleIndex;
            }
          }
          trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
          atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
      }
      for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
          if (state.endState === null) {
            throw "IllegalState";
          }
          if (state.endState.startState !== null) {
            throw "IllegalState";
          }
          state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
          for (j = 0; j < state.transitions.length; j++) {
            target = state.transitions[j].target;
            if (target instanceof PlusBlockStartState) {
              target.loopBackState = state;
            }
          }
        } else if (state instanceof StarLoopbackState) {
          for (j = 0; j < state.transitions.length; j++) {
            target = state.transitions[j].target;
            if (target instanceof StarLoopEntryState) {
              target.loopBackState = state;
            }
          }
        }
      }
    }
    readDecisions(atn) {
      const ndecisions = this.readInt();
      for (let i = 0; i < ndecisions; i++) {
        const s = this.readInt();
        const decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
      }
    }
    readLexerActions(atn) {
      if (atn.grammarType === ATNType.LEXER) {
        const count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (let i = 0; i < count; i++) {
          const actionType = this.readInt();
          let data1 = this.readInt();
          if (data1 === 65535) {
            data1 = -1;
          }
          let data2 = this.readInt();
          if (data2 === 65535) {
            data2 = -1;
          }
          atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);
        }
      }
    }
    generateRuleBypassTransitions(atn) {
      let i;
      const count = atn.ruleToStartState.length;
      for (i = 0; i < count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
      }
      for (i = 0; i < count; i++) {
        this.generateRuleBypassTransition(atn, i);
      }
    }
    generateRuleBypassTransition(atn, idx) {
      let i, state;
      const bypassStart = new BasicBlockStartState();
      bypassStart.ruleIndex = idx;
      atn.addState(bypassStart);
      const bypassStop = new BlockEndState();
      bypassStop.ruleIndex = idx;
      atn.addState(bypassStop);
      bypassStart.endState = bypassStop;
      atn.defineDecisionState(bypassStart);
      bypassStop.startState = bypassStart;
      let excludeTransition = null;
      let endState = null;
      if (atn.ruleToStartState[idx].isPrecedenceRule) {
        endState = null;
        for (i = 0; i < atn.states.length; i++) {
          state = atn.states[i];
          if (this.stateIsEndStateFor(state, idx)) {
            endState = state;
            excludeTransition = state.loopBackState.transitions[0];
            break;
          }
        }
        if (excludeTransition === null) {
          throw "Couldn't identify final state of the precedence rule prefix section.";
        }
      } else {
        endState = atn.ruleToStopState[idx];
      }
      for (i = 0; i < atn.states.length; i++) {
        state = atn.states[i];
        for (let j = 0; j < state.transitions.length; j++) {
          const transition = state.transitions[j];
          if (transition === excludeTransition) {
            continue;
          }
          if (transition.target === endState) {
            transition.target = bypassStop;
          }
        }
      }
      const ruleToStartState = atn.ruleToStartState[idx];
      const count = ruleToStartState.transitions.length;
      while (count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count - 1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
      }
      atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
      bypassStop.addTransition(new EpsilonTransition(endState));
      const matchState = new BasicState();
      atn.addState(matchState);
      matchState.addTransition(new AtomTransition2(bypassStop, atn.ruleToTokenType[idx]));
      bypassStart.addTransition(new EpsilonTransition(matchState));
    }
    stateIsEndStateFor(state, idx) {
      if (state.ruleIndex !== idx) {
        return null;
      }
      if (!(state instanceof StarLoopEntryState)) {
        return null;
      }
      const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
      if (!(maybeLoopEndState instanceof LoopEndState)) {
        return null;
      }
      if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {
        return state;
      } else {
        return null;
      }
    }
    markPrecedenceDecisions(atn) {
      for (let i = 0; i < atn.states.length; i++) {
        const state = atn.states[i];
        if (!(state instanceof StarLoopEntryState)) {
          continue;
        }
        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
          const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
          if (maybeLoopEndState instanceof LoopEndState) {
            if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {
              state.isPrecedenceDecision = true;
            }
          }
        }
      }
    }
    verifyATN(atn) {
      if (!this.deserializationOptions.verifyATN) {
        return;
      }
      for (let i = 0; i < atn.states.length; i++) {
        const state = atn.states[i];
        if (state === null) {
          continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
          this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof StarLoopEntryState) {
          this.checkCondition(state.loopBackState !== null);
          this.checkCondition(state.transitions.length === 2);
          if (state.transitions[0].target instanceof StarBlockStartState) {
            this.checkCondition(state.transitions[1].target instanceof LoopEndState);
            this.checkCondition(!state.nonGreedy);
          } else if (state.transitions[0].target instanceof LoopEndState) {
            this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
            this.checkCondition(state.nonGreedy);
          } else {
            throw "IllegalState";
          }
        } else if (state instanceof StarLoopbackState) {
          this.checkCondition(state.transitions.length === 1);
          this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
          this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
          this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
          this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
          this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
          this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
          this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);
        }
      }
    }
    checkCondition(condition, message) {
      if (!condition) {
        if (message === void 0 || message === null) {
          message = "IllegalState";
        }
        throw message;
      }
    }
    readInt() {
      return this.data[this.pos++];
    }
    readInt32() {
      const low = this.readInt();
      const high = this.readInt();
      return low | high << 16;
    }
    readLong() {
      const low = this.readInt32();
      const high = this.readInt32();
      return low & 4294967295 | high << 32;
    }
    readUUID() {
      const bb = [];
      for (let i = 7; i >= 0; i--) {
        const int = this.readInt();
        bb[2 * i + 1] = int & 255;
        bb[2 * i] = int >> 8 & 255;
      }
      return byteToHex[bb[0]] + byteToHex[bb[1]] + byteToHex[bb[2]] + byteToHex[bb[3]] + "-" + byteToHex[bb[4]] + byteToHex[bb[5]] + "-" + byteToHex[bb[6]] + byteToHex[bb[7]] + "-" + byteToHex[bb[8]] + byteToHex[bb[9]] + "-" + byteToHex[bb[10]] + byteToHex[bb[11]] + byteToHex[bb[12]] + byteToHex[bb[13]] + byteToHex[bb[14]] + byteToHex[bb[15]];
    }
    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
      const target = atn.states[trg];
      switch (type) {
        case Transition.EPSILON:
          return new EpsilonTransition(target);
        case Transition.RANGE:
          return arg3 !== 0 ? new RangeTransition(target, Token2.EOF, arg2) : new RangeTransition(target, arg1, arg2);
        case Transition.RULE:
          return new RuleTransition(atn.states[arg1], arg2, arg3, target);
        case Transition.PREDICATE:
          return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.PRECEDENCE:
          return new PrecedencePredicateTransition(target, arg1);
        case Transition.ATOM:
          return arg3 !== 0 ? new AtomTransition2(target, Token2.EOF) : new AtomTransition2(target, arg1);
        case Transition.ACTION:
          return new ActionTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.SET:
          return new SetTransition(target, sets[arg1]);
        case Transition.NOT_SET:
          return new NotSetTransition(target, sets[arg1]);
        case Transition.WILDCARD:
          return new WildcardTransition(target);
        default:
          throw "The specified transition type: " + type + " is not valid.";
      }
    }
    stateFactory(type, ruleIndex) {
      if (this.stateFactories === null) {
        const sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = () => new BasicState();
        sf[ATNState.RULE_START] = () => new RuleStartState();
        sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();
        sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();
        sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();
        sf[ATNState.TOKEN_START] = () => new TokensStartState();
        sf[ATNState.RULE_STOP] = () => new RuleStopState();
        sf[ATNState.BLOCK_END] = () => new BlockEndState();
        sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();
        sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();
        sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();
        sf[ATNState.LOOP_END] = () => new LoopEndState();
        this.stateFactories = sf;
      }
      if (type > this.stateFactories.length || this.stateFactories[type] === null) {
        throw "The specified state type " + type + " is not valid.";
      } else {
        const s = this.stateFactories[type]();
        if (s !== null) {
          s.ruleIndex = ruleIndex;
          return s;
        }
      }
    }
    lexerActionFactory(type, data1, data2) {
      if (this.actionFactories === null) {
        const af = [];
        af[LexerActionType.CHANNEL] = (data12, data22) => new LexerChannelAction(data12);
        af[LexerActionType.CUSTOM] = (data12, data22) => new LexerCustomAction(data12, data22);
        af[LexerActionType.MODE] = (data12, data22) => new LexerModeAction(data12);
        af[LexerActionType.MORE] = (data12, data22) => LexerMoreAction.INSTANCE;
        af[LexerActionType.POP_MODE] = (data12, data22) => LexerPopModeAction.INSTANCE;
        af[LexerActionType.PUSH_MODE] = (data12, data22) => new LexerPushModeAction(data12);
        af[LexerActionType.SKIP] = (data12, data22) => LexerSkipAction.INSTANCE;
        af[LexerActionType.TYPE] = (data12, data22) => new LexerTypeAction(data12);
        this.actionFactories = af;
      }
      if (type > this.actionFactories.length || this.actionFactories[type] === null) {
        throw "The specified lexer action type " + type + " is not valid.";
      } else {
        return this.actionFactories[type](data1, data2);
      }
    }
  };
  function createByteToHex() {
    const bth = [];
    for (let i = 0; i < 256; i++) {
      bth[i] = (i + 256).toString(16).substr(1).toUpperCase();
    }
    return bth;
  }
  var byteToHex = createByteToHex();
  module2.exports = ATNDeserializer3;
});

// node_modules/antlr4/src/antlr4/error/ErrorListener.js
var require_ErrorListener = __commonJS((exports, module2) => {
  var ErrorListener2 = class {
    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
    }
  };
  var ConsoleErrorListener = class extends ErrorListener2 {
    constructor() {
      super();
    }
    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
      console.error("line " + line + ":" + column + " " + msg);
    }
  };
  ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();
  var ProxyErrorListener = class extends ErrorListener2 {
    constructor(delegates) {
      super();
      if (delegates === null) {
        throw "delegates";
      }
      this.delegates = delegates;
      return this;
    }
    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
      this.delegates.map((d) => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
      this.delegates.map((d) => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
      this.delegates.map((d) => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
      this.delegates.map((d) => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));
    }
  };
  module2.exports = {ErrorListener: ErrorListener2, ConsoleErrorListener, ProxyErrorListener};
});

// node_modules/antlr4/src/antlr4/Recognizer.js
var require_Recognizer2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var {ConsoleErrorListener} = require_ErrorListener();
  var {ProxyErrorListener} = require_ErrorListener();
  var Recognizer = class {
    constructor() {
      this._listeners = [ConsoleErrorListener.INSTANCE];
      this._interp = null;
      this._stateNumber = -1;
    }
    checkVersion(toolVersion) {
      const runtimeVersion = "4.9.2";
      if (runtimeVersion !== toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: " + runtimeVersion + "!=" + toolVersion);
      }
    }
    addErrorListener(listener) {
      this._listeners.push(listener);
    }
    removeErrorListeners() {
      this._listeners = [];
    }
    getTokenTypeMap() {
      const tokenNames = this.getTokenNames();
      if (tokenNames === null) {
        throw "The current recognizer does not provide a list of token names.";
      }
      let result = this.tokenTypeMapCache[tokenNames];
      if (result === void 0) {
        result = tokenNames.reduce(function(o, k, i) {
          o[k] = i;
        });
        result.EOF = Token2.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
      }
      return result;
    }
    getRuleIndexMap() {
      const ruleNames = this.ruleNames;
      if (ruleNames === null) {
        throw "The current recognizer does not provide a list of rule names.";
      }
      let result = this.ruleIndexMapCache[ruleNames];
      if (result === void 0) {
        result = ruleNames.reduce(function(o, k, i) {
          o[k] = i;
        });
        this.ruleIndexMapCache[ruleNames] = result;
      }
      return result;
    }
    getTokenType(tokenName) {
      const ttype = this.getTokenTypeMap()[tokenName];
      if (ttype !== void 0) {
        return ttype;
      } else {
        return Token2.INVALID_TYPE;
      }
    }
    getErrorHeader(e) {
      const line = e.getOffendingToken().line;
      const column = e.getOffendingToken().column;
      return "line " + line + ":" + column;
    }
    getTokenErrorDisplay(t) {
      if (t === null) {
        return "<no token>";
      }
      let s = t.text;
      if (s === null) {
        if (t.type === Token2.EOF) {
          s = "<EOF>";
        } else {
          s = "<" + t.type + ">";
        }
      }
      s = s.replace("\n", "\\n").replace("\r", "\\r").replace("	", "\\t");
      return "'" + s + "'";
    }
    getErrorListenerDispatch() {
      return new ProxyErrorListener(this._listeners);
    }
    sempred(localctx, ruleIndex, actionIndex) {
      return true;
    }
    precpred(localctx, precedence) {
      return true;
    }
    get state() {
      return this._stateNumber;
    }
    set state(state) {
      this._stateNumber = state;
    }
  };
  Recognizer.tokenTypeMapCache = {};
  Recognizer.ruleIndexMapCache = {};
  module2.exports = Recognizer;
});

// node_modules/antlr4/src/antlr4/CommonTokenFactory.js
var require_CommonTokenFactory2 = __commonJS((exports, module2) => {
  var CommonToken = require_Token2().CommonToken;
  var TokenFactory = class {
  };
  var CommonTokenFactory = class extends TokenFactory {
    constructor(copyText) {
      super();
      this.copyText = copyText === void 0 ? false : copyText;
    }
    create(source, type, text, channel, start, stop, line, column) {
      const t = new CommonToken(source, type, channel, start, stop);
      t.line = line;
      t.column = column;
      if (text !== null) {
        t.text = text;
      } else if (this.copyText && source[1] !== null) {
        t.text = source[1].getText(start, stop);
      }
      return t;
    }
    createThin(type, text) {
      const t = new CommonToken(null, type);
      t.text = text;
      return t;
    }
  };
  CommonTokenFactory.DEFAULT = new CommonTokenFactory();
  module2.exports = CommonTokenFactory;
});

// node_modules/antlr4/src/antlr4/error/Errors.js
var require_Errors = __commonJS((exports, module2) => {
  var {PredicateTransition} = require_Transition2();
  var {Interval} = require_IntervalSet2().Interval;
  var RecognitionException2 = class extends Error {
    constructor(params) {
      super(params.message);
      if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException2);
      } else {
        var stack = new Error().stack;
      }
      this.message = params.message;
      this.recognizer = params.recognizer;
      this.input = params.input;
      this.ctx = params.ctx;
      this.offendingToken = null;
      this.offendingState = -1;
      if (this.recognizer !== null) {
        this.offendingState = this.recognizer.state;
      }
    }
    getExpectedTokens() {
      if (this.recognizer !== null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
      } else {
        return null;
      }
    }
    toString() {
      return this.message;
    }
  };
  var LexerNoViableAltException = class extends RecognitionException2 {
    constructor(lexer, input, startIndex, deadEndConfigs) {
      super({message: "", recognizer: lexer, input, ctx: null});
      this.startIndex = startIndex;
      this.deadEndConfigs = deadEndConfigs;
    }
    toString() {
      let symbol = "";
      if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText(new Interval(this.startIndex, this.startIndex));
      }
      return "LexerNoViableAltException" + symbol;
    }
  };
  var NoViableAltException2 = class extends RecognitionException2 {
    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
      ctx = ctx || recognizer._ctx;
      offendingToken = offendingToken || recognizer.getCurrentToken();
      startToken = startToken || recognizer.getCurrentToken();
      input = input || recognizer.getInputStream();
      super({message: "", recognizer, input, ctx});
      this.deadEndConfigs = deadEndConfigs;
      this.startToken = startToken;
      this.offendingToken = offendingToken;
    }
  };
  var InputMismatchException = class extends RecognitionException2 {
    constructor(recognizer) {
      super({message: "", recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});
      this.offendingToken = recognizer.getCurrentToken();
    }
  };
  function formatMessage(predicate, message) {
    if (message !== null) {
      return message;
    } else {
      return "failed predicate: {" + predicate + "}?";
    }
  }
  var FailedPredicateException2 = class extends RecognitionException2 {
    constructor(recognizer, predicate, message) {
      super({
        message: formatMessage(predicate, message || null),
        recognizer,
        input: recognizer.getInputStream(),
        ctx: recognizer._ctx
      });
      const s = recognizer._interp.atn.states[recognizer.state];
      const trans = s.transitions[0];
      if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
      } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
      }
      this.predicate = predicate;
      this.offendingToken = recognizer.getCurrentToken();
    }
  };
  var ParseCancellationException = class extends Error {
    constructor() {
      super();
      Error.captureStackTrace(this, ParseCancellationException);
    }
  };
  module2.exports = {
    RecognitionException: RecognitionException2,
    NoViableAltException: NoViableAltException2,
    LexerNoViableAltException,
    InputMismatchException,
    FailedPredicateException: FailedPredicateException2,
    ParseCancellationException
  };
});

// node_modules/antlr4/src/antlr4/Lexer.js
var require_Lexer2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var Recognizer = require_Recognizer2();
  var CommonTokenFactory = require_CommonTokenFactory2();
  var {RecognitionException: RecognitionException2} = require_Errors();
  var {LexerNoViableAltException} = require_Errors();
  var Lexer2 = class extends Recognizer {
    constructor(input) {
      super();
      this._input = input;
      this._factory = CommonTokenFactory.DEFAULT;
      this._tokenFactorySourcePair = [this, input];
      this._interp = null;
      this._token = null;
      this._tokenStartCharIndex = -1;
      this._tokenStartLine = -1;
      this._tokenStartColumn = -1;
      this._hitEOF = false;
      this._channel = Token2.DEFAULT_CHANNEL;
      this._type = Token2.INVALID_TYPE;
      this._modeStack = [];
      this._mode = Lexer2.DEFAULT_MODE;
      this._text = null;
    }
    reset() {
      if (this._input !== null) {
        this._input.seek(0);
      }
      this._token = null;
      this._type = Token2.INVALID_TYPE;
      this._channel = Token2.DEFAULT_CHANNEL;
      this._tokenStartCharIndex = -1;
      this._tokenStartColumn = -1;
      this._tokenStartLine = -1;
      this._text = null;
      this._hitEOF = false;
      this._mode = Lexer2.DEFAULT_MODE;
      this._modeStack = [];
      this._interp.reset();
    }
    nextToken() {
      if (this._input === null) {
        throw "nextToken requires a non-null input stream.";
      }
      const tokenStartMarker = this._input.mark();
      try {
        while (true) {
          if (this._hitEOF) {
            this.emitEOF();
            return this._token;
          }
          this._token = null;
          this._channel = Token2.DEFAULT_CHANNEL;
          this._tokenStartCharIndex = this._input.index;
          this._tokenStartColumn = this._interp.column;
          this._tokenStartLine = this._interp.line;
          this._text = null;
          let continueOuter = false;
          while (true) {
            this._type = Token2.INVALID_TYPE;
            let ttype = Lexer2.SKIP;
            try {
              ttype = this._interp.match(this._input, this._mode);
            } catch (e) {
              if (e instanceof RecognitionException2) {
                this.notifyListeners(e);
                this.recover(e);
              } else {
                console.log(e.stack);
                throw e;
              }
            }
            if (this._input.LA(1) === Token2.EOF) {
              this._hitEOF = true;
            }
            if (this._type === Token2.INVALID_TYPE) {
              this._type = ttype;
            }
            if (this._type === Lexer2.SKIP) {
              continueOuter = true;
              break;
            }
            if (this._type !== Lexer2.MORE) {
              break;
            }
          }
          if (continueOuter) {
            continue;
          }
          if (this._token === null) {
            this.emit();
          }
          return this._token;
        }
      } finally {
        this._input.release(tokenStartMarker);
      }
    }
    skip() {
      this._type = Lexer2.SKIP;
    }
    more() {
      this._type = Lexer2.MORE;
    }
    mode(m) {
      this._mode = m;
    }
    pushMode(m) {
      if (this._interp.debug) {
        console.log("pushMode " + m);
      }
      this._modeStack.push(this._mode);
      this.mode(m);
    }
    popMode() {
      if (this._modeStack.length === 0) {
        throw "Empty Stack";
      }
      if (this._interp.debug) {
        console.log("popMode back to " + this._modeStack.slice(0, -1));
      }
      this.mode(this._modeStack.pop());
      return this._mode;
    }
    emitToken(token) {
      this._token = token;
    }
    emit() {
      const t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);
      this.emitToken(t);
      return t;
    }
    emitEOF() {
      const cpos = this.column;
      const lpos = this.line;
      const eof = this._factory.create(this._tokenFactorySourcePair, Token2.EOF, null, Token2.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, lpos, cpos);
      this.emitToken(eof);
      return eof;
    }
    getCharIndex() {
      return this._input.index;
    }
    getAllTokens() {
      const tokens2 = [];
      let t = this.nextToken();
      while (t.type !== Token2.EOF) {
        tokens2.push(t);
        t = this.nextToken();
      }
      return tokens2;
    }
    notifyListeners(e) {
      const start = this._tokenStartCharIndex;
      const stop = this._input.index;
      const text = this._input.getText(start, stop);
      const msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
      const listener = this.getErrorListenerDispatch();
      listener.syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, msg, e);
    }
    getErrorDisplay(s) {
      const d = [];
      for (let i = 0; i < s.length; i++) {
        d.push(s[i]);
      }
      return d.join("");
    }
    getErrorDisplayForChar(c) {
      if (c.charCodeAt(0) === Token2.EOF) {
        return "<EOF>";
      } else if (c === "\n") {
        return "\\n";
      } else if (c === "	") {
        return "\\t";
      } else if (c === "\r") {
        return "\\r";
      } else {
        return c;
      }
    }
    getCharErrorDisplay(c) {
      return "'" + this.getErrorDisplayForChar(c) + "'";
    }
    recover(re) {
      if (this._input.LA(1) !== Token2.EOF) {
        if (re instanceof LexerNoViableAltException) {
          this._interp.consume(this._input);
        } else {
          this._input.consume();
        }
      }
    }
    get inputStream() {
      return this._input;
    }
    set inputStream(input) {
      this._input = null;
      this._tokenFactorySourcePair = [this, this._input];
      this.reset();
      this._input = input;
      this._tokenFactorySourcePair = [this, this._input];
    }
    get sourceName() {
      return this._input.sourceName;
    }
    get type() {
      return this.type;
    }
    set type(type) {
      this._type = type;
    }
    get line() {
      return this._interp.line;
    }
    set line(line) {
      this._interp.line = line;
    }
    get column() {
      return this._interp.column;
    }
    set column(column) {
      this._interp.column = column;
    }
    get text() {
      if (this._text !== null) {
        return this._text;
      } else {
        return this._interp.getText(this._input);
      }
    }
    set text(text) {
      this._text = text;
    }
  };
  Lexer2.DEFAULT_MODE = 0;
  Lexer2.MORE = -2;
  Lexer2.SKIP = -3;
  Lexer2.DEFAULT_TOKEN_CHANNEL = Token2.DEFAULT_CHANNEL;
  Lexer2.HIDDEN = Token2.HIDDEN_CHANNEL;
  Lexer2.MIN_CHAR_VALUE = 0;
  Lexer2.MAX_CHAR_VALUE = 1114111;
  module2.exports = Lexer2;
});

// node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js
var require_ATNConfigSet2 = __commonJS((exports, module2) => {
  var ATN2 = require_ATN2();
  var Utils3 = require_Utils2();
  var {SemanticContext} = require_SemanticContext2();
  var {merge} = require_PredictionContext2();
  function hashATNConfig(c) {
    return c.hashCodeForConfigSet();
  }
  function equalATNConfigs(a, b) {
    if (a === b) {
      return true;
    } else if (a === null || b === null) {
      return false;
    } else
      return a.equalsForConfigSet(b);
  }
  var ATNConfigSet = class {
    constructor(fullCtx) {
      this.configLookup = new Utils3.Set(hashATNConfig, equalATNConfigs);
      this.fullCtx = fullCtx === void 0 ? true : fullCtx;
      this.readOnly = false;
      this.configs = [];
      this.uniqueAlt = 0;
      this.conflictingAlts = null;
      this.hasSemanticContext = false;
      this.dipsIntoOuterContext = false;
      this.cachedHashCode = -1;
    }
    add(config, mergeCache) {
      if (mergeCache === void 0) {
        mergeCache = null;
      }
      if (this.readOnly) {
        throw "This set is readonly";
      }
      if (config.semanticContext !== SemanticContext.NONE) {
        this.hasSemanticContext = true;
      }
      if (config.reachesIntoOuterContext > 0) {
        this.dipsIntoOuterContext = true;
      }
      const existing = this.configLookup.add(config);
      if (existing === config) {
        this.cachedHashCode = -1;
        this.configs.push(config);
        return true;
      }
      const rootIsWildcard = !this.fullCtx;
      const merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
      existing.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
      if (config.precedenceFilterSuppressed) {
        existing.precedenceFilterSuppressed = true;
      }
      existing.context = merged;
      return true;
    }
    getStates() {
      const states = new Utils3.Set();
      for (let i = 0; i < this.configs.length; i++) {
        states.add(this.configs[i].state);
      }
      return states;
    }
    getPredicates() {
      const preds = [];
      for (let i = 0; i < this.configs.length; i++) {
        const c = this.configs[i].semanticContext;
        if (c !== SemanticContext.NONE) {
          preds.push(c.semanticContext);
        }
      }
      return preds;
    }
    optimizeConfigs(interpreter) {
      if (this.readOnly) {
        throw "This set is readonly";
      }
      if (this.configLookup.length === 0) {
        return;
      }
      for (let i = 0; i < this.configs.length; i++) {
        const config = this.configs[i];
        config.context = interpreter.getCachedContext(config.context);
      }
    }
    addAll(coll) {
      for (let i = 0; i < coll.length; i++) {
        this.add(coll[i]);
      }
      return false;
    }
    equals(other) {
      return this === other || other instanceof ATNConfigSet && Utils3.equalArrays(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;
    }
    hashCode() {
      const hash = new Utils3.Hash();
      hash.update(this.configs);
      return hash.finish();
    }
    updateHashCode(hash) {
      if (this.readOnly) {
        if (this.cachedHashCode === -1) {
          this.cachedHashCode = this.hashCode();
        }
        hash.update(this.cachedHashCode);
      } else {
        hash.update(this.hashCode());
      }
    }
    isEmpty() {
      return this.configs.length === 0;
    }
    contains(item) {
      if (this.configLookup === null) {
        throw "This method is not implemented for readonly sets.";
      }
      return this.configLookup.contains(item);
    }
    containsFast(item) {
      if (this.configLookup === null) {
        throw "This method is not implemented for readonly sets.";
      }
      return this.configLookup.containsFast(item);
    }
    clear() {
      if (this.readOnly) {
        throw "This set is readonly";
      }
      this.configs = [];
      this.cachedHashCode = -1;
      this.configLookup = new Utils3.Set();
    }
    setReadonly(readOnly) {
      this.readOnly = readOnly;
      if (readOnly) {
        this.configLookup = null;
      }
    }
    toString() {
      return Utils3.arrayToString(this.configs) + (this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") + (this.uniqueAlt !== ATN2.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") + (this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") + (this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
    }
    get items() {
      return this.configs;
    }
    get length() {
      return this.configs.length;
    }
  };
  var OrderedATNConfigSet = class extends ATNConfigSet {
    constructor() {
      super();
      this.configLookup = new Utils3.Set();
    }
  };
  module2.exports = {
    ATNConfigSet,
    OrderedATNConfigSet
  };
});

// node_modules/antlr4/src/antlr4/dfa/DFAState.js
var require_DFAState2 = __commonJS((exports, module2) => {
  var {ATNConfigSet} = require_ATNConfigSet2();
  var {Hash: Hash2, Set: Set2} = require_Utils2();
  var PredPrediction = class {
    constructor(pred, alt) {
      this.alt = alt;
      this.pred = pred;
    }
    toString() {
      return "(" + this.pred + ", " + this.alt + ")";
    }
  };
  var DFAState = class {
    constructor(stateNumber, configs) {
      if (stateNumber === null) {
        stateNumber = -1;
      }
      if (configs === null) {
        configs = new ATNConfigSet();
      }
      this.stateNumber = stateNumber;
      this.configs = configs;
      this.edges = null;
      this.isAcceptState = false;
      this.prediction = 0;
      this.lexerActionExecutor = null;
      this.requiresFullContext = false;
      this.predicates = null;
      return this;
    }
    getAltSet() {
      const alts = new Set2();
      if (this.configs !== null) {
        for (let i = 0; i < this.configs.length; i++) {
          const c = this.configs[i];
          alts.add(c.alt);
        }
      }
      if (alts.length === 0) {
        return null;
      } else {
        return alts;
      }
    }
    equals(other) {
      return this === other || other instanceof DFAState && this.configs.equals(other.configs);
    }
    toString() {
      let s = "" + this.stateNumber + ":" + this.configs;
      if (this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
          s = s + this.predicates;
        else
          s = s + this.prediction;
      }
      return s;
    }
    hashCode() {
      const hash = new Hash2();
      hash.update(this.configs);
      return hash.finish();
    }
  };
  module2.exports = {DFAState, PredPrediction};
});

// node_modules/antlr4/src/antlr4/atn/ATNSimulator.js
var require_ATNSimulator2 = __commonJS((exports, module2) => {
  var {DFAState} = require_DFAState2();
  var {ATNConfigSet} = require_ATNConfigSet2();
  var {getCachedPredictionContext} = require_PredictionContext2();
  var {Map: Map2} = require_Utils2();
  var ATNSimulator = class {
    constructor(atn, sharedContextCache) {
      this.atn = atn;
      this.sharedContextCache = sharedContextCache;
      return this;
    }
    getCachedContext(context) {
      if (this.sharedContextCache === null) {
        return context;
      }
      const visited = new Map2();
      return getCachedPredictionContext(context, this.sharedContextCache, visited);
    }
  };
  ATNSimulator.ERROR = new DFAState(2147483647, new ATNConfigSet());
  module2.exports = ATNSimulator;
});

// node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js
var require_LexerActionExecutor2 = __commonJS((exports, module2) => {
  var {hashStuff} = require_Utils2();
  var {LexerIndexedCustomAction} = require_LexerAction();
  var LexerActionExecutor = class {
    constructor(lexerActions) {
      this.lexerActions = lexerActions === null ? [] : lexerActions;
      this.cachedHashCode = hashStuff(lexerActions);
      return this;
    }
    fixOffsetBeforeMatch(offset) {
      let updatedLexerActions = null;
      for (let i = 0; i < this.lexerActions.length; i++) {
        if (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
          if (updatedLexerActions === null) {
            updatedLexerActions = this.lexerActions.concat([]);
          }
          updatedLexerActions[i] = new LexerIndexedCustomAction(offset, this.lexerActions[i]);
        }
      }
      if (updatedLexerActions === null) {
        return this;
      } else {
        return new LexerActionExecutor(updatedLexerActions);
      }
    }
    execute(lexer, input, startIndex) {
      let requiresSeek = false;
      const stopIndex = input.index;
      try {
        for (let i = 0; i < this.lexerActions.length; i++) {
          let lexerAction = this.lexerActions[i];
          if (lexerAction instanceof LexerIndexedCustomAction) {
            const offset = lexerAction.offset;
            input.seek(startIndex + offset);
            lexerAction = lexerAction.action;
            requiresSeek = startIndex + offset !== stopIndex;
          } else if (lexerAction.isPositionDependent) {
            input.seek(stopIndex);
            requiresSeek = false;
          }
          lexerAction.execute(lexer);
        }
      } finally {
        if (requiresSeek) {
          input.seek(stopIndex);
        }
      }
    }
    hashCode() {
      return this.cachedHashCode;
    }
    updateHashCode(hash) {
      hash.update(this.cachedHashCode);
    }
    equals(other) {
      if (this === other) {
        return true;
      } else if (!(other instanceof LexerActionExecutor)) {
        return false;
      } else if (this.cachedHashCode != other.cachedHashCode) {
        return false;
      } else if (this.lexerActions.length != other.lexerActions.length) {
        return false;
      } else {
        const numActions = this.lexerActions.length;
        for (let idx = 0; idx < numActions; ++idx) {
          if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
            return false;
          }
        }
        return true;
      }
    }
    static append(lexerActionExecutor, lexerAction) {
      if (lexerActionExecutor === null) {
        return new LexerActionExecutor([lexerAction]);
      }
      const lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);
      return new LexerActionExecutor(lexerActions);
    }
  };
  module2.exports = LexerActionExecutor;
});

// node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js
var require_LexerATNSimulator2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var Lexer2 = require_Lexer2();
  var ATN2 = require_ATN2();
  var ATNSimulator = require_ATNSimulator2();
  var {DFAState} = require_DFAState2();
  var {OrderedATNConfigSet} = require_ATNConfigSet2();
  var {PredictionContext} = require_PredictionContext2();
  var {SingletonPredictionContext} = require_PredictionContext2();
  var {RuleStopState} = require_ATNState2();
  var {LexerATNConfig} = require_ATNConfig2();
  var {Transition} = require_Transition2();
  var LexerActionExecutor = require_LexerActionExecutor2();
  var {LexerNoViableAltException} = require_Errors();
  function resetSimState(sim) {
    sim.index = -1;
    sim.line = 0;
    sim.column = -1;
    sim.dfaState = null;
  }
  var SimState = class {
    constructor() {
      resetSimState(this);
    }
    reset() {
      resetSimState(this);
    }
  };
  var LexerATNSimulator2 = class extends ATNSimulator {
    constructor(recog, atn, decisionToDFA, sharedContextCache) {
      super(atn, sharedContextCache);
      this.decisionToDFA = decisionToDFA;
      this.recog = recog;
      this.startIndex = -1;
      this.line = 1;
      this.column = 0;
      this.mode = Lexer2.DEFAULT_MODE;
      this.prevAccept = new SimState();
    }
    copyState(simulator) {
      this.column = simulator.column;
      this.line = simulator.line;
      this.mode = simulator.mode;
      this.startIndex = simulator.startIndex;
    }
    match(input, mode) {
      this.match_calls += 1;
      this.mode = mode;
      const mark = input.mark();
      try {
        this.startIndex = input.index;
        this.prevAccept.reset();
        const dfa = this.decisionToDFA[mode];
        if (dfa.s0 === null) {
          return this.matchATN(input);
        } else {
          return this.execATN(input, dfa.s0);
        }
      } finally {
        input.release(mark);
      }
    }
    reset() {
      this.prevAccept.reset();
      this.startIndex = -1;
      this.line = 1;
      this.column = 0;
      this.mode = Lexer2.DEFAULT_MODE;
    }
    matchATN(input) {
      const startState = this.atn.modeToStartState[this.mode];
      if (LexerATNSimulator2.debug) {
        console.log("matchATN mode " + this.mode + " start: " + startState);
      }
      const old_mode = this.mode;
      const s0_closure = this.computeStartState(input, startState);
      const suppressEdge = s0_closure.hasSemanticContext;
      s0_closure.hasSemanticContext = false;
      const next = this.addDFAState(s0_closure);
      if (!suppressEdge) {
        this.decisionToDFA[this.mode].s0 = next;
      }
      const predict = this.execATN(input, next);
      if (LexerATNSimulator2.debug) {
        console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
      }
      return predict;
    }
    execATN(input, ds0) {
      if (LexerATNSimulator2.debug) {
        console.log("start state closure=" + ds0.configs);
      }
      if (ds0.isAcceptState) {
        this.captureSimState(this.prevAccept, input, ds0);
      }
      let t = input.LA(1);
      let s = ds0;
      while (true) {
        if (LexerATNSimulator2.debug) {
          console.log("execATN loop starting closure: " + s.configs);
        }
        let target = this.getExistingTargetState(s, t);
        if (target === null) {
          target = this.computeTargetState(input, s, t);
        }
        if (target === ATNSimulator.ERROR) {
          break;
        }
        if (t !== Token2.EOF) {
          this.consume(input);
        }
        if (target.isAcceptState) {
          this.captureSimState(this.prevAccept, input, target);
          if (t === Token2.EOF) {
            break;
          }
        }
        t = input.LA(1);
        s = target;
      }
      return this.failOrAccept(this.prevAccept, input, s.configs, t);
    }
    getExistingTargetState(s, t) {
      if (s.edges === null || t < LexerATNSimulator2.MIN_DFA_EDGE || t > LexerATNSimulator2.MAX_DFA_EDGE) {
        return null;
      }
      let target = s.edges[t - LexerATNSimulator2.MIN_DFA_EDGE];
      if (target === void 0) {
        target = null;
      }
      if (LexerATNSimulator2.debug && target !== null) {
        console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
      }
      return target;
    }
    computeTargetState(input, s, t) {
      const reach = new OrderedATNConfigSet();
      this.getReachableConfigSet(input, s.configs, reach, t);
      if (reach.items.length === 0) {
        if (!reach.hasSemanticContext) {
          this.addDFAEdge(s, t, ATNSimulator.ERROR);
        }
        return ATNSimulator.ERROR;
      }
      return this.addDFAEdge(s, t, null, reach);
    }
    failOrAccept(prevAccept, input, reach, t) {
      if (this.prevAccept.dfaState !== null) {
        const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
        this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.column);
        return prevAccept.dfaState.prediction;
      } else {
        if (t === Token2.EOF && input.index === this.startIndex) {
          return Token2.EOF;
        }
        throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
      }
    }
    getReachableConfigSet(input, closure, reach, t) {
      let skipAlt = ATN2.INVALID_ALT_NUMBER;
      for (let i = 0; i < closure.items.length; i++) {
        const cfg = closure.items[i];
        const currentAltReachedAcceptState = cfg.alt === skipAlt;
        if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
          continue;
        }
        if (LexerATNSimulator2.debug) {
          console.log("testing %s at %s\n", this.getTokenName(t), cfg.toString(this.recog, true));
        }
        for (let j = 0; j < cfg.state.transitions.length; j++) {
          const trans = cfg.state.transitions[j];
          const target = this.getReachableTarget(trans, t);
          if (target !== null) {
            let lexerActionExecutor = cfg.lexerActionExecutor;
            if (lexerActionExecutor !== null) {
              lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
            }
            const treatEofAsEpsilon = t === Token2.EOF;
            const config = new LexerATNConfig({state: target, lexerActionExecutor}, cfg);
            if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
              skipAlt = cfg.alt;
            }
          }
        }
      }
    }
    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {
      if (LexerATNSimulator2.debug) {
        console.log("ACTION %s\n", lexerActionExecutor);
      }
      input.seek(index);
      this.line = line;
      this.column = charPos;
      if (lexerActionExecutor !== null && this.recog !== null) {
        lexerActionExecutor.execute(this.recog, input, startIndex);
      }
    }
    getReachableTarget(trans, t) {
      if (trans.matches(t, 0, Lexer2.MAX_CHAR_VALUE)) {
        return trans.target;
      } else {
        return null;
      }
    }
    computeStartState(input, p) {
      const initialContext = PredictionContext.EMPTY;
      const configs = new OrderedATNConfigSet();
      for (let i = 0; i < p.transitions.length; i++) {
        const target = p.transitions[i].target;
        const cfg = new LexerATNConfig({state: target, alt: i + 1, context: initialContext}, null);
        this.closure(input, cfg, configs, false, false, false);
      }
      return configs;
    }
    closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
      let cfg = null;
      if (LexerATNSimulator2.debug) {
        console.log("closure(" + config.toString(this.recog, true) + ")");
      }
      if (config.state instanceof RuleStopState) {
        if (LexerATNSimulator2.debug) {
          if (this.recog !== null) {
            console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
          } else {
            console.log("closure at rule stop %s\n", config);
          }
        }
        if (config.context === null || config.context.hasEmptyPath()) {
          if (config.context === null || config.context.isEmpty()) {
            configs.add(config);
            return true;
          } else {
            configs.add(new LexerATNConfig({state: config.state, context: PredictionContext.EMPTY}, config));
            currentAltReachedAcceptState = true;
          }
        }
        if (config.context !== null && !config.context.isEmpty()) {
          for (let i = 0; i < config.context.length; i++) {
            if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
              const newContext = config.context.getParent(i);
              const returnState = this.atn.states[config.context.getReturnState(i)];
              cfg = new LexerATNConfig({state: returnState, context: newContext}, config);
              currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
            }
          }
        }
        return currentAltReachedAcceptState;
      }
      if (!config.state.epsilonOnlyTransitions) {
        if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
          configs.add(config);
        }
      }
      for (let j = 0; j < config.state.transitions.length; j++) {
        const trans = config.state.transitions[j];
        cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
        if (cfg !== null) {
          currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
        }
      }
      return currentAltReachedAcceptState;
    }
    getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon) {
      let cfg = null;
      if (trans.serializationType === Transition.RULE) {
        const newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
        cfg = new LexerATNConfig({state: trans.target, context: newContext}, config);
      } else if (trans.serializationType === Transition.PRECEDENCE) {
        throw "Precedence predicates are not supported in lexers.";
      } else if (trans.serializationType === Transition.PREDICATE) {
        if (LexerATNSimulator2.debug) {
          console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
        }
        configs.hasSemanticContext = true;
        if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
          cfg = new LexerATNConfig({state: trans.target}, config);
        }
      } else if (trans.serializationType === Transition.ACTION) {
        if (config.context === null || config.context.hasEmptyPath()) {
          const lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[trans.actionIndex]);
          cfg = new LexerATNConfig({state: trans.target, lexerActionExecutor}, config);
        } else {
          cfg = new LexerATNConfig({state: trans.target}, config);
        }
      } else if (trans.serializationType === Transition.EPSILON) {
        cfg = new LexerATNConfig({state: trans.target}, config);
      } else if (trans.serializationType === Transition.ATOM || trans.serializationType === Transition.RANGE || trans.serializationType === Transition.SET) {
        if (treatEofAsEpsilon) {
          if (trans.matches(Token2.EOF, 0, Lexer2.MAX_CHAR_VALUE)) {
            cfg = new LexerATNConfig({state: trans.target}, config);
          }
        }
      }
      return cfg;
    }
    evaluatePredicate(input, ruleIndex, predIndex, speculative) {
      if (this.recog === null) {
        return true;
      }
      if (!speculative) {
        return this.recog.sempred(null, ruleIndex, predIndex);
      }
      const savedcolumn = this.column;
      const savedLine = this.line;
      const index = input.index;
      const marker = input.mark();
      try {
        this.consume(input);
        return this.recog.sempred(null, ruleIndex, predIndex);
      } finally {
        this.column = savedcolumn;
        this.line = savedLine;
        input.seek(index);
        input.release(marker);
      }
    }
    captureSimState(settings, input, dfaState) {
      settings.index = input.index;
      settings.line = this.line;
      settings.column = this.column;
      settings.dfaState = dfaState;
    }
    addDFAEdge(from_, tk, to, cfgs) {
      if (to === void 0) {
        to = null;
      }
      if (cfgs === void 0) {
        cfgs = null;
      }
      if (to === null && cfgs !== null) {
        const suppressEdge = cfgs.hasSemanticContext;
        cfgs.hasSemanticContext = false;
        to = this.addDFAState(cfgs);
        if (suppressEdge) {
          return to;
        }
      }
      if (tk < LexerATNSimulator2.MIN_DFA_EDGE || tk > LexerATNSimulator2.MAX_DFA_EDGE) {
        return to;
      }
      if (LexerATNSimulator2.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
      }
      if (from_.edges === null) {
        from_.edges = [];
      }
      from_.edges[tk - LexerATNSimulator2.MIN_DFA_EDGE] = to;
      return to;
    }
    addDFAState(configs) {
      const proposed = new DFAState(null, configs);
      let firstConfigWithRuleStopState = null;
      for (let i = 0; i < configs.items.length; i++) {
        const cfg = configs.items[i];
        if (cfg.state instanceof RuleStopState) {
          firstConfigWithRuleStopState = cfg;
          break;
        }
      }
      if (firstConfigWithRuleStopState !== null) {
        proposed.isAcceptState = true;
        proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
        proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
      }
      const dfa = this.decisionToDFA[this.mode];
      const existing = dfa.states.get(proposed);
      if (existing !== null) {
        return existing;
      }
      const newState = proposed;
      newState.stateNumber = dfa.states.length;
      configs.setReadonly(true);
      newState.configs = configs;
      dfa.states.add(newState);
      return newState;
    }
    getDFA(mode) {
      return this.decisionToDFA[mode];
    }
    getText(input) {
      return input.getText(this.startIndex, input.index - 1);
    }
    consume(input) {
      const curChar = input.LA(1);
      if (curChar === "\n".charCodeAt(0)) {
        this.line += 1;
        this.column = 0;
      } else {
        this.column += 1;
      }
      input.consume();
    }
    getTokenName(tt) {
      if (tt === -1) {
        return "EOF";
      } else {
        return "'" + String.fromCharCode(tt) + "'";
      }
    }
  };
  LexerATNSimulator2.debug = false;
  LexerATNSimulator2.dfa_debug = false;
  LexerATNSimulator2.MIN_DFA_EDGE = 0;
  LexerATNSimulator2.MAX_DFA_EDGE = 127;
  LexerATNSimulator2.match_calls = 0;
  module2.exports = LexerATNSimulator2;
});

// node_modules/antlr4/src/antlr4/atn/PredictionMode.js
var require_PredictionMode2 = __commonJS((exports, module2) => {
  var {Map: Map2, BitSet, AltDict, hashStuff} = require_Utils2();
  var ATN2 = require_ATN2();
  var {RuleStopState} = require_ATNState2();
  var {ATNConfigSet} = require_ATNConfigSet2();
  var {ATNConfig} = require_ATNConfig2();
  var {SemanticContext} = require_SemanticContext2();
  var PredictionMode = {
    SLL: 0,
    LL: 1,
    LL_EXACT_AMBIG_DETECTION: 2,
    hasSLLConflictTerminatingPrediction: function(mode, configs) {
      if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
      }
      if (mode === PredictionMode.SLL) {
        if (configs.hasSemanticContext) {
          const dup = new ATNConfigSet();
          for (let i = 0; i < configs.items.length; i++) {
            let c = configs.items[i];
            c = new ATNConfig({semanticContext: SemanticContext.NONE}, c);
            dup.add(c);
          }
          configs = dup;
        }
      }
      const altsets = PredictionMode.getConflictingAltSubsets(configs);
      return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
    },
    hasConfigInRuleStopState: function(configs) {
      for (let i = 0; i < configs.items.length; i++) {
        const c = configs.items[i];
        if (c.state instanceof RuleStopState) {
          return true;
        }
      }
      return false;
    },
    allConfigsInRuleStopStates: function(configs) {
      for (let i = 0; i < configs.items.length; i++) {
        const c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
          return false;
        }
      }
      return true;
    },
    resolvesToJustOneViableAlt: function(altsets) {
      return PredictionMode.getSingleViableAlt(altsets);
    },
    allSubsetsConflict: function(altsets) {
      return !PredictionMode.hasNonConflictingAltSet(altsets);
    },
    hasNonConflictingAltSet: function(altsets) {
      for (let i = 0; i < altsets.length; i++) {
        const alts = altsets[i];
        if (alts.length === 1) {
          return true;
        }
      }
      return false;
    },
    hasConflictingAltSet: function(altsets) {
      for (let i = 0; i < altsets.length; i++) {
        const alts = altsets[i];
        if (alts.length > 1) {
          return true;
        }
      }
      return false;
    },
    allSubsetsEqual: function(altsets) {
      let first = null;
      for (let i = 0; i < altsets.length; i++) {
        const alts = altsets[i];
        if (first === null) {
          first = alts;
        } else if (alts !== first) {
          return false;
        }
      }
      return true;
    },
    getUniqueAlt: function(altsets) {
      const all = PredictionMode.getAlts(altsets);
      if (all.length === 1) {
        return all.minValue();
      } else {
        return ATN2.INVALID_ALT_NUMBER;
      }
    },
    getAlts: function(altsets) {
      const all = new BitSet();
      altsets.map(function(alts) {
        all.or(alts);
      });
      return all;
    },
    getConflictingAltSubsets: function(configs) {
      const configToAlts = new Map2();
      configToAlts.hashFunction = function(cfg) {
        hashStuff(cfg.state.stateNumber, cfg.context);
      };
      configToAlts.equalsFunction = function(c1, c2) {
        return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);
      };
      configs.items.map(function(cfg) {
        let alts = configToAlts.get(cfg);
        if (alts === null) {
          alts = new BitSet();
          configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
      });
      return configToAlts.getValues();
    },
    getStateToAltMap: function(configs) {
      const m = new AltDict();
      configs.items.map(function(c) {
        let alts = m.get(c.state);
        if (alts === null) {
          alts = new BitSet();
          m.put(c.state, alts);
        }
        alts.add(c.alt);
      });
      return m;
    },
    hasStateAssociatedWithOneAlt: function(configs) {
      const values = PredictionMode.getStateToAltMap(configs).values();
      for (let i = 0; i < values.length; i++) {
        if (values[i].length === 1) {
          return true;
        }
      }
      return false;
    },
    getSingleViableAlt: function(altsets) {
      let result = null;
      for (let i = 0; i < altsets.length; i++) {
        const alts = altsets[i];
        const minAlt = alts.minValue();
        if (result === null) {
          result = minAlt;
        } else if (result !== minAlt) {
          return ATN2.INVALID_ALT_NUMBER;
        }
      }
      return result;
    }
  };
  module2.exports = PredictionMode;
});

// node_modules/antlr4/src/antlr4/ParserRuleContext.js
var require_ParserRuleContext2 = __commonJS((exports, module2) => {
  var RuleContext = require_RuleContext2();
  var Tree = require_Tree();
  var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
  var TerminalNode = Tree.TerminalNode;
  var TerminalNodeImpl = Tree.TerminalNodeImpl;
  var ErrorNodeImpl = Tree.ErrorNodeImpl;
  var Interval = require_IntervalSet2().Interval;
  var ParserRuleContext2 = class extends RuleContext {
    constructor(parent, invokingStateNumber) {
      parent = parent || null;
      invokingStateNumber = invokingStateNumber || null;
      super(parent, invokingStateNumber);
      this.ruleIndex = -1;
      this.children = null;
      this.start = null;
      this.stop = null;
      this.exception = null;
    }
    copyFrom(ctx) {
      this.parentCtx = ctx.parentCtx;
      this.invokingState = ctx.invokingState;
      this.children = null;
      this.start = ctx.start;
      this.stop = ctx.stop;
      if (ctx.children) {
        this.children = [];
        ctx.children.map(function(child) {
          if (child instanceof ErrorNodeImpl) {
            this.children.push(child);
            child.parentCtx = this;
          }
        }, this);
      }
    }
    enterRule(listener) {
    }
    exitRule(listener) {
    }
    addChild(child) {
      if (this.children === null) {
        this.children = [];
      }
      this.children.push(child);
      return child;
    }
    removeLastChild() {
      if (this.children !== null) {
        this.children.pop();
      }
    }
    addTokenNode(token) {
      const node = new TerminalNodeImpl(token);
      this.addChild(node);
      node.parentCtx = this;
      return node;
    }
    addErrorNode(badToken) {
      const node = new ErrorNodeImpl(badToken);
      this.addChild(node);
      node.parentCtx = this;
      return node;
    }
    getChild(i, type) {
      type = type || null;
      if (this.children === null || i < 0 || i >= this.children.length) {
        return null;
      }
      if (type === null) {
        return this.children[i];
      } else {
        for (let j = 0; j < this.children.length; j++) {
          const child = this.children[j];
          if (child instanceof type) {
            if (i === 0) {
              return child;
            } else {
              i -= 1;
            }
          }
        }
        return null;
      }
    }
    getToken(ttype, i) {
      if (this.children === null || i < 0 || i >= this.children.length) {
        return null;
      }
      for (let j = 0; j < this.children.length; j++) {
        const child = this.children[j];
        if (child instanceof TerminalNode) {
          if (child.symbol.type === ttype) {
            if (i === 0) {
              return child;
            } else {
              i -= 1;
            }
          }
        }
      }
      return null;
    }
    getTokens(ttype) {
      if (this.children === null) {
        return [];
      } else {
        const tokens2 = [];
        for (let j = 0; j < this.children.length; j++) {
          const child = this.children[j];
          if (child instanceof TerminalNode) {
            if (child.symbol.type === ttype) {
              tokens2.push(child);
            }
          }
        }
        return tokens2;
      }
    }
    getTypedRuleContext(ctxType, i) {
      return this.getChild(i, ctxType);
    }
    getTypedRuleContexts(ctxType) {
      if (this.children === null) {
        return [];
      } else {
        const contexts = [];
        for (let j = 0; j < this.children.length; j++) {
          const child = this.children[j];
          if (child instanceof ctxType) {
            contexts.push(child);
          }
        }
        return contexts;
      }
    }
    getChildCount() {
      if (this.children === null) {
        return 0;
      } else {
        return this.children.length;
      }
    }
    getSourceInterval() {
      if (this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
      } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
      }
    }
  };
  RuleContext.EMPTY = new ParserRuleContext2();
  module2.exports = ParserRuleContext2;
});

// node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js
var require_ParserATNSimulator2 = __commonJS((exports, module2) => {
  var Utils3 = require_Utils2();
  var {Set: Set2, BitSet, DoubleDict} = Utils3;
  var ATN2 = require_ATN2();
  var {ATNState, RuleStopState} = require_ATNState2();
  var {ATNConfig} = require_ATNConfig2();
  var {ATNConfigSet} = require_ATNConfigSet2();
  var {Token: Token2} = require_Token2();
  var {DFAState, PredPrediction} = require_DFAState2();
  var ATNSimulator = require_ATNSimulator2();
  var PredictionMode = require_PredictionMode2();
  var RuleContext = require_RuleContext2();
  var ParserRuleContext2 = require_ParserRuleContext2();
  var {SemanticContext} = require_SemanticContext2();
  var {PredictionContext} = require_PredictionContext2();
  var {Interval} = require_IntervalSet2();
  var {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = require_Transition2();
  var {NoViableAltException: NoViableAltException2} = require_Errors();
  var {SingletonPredictionContext, predictionContextFromRuleContext} = require_PredictionContext2();
  var ParserATNSimulator2 = class extends ATNSimulator {
    constructor(parser, atn, decisionToDFA, sharedContextCache) {
      super(atn, sharedContextCache);
      this.parser = parser;
      this.decisionToDFA = decisionToDFA;
      this.predictionMode = PredictionMode.LL;
      this._input = null;
      this._startIndex = 0;
      this._outerContext = null;
      this._dfa = null;
      this.mergeCache = null;
      this.debug = false;
      this.debug_closure = false;
      this.debug_add = false;
      this.debug_list_atn_decisions = false;
      this.dfa_debug = false;
      this.retry_debug = false;
    }
    reset() {
    }
    adaptivePredict(input, decision, outerContext) {
      if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
      }
      this._input = input;
      this._startIndex = input.index;
      this._outerContext = outerContext;
      const dfa = this.decisionToDFA[decision];
      this._dfa = dfa;
      const m = input.mark();
      const index = input.index;
      try {
        let s0;
        if (dfa.precedenceDfa) {
          s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
          s0 = dfa.s0;
        }
        if (s0 === null) {
          if (outerContext === null) {
            outerContext = RuleContext.EMPTY;
          }
          if (this.debug || this.debug_list_atn_decisions) {
            console.log("predictATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + ", outerContext=" + outerContext.toString(this.parser.ruleNames));
          }
          const fullCtx = false;
          let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);
          if (dfa.precedenceDfa) {
            dfa.s0.configs = s0_closure;
            s0_closure = this.applyPrecedenceFilter(s0_closure);
            s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
            dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
          } else {
            s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
            dfa.s0 = s0;
          }
        }
        const alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
          console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
      } finally {
        this._dfa = null;
        this.mergeCache = null;
        input.seek(index);
        input.release(m);
      }
    }
    execATN(dfa, s0, input, startIndex, outerContext) {
      if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input) + " line " + input.LT(1).line + ":" + input.LT(1).column);
      }
      let alt;
      let previousD = s0;
      if (this.debug) {
        console.log("s0 = " + s0);
      }
      let t = input.LA(1);
      while (true) {
        let D = this.getExistingTargetState(previousD, t);
        if (D === null) {
          D = this.computeTargetState(dfa, previousD, t);
        }
        if (D === ATNSimulator.ERROR) {
          const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
          input.seek(startIndex);
          alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
          if (alt !== ATN2.INVALID_ALT_NUMBER) {
            return alt;
          } else {
            throw e;
          }
        }
        if (D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
          let conflictingAlts = null;
          if (D.predicates !== null) {
            if (this.debug) {
              console.log("DFA state has preds in DFA sim LL failover");
            }
            const conflictIndex = input.index;
            if (conflictIndex !== startIndex) {
              input.seek(startIndex);
            }
            conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (conflictingAlts.length === 1) {
              if (this.debug) {
                console.log("Full LL avoided");
              }
              return conflictingAlts.minValue();
            }
            if (conflictIndex !== startIndex) {
              input.seek(conflictIndex);
            }
          }
          if (this.dfa_debug) {
            console.log("ctx sensitive state " + outerContext + " in " + D);
          }
          const fullCtx = true;
          const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
          this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
          alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
          return alt;
        }
        if (D.isAcceptState) {
          if (D.predicates === null) {
            return D.prediction;
          }
          const stopIndex = input.index;
          input.seek(startIndex);
          const alts = this.evalSemanticContext(D.predicates, outerContext, true);
          if (alts.length === 0) {
            throw this.noViableAlt(input, outerContext, D.configs, startIndex);
          } else if (alts.length === 1) {
            return alts.minValue();
          } else {
            this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
            return alts.minValue();
          }
        }
        previousD = D;
        if (t !== Token2.EOF) {
          input.consume();
          t = input.LA(1);
        }
      }
    }
    getExistingTargetState(previousD, t) {
      const edges = previousD.edges;
      if (edges === null) {
        return null;
      } else {
        return edges[t + 1] || null;
      }
    }
    computeTargetState(dfa, previousD, t) {
      const reach = this.computeReachSet(previousD.configs, t, false);
      if (reach === null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
      }
      let D = new DFAState(null, reach);
      const predictedAlt = this.getUniqueAlt(reach);
      if (this.debug) {
        const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils3.arrayToString(altSubSets) + ", previous=" + previousD.configs + ", configs=" + reach + ", predict=" + predictedAlt + ", allSubsetsConflict=" + PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" + this.getConflictingAlts(reach));
      }
      if (predictedAlt !== ATN2.INVALID_ALT_NUMBER) {
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
      } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
      }
      if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if (D.predicates !== null) {
          D.prediction = ATN2.INVALID_ALT_NUMBER;
        }
      }
      D = this.addDFAEdge(dfa, previousD, t, D);
      return D;
    }
    predicateDFAState(dfaState, decisionState) {
      const nalts = decisionState.transitions.length;
      const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
      const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
      if (altToPred !== null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN2.INVALID_ALT_NUMBER;
      } else {
        dfaState.prediction = altsToCollectPredsFrom.minValue();
      }
    }
    execATNWithFullContext(dfa, D, s0, input, startIndex, outerContext) {
      if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext " + s0);
      }
      const fullCtx = true;
      let foundExactAmbig = false;
      let reach;
      let previous = s0;
      input.seek(startIndex);
      let t = input.LA(1);
      let predictedAlt = -1;
      while (true) {
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach === null) {
          const e = this.noViableAlt(input, outerContext, previous, startIndex);
          input.seek(startIndex);
          const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
          if (alt !== ATN2.INVALID_ALT_NUMBER) {
            return alt;
          } else {
            throw e;
          }
        }
        const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if (this.debug) {
          console.log("LL altSubSets=" + altSubSets + ", predict=" + PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" + PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        if (reach.uniqueAlt !== ATN2.INVALID_ALT_NUMBER) {
          predictedAlt = reach.uniqueAlt;
          break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
          predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
          if (predictedAlt !== ATN2.INVALID_ALT_NUMBER) {
            break;
          }
        } else {
          if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
            foundExactAmbig = true;
            predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
            break;
          }
        }
        previous = reach;
        if (t !== Token2.EOF) {
          input.consume();
          t = input.LA(1);
        }
      }
      if (reach.uniqueAlt !== ATN2.INVALID_ALT_NUMBER) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
      }
      this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);
      return predictedAlt;
    }
    computeReachSet(closure, t, fullCtx) {
      if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
      }
      if (this.mergeCache === null) {
        this.mergeCache = new DoubleDict();
      }
      const intermediate = new ATNConfigSet(fullCtx);
      let skippedStopStates = null;
      for (let i = 0; i < closure.items.length; i++) {
        const c = closure.items[i];
        if (this.debug) {
          console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
          if (fullCtx || t === Token2.EOF) {
            if (skippedStopStates === null) {
              skippedStopStates = [];
            }
            skippedStopStates.push(c);
            if (this.debug_add) {
              console.log("added " + c + " to skippedStopStates");
            }
          }
          continue;
        }
        for (let j = 0; j < c.state.transitions.length; j++) {
          const trans = c.state.transitions[j];
          const target = this.getReachableTarget(trans, t);
          if (target !== null) {
            const cfg = new ATNConfig({state: target}, c);
            intermediate.add(cfg, this.mergeCache);
            if (this.debug_add) {
              console.log("added " + cfg + " to intermediate");
            }
          }
        }
      }
      let reach = null;
      if (skippedStopStates === null && t !== Token2.EOF) {
        if (intermediate.items.length === 1) {
          reach = intermediate;
        } else if (this.getUniqueAlt(intermediate) !== ATN2.INVALID_ALT_NUMBER) {
          reach = intermediate;
        }
      }
      if (reach === null) {
        reach = new ATNConfigSet(fullCtx);
        const closureBusy = new Set2();
        const treatEofAsEpsilon = t === Token2.EOF;
        for (let k = 0; k < intermediate.items.length; k++) {
          this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
      }
      if (t === Token2.EOF) {
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
      }
      if (skippedStopStates !== null && (!fullCtx || !PredictionMode.hasConfigInRuleStopState(reach))) {
        for (let l = 0; l < skippedStopStates.length; l++) {
          reach.add(skippedStopStates[l], this.mergeCache);
        }
      }
      if (reach.items.length === 0) {
        return null;
      } else {
        return reach;
      }
    }
    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {
      if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
      }
      const result = new ATNConfigSet(configs.fullCtx);
      for (let i = 0; i < configs.items.length; i++) {
        const config = configs.items[i];
        if (config.state instanceof RuleStopState) {
          result.add(config, this.mergeCache);
          continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
          const nextTokens = this.atn.nextTokens(config.state);
          if (nextTokens.contains(Token2.EPSILON)) {
            const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
            result.add(new ATNConfig({state: endOfRuleState}, config), this.mergeCache);
          }
        }
      }
      return result;
    }
    computeStartState(p, ctx, fullCtx) {
      const initialContext = predictionContextFromRuleContext(this.atn, ctx);
      const configs = new ATNConfigSet(fullCtx);
      for (let i = 0; i < p.transitions.length; i++) {
        const target = p.transitions[i].target;
        const c = new ATNConfig({state: target, alt: i + 1, context: initialContext}, null);
        const closureBusy = new Set2();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
      }
      return configs;
    }
    applyPrecedenceFilter(configs) {
      let config;
      const statesFromAlt1 = [];
      const configSet = new ATNConfigSet(configs.fullCtx);
      for (let i = 0; i < configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt !== 1) {
          continue;
        }
        const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext === null) {
          continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
          configSet.add(new ATNConfig({semanticContext: updatedContext}, config), this.mergeCache);
        } else {
          configSet.add(config, this.mergeCache);
        }
      }
      for (let i = 0; i < configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
          continue;
        }
        if (!config.precedenceFilterSuppressed) {
          const context = statesFromAlt1[config.state.stateNumber] || null;
          if (context !== null && context.equals(config.context)) {
            continue;
          }
        }
        configSet.add(config, this.mergeCache);
      }
      return configSet;
    }
    getReachableTarget(trans, ttype) {
      if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
      } else {
        return null;
      }
    }
    getPredsForAmbigAlts(ambigAlts, configs, nalts) {
      let altToPred = [];
      for (let i = 0; i < configs.items.length; i++) {
        const c = configs.items[i];
        if (ambigAlts.contains(c.alt)) {
          altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
      }
      let nPredAlts = 0;
      for (let i = 1; i < nalts + 1; i++) {
        const pred = altToPred[i] || null;
        if (pred === null) {
          altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
          nPredAlts += 1;
        }
      }
      if (nPredAlts === 0) {
        altToPred = null;
      }
      if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils3.arrayToString(altToPred));
      }
      return altToPred;
    }
    getPredicatePredictions(ambigAlts, altToPred) {
      const pairs = [];
      let containsPredicate = false;
      for (let i = 1; i < altToPred.length; i++) {
        const pred = altToPred[i];
        if (ambigAlts !== null && ambigAlts.contains(i)) {
          pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
          containsPredicate = true;
        }
      }
      if (!containsPredicate) {
        return null;
      }
      return pairs;
    }
    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {
      const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
      const semValidConfigs = cfgs[0];
      const semInvalidConfigs = cfgs[1];
      let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
      if (alt !== ATN2.INVALID_ALT_NUMBER) {
        return alt;
      }
      if (semInvalidConfigs.items.length > 0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt !== ATN2.INVALID_ALT_NUMBER) {
          return alt;
        }
      }
      return ATN2.INVALID_ALT_NUMBER;
    }
    getAltThatFinishedDecisionEntryRule(configs) {
      const alts = [];
      for (let i = 0; i < configs.items.length; i++) {
        const c = configs.items[i];
        if (c.reachesIntoOuterContext > 0 || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {
          if (alts.indexOf(c.alt) < 0) {
            alts.push(c.alt);
          }
        }
      }
      if (alts.length === 0) {
        return ATN2.INVALID_ALT_NUMBER;
      } else {
        return Math.min.apply(null, alts);
      }
    }
    splitAccordingToSemanticValidity(configs, outerContext) {
      const succeeded = new ATNConfigSet(configs.fullCtx);
      const failed = new ATNConfigSet(configs.fullCtx);
      for (let i = 0; i < configs.items.length; i++) {
        const c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
          const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
          if (predicateEvaluationResult) {
            succeeded.add(c);
          } else {
            failed.add(c);
          }
        } else {
          succeeded.add(c);
        }
      }
      return [succeeded, failed];
    }
    evalSemanticContext(predPredictions, outerContext, complete) {
      const predictions = new BitSet();
      for (let i = 0; i < predPredictions.length; i++) {
        const pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
          predictions.add(pair.alt);
          if (!complete) {
            break;
          }
          continue;
        }
        const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
          console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
          if (this.debug || this.dfa_debug) {
            console.log("PREDICT " + pair.alt);
          }
          predictions.add(pair.alt);
          if (!complete) {
            break;
          }
        }
      }
      return predictions;
    }
    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
      const initialDepth = 0;
      this.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEofAsEpsilon);
    }
    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
      if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser, true) + ")");
        if (config.reachesIntoOuterContext > 50) {
          throw "problem";
        }
      }
      if (config.state instanceof RuleStopState) {
        if (!config.context.isEmpty()) {
          for (let i = 0; i < config.context.length; i++) {
            if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
              if (fullCtx) {
                configs.add(new ATNConfig({state: config.state, context: PredictionContext.EMPTY}, config), this.mergeCache);
                continue;
              } else {
                if (this.debug) {
                  console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                }
                this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
              }
              continue;
            }
            const returnState = this.atn.states[config.context.getReturnState(i)];
            const newContext = config.context.getParent(i);
            const parms = {state: returnState, alt: config.alt, context: newContext, semanticContext: config.semanticContext};
            const c = new ATNConfig(parms, null);
            c.reachesIntoOuterContext = config.reachesIntoOuterContext;
            this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
          }
          return;
        } else if (fullCtx) {
          configs.add(config, this.mergeCache);
          return;
        } else {
          if (this.debug) {
            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
          }
        }
      }
      this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
    }
    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
      const p = config.state;
      if (!p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
      }
      for (let i = 0; i < p.transitions.length; i++) {
        if (i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
          continue;
        const t = p.transitions[i];
        const continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c !== null) {
          let newDepth = depth;
          if (config.state instanceof RuleStopState) {
            if (this._dfa !== null && this._dfa.precedenceDfa) {
              if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
                c.precedenceFilterSuppressed = true;
              }
            }
            c.reachesIntoOuterContext += 1;
            if (closureBusy.add(c) !== c) {
              continue;
            }
            configs.dipsIntoOuterContext = true;
            newDepth -= 1;
            if (this.debug) {
              console.log("dips into outer ctx: " + c);
            }
          } else {
            if (!t.isEpsilon && closureBusy.add(c) !== c) {
              continue;
            }
            if (t instanceof RuleTransition) {
              if (newDepth >= 0) {
                newDepth += 1;
              }
            }
          }
          this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
      }
    }
    canDropLoopEntryEdgeInLeftRecursiveRule(config) {
      const p = config.state;
      if (p.stateType !== ATNState.STAR_LOOP_ENTRY)
        return false;
      if (p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config.context.isEmpty() || config.context.hasEmptyPath())
        return false;
      const numCtxs = config.context.length;
      for (let i = 0; i < numCtxs; i++) {
        const returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex !== p.ruleIndex)
          return false;
      }
      const decisionStartState = p.transitions[0].target;
      const blockEndStateNum = decisionStartState.endState.stateNumber;
      const blockEndState = this.atn.states[blockEndStateNum];
      for (let i = 0; i < numCtxs; i++) {
        const returnStateNumber = config.context.getReturnState(i);
        const returnState = this.atn.states[returnStateNumber];
        if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)
          return false;
        const returnStateTarget = returnState.transitions[0].target;
        if (returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p)
          continue;
        if (returnState === blockEndState)
          continue;
        if (returnStateTarget === blockEndState)
          continue;
        if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)
          continue;
        return false;
      }
      return true;
    }
    getRuleName(index) {
      if (this.parser !== null && index >= 0) {
        return this.parser.ruleNames[index];
      } else {
        return "<rule " + index + ">";
      }
    }
    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
      switch (t.serializationType) {
        case Transition.RULE:
          return this.ruleTransition(config, t);
        case Transition.PRECEDENCE:
          return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.PREDICATE:
          return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.ACTION:
          return this.actionTransition(config, t);
        case Transition.EPSILON:
          return new ATNConfig({state: t.target}, config);
        case Transition.ATOM:
        case Transition.RANGE:
        case Transition.SET:
          if (treatEofAsEpsilon) {
            if (t.matches(Token2.EOF, 0, 1)) {
              return new ATNConfig({state: t.target}, config);
            }
          }
          return null;
        default:
          return null;
      }
    }
    actionTransition(config, t) {
      if (this.debug) {
        const index = t.actionIndex === -1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
      }
      return new ATNConfig({state: t.target}, config);
    }
    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {
      if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser !== null) {
          console.log("context surrounding pred is " + Utils3.arrayToString(this.parser.getRuleInvocationStack()));
        }
      }
      let c = null;
      if (collectPredicates && inContext) {
        if (fullCtx) {
          const currentPosition = this._input.index;
          this._input.seek(this._startIndex);
          const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
          this._input.seek(currentPosition);
          if (predSucceeds) {
            c = new ATNConfig({state: pt.target}, config);
          }
        } else {
          const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
          c = new ATNConfig({state: pt.target, semanticContext: newSemCtx}, config);
        }
      } else {
        c = new ATNConfig({state: pt.target}, config);
      }
      if (this.debug) {
        console.log("config from pred transition=" + c);
      }
      return c;
    }
    predTransition(config, pt, collectPredicates, inContext, fullCtx) {
      if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex + ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser !== null) {
          console.log("context surrounding pred is " + Utils3.arrayToString(this.parser.getRuleInvocationStack()));
        }
      }
      let c = null;
      if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {
        if (fullCtx) {
          const currentPosition = this._input.index;
          this._input.seek(this._startIndex);
          const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
          this._input.seek(currentPosition);
          if (predSucceeds) {
            c = new ATNConfig({state: pt.target}, config);
          }
        } else {
          const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
          c = new ATNConfig({state: pt.target, semanticContext: newSemCtx}, config);
        }
      } else {
        c = new ATNConfig({state: pt.target}, config);
      }
      if (this.debug) {
        console.log("config from pred transition=" + c);
      }
      return c;
    }
    ruleTransition(config, t) {
      if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
      }
      const returnState = t.followState;
      const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
      return new ATNConfig({state: t.target, context: newContext}, config);
    }
    getConflictingAlts(configs) {
      const altsets = PredictionMode.getConflictingAltSubsets(configs);
      return PredictionMode.getAlts(altsets);
    }
    getConflictingAltsOrUniqueAlt(configs) {
      let conflictingAlts = null;
      if (configs.uniqueAlt !== ATN2.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
      } else {
        conflictingAlts = configs.conflictingAlts;
      }
      return conflictingAlts;
    }
    getTokenName(t) {
      if (t === Token2.EOF) {
        return "EOF";
      }
      if (this.parser !== null && this.parser.literalNames !== null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
          console.log("" + t + " ttype out of range: " + this.parser.literalNames);
          console.log("" + this.parser.getInputStream().getTokens());
        } else {
          const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
          return name + "<" + t + ">";
        }
      }
      return "" + t;
    }
    getLookaheadName(input) {
      return this.getTokenName(input.LA(1));
    }
    dumpDeadEndConfigs(nvae) {
      console.log("dead end configs: ");
      const decs = nvae.getDeadEndConfigs();
      for (let i = 0; i < decs.length; i++) {
        const c = decs[i];
        let trans = "no edges";
        if (c.state.transitions.length > 0) {
          const t = c.state.transitions[0];
          if (t instanceof AtomTransition) {
            trans = "Atom " + this.getTokenName(t.label);
          } else if (t instanceof SetTransition) {
            const neg = t instanceof NotSetTransition;
            trans = (neg ? "~" : "") + "Set " + t.set;
          }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
      }
    }
    noViableAlt(input, outerContext, configs, startIndex) {
      return new NoViableAltException2(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }
    getUniqueAlt(configs) {
      let alt = ATN2.INVALID_ALT_NUMBER;
      for (let i = 0; i < configs.items.length; i++) {
        const c = configs.items[i];
        if (alt === ATN2.INVALID_ALT_NUMBER) {
          alt = c.alt;
        } else if (c.alt !== alt) {
          return ATN2.INVALID_ALT_NUMBER;
        }
      }
      return alt;
    }
    addDFAEdge(dfa, from_, t, to) {
      if (this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
      }
      if (to === null) {
        return null;
      }
      to = this.addDFAState(dfa, to);
      if (from_ === null || t < -1 || t > this.atn.maxTokenType) {
        return to;
      }
      if (from_.edges === null) {
        from_.edges = [];
      }
      from_.edges[t + 1] = to;
      if (this.debug) {
        const literalNames = this.parser === null ? null : this.parser.literalNames;
        const symbolicNames = this.parser === null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
      }
      return to;
    }
    addDFAState(dfa, D) {
      if (D === ATNSimulator.ERROR) {
        return D;
      }
      const existing = dfa.states.get(D);
      if (existing !== null) {
        return existing;
      }
      D.stateNumber = dfa.states.length;
      if (!D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
      }
      dfa.states.add(D);
      if (this.debug) {
        console.log("adding new DFA state: " + D);
      }
      return D;
    }
    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {
      if (this.debug || this.retry_debug) {
        const interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
      }
      if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
      }
    }
    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {
      if (this.debug || this.retry_debug) {
        const interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
      }
      if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
      }
    }
    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
      if (this.debug || this.retry_debug) {
        const interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs + ", input=" + this.parser.getTokenStream().getText(interval));
      }
      if (this.parser !== null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
      }
    }
  };
  module2.exports = ParserATNSimulator2;
});

// node_modules/antlr4/src/antlr4/atn/index.js
var require_atn = __commonJS((exports) => {
  exports.ATN = require_ATN2();
  exports.ATNDeserializer = require_ATNDeserializer2();
  exports.LexerATNSimulator = require_LexerATNSimulator2();
  exports.ParserATNSimulator = require_ParserATNSimulator2();
  exports.PredictionMode = require_PredictionMode2();
});

// node_modules/antlr4/src/antlr4/polyfills/codepointat.js
var require_codepointat = __commonJS(() => {
  if (!String.prototype.codePointAt) {
    (function() {
      "use strict";
      var defineProperty = function() {
        let result;
        try {
          const object = {};
          const $defineProperty = Object.defineProperty;
          result = $defineProperty(object, object, object) && $defineProperty;
        } catch (error) {
        }
        return result;
      }();
      const codePointAt = function(position) {
        if (this == null) {
          throw TypeError();
        }
        const string = String(this);
        const size = string.length;
        let index = position ? Number(position) : 0;
        if (index !== index) {
          index = 0;
        }
        if (index < 0 || index >= size) {
          return void 0;
        }
        const first = string.charCodeAt(index);
        let second;
        if (first >= 55296 && first <= 56319 && size > index + 1) {
          second = string.charCodeAt(index + 1);
          if (second >= 56320 && second <= 57343) {
            return (first - 55296) * 1024 + second - 56320 + 65536;
          }
        }
        return first;
      };
      if (defineProperty) {
        defineProperty(String.prototype, "codePointAt", {
          value: codePointAt,
          configurable: true,
          writable: true
        });
      } else {
        String.prototype.codePointAt = codePointAt;
      }
    })();
  }
});

// node_modules/antlr4/src/antlr4/dfa/DFASerializer.js
var require_DFASerializer2 = __commonJS((exports, module2) => {
  var DFASerializer = class {
    constructor(dfa, literalNames, symbolicNames) {
      this.dfa = dfa;
      this.literalNames = literalNames || [];
      this.symbolicNames = symbolicNames || [];
    }
    toString() {
      if (this.dfa.s0 === null) {
        return null;
      }
      let buf = "";
      const states = this.dfa.sortedStates();
      for (let i = 0; i < states.length; i++) {
        const s = states[i];
        if (s.edges !== null) {
          const n = s.edges.length;
          for (let j = 0; j < n; j++) {
            const t = s.edges[j] || null;
            if (t !== null && t.stateNumber !== 2147483647) {
              buf = buf.concat(this.getStateString(s));
              buf = buf.concat("-");
              buf = buf.concat(this.getEdgeLabel(j));
              buf = buf.concat("->");
              buf = buf.concat(this.getStateString(t));
              buf = buf.concat("\n");
            }
          }
        }
      }
      return buf.length === 0 ? null : buf;
    }
    getEdgeLabel(i) {
      if (i === 0) {
        return "EOF";
      } else if (this.literalNames !== null || this.symbolicNames !== null) {
        return this.literalNames[i - 1] || this.symbolicNames[i - 1];
      } else {
        return String.fromCharCode(i - 1);
      }
    }
    getStateString(s) {
      const baseStateStr = (s.isAcceptState ? ":" : "") + "s" + s.stateNumber + (s.requiresFullContext ? "^" : "");
      if (s.isAcceptState) {
        if (s.predicates !== null) {
          return baseStateStr + "=>" + s.predicates.toString();
        } else {
          return baseStateStr + "=>" + s.prediction.toString();
        }
      } else {
        return baseStateStr;
      }
    }
  };
  var LexerDFASerializer = class extends DFASerializer {
    constructor(dfa) {
      super(dfa, null);
    }
    getEdgeLabel(i) {
      return "'" + String.fromCharCode(i) + "'";
    }
  };
  module2.exports = {DFASerializer, LexerDFASerializer};
});

// node_modules/antlr4/src/antlr4/dfa/DFA.js
var require_DFA2 = __commonJS((exports, module2) => {
  var {Set: Set2} = require_Utils2();
  var {DFAState} = require_DFAState2();
  var {StarLoopEntryState} = require_ATNState2();
  var {ATNConfigSet} = require_ATNConfigSet2();
  var {DFASerializer} = require_DFASerializer2();
  var {LexerDFASerializer} = require_DFASerializer2();
  var DFA = class {
    constructor(atnStartState, decision) {
      if (decision === void 0) {
        decision = 0;
      }
      this.atnStartState = atnStartState;
      this.decision = decision;
      this._states = new Set2();
      this.s0 = null;
      this.precedenceDfa = false;
      if (atnStartState instanceof StarLoopEntryState) {
        if (atnStartState.isPrecedenceDecision) {
          this.precedenceDfa = true;
          const precedenceState = new DFAState(null, new ATNConfigSet());
          precedenceState.edges = [];
          precedenceState.isAcceptState = false;
          precedenceState.requiresFullContext = false;
          this.s0 = precedenceState;
        }
      }
    }
    getPrecedenceStartState(precedence) {
      if (!this.precedenceDfa) {
        throw "Only precedence DFAs may contain a precedence start state.";
      }
      if (precedence < 0 || precedence >= this.s0.edges.length) {
        return null;
      }
      return this.s0.edges[precedence] || null;
    }
    setPrecedenceStartState(precedence, startState) {
      if (!this.precedenceDfa) {
        throw "Only precedence DFAs may contain a precedence start state.";
      }
      if (precedence < 0) {
        return;
      }
      this.s0.edges[precedence] = startState;
    }
    setPrecedenceDfa(precedenceDfa) {
      if (this.precedenceDfa !== precedenceDfa) {
        this._states = new Set2();
        if (precedenceDfa) {
          const precedenceState = new DFAState(null, new ATNConfigSet());
          precedenceState.edges = [];
          precedenceState.isAcceptState = false;
          precedenceState.requiresFullContext = false;
          this.s0 = precedenceState;
        } else {
          this.s0 = null;
        }
        this.precedenceDfa = precedenceDfa;
      }
    }
    sortedStates() {
      const list = this._states.values();
      return list.sort(function(a, b) {
        return a.stateNumber - b.stateNumber;
      });
    }
    toString(literalNames, symbolicNames) {
      literalNames = literalNames || null;
      symbolicNames = symbolicNames || null;
      if (this.s0 === null) {
        return "";
      }
      const serializer = new DFASerializer(this, literalNames, symbolicNames);
      return serializer.toString();
    }
    toLexerString() {
      if (this.s0 === null) {
        return "";
      }
      const serializer = new LexerDFASerializer(this);
      return serializer.toString();
    }
    get states() {
      return this._states;
    }
  };
  module2.exports = DFA;
});

// node_modules/antlr4/src/antlr4/dfa/index.js
var require_dfa = __commonJS((exports) => {
  exports.DFA = require_DFA2();
  exports.DFASerializer = require_DFASerializer2().DFASerializer;
  exports.LexerDFASerializer = require_DFASerializer2().LexerDFASerializer;
  exports.PredPrediction = require_DFAState2().PredPrediction;
});

// node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js
var require_fromcodepoint = __commonJS(() => {
  if (!String.fromCodePoint) {
    (function() {
      const defineProperty = function() {
        let result;
        try {
          const object = {};
          const $defineProperty = Object.defineProperty;
          result = $defineProperty(object, object, object) && $defineProperty;
        } catch (error) {
        }
        return result;
      }();
      const stringFromCharCode = String.fromCharCode;
      const floor = Math.floor;
      const fromCodePoint = function(_) {
        const MAX_SIZE = 16384;
        const codeUnits = [];
        let highSurrogate;
        let lowSurrogate;
        let index = -1;
        const length = arguments.length;
        if (!length) {
          return "";
        }
        let result = "";
        while (++index < length) {
          let codePoint = Number(arguments[index]);
          if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor(codePoint) !== codePoint) {
            throw RangeError("Invalid code point: " + codePoint);
          }
          if (codePoint <= 65535) {
            codeUnits.push(codePoint);
          } else {
            codePoint -= 65536;
            highSurrogate = (codePoint >> 10) + 55296;
            lowSurrogate = codePoint % 1024 + 56320;
            codeUnits.push(highSurrogate, lowSurrogate);
          }
          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
            result += stringFromCharCode.apply(null, codeUnits);
            codeUnits.length = 0;
          }
        }
        return result;
      };
      if (defineProperty) {
        defineProperty(String, "fromCodePoint", {
          value: fromCodePoint,
          configurable: true,
          writable: true
        });
      } else {
        String.fromCodePoint = fromCodePoint;
      }
    })();
  }
});

// node_modules/antlr4/src/antlr4/tree/index.js
var require_tree = __commonJS((exports, module2) => {
  var Tree = require_Tree();
  var Trees = require_Trees2();
  module2.exports = __objSpread(__objSpread({}, Tree), {Trees});
});

// node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js
var require_DiagnosticErrorListener2 = __commonJS((exports, module2) => {
  var {BitSet} = require_Utils2();
  var {ErrorListener: ErrorListener2} = require_ErrorListener();
  var {Interval} = require_IntervalSet2();
  var DiagnosticErrorListener = class extends ErrorListener2 {
    constructor(exactOnly) {
      super();
      exactOnly = exactOnly || true;
      this.exactOnly = exactOnly;
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
      if (this.exactOnly && !exact) {
        return;
      }
      const msg = "reportAmbiguity d=" + this.getDecisionDescription(recognizer, dfa) + ": ambigAlts=" + this.getConflictingAlts(ambigAlts, configs) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
      recognizer.notifyErrorListeners(msg);
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
      const msg = "reportAttemptingFullContext d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
      recognizer.notifyErrorListeners(msg);
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
      const msg = "reportContextSensitivity d=" + this.getDecisionDescription(recognizer, dfa) + ", input='" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
      recognizer.notifyErrorListeners(msg);
    }
    getDecisionDescription(recognizer, dfa) {
      const decision = dfa.decision;
      const ruleIndex = dfa.atnStartState.ruleIndex;
      const ruleNames = recognizer.ruleNames;
      if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
        return "" + decision;
      }
      const ruleName = ruleNames[ruleIndex] || null;
      if (ruleName === null || ruleName.length === 0) {
        return "" + decision;
      }
      return `${decision} (${ruleName})`;
    }
    getConflictingAlts(reportedAlts, configs) {
      if (reportedAlts !== null) {
        return reportedAlts;
      }
      const result = new BitSet();
      for (let i = 0; i < configs.items.length; i++) {
        result.add(configs.items[i].alt);
      }
      return `{${result.values().join(", ")}}`;
    }
  };
  module2.exports = DiagnosticErrorListener;
});

// node_modules/antlr4/src/antlr4/error/ErrorStrategy.js
var require_ErrorStrategy = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var {NoViableAltException: NoViableAltException2, InputMismatchException, FailedPredicateException: FailedPredicateException2, ParseCancellationException} = require_Errors();
  var {ATNState} = require_ATNState2();
  var {Interval, IntervalSet} = require_IntervalSet2();
  var ErrorStrategy = class {
    reset(recognizer) {
    }
    recoverInline(recognizer) {
    }
    recover(recognizer, e) {
    }
    sync(recognizer) {
    }
    inErrorRecoveryMode(recognizer) {
    }
    reportError(recognizer) {
    }
  };
  var DefaultErrorStrategy = class extends ErrorStrategy {
    constructor() {
      super();
      this.errorRecoveryMode = false;
      this.lastErrorIndex = -1;
      this.lastErrorStates = null;
      this.nextTokensContext = null;
      this.nextTokenState = 0;
    }
    reset(recognizer) {
      this.endErrorCondition(recognizer);
    }
    beginErrorCondition(recognizer) {
      this.errorRecoveryMode = true;
    }
    inErrorRecoveryMode(recognizer) {
      return this.errorRecoveryMode;
    }
    endErrorCondition(recognizer) {
      this.errorRecoveryMode = false;
      this.lastErrorStates = null;
      this.lastErrorIndex = -1;
    }
    reportMatch(recognizer) {
      this.endErrorCondition(recognizer);
    }
    reportError(recognizer, e) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      this.beginErrorCondition(recognizer);
      if (e instanceof NoViableAltException2) {
        this.reportNoViableAlternative(recognizer, e);
      } else if (e instanceof InputMismatchException) {
        this.reportInputMismatch(recognizer, e);
      } else if (e instanceof FailedPredicateException2) {
        this.reportFailedPredicate(recognizer, e);
      } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
      }
    }
    recover(recognizer, e) {
      if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {
        recognizer.consume();
      }
      this.lastErrorIndex = recognizer._input.index;
      if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
      }
      this.lastErrorStates.push(recognizer.state);
      const followSet = this.getErrorRecoverySet(recognizer);
      this.consumeUntil(recognizer, followSet);
    }
    sync(recognizer) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      const s = recognizer._interp.atn.states[recognizer.state];
      const la = recognizer.getTokenStream().LA(1);
      const nextTokens = recognizer.atn.nextTokens(s);
      if (nextTokens.contains(la)) {
        this.nextTokensContext = null;
        this.nextTokenState = ATNState.INVALID_STATE_NUMBER;
        return;
      } else if (nextTokens.contains(Token2.EPSILON)) {
        if (this.nextTokensContext === null) {
          this.nextTokensContext = recognizer._ctx;
          this.nextTokensState = recognizer._stateNumber;
        }
        return;
      }
      switch (s.stateType) {
        case ATNState.BLOCK_START:
        case ATNState.STAR_BLOCK_START:
        case ATNState.PLUS_BLOCK_START:
        case ATNState.STAR_LOOP_ENTRY:
          if (this.singleTokenDeletion(recognizer) !== null) {
            return;
          } else {
            throw new InputMismatchException(recognizer);
          }
        case ATNState.PLUS_LOOP_BACK:
        case ATNState.STAR_LOOP_BACK:
          this.reportUnwantedToken(recognizer);
          const expecting = new IntervalSet();
          expecting.addSet(recognizer.getExpectedTokens());
          const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
          this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
          break;
        default:
      }
    }
    reportNoViableAlternative(recognizer, e) {
      const tokens2 = recognizer.getTokenStream();
      let input;
      if (tokens2 !== null) {
        if (e.startToken.type === Token2.EOF) {
          input = "<EOF>";
        } else {
          input = tokens2.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
        }
      } else {
        input = "<unknown input>";
      }
      const msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
      recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }
    reportInputMismatch(recognizer, e) {
      const msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) + " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
      recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }
    reportFailedPredicate(recognizer, e) {
      const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
      const msg = "rule " + ruleName + " " + e.message;
      recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }
    reportUnwantedToken(recognizer) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      this.beginErrorCondition(recognizer);
      const t = recognizer.getCurrentToken();
      const tokenName = this.getTokenErrorDisplay(t);
      const expecting = this.getExpectedTokens(recognizer);
      const msg = "extraneous input " + tokenName + " expecting " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
      recognizer.notifyErrorListeners(msg, t, null);
    }
    reportMissingToken(recognizer) {
      if (this.inErrorRecoveryMode(recognizer)) {
        return;
      }
      this.beginErrorCondition(recognizer);
      const t = recognizer.getCurrentToken();
      const expecting = this.getExpectedTokens(recognizer);
      const msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + " at " + this.getTokenErrorDisplay(t);
      recognizer.notifyErrorListeners(msg, t, null);
    }
    recoverInline(recognizer) {
      const matchedSymbol = this.singleTokenDeletion(recognizer);
      if (matchedSymbol !== null) {
        recognizer.consume();
        return matchedSymbol;
      }
      if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
      }
      throw new InputMismatchException(recognizer);
    }
    singleTokenInsertion(recognizer) {
      const currentSymbolType = recognizer.getTokenStream().LA(1);
      const atn = recognizer._interp.atn;
      const currentState = atn.states[recognizer.state];
      const next = currentState.transitions[0].target;
      const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
      if (expectingAtLL2.contains(currentSymbolType)) {
        this.reportMissingToken(recognizer);
        return true;
      } else {
        return false;
      }
    }
    singleTokenDeletion(recognizer) {
      const nextTokenType = recognizer.getTokenStream().LA(2);
      const expecting = this.getExpectedTokens(recognizer);
      if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        recognizer.consume();
        const matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer);
        return matchedSymbol;
      } else {
        return null;
      }
    }
    getMissingSymbol(recognizer) {
      const currentSymbol = recognizer.getCurrentToken();
      const expecting = this.getExpectedTokens(recognizer);
      const expectedTokenType = expecting.first();
      let tokenText;
      if (expectedTokenType === Token2.EOF) {
        tokenText = "<missing EOF>";
      } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
      }
      let current = currentSymbol;
      const lookback = recognizer.getTokenStream().LT(-1);
      if (current.type === Token2.EOF && lookback !== null) {
        current = lookback;
      }
      return recognizer.getTokenFactory().create(current.source, expectedTokenType, tokenText, Token2.DEFAULT_CHANNEL, -1, -1, current.line, current.column);
    }
    getExpectedTokens(recognizer) {
      return recognizer.getExpectedTokens();
    }
    getTokenErrorDisplay(t) {
      if (t === null) {
        return "<no token>";
      }
      let s = t.text;
      if (s === null) {
        if (t.type === Token2.EOF) {
          s = "<EOF>";
        } else {
          s = "<" + t.type + ">";
        }
      }
      return this.escapeWSAndQuote(s);
    }
    escapeWSAndQuote(s) {
      s = s.replace(/\n/g, "\\n");
      s = s.replace(/\r/g, "\\r");
      s = s.replace(/\t/g, "\\t");
      return "'" + s + "'";
    }
    getErrorRecoverySet(recognizer) {
      const atn = recognizer._interp.atn;
      let ctx = recognizer._ctx;
      const recoverSet = new IntervalSet();
      while (ctx !== null && ctx.invokingState >= 0) {
        const invokingState = atn.states[ctx.invokingState];
        const rt = invokingState.transitions[0];
        const follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
      }
      recoverSet.removeOne(Token2.EPSILON);
      return recoverSet;
    }
    consumeUntil(recognizer, set) {
      let ttype = recognizer.getTokenStream().LA(1);
      while (ttype !== Token2.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
      }
    }
  };
  var BailErrorStrategy = class extends DefaultErrorStrategy {
    constructor() {
      super();
    }
    recover(recognizer, e) {
      let context = recognizer._ctx;
      while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
      }
      throw new ParseCancellationException(e);
    }
    recoverInline(recognizer) {
      this.recover(recognizer, new InputMismatchException(recognizer));
    }
    sync(recognizer) {
    }
  };
  module2.exports = {BailErrorStrategy, DefaultErrorStrategy};
});

// node_modules/antlr4/src/antlr4/error/index.js
var require_error = __commonJS((exports, module2) => {
  module2.exports.RecognitionException = require_Errors().RecognitionException;
  module2.exports.NoViableAltException = require_Errors().NoViableAltException;
  module2.exports.LexerNoViableAltException = require_Errors().LexerNoViableAltException;
  module2.exports.InputMismatchException = require_Errors().InputMismatchException;
  module2.exports.FailedPredicateException = require_Errors().FailedPredicateException;
  module2.exports.DiagnosticErrorListener = require_DiagnosticErrorListener2();
  module2.exports.BailErrorStrategy = require_ErrorStrategy().BailErrorStrategy;
  module2.exports.DefaultErrorStrategy = require_ErrorStrategy().DefaultErrorStrategy;
  module2.exports.ErrorListener = require_ErrorListener().ErrorListener;
});

// node_modules/antlr4/src/antlr4/InputStream.js
var require_InputStream = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  require_codepointat();
  require_fromcodepoint();
  var InputStream = class {
    constructor(data, decodeToUnicodeCodePoints) {
      this.name = "<empty>";
      this.strdata = data;
      this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
      this._index = 0;
      this.data = [];
      if (this.decodeToUnicodeCodePoints) {
        for (let i = 0; i < this.strdata.length; ) {
          const codePoint = this.strdata.codePointAt(i);
          this.data.push(codePoint);
          i += codePoint <= 65535 ? 1 : 2;
        }
      } else {
        for (let i = 0; i < this.strdata.length; i++) {
          const codeUnit = this.strdata.charCodeAt(i);
          this.data.push(codeUnit);
        }
      }
      this._size = this.data.length;
    }
    reset() {
      this._index = 0;
    }
    consume() {
      if (this._index >= this._size) {
        throw "cannot consume EOF";
      }
      this._index += 1;
    }
    LA(offset) {
      if (offset === 0) {
        return 0;
      }
      if (offset < 0) {
        offset += 1;
      }
      const pos = this._index + offset - 1;
      if (pos < 0 || pos >= this._size) {
        return Token2.EOF;
      }
      return this.data[pos];
    }
    LT(offset) {
      return this.LA(offset);
    }
    mark() {
      return -1;
    }
    release(marker) {
    }
    seek(_index) {
      if (_index <= this._index) {
        this._index = _index;
        return;
      }
      this._index = Math.min(_index, this._size);
    }
    getText(start, stop) {
      if (stop >= this._size) {
        stop = this._size - 1;
      }
      if (start >= this._size) {
        return "";
      } else {
        if (this.decodeToUnicodeCodePoints) {
          let result = "";
          for (let i = start; i <= stop; i++) {
            result += String.fromCodePoint(this.data[i]);
          }
          return result;
        } else {
          return this.strdata.slice(start, stop + 1);
        }
      }
    }
    toString() {
      return this.strdata;
    }
    get index() {
      return this._index;
    }
    get size() {
      return this._size;
    }
  };
  module2.exports = InputStream;
});

// node_modules/antlr4/src/antlr4/CharStreams.js
var require_CharStreams2 = __commonJS((exports, module2) => {
  var InputStream = require_InputStream();
  var fs = require("fs");
  var CharStreams = {
    fromString: function(str) {
      return new InputStream(str, true);
    },
    fromBlob: function(blob, encoding, onLoad, onError) {
      const reader = new window.FileReader();
      reader.onload = function(e) {
        const is = new InputStream(e.target.result, true);
        onLoad(is);
      };
      reader.onerror = onError;
      reader.readAsText(blob, encoding);
    },
    fromBuffer: function(buffer, encoding) {
      return new InputStream(buffer.toString(encoding), true);
    },
    fromPath: function(path, encoding, callback) {
      fs.readFile(path, encoding, function(err, data) {
        let is = null;
        if (data !== null) {
          is = new InputStream(data, true);
        }
        callback(err, is);
      });
    },
    fromPathSync: function(path, encoding) {
      const data = fs.readFileSync(path, encoding);
      return new InputStream(data, true);
    }
  };
  module2.exports = CharStreams;
});

// node_modules/antlr4/src/antlr4/FileStream.js
var require_FileStream = __commonJS((exports, module2) => {
  var InputStream = require_InputStream();
  var fs = require("fs");
  var FileStream = class extends InputStream {
    constructor(fileName, decodeToUnicodeCodePoints) {
      const data = fs.readFileSync(fileName, "utf8");
      super(data, decodeToUnicodeCodePoints);
      this.fileName = fileName;
    }
  };
  module2.exports = FileStream;
});

// node_modules/antlr4/src/antlr4/BufferedTokenStream.js
var require_BufferedTokenStream2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var Lexer2 = require_Lexer2();
  var {Interval} = require_IntervalSet2();
  var TokenStream = class {
  };
  var BufferedTokenStream = class extends TokenStream {
    constructor(tokenSource) {
      super();
      this.tokenSource = tokenSource;
      this.tokens = [];
      this.index = -1;
      this.fetchedEOF = false;
    }
    mark() {
      return 0;
    }
    release(marker) {
    }
    reset() {
      this.seek(0);
    }
    seek(index) {
      this.lazyInit();
      this.index = this.adjustSeekIndex(index);
    }
    get(index) {
      this.lazyInit();
      return this.tokens[index];
    }
    consume() {
      let skipEofCheck = false;
      if (this.index >= 0) {
        if (this.fetchedEOF) {
          skipEofCheck = this.index < this.tokens.length - 1;
        } else {
          skipEofCheck = this.index < this.tokens.length;
        }
      } else {
        skipEofCheck = false;
      }
      if (!skipEofCheck && this.LA(1) === Token2.EOF) {
        throw "cannot consume EOF";
      }
      if (this.sync(this.index + 1)) {
        this.index = this.adjustSeekIndex(this.index + 1);
      }
    }
    sync(i) {
      const n = i - this.tokens.length + 1;
      if (n > 0) {
        const fetched = this.fetch(n);
        return fetched >= n;
      }
      return true;
    }
    fetch(n) {
      if (this.fetchedEOF) {
        return 0;
      }
      for (let i = 0; i < n; i++) {
        const t = this.tokenSource.nextToken();
        t.tokenIndex = this.tokens.length;
        this.tokens.push(t);
        if (t.type === Token2.EOF) {
          this.fetchedEOF = true;
          return i + 1;
        }
      }
      return n;
    }
    getTokens(start, stop, types) {
      if (types === void 0) {
        types = null;
      }
      if (start < 0 || stop < 0) {
        return null;
      }
      this.lazyInit();
      const subset = [];
      if (stop >= this.tokens.length) {
        stop = this.tokens.length - 1;
      }
      for (let i = start; i < stop; i++) {
        const t = this.tokens[i];
        if (t.type === Token2.EOF) {
          break;
        }
        if (types === null || types.contains(t.type)) {
          subset.push(t);
        }
      }
      return subset;
    }
    LA(i) {
      return this.LT(i).type;
    }
    LB(k) {
      if (this.index - k < 0) {
        return null;
      }
      return this.tokens[this.index - k];
    }
    LT(k) {
      this.lazyInit();
      if (k === 0) {
        return null;
      }
      if (k < 0) {
        return this.LB(-k);
      }
      const i = this.index + k - 1;
      this.sync(i);
      if (i >= this.tokens.length) {
        return this.tokens[this.tokens.length - 1];
      }
      return this.tokens[i];
    }
    adjustSeekIndex(i) {
      return i;
    }
    lazyInit() {
      if (this.index === -1) {
        this.setup();
      }
    }
    setup() {
      this.sync(0);
      this.index = this.adjustSeekIndex(0);
    }
    setTokenSource(tokenSource) {
      this.tokenSource = tokenSource;
      this.tokens = [];
      this.index = -1;
      this.fetchedEOF = false;
    }
    nextTokenOnChannel(i, channel) {
      this.sync(i);
      if (i >= this.tokens.length) {
        return -1;
      }
      let token = this.tokens[i];
      while (token.channel !== this.channel) {
        if (token.type === Token2.EOF) {
          return -1;
        }
        i += 1;
        this.sync(i);
        token = this.tokens[i];
      }
      return i;
    }
    previousTokenOnChannel(i, channel) {
      while (i >= 0 && this.tokens[i].channel !== channel) {
        i -= 1;
      }
      return i;
    }
    getHiddenTokensToRight(tokenIndex, channel) {
      if (channel === void 0) {
        channel = -1;
      }
      this.lazyInit();
      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
        throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
      }
      const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer2.DEFAULT_TOKEN_CHANNEL);
      const from_ = tokenIndex + 1;
      const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
      return this.filterForChannel(from_, to, channel);
    }
    getHiddenTokensToLeft(tokenIndex, channel) {
      if (channel === void 0) {
        channel = -1;
      }
      this.lazyInit();
      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
        throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
      }
      const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer2.DEFAULT_TOKEN_CHANNEL);
      if (prevOnChannel === tokenIndex - 1) {
        return null;
      }
      const from_ = prevOnChannel + 1;
      const to = tokenIndex - 1;
      return this.filterForChannel(from_, to, channel);
    }
    filterForChannel(left, right, channel) {
      const hidden = [];
      for (let i = left; i < right + 1; i++) {
        const t = this.tokens[i];
        if (channel === -1) {
          if (t.channel !== Lexer2.DEFAULT_TOKEN_CHANNEL) {
            hidden.push(t);
          }
        } else if (t.channel === channel) {
          hidden.push(t);
        }
      }
      if (hidden.length === 0) {
        return null;
      }
      return hidden;
    }
    getSourceName() {
      return this.tokenSource.getSourceName();
    }
    getText(interval) {
      this.lazyInit();
      this.fill();
      if (interval === void 0 || interval === null) {
        interval = new Interval(0, this.tokens.length - 1);
      }
      let start = interval.start;
      if (start instanceof Token2) {
        start = start.tokenIndex;
      }
      let stop = interval.stop;
      if (stop instanceof Token2) {
        stop = stop.tokenIndex;
      }
      if (start === null || stop === null || start < 0 || stop < 0) {
        return "";
      }
      if (stop >= this.tokens.length) {
        stop = this.tokens.length - 1;
      }
      let s = "";
      for (let i = start; i < stop + 1; i++) {
        const t = this.tokens[i];
        if (t.type === Token2.EOF) {
          break;
        }
        s = s + t.text;
      }
      return s;
    }
    fill() {
      this.lazyInit();
      while (this.fetch(1e3) === 1e3) {
        continue;
      }
    }
  };
  module2.exports = BufferedTokenStream;
});

// node_modules/antlr4/src/antlr4/CommonTokenStream.js
var require_CommonTokenStream2 = __commonJS((exports, module2) => {
  var Token2 = require_Token2().Token;
  var BufferedTokenStream = require_BufferedTokenStream2();
  var CommonTokenStream2 = class extends BufferedTokenStream {
    constructor(lexer, channel) {
      super(lexer);
      this.channel = channel === void 0 ? Token2.DEFAULT_CHANNEL : channel;
    }
    adjustSeekIndex(i) {
      return this.nextTokenOnChannel(i, this.channel);
    }
    LB(k) {
      if (k === 0 || this.index - k < 0) {
        return null;
      }
      let i = this.index;
      let n = 1;
      while (n <= k) {
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
      }
      if (i < 0) {
        return null;
      }
      return this.tokens[i];
    }
    LT(k) {
      this.lazyInit();
      if (k === 0) {
        return null;
      }
      if (k < 0) {
        return this.LB(-k);
      }
      let i = this.index;
      let n = 1;
      while (n < k) {
        if (this.sync(i + 1)) {
          i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
      }
      return this.tokens[i];
    }
    getNumberOfOnChannelTokens() {
      let n = 0;
      this.fill();
      for (let i = 0; i < this.tokens.length; i++) {
        const t = this.tokens[i];
        if (t.channel === this.channel) {
          n += 1;
        }
        if (t.type === Token2.EOF) {
          break;
        }
      }
      return n;
    }
  };
  module2.exports = CommonTokenStream2;
});

// node_modules/antlr4/src/antlr4/Parser.js
var require_Parser2 = __commonJS((exports, module2) => {
  var {Token: Token2} = require_Token2();
  var {ParseTreeListener, TerminalNode, ErrorNode: ErrorNode2} = require_Tree();
  var Recognizer = require_Recognizer2();
  var {DefaultErrorStrategy} = require_ErrorStrategy();
  var ATNDeserializer3 = require_ATNDeserializer2();
  var ATNDeserializationOptions = require_ATNDeserializationOptions2();
  var Lexer2 = require_Lexer2();
  var TraceListener = class extends ParseTreeListener {
    constructor(parser) {
      super();
      this.parser = parser;
    }
    enterEveryRule(ctx) {
      console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
    }
    visitTerminal(node) {
      console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
    }
    exitEveryRule(ctx) {
      console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
    }
  };
  var Parser2 = class extends Recognizer {
    constructor(input) {
      super();
      this._input = null;
      this._errHandler = new DefaultErrorStrategy();
      this._precedenceStack = [];
      this._precedenceStack.push(0);
      this._ctx = null;
      this.buildParseTrees = true;
      this._tracer = null;
      this._parseListeners = null;
      this._syntaxErrors = 0;
      this.setInputStream(input);
    }
    reset() {
      if (this._input !== null) {
        this._input.seek(0);
      }
      this._errHandler.reset(this);
      this._ctx = null;
      this._syntaxErrors = 0;
      this.setTrace(false);
      this._precedenceStack = [];
      this._precedenceStack.push(0);
      if (this._interp !== null) {
        this._interp.reset();
      }
    }
    match(ttype) {
      let t = this.getCurrentToken();
      if (t.type === ttype) {
        this._errHandler.reportMatch(this);
        this.consume();
      } else {
        t = this._errHandler.recoverInline(this);
        if (this.buildParseTrees && t.tokenIndex === -1) {
          this._ctx.addErrorNode(t);
        }
      }
      return t;
    }
    matchWildcard() {
      let t = this.getCurrentToken();
      if (t.type > 0) {
        this._errHandler.reportMatch(this);
        this.consume();
      } else {
        t = this._errHandler.recoverInline(this);
        if (this._buildParseTrees && t.tokenIndex === -1) {
          this._ctx.addErrorNode(t);
        }
      }
      return t;
    }
    getParseListeners() {
      return this._parseListeners || [];
    }
    addParseListener(listener) {
      if (listener === null) {
        throw "listener";
      }
      if (this._parseListeners === null) {
        this._parseListeners = [];
      }
      this._parseListeners.push(listener);
    }
    removeParseListener(listener) {
      if (this._parseListeners !== null) {
        const idx = this._parseListeners.indexOf(listener);
        if (idx >= 0) {
          this._parseListeners.splice(idx, 1);
        }
        if (this._parseListeners.length === 0) {
          this._parseListeners = null;
        }
      }
    }
    removeParseListeners() {
      this._parseListeners = null;
    }
    triggerEnterRuleEvent() {
      if (this._parseListeners !== null) {
        const ctx = this._ctx;
        this._parseListeners.map(function(listener) {
          listener.enterEveryRule(ctx);
          ctx.enterRule(listener);
        });
      }
    }
    triggerExitRuleEvent() {
      if (this._parseListeners !== null) {
        const ctx = this._ctx;
        this._parseListeners.slice(0).reverse().map(function(listener) {
          ctx.exitRule(listener);
          listener.exitEveryRule(ctx);
        });
      }
    }
    getTokenFactory() {
      return this._input.tokenSource._factory;
    }
    setTokenFactory(factory) {
      this._input.tokenSource._factory = factory;
    }
    getATNWithBypassAlts() {
      const serializedAtn = this.getSerializedATN();
      if (serializedAtn === null) {
        throw "The current parser does not support an ATN with bypass alternatives.";
      }
      let result = this.bypassAltsAtnCache[serializedAtn];
      if (result === null) {
        const deserializationOptions = new ATNDeserializationOptions();
        deserializationOptions.generateRuleBypassTransitions = true;
        result = new ATNDeserializer3(deserializationOptions).deserialize(serializedAtn);
        this.bypassAltsAtnCache[serializedAtn] = result;
      }
      return result;
    }
    compileParseTreePattern(pattern, patternRuleIndex, lexer) {
      lexer = lexer || null;
      if (lexer === null) {
        if (this.getTokenStream() !== null) {
          const tokenSource = this.getTokenStream().tokenSource;
          if (tokenSource instanceof Lexer2) {
            lexer = tokenSource;
          }
        }
      }
      if (lexer === null) {
        throw "Parser can't discover a lexer to use";
      }
      const m = new ParseTreePatternMatcher(lexer, this);
      return m.compile(pattern, patternRuleIndex);
    }
    getInputStream() {
      return this.getTokenStream();
    }
    setInputStream(input) {
      this.setTokenStream(input);
    }
    getTokenStream() {
      return this._input;
    }
    setTokenStream(input) {
      this._input = null;
      this.reset();
      this._input = input;
    }
    getCurrentToken() {
      return this._input.LT(1);
    }
    notifyErrorListeners(msg, offendingToken, err) {
      offendingToken = offendingToken || null;
      err = err || null;
      if (offendingToken === null) {
        offendingToken = this.getCurrentToken();
      }
      this._syntaxErrors += 1;
      const line = offendingToken.line;
      const column = offendingToken.column;
      const listener = this.getErrorListenerDispatch();
      listener.syntaxError(this, offendingToken, line, column, msg, err);
    }
    consume() {
      const o = this.getCurrentToken();
      if (o.type !== Token2.EOF) {
        this.getInputStream().consume();
      }
      const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
      if (this.buildParseTrees || hasListener) {
        let node;
        if (this._errHandler.inErrorRecoveryMode(this)) {
          node = this._ctx.addErrorNode(o);
        } else {
          node = this._ctx.addTokenNode(o);
        }
        node.invokingState = this.state;
        if (hasListener) {
          this._parseListeners.map(function(listener) {
            if (node instanceof ErrorNode2 || node.isErrorNode !== void 0 && node.isErrorNode()) {
              listener.visitErrorNode(node);
            } else if (node instanceof TerminalNode) {
              listener.visitTerminal(node);
            }
          });
        }
      }
      return o;
    }
    addContextToParseTree() {
      if (this._ctx.parentCtx !== null) {
        this._ctx.parentCtx.addChild(this._ctx);
      }
    }
    enterRule(localctx, state, ruleIndex) {
      this.state = state;
      this._ctx = localctx;
      this._ctx.start = this._input.LT(1);
      if (this.buildParseTrees) {
        this.addContextToParseTree();
      }
      if (this._parseListeners !== null) {
        this.triggerEnterRuleEvent();
      }
    }
    exitRule() {
      this._ctx.stop = this._input.LT(-1);
      if (this._parseListeners !== null) {
        this.triggerExitRuleEvent();
      }
      this.state = this._ctx.invokingState;
      this._ctx = this._ctx.parentCtx;
    }
    enterOuterAlt(localctx, altNum) {
      localctx.setAltNumber(altNum);
      if (this.buildParseTrees && this._ctx !== localctx) {
        if (this._ctx.parentCtx !== null) {
          this._ctx.parentCtx.removeLastChild();
          this._ctx.parentCtx.addChild(localctx);
        }
      }
      this._ctx = localctx;
    }
    getPrecedence() {
      if (this._precedenceStack.length === 0) {
        return -1;
      } else {
        return this._precedenceStack[this._precedenceStack.length - 1];
      }
    }
    enterRecursionRule(localctx, state, ruleIndex, precedence) {
      this.state = state;
      this._precedenceStack.push(precedence);
      this._ctx = localctx;
      this._ctx.start = this._input.LT(1);
      if (this._parseListeners !== null) {
        this.triggerEnterRuleEvent();
      }
    }
    pushNewRecursionContext(localctx, state, ruleIndex) {
      const previous = this._ctx;
      previous.parentCtx = localctx;
      previous.invokingState = state;
      previous.stop = this._input.LT(-1);
      this._ctx = localctx;
      this._ctx.start = previous.start;
      if (this.buildParseTrees) {
        this._ctx.addChild(previous);
      }
      if (this._parseListeners !== null) {
        this.triggerEnterRuleEvent();
      }
    }
    unrollRecursionContexts(parentCtx) {
      this._precedenceStack.pop();
      this._ctx.stop = this._input.LT(-1);
      const retCtx = this._ctx;
      if (this._parseListeners !== null) {
        while (this._ctx !== parentCtx) {
          this.triggerExitRuleEvent();
          this._ctx = this._ctx.parentCtx;
        }
      } else {
        this._ctx = parentCtx;
      }
      retCtx.parentCtx = parentCtx;
      if (this.buildParseTrees && parentCtx !== null) {
        parentCtx.addChild(retCtx);
      }
    }
    getInvokingContext(ruleIndex) {
      let ctx = this._ctx;
      while (ctx !== null) {
        if (ctx.ruleIndex === ruleIndex) {
          return ctx;
        }
        ctx = ctx.parentCtx;
      }
      return null;
    }
    precpred(localctx, precedence) {
      return precedence >= this._precedenceStack[this._precedenceStack.length - 1];
    }
    inContext(context) {
      return false;
    }
    isExpectedToken(symbol) {
      const atn = this._interp.atn;
      let ctx = this._ctx;
      const s = atn.states[this.state];
      let following = atn.nextTokens(s);
      if (following.contains(symbol)) {
        return true;
      }
      if (!following.contains(Token2.EPSILON)) {
        return false;
      }
      while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token2.EPSILON)) {
        const invokingState = atn.states[ctx.invokingState];
        const rt = invokingState.transitions[0];
        following = atn.nextTokens(rt.followState);
        if (following.contains(symbol)) {
          return true;
        }
        ctx = ctx.parentCtx;
      }
      if (following.contains(Token2.EPSILON) && symbol === Token2.EOF) {
        return true;
      } else {
        return false;
      }
    }
    getExpectedTokens() {
      return this._interp.atn.getExpectedTokens(this.state, this._ctx);
    }
    getExpectedTokensWithinCurrentRule() {
      const atn = this._interp.atn;
      const s = atn.states[this.state];
      return atn.nextTokens(s);
    }
    getRuleIndex(ruleName) {
      const ruleIndex = this.getRuleIndexMap()[ruleName];
      if (ruleIndex !== null) {
        return ruleIndex;
      } else {
        return -1;
      }
    }
    getRuleInvocationStack(p) {
      p = p || null;
      if (p === null) {
        p = this._ctx;
      }
      const stack = [];
      while (p !== null) {
        const ruleIndex = p.ruleIndex;
        if (ruleIndex < 0) {
          stack.push("n/a");
        } else {
          stack.push(this.ruleNames[ruleIndex]);
        }
        p = p.parentCtx;
      }
      return stack;
    }
    getDFAStrings() {
      return this._interp.decisionToDFA.toString();
    }
    dumpDFA() {
      let seenOne = false;
      for (let i = 0; i < this._interp.decisionToDFA.length; i++) {
        const dfa = this._interp.decisionToDFA[i];
        if (dfa.states.length > 0) {
          if (seenOne) {
            console.log();
          }
          this.printer.println("Decision " + dfa.decision + ":");
          this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
          seenOne = true;
        }
      }
    }
    getSourceName() {
      return this._input.sourceName;
    }
    setTrace(trace) {
      if (!trace) {
        this.removeParseListener(this._tracer);
        this._tracer = null;
      } else {
        if (this._tracer !== null) {
          this.removeParseListener(this._tracer);
        }
        this._tracer = new TraceListener(this);
        this.addParseListener(this._tracer);
      }
    }
  };
  Parser2.bypassAltsAtnCache = {};
  module2.exports = Parser2;
});

// node_modules/antlr4/src/antlr4/index.js
var require_antlr4 = __commonJS((exports) => {
  exports.atn = require_atn();
  exports.codepointat = require_codepointat();
  exports.dfa = require_dfa();
  exports.fromcodepoint = require_fromcodepoint();
  exports.tree = require_tree();
  exports.error = require_error();
  exports.Token = require_Token2().Token;
  exports.CharStreams = require_CharStreams2();
  exports.CommonToken = require_Token2().CommonToken;
  exports.InputStream = require_InputStream();
  exports.FileStream = require_FileStream();
  exports.CommonTokenStream = require_CommonTokenStream2();
  exports.Lexer = require_Lexer2();
  exports.Parser = require_Parser2();
  var pc = require_PredictionContext2();
  exports.PredictionContextCache = pc.PredictionContextCache;
  exports.ParserRuleContext = require_ParserRuleContext2();
  exports.Interval = require_IntervalSet2().Interval;
  exports.IntervalSet = require_IntervalSet2().IntervalSet;
  exports.Utils = require_Utils2();
  exports.LL1Analyzer = require_LL1Analyzer2().LL1Analyzer;
});

// src/antlr/Solidity.tokens
var require_Solidity = __commonJS((exports, module2) => {
  module2.exports = "./Solidity-EZVQ6AE4.tokens";
});

// src/tokens-string.js
var require_tokens_string = __commonJS((exports, module2) => {
  if (typeof BROWSER !== "undefined") {
    module2.exports = require_Solidity();
  } else {
    module2.exports = require("fs").readFileSync(require("path").join(__dirname, "./antlr/Solidity.tokens")).toString();
  }
});

// src/index.ts
__markAsModule(exports);
__export(exports, {
  ParserError: () => ParserError,
  parse: () => parse,
  tokenize: () => tokenize,
  visit: () => visit
});

// src/parser.ts
var import_antlr4ts = __toModule(require_antlr4ts());

// src/antlr/SolidityLexer.ts
var import_ATNDeserializer = __toModule(require_ATNDeserializer());
var import_Lexer = __toModule(require_Lexer());
var import_LexerATNSimulator = __toModule(require_LexerATNSimulator());
var import_VocabularyImpl = __toModule(require_VocabularyImpl());
var Utils = __toModule(require_Utils());
var _SolidityLexer = class extends import_Lexer.Lexer {
  get vocabulary() {
    return _SolidityLexer.VOCABULARY;
  }
  constructor(input) {
    super(input);
    this._interp = new import_LexerATNSimulator.LexerATNSimulator(_SolidityLexer._ATN, this);
  }
  get grammarFileName() {
    return "Solidity.g4";
  }
  get ruleNames() {
    return _SolidityLexer.ruleNames;
  }
  get serializedATN() {
    return _SolidityLexer._serializedATN;
  }
  get channelNames() {
    return _SolidityLexer.channelNames;
  }
  get modeNames() {
    return _SolidityLexer.modeNames;
  }
  static get _ATN() {
    if (!_SolidityLexer.__ATN) {
      _SolidityLexer.__ATN = new import_ATNDeserializer.ATNDeserializer().deserialize(Utils.toCharArray(_SolidityLexer._serializedATN));
    }
    return _SolidityLexer.__ATN;
  }
};
var SolidityLexer = _SolidityLexer;
SolidityLexer.T__0 = 1;
SolidityLexer.T__1 = 2;
SolidityLexer.T__2 = 3;
SolidityLexer.T__3 = 4;
SolidityLexer.T__4 = 5;
SolidityLexer.T__5 = 6;
SolidityLexer.T__6 = 7;
SolidityLexer.T__7 = 8;
SolidityLexer.T__8 = 9;
SolidityLexer.T__9 = 10;
SolidityLexer.T__10 = 11;
SolidityLexer.T__11 = 12;
SolidityLexer.T__12 = 13;
SolidityLexer.T__13 = 14;
SolidityLexer.T__14 = 15;
SolidityLexer.T__15 = 16;
SolidityLexer.T__16 = 17;
SolidityLexer.T__17 = 18;
SolidityLexer.T__18 = 19;
SolidityLexer.T__19 = 20;
SolidityLexer.T__20 = 21;
SolidityLexer.T__21 = 22;
SolidityLexer.T__22 = 23;
SolidityLexer.T__23 = 24;
SolidityLexer.T__24 = 25;
SolidityLexer.T__25 = 26;
SolidityLexer.T__26 = 27;
SolidityLexer.T__27 = 28;
SolidityLexer.T__28 = 29;
SolidityLexer.T__29 = 30;
SolidityLexer.T__30 = 31;
SolidityLexer.T__31 = 32;
SolidityLexer.T__32 = 33;
SolidityLexer.T__33 = 34;
SolidityLexer.T__34 = 35;
SolidityLexer.T__35 = 36;
SolidityLexer.T__36 = 37;
SolidityLexer.T__37 = 38;
SolidityLexer.T__38 = 39;
SolidityLexer.T__39 = 40;
SolidityLexer.T__40 = 41;
SolidityLexer.T__41 = 42;
SolidityLexer.T__42 = 43;
SolidityLexer.T__43 = 44;
SolidityLexer.T__44 = 45;
SolidityLexer.T__45 = 46;
SolidityLexer.T__46 = 47;
SolidityLexer.T__47 = 48;
SolidityLexer.T__48 = 49;
SolidityLexer.T__49 = 50;
SolidityLexer.T__50 = 51;
SolidityLexer.T__51 = 52;
SolidityLexer.T__52 = 53;
SolidityLexer.T__53 = 54;
SolidityLexer.T__54 = 55;
SolidityLexer.T__55 = 56;
SolidityLexer.T__56 = 57;
SolidityLexer.T__57 = 58;
SolidityLexer.T__58 = 59;
SolidityLexer.T__59 = 60;
SolidityLexer.T__60 = 61;
SolidityLexer.T__61 = 62;
SolidityLexer.T__62 = 63;
SolidityLexer.T__63 = 64;
SolidityLexer.T__64 = 65;
SolidityLexer.T__65 = 66;
SolidityLexer.T__66 = 67;
SolidityLexer.T__67 = 68;
SolidityLexer.T__68 = 69;
SolidityLexer.T__69 = 70;
SolidityLexer.T__70 = 71;
SolidityLexer.T__71 = 72;
SolidityLexer.T__72 = 73;
SolidityLexer.T__73 = 74;
SolidityLexer.T__74 = 75;
SolidityLexer.T__75 = 76;
SolidityLexer.T__76 = 77;
SolidityLexer.T__77 = 78;
SolidityLexer.T__78 = 79;
SolidityLexer.T__79 = 80;
SolidityLexer.T__80 = 81;
SolidityLexer.T__81 = 82;
SolidityLexer.T__82 = 83;
SolidityLexer.T__83 = 84;
SolidityLexer.T__84 = 85;
SolidityLexer.T__85 = 86;
SolidityLexer.T__86 = 87;
SolidityLexer.T__87 = 88;
SolidityLexer.T__88 = 89;
SolidityLexer.T__89 = 90;
SolidityLexer.T__90 = 91;
SolidityLexer.T__91 = 92;
SolidityLexer.T__92 = 93;
SolidityLexer.T__93 = 94;
SolidityLexer.T__94 = 95;
SolidityLexer.T__95 = 96;
SolidityLexer.T__96 = 97;
SolidityLexer.Int = 98;
SolidityLexer.Uint = 99;
SolidityLexer.Byte = 100;
SolidityLexer.Fixed = 101;
SolidityLexer.Ufixed = 102;
SolidityLexer.BooleanLiteral = 103;
SolidityLexer.DecimalNumber = 104;
SolidityLexer.HexNumber = 105;
SolidityLexer.NumberUnit = 106;
SolidityLexer.HexLiteralFragment = 107;
SolidityLexer.ReservedKeyword = 108;
SolidityLexer.AnonymousKeyword = 109;
SolidityLexer.BreakKeyword = 110;
SolidityLexer.ConstantKeyword = 111;
SolidityLexer.ImmutableKeyword = 112;
SolidityLexer.ContinueKeyword = 113;
SolidityLexer.LeaveKeyword = 114;
SolidityLexer.ExternalKeyword = 115;
SolidityLexer.IndexedKeyword = 116;
SolidityLexer.InternalKeyword = 117;
SolidityLexer.PayableKeyword = 118;
SolidityLexer.PrivateKeyword = 119;
SolidityLexer.PublicKeyword = 120;
SolidityLexer.VirtualKeyword = 121;
SolidityLexer.PureKeyword = 122;
SolidityLexer.TypeKeyword = 123;
SolidityLexer.ViewKeyword = 124;
SolidityLexer.GlobalKeyword = 125;
SolidityLexer.ConstructorKeyword = 126;
SolidityLexer.FallbackKeyword = 127;
SolidityLexer.ReceiveKeyword = 128;
SolidityLexer.Identifier = 129;
SolidityLexer.StringLiteralFragment = 130;
SolidityLexer.VersionLiteral = 131;
SolidityLexer.WS = 132;
SolidityLexer.COMMENT = 133;
SolidityLexer.LINE_COMMENT = 134;
SolidityLexer.channelNames = [
  "DEFAULT_TOKEN_CHANNEL",
  "HIDDEN"
];
SolidityLexer.modeNames = [
  "DEFAULT_MODE"
];
SolidityLexer.ruleNames = [
  "T__0",
  "T__1",
  "T__2",
  "T__3",
  "T__4",
  "T__5",
  "T__6",
  "T__7",
  "T__8",
  "T__9",
  "T__10",
  "T__11",
  "T__12",
  "T__13",
  "T__14",
  "T__15",
  "T__16",
  "T__17",
  "T__18",
  "T__19",
  "T__20",
  "T__21",
  "T__22",
  "T__23",
  "T__24",
  "T__25",
  "T__26",
  "T__27",
  "T__28",
  "T__29",
  "T__30",
  "T__31",
  "T__32",
  "T__33",
  "T__34",
  "T__35",
  "T__36",
  "T__37",
  "T__38",
  "T__39",
  "T__40",
  "T__41",
  "T__42",
  "T__43",
  "T__44",
  "T__45",
  "T__46",
  "T__47",
  "T__48",
  "T__49",
  "T__50",
  "T__51",
  "T__52",
  "T__53",
  "T__54",
  "T__55",
  "T__56",
  "T__57",
  "T__58",
  "T__59",
  "T__60",
  "T__61",
  "T__62",
  "T__63",
  "T__64",
  "T__65",
  "T__66",
  "T__67",
  "T__68",
  "T__69",
  "T__70",
  "T__71",
  "T__72",
  "T__73",
  "T__74",
  "T__75",
  "T__76",
  "T__77",
  "T__78",
  "T__79",
  "T__80",
  "T__81",
  "T__82",
  "T__83",
  "T__84",
  "T__85",
  "T__86",
  "T__87",
  "T__88",
  "T__89",
  "T__90",
  "T__91",
  "T__92",
  "T__93",
  "T__94",
  "T__95",
  "T__96",
  "Int",
  "Uint",
  "Byte",
  "Fixed",
  "Ufixed",
  "BooleanLiteral",
  "DecimalNumber",
  "DecimalDigits",
  "HexNumber",
  "HexDigits",
  "NumberUnit",
  "HexLiteralFragment",
  "HexPair",
  "HexCharacter",
  "ReservedKeyword",
  "AnonymousKeyword",
  "BreakKeyword",
  "ConstantKeyword",
  "ImmutableKeyword",
  "ContinueKeyword",
  "LeaveKeyword",
  "ExternalKeyword",
  "IndexedKeyword",
  "InternalKeyword",
  "PayableKeyword",
  "PrivateKeyword",
  "PublicKeyword",
  "VirtualKeyword",
  "PureKeyword",
  "TypeKeyword",
  "ViewKeyword",
  "GlobalKeyword",
  "ConstructorKeyword",
  "FallbackKeyword",
  "ReceiveKeyword",
  "Identifier",
  "IdentifierStart",
  "IdentifierPart",
  "StringLiteralFragment",
  "DoubleQuotedStringCharacter",
  "SingleQuotedStringCharacter",
  "VersionLiteral",
  "WS",
  "COMMENT",
  "LINE_COMMENT"
];
SolidityLexer._LITERAL_NAMES = [
  void 0,
  "'pragma'",
  "';'",
  "'*'",
  "'||'",
  "'^'",
  "'~'",
  "'>='",
  "'>'",
  "'<'",
  "'<='",
  "'='",
  "'as'",
  "'import'",
  "'from'",
  "'{'",
  "','",
  "'}'",
  "'abstract'",
  "'contract'",
  "'interface'",
  "'library'",
  "'is'",
  "'('",
  "')'",
  "'error'",
  "'using'",
  "'for'",
  "'struct'",
  "'modifier'",
  "'function'",
  "'returns'",
  "'event'",
  "'enum'",
  "'['",
  "']'",
  "'address'",
  "'.'",
  "'mapping'",
  "'=>'",
  "'memory'",
  "'storage'",
  "'calldata'",
  "'if'",
  "'else'",
  "'try'",
  "'catch'",
  "'while'",
  "'unchecked'",
  "'assembly'",
  "'do'",
  "'return'",
  "'throw'",
  "'emit'",
  "'revert'",
  "'var'",
  "'bool'",
  "'string'",
  "'byte'",
  "'++'",
  "'--'",
  "'new'",
  "':'",
  "'+'",
  "'-'",
  "'after'",
  "'delete'",
  "'!'",
  "'**'",
  "'/'",
  "'%'",
  "'<<'",
  "'>>'",
  "'&'",
  "'|'",
  "'=='",
  "'!='",
  "'&&'",
  "'?'",
  "'|='",
  "'^='",
  "'&='",
  "'<<='",
  "'>>='",
  "'+='",
  "'-='",
  "'*='",
  "'/='",
  "'%='",
  "'let'",
  "':='",
  "'=:'",
  "'switch'",
  "'case'",
  "'default'",
  "'->'",
  "'callback'",
  "'override'",
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  "'anonymous'",
  "'break'",
  "'constant'",
  "'immutable'",
  "'continue'",
  "'leave'",
  "'external'",
  "'indexed'",
  "'internal'",
  "'payable'",
  "'private'",
  "'public'",
  "'virtual'",
  "'pure'",
  "'type'",
  "'view'",
  "'global'",
  "'constructor'",
  "'fallback'",
  "'receive'"
];
SolidityLexer._SYMBOLIC_NAMES = [
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  "Int",
  "Uint",
  "Byte",
  "Fixed",
  "Ufixed",
  "BooleanLiteral",
  "DecimalNumber",
  "HexNumber",
  "NumberUnit",
  "HexLiteralFragment",
  "ReservedKeyword",
  "AnonymousKeyword",
  "BreakKeyword",
  "ConstantKeyword",
  "ImmutableKeyword",
  "ContinueKeyword",
  "LeaveKeyword",
  "ExternalKeyword",
  "IndexedKeyword",
  "InternalKeyword",
  "PayableKeyword",
  "PrivateKeyword",
  "PublicKeyword",
  "VirtualKeyword",
  "PureKeyword",
  "TypeKeyword",
  "ViewKeyword",
  "GlobalKeyword",
  "ConstructorKeyword",
  "FallbackKeyword",
  "ReceiveKeyword",
  "Identifier",
  "StringLiteralFragment",
  "VersionLiteral",
  "WS",
  "COMMENT",
  "LINE_COMMENT"
];
SolidityLexer.VOCABULARY = new import_VocabularyImpl.VocabularyImpl(_SolidityLexer._LITERAL_NAMES, _SolidityLexer._SYMBOLIC_NAMES, []);
SolidityLexer._serializedATNSegments = 4;
SolidityLexer._serializedATNSegment0 = `\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x88\u0757\b					\x07	\x07\b	\b			
	
\v	\v\f	\f\r	\r																		 	 !	!"	"#	#$	$%	%&	&'	'(	()	)*	*+	+,	,-	-.	./	/0	01	12	23	34	45	56	67	78	89	9:	:;	;<	<=	=>	>?	?@	@A	AB	BC	CD	DE	EF	FG	GH	HI	IJ	JK	KL	LM	MN	NO	OP	PQ	QR	RS	ST	TU	UV	VW	WX	XY	YZ	Z[	[\\	\\]	]^	^_	_\`	\`a	ab	bc	cd	de	ef	fg	gh	hi	ij	jk	kl	lm	mn	no	op	pq	qr	rs	st	tu	uv	vw	wx	xy	yz	z{	{|	|}	}~	~\x7F	\x7F\x80	\x80\x81	\x81\x82	\x82\x83	\x83\x84	\x84\x85	\x85\x86	\x86\x87	\x87\x88	\x88\x89	\x89\x8A	\x8A\x8B	\x8B\x8C	\x8C\x8D	\x8D\x8E	\x8E\x8F	\x8F\x07\x07\b\b\b		

\v\v\v\f\f\r\r\r        !!!!!!"""""##$$%%%%%%%%&&''''''''((()))))))********+++++++++,,,-----....//////00000011111111112222222223334444444555555666667777777888899999:::::::;;;;;<<<===>>>>??@@AABBBBBBCCCCCCCDDEEEFFGGHHHIIIJJKKLLLMMMNNNOOPPPQQQRRRSSSSTTTTUUUVVVWWWXXXYYYZZZZ[[[\\\\\\]]]]]]]^^^^^________\`\`\`aaaaaaaaabbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\u038B
cdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\u0464
deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\u0542
efffffffffffff\u0550
f\rff\u0551fff\u0556
f\rff\u0557f\u055A
fggggggggggggggg\u056A
g\rgg\u056Bggg\u0570
g\rgg\u0571g\u0574
ghhhhhhhhhh\u057F
hiii\u0583
iiii\u0587
iiii\u058B
ijjj\u058F
jj\x07j\u0592
j\fjj\u0595\vjkkkklll\u059D
ll\x07l\u05A0
l\fll\u05A3\vlmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\u05DD
mnnnnnnn\u05E5
nnnnn\u05EA
nnn\u05ED
noooppqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\u064C
qrrrrrrrrrrsssssstttttttttuuuuuuuuuuvvvvvvvvvwwwwwwxxxxxxxxxyyyyyyyyzzzzzzzzz{{{{{{{{||||||||}}}}}}}~~~~~~~~\x7F\x7F\x7F\x7F\x7F\x80\x80\x80\x80\x80\x81\x81\x81\x81\x81\x82\x82\x82\x82\x82\x82\x82\x83\x83\x83\x83\x83\x83\x83\x83\x83\x83\x83\x83\x84\x84\x84\x84\x84\x84\x84\x84\x84\x85\x85\x85\x85\x85\x85\x85\x85\x86\x86\x07\x86\u06EE
\x86\f\x86\x86\u06F1\v\x86\x87\x87\x88\x88\x89\x89\x89\x89\x89\x89\x89\x89\u06FE
\x89\x89\x89\x07\x89\u0702
\x89\f\x89\x89\u0705\v\x89\x89\x89\x89\x89\x89\x89\x89\x89\x89\u070F
\x89\x89\x89\x07\x89\u0713
\x89\f\x89\x89\u0716\v\x89\x89\x89\u0719
\x89\x8A\x8A\x8A\x8A\u071E
\x8A\x8B\x8B\x8B\x8B\u0723
\x8B\x8C\x8C\u0726
\x8C\r\x8C\x8C\u0727\x8C\x8C\x8C\u072C
\x8C\r\x8C\x8C\u072D\x8C\x8C\x8C\u0732
\x8C\r\x8C\x8C\u0733\x8C\u0736
\x8C\x8D\x8D\u0739
\x8D\r\x8D\x8D\u073A\x8D\x8D\x8E\x8E\x8E\x8E\x07\x8E\u0743
\x8E\f\x8E\x8E\u0746\v\x8E\x8E\x8E\x8E\x8E\x8E\x8F\x8F\x8F\x8F\x07\x8F\u0751
\x8F\f\x8F\x8F\u0754\v\x8F\x8F\x8F\u0744\x90\x07	\v\x07\r\b	
\v\f\r!#%')+-/13579;= ?!A"C#E$G%I&K'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o9q:s;u<w=y>{?}@\x7FA\x81B\x83C\x85D\x87E\x89F\x8BG\x8DH\x8FI\x91J\x93K\x95L\x97M\x99N\x9BO\x9DP\x9FQ\xA1R\xA3S\xA5T\xA7U\xA9V\xABW\xADX\xAFY\xB1Z\xB3[\xB5\\\xB7]\xB9^\xBB_\xBD\`\xBFa\xC1b\xC3c\xC5d\xC7e\xC9f\xCBg\xCDh\xCFi\xD1j\xD3\xD5k\xD7\xD9l\xDBm\xDD\xDF\xE1n\xE3o\xE5p\xE7q\xE9r\xEBs\xEDt\xEFu\xF1v\xF3w\xF5x\xF7y\xF9z\xFB{\xFD|\xFF}\u0101~\u0103\x7F\u0105\x80\u0107\x81\u0109\x82\u010B\x83\u010D\u010F\u0111\x84\u0113\u0115\u0117\x85\u0119\x86\u011B\x87\u011D\x88\f2;GGggZZzz2;CHch&&C\\aac|\x07&&2;C\\aac|\f\f$$^^\f\f))^^\v\f""\f\f\u07E8\x07	\v\r!#%')+-/13579;=?ACEGIKMOQSUWY[]_acegikmoqsuwy{}\x7F\x81\x83\x85\x87\x89\x8B\x8D\x8F\x91\x93\x95\x97\x99\x9B\x9D\x9F\xA1\xA3\xA5\xA7\xA9\xAB\xAD\xAF\xB1\xB3\xB5\xB7\xB9\xBB\xBD\xBF\xC1\xC3\xC5\xC7\xC9\xCB\xCD\xCF\xD1\xD5\xD9\xDB\xE1\xE3\xE5\xE7`;
SolidityLexer._serializedATNSegment1 = "\xE9\xEB\xED\xEF\xF1\xF3\xF5\xF7\xF9\xFB\xFD\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u0111\u0117\u0119\u011B\u011D\u011F\u0126\x07\u0128	\u012A\v\u012D\r\u012F\u0131\u0134\u0136\u0138\u013B\u013D\u0140\u0147\u014C!\u014E#\u0150%\u0152'\u015B)\u0164+\u016E-\u0176/\u01791\u017B3\u017D5\u01837\u01899\u018D;\u0194=\u019D?\u01A6A\u01AEC\u01B4E\u01B9G\u01BBI\u01BDK\u01C5M\u01C7O\u01CFQ\u01D2S\u01D9U\u01E1W\u01EAY\u01ED[\u01F2]\u01F6_\u01FCa\u0202c\u020Ce\u0215g\u0218i\u021Fk\u0225m\u022Ao\u0231q\u0235s\u023Au\u0241w\u0246y\u0249{\u024C}\u0250\x7F\u0252\x81\u0254\x83\u0256\x85\u025C\x87\u0263\x89\u0265\x8B\u0268\x8D\u026A\x8F\u026C\x91\u026F\x93\u0272\x95\u0274\x97\u0276\x99\u0279\x9B\u027C\x9D\u027F\x9F\u0281\xA1\u0284\xA3\u0287\xA5\u028A\xA7\u028E\xA9\u0292\xAB\u0295\xAD\u0298\xAF\u029B\xB1\u029E\xB3\u02A1\xB5\u02A5\xB7\u02A8\xB9\u02AB\xBB\u02B2\xBD\u02B7\xBF\u02BF\xC1\u02C2\xC3\u02CB\xC5\u038A\xC7\u0463\xC9\u0541\xCB\u0559\xCD\u0573\xCF\u057E\xD1\u0586\xD3\u058C\xD5\u0596\xD7\u059A\xD9\u05DC\xDB\u05DE\xDD\u05EE\xDF\u05F1\xE1\u064B\xE3\u064D\xE5\u0657\xE7\u065D\xE9\u0666\xEB\u0670\xED\u0679\xEF\u067F\xF1\u0688\xF3\u0690\xF5\u0699\xF7\u06A1\xF9\u06A9\xFB\u06B0\xFD\u06B8\xFF\u06BD\u0101\u06C2\u0103\u06C7\u0105\u06CE\u0107\u06DA\u0109\u06E3\u010B\u06EB\u010D\u06F2\u010F\u06F4\u0111\u0718\u0113\u071D\u0115\u0722\u0117\u0725\u0119\u0738\u011B\u073E\u011D\u074C\u011F\u0120\x07r\u0120\u0121\x07t\u0121\u0122\x07c\u0122\u0123\x07i\u0123\u0124\x07o\u0124\u0125\x07c\u0125\u0126\u0127\x07=\u0127\u0128\u0129\x07,\u0129\b\u012A\u012B\x07~\u012B\u012C\x07~\u012C\n\u012D\u012E\x07`\u012E\f\u012F\u0130\x07\x80\u0130\u0131\u0132\x07@\u0132\u0133\x07?\u0133\u0134\u0135\x07@\u0135\u0136\u0137\x07>\u0137\u0138\u0139\x07>\u0139\u013A\x07?\u013A\u013B\u013C\x07?\u013C\u013D\u013E\x07c\u013E\u013F\x07u\u013F\u0140\u0141\x07k\u0141\u0142\x07o\u0142\u0143\x07r\u0143\u0144\x07q\u0144\u0145\x07t\u0145\u0146\x07v\u0146\u0147\u0148\x07h\u0148\u0149\x07t\u0149\u014A\x07q\u014A\u014B\x07o\u014B\u014C\u014D\x07}\u014D \u014E\u014F\x07.\u014F\"\u0150\u0151\x07\x7F\u0151$\u0152\u0153\x07c\u0153\u0154\x07d\u0154\u0155\x07u\u0155\u0156\x07v\u0156\u0157\x07t\u0157\u0158\x07c\u0158\u0159\x07e\u0159\u015A\x07v\u015A&\u015B\u015C\x07e\u015C\u015D\x07q\u015D\u015E\x07p\u015E\u015F\x07v\u015F\u0160\x07t\u0160\u0161\x07c\u0161\u0162\x07e\u0162\u0163\x07v\u0163(\u0164\u0165\x07k\u0165\u0166\x07p\u0166\u0167\x07v\u0167\u0168\x07g\u0168\u0169\x07t\u0169\u016A\x07h\u016A\u016B\x07c\u016B\u016C\x07e\u016C\u016D\x07g\u016D*\u016E\u016F\x07n\u016F\u0170\x07k\u0170\u0171\x07d\u0171\u0172\x07t\u0172\u0173\x07c\u0173\u0174\x07t\u0174\u0175\x07{\u0175,\u0176\u0177\x07k\u0177\u0178\x07u\u0178.\u0179\u017A\x07*\u017A0\u017B\u017C\x07+\u017C2\u017D\u017E\x07g\u017E\u017F\x07t\u017F\u0180\x07t\u0180\u0181\x07q\u0181\u0182\x07t\u01824\u0183\u0184\x07w\u0184\u0185\x07u\u0185\u0186\x07k\u0186\u0187\x07p\u0187\u0188\x07i\u01886\u0189\u018A\x07h\u018A\u018B\x07q\u018B\u018C\x07t\u018C8\u018D\u018E\x07u\u018E\u018F\x07v\u018F\u0190\x07t\u0190\u0191\x07w\u0191\u0192\x07e\u0192\u0193\x07v\u0193:\u0194\u0195\x07o\u0195\u0196\x07q\u0196\u0197\x07f\u0197\u0198\x07k\u0198\u0199\x07h\u0199\u019A\x07k\u019A\u019B\x07g\u019B\u019C\x07t\u019C<\u019D\u019E\x07h\u019E\u019F\x07w\u019F\u01A0\x07p\u01A0\u01A1\x07e\u01A1\u01A2\x07v\u01A2\u01A3\x07k\u01A3\u01A4\x07q\u01A4\u01A5\x07p\u01A5>\u01A6\u01A7\x07t\u01A7\u01A8\x07g\u01A8\u01A9\x07v\u01A9\u01AA\x07w\u01AA\u01AB\x07t\u01AB\u01AC\x07p\u01AC\u01AD\x07u\u01AD@\u01AE\u01AF\x07g\u01AF\u01B0\x07x\u01B0\u01B1\x07g\u01B1\u01B2\x07p\u01B2\u01B3\x07v\u01B3B\u01B4\u01B5\x07g\u01B5\u01B6\x07p\u01B6\u01B7\x07w\u01B7\u01B8\x07o\u01B8D\u01B9\u01BA\x07]\u01BAF\u01BB\u01BC\x07_\u01BCH\u01BD\u01BE\x07c\u01BE\u01BF\x07f\u01BF\u01C0\x07f\u01C0\u01C1\x07t\u01C1\u01C2\x07g\u01C2\u01C3\x07u\u01C3\u01C4\x07u\u01C4J\u01C5\u01C6\x070\u01C6L\u01C7\u01C8\x07o\u01C8\u01C9\x07c\u01C9\u01CA\x07r\u01CA\u01CB\x07r\u01CB\u01CC\x07k\u01CC\u01CD\x07p\u01CD\u01CE\x07i\u01CEN\u01CF\u01D0\x07?\u01D0\u01D1\x07@\u01D1P\u01D2\u01D3\x07o\u01D3\u01D4\x07g\u01D4\u01D5\x07o\u01D5\u01D6\x07q\u01D6\u01D7\x07t\u01D7\u01D8\x07{\u01D8R\u01D9\u01DA\x07u\u01DA\u01DB\x07v\u01DB\u01DC\x07q\u01DC\u01DD\x07t\u01DD\u01DE\x07c\u01DE\u01DF\x07i\u01DF\u01E0\x07g\u01E0T\u01E1\u01E2\x07e\u01E2\u01E3\x07c\u01E3\u01E4\x07n\u01E4\u01E5\x07n\u01E5\u01E6\x07f\u01E6\u01E7\x07c\u01E7\u01E8\x07v\u01E8\u01E9\x07c\u01E9V\u01EA\u01EB\x07k\u01EB\u01EC\x07h\u01ECX\u01ED\u01EE\x07g\u01EE\u01EF\x07n\u01EF\u01F0\x07u\u01F0\u01F1\x07g\u01F1Z\u01F2\u01F3\x07v\u01F3\u01F4\x07t\u01F4\u01F5\x07{\u01F5\\\u01F6\u01F7\x07e\u01F7\u01F8\x07c\u01F8\u01F9\x07v\u01F9\u01FA\x07e\u01FA\u01FB\x07j\u01FB^\u01FC\u01FD\x07y\u01FD\u01FE\x07j\u01FE\u01FF\x07k\u01FF\u0200\x07n\u0200\u0201\x07g\u0201`\u0202\u0203\x07w\u0203\u0204\x07p\u0204\u0205\x07e\u0205\u0206\x07j\u0206\u0207\x07g\u0207\u0208\x07e\u0208\u0209\x07m\u0209\u020A\x07g\u020A\u020B\x07f\u020Bb\u020C\u020D\x07c\u020D\u020E\x07u\u020E\u020F\x07u\u020F\u0210\x07g\u0210\u0211\x07o\u0211\u0212\x07d\u0212\u0213\x07n\u0213\u0214\x07{\u0214d\u0215\u0216\x07f\u0216\u0217\x07q\u0217f\u0218\u0219\x07t\u0219\u021A\x07g\u021A\u021B\x07v\u021B\u021C\x07w\u021C\u021D\x07t\u021D\u021E\x07p\u021Eh\u021F\u0220\x07v\u0220\u0221\x07j\u0221\u0222\x07t\u0222\u0223\x07q\u0223\u0224\x07y\u0224j\u0225\u0226\x07g\u0226\u0227\x07o\u0227\u0228\x07k\u0228\u0229\x07v\u0229l\u022A\u022B\x07t\u022B\u022C\x07g\u022C\u022D\x07x\u022D\u022E\x07g\u022E\u022F\x07t\u022F\u0230\x07v\u0230n\u0231\u0232\x07x\u0232\u0233\x07c\u0233\u0234\x07t\u0234p\u0235\u0236\x07d\u0236\u0237\x07q\u0237\u0238\x07q\u0238\u0239\x07n\u0239r\u023A\u023B\x07u\u023B\u023C\x07v\u023C\u023D\x07t\u023D\u023E\x07k\u023E\u023F\x07p\u023F\u0240\x07i\u0240t\u0241\u0242\x07d\u0242\u0243\x07{\u0243\u0244\x07v\u0244\u0245\x07g\u0245v\u0246\u0247\x07-\u0247\u0248\x07-\u0248x\u0249\u024A\x07/\u024A\u024B\x07/\u024Bz\u024C\u024D\x07p\u024D\u024E\x07g\u024E\u024F\x07y\u024F|\u0250\u0251\x07<\u0251~\u0252\u0253\x07-\u0253\x80\u0254\u0255\x07/\u0255\x82\u0256\u0257\x07c\u0257\u0258\x07h\u0258\u0259\x07v\u0259\u025A\x07g\u025A\u025B\x07t\u025B\x84\u025C\u025D\x07f\u025D\u025E\x07g\u025E\u025F\x07n\u025F\u0260\x07g\u0260\u0261\x07v\u0261\u0262\x07g\u0262\x86\u0263\u0264\x07#\u0264\x88\u0265\u0266\x07,\u0266\u0267\x07,\u0267\x8A\u0268\u0269\x071\u0269\x8C\u026A\u026B\x07'\u026B\x8E\u026C\u026D\x07>\u026D\u026E\x07>\u026E\x90\u026F\u0270\x07@\u0270\u0271\x07@\u0271\x92\u0272\u0273\x07(\u0273\x94\u0274\u0275\x07~\u0275\x96\u0276\u0277\x07?\u0277\u0278\x07?\u0278\x98\u0279\u027A\x07#\u027A\u027B\x07?\u027B\x9A\u027C\u027D\x07(\u027D\u027E\x07(\u027E\x9C\u027F\u0280\x07A\u0280\x9E\u0281\u0282\x07~\u0282\u0283\x07?\u0283\xA0\u0284\u0285\x07`\u0285\u0286\x07?\u0286\xA2\u0287\u0288\x07(\u0288\u0289\x07?\u0289\xA4\u028A\u028B\x07>\u028B\u028C\x07>\u028C\u028D\x07?\u028D\xA6\u028E\u028F\x07@\u028F\u0290\x07@\u0290\u0291\x07?\u0291\xA8\u0292\u0293\x07-\u0293\u0294\x07?\u0294\xAA\u0295\u0296\x07/\u0296\u0297\x07?\u0297\xAC\u0298\u0299\x07,\u0299\u029A\x07?\u029A\xAE\u029B\u029C\x071\u029C\u029D\x07?\u029D\xB0\u029E\u029F\x07'\u029F\u02A0\x07?\u02A0\xB2\u02A1\u02A2\x07n\u02A2\u02A3\x07g\u02A3\u02A4\x07v\u02A4\xB4\u02A5\u02A6\x07<\u02A6\u02A7\x07?\u02A7\xB6\u02A8\u02A9\x07?\u02A9\u02AA\x07<\u02AA\xB8\u02AB\u02AC\x07u\u02AC\u02AD\x07y\u02AD\u02AE\x07k\u02AE\u02AF\x07v\u02AF\u02B0\x07e\u02B0\u02B1\x07j\u02B1\xBA\u02B2\u02B3\x07e\u02B3\u02B4\x07c\u02B4\u02B5\x07u\u02B5\u02B6\x07g\u02B6\xBC\u02B7\u02B8\x07f\u02B8\u02B9\x07g\u02B9\u02BA\x07h\u02BA\u02BB\x07c\u02BB\u02BC\x07w\u02BC\u02BD\x07n\u02BD\u02BE\x07v\u02BE\xBE\u02BF\u02C0\x07/\u02C0\u02C1\x07@\u02C1\xC0\u02C2\u02C3\x07e\u02C3\u02C4\x07c\u02C4\u02C5\x07n\u02C5\u02C6\x07n\u02C6\u02C7\x07d\u02C7\u02C8\x07c\u02C8\u02C9\x07e\u02C9\u02CA\x07m\u02CA\xC2\u02CB\u02CC\x07q\u02CC\u02CD\x07x\u02CD\u02CE\x07g\u02CE\u02CF\x07t\u02CF\u02D0\x07t\u02D0\u02D1\x07k\u02D1\u02D2\x07f\u02D2\u02D3\x07g\u02D3\xC4\u02D4\u02D5\x07k\u02D5\u02D6\x07p\u02D6\u038B\x07v\u02D7\u02D8\x07k\u02D8\u02D9\x07p\u02D9\u02DA\x07v\u02DA\u038B\x07:\u02DB\u02DC\x07k\u02DC\u02DD\x07p\u02DD\u02DE\x07v\u02DE\u02DF\x073\u02DF\u038B\x078\u02E0\u02E1\x07k\u02E1\u02E2\x07p\u02E2\u02E3\x07v\u02E3\u02E4\x074\u02E4\u038B\x076\u02E5\u02E6\x07k\u02E6\u02E7\x07p\u02E7\u02E8\x07v\u02E8\u02E9\x075\u02E9\u038B\x074\u02EA\u02EB\x07k\u02EB\u02EC\x07p\u02EC\u02ED\x07v\u02ED\u02EE\x076\u02EE\u038B\x072\u02EF\u02F0\x07k\u02F0\u02F1\x07p\u02F1\u02F2\x07v\u02F2\u02F3\x076\u02F3\u038B\x07:\u02F4\u02F5\x07k\u02F5\u02F6\x07p\u02F6\u02F7\x07v\u02F7\u02F8\x077\u02F8\u038B\x078\u02F9\u02FA\x07k\u02FA\u02FB\x07p\u02FB\u02FC\x07v\u02FC\u02FD\x078\u02FD\u038B\x076\u02FE\u02FF\x07k\u02FF\u0300\x07p\u0300\u0301\x07v\u0301\u0302\x079\u0302\u038B\x074\u0303\u0304\x07k\u0304\u0305\x07p\u0305\u0306\x07v\u0306\u0307\x07:\u0307\u038B\x072\u0308\u0309\x07k\u0309\u030A\x07p\u030A\u030B\x07v\u030B\u030C\x07:\u030C\u038B\x07:\u030D\u030E\x07k\u030E\u030F\x07p\u030F\u0310\x07v\u0310\u0311\x07;\u0311\u038B\x078\u0312\u0313\x07k\u0313\u0314\x07p\u0314\u0315\x07v\u0315\u0316\x073\u0316\u0317\x072\u0317\u038B\x076\u0318\u0319\x07k\u0319\u031A\x07p\u031A\u031B\x07v\u031B\u031C\x073\u031C\u031D\x073\u031D\u038B\x074\u031E\u031F\x07k\u031F\u0320\x07p\u0320\u0321\x07v\u0321\u0322\x073\u0322\u0323\x074\u0323\u038B\x072\u0324\u0325\x07k\u0325\u0326\x07p\u0326\u0327\x07v\u0327\u0328\x073\u0328\u0329\x074\u0329\u038B\x07:\u032A\u032B\x07k\u032B\u032C\x07p\u032C\u032D\x07v\u032D\u032E\x073\u032E\u032F\x075\u032F\u038B\x078\u0330\u0331\x07k\u0331\u0332\x07p\u0332\u0333\x07v\u0333\u0334\x073\u0334\u0335\x076\u0335\u038B\x076\u0336\u0337\x07k\u0337\u0338\x07p\u0338\u0339\x07v\u0339\u033A\x073\u033A\u033B\x077\u033B\u038B\x074\u033C\u033D\x07k\u033D\u033E\x07p\u033E\u033F\x07v\u033F\u0340\x073\u0340\u0341\x078\u0341\u038B\x072\u0342\u0343\x07k\u0343\u0344\x07p\u0344\u0345\x07v\u0345\u0346\x073\u0346\u0347\x078\u0347\u038B\x07:\u0348\u0349\x07k\u0349\u034A\x07p\u034A\u034B\x07v\u034B\u034C\x073\u034C\u034D\x079\u034D\u038B\x078\u034E\u034F\x07k\u034F\u0350\x07p\u0350\u0351\x07v\u0351\u0352\x073\u0352\u0353\x07:\u0353\u038B\x076\u0354\u0355\x07k\u0355\u0356\x07p\u0356\u0357\x07v\u0357\u0358\x073\u0358\u0359\x07;\u0359\u038B\x074\u035A\u035B\x07k\u035B\u035C\x07p\u035C\u035D\x07v\u035D\u035E\x074\u035E\u035F\x072\u035F\u038B\x072\u0360\u0361\x07k\u0361\u0362\x07p\u0362\u0363\x07v\u0363\u0364\x074\u0364\u0365\x072\u0365\u038B\x07:\u0366\u0367\x07k\u0367\u0368\x07p\u0368\u0369\x07v\u0369\u036A\x074\u036A\u036B\x073\u036B\u038B\x078\u036C\u036D\x07k\u036D\u036E\x07p\u036E\u036F\x07v\u036F\u0370\x074\u0370\u0371\x074\u0371\u038B\x076\u0372\u0373\x07k\u0373\u0374\x07p\u0374\u0375\x07v\u0375\u0376\x074\u0376\u0377\x075\u0377\u038B\x074\u0378\u0379\x07k\u0379\u037A\x07p\u037A\u037B\x07v\u037B\u037C\x074\u037C\u037D\x076\u037D\u038B\x072\u037E\u037F\x07k\u037F\u0380\x07p\u0380\u0381\x07v\u0381\u0382\x074\u0382\u0383\x076\u0383\u038B\x07:\u0384\u0385\x07k\u0385\u0386\x07p\u0386\u0387\x07v\u0387\u0388\x074\u0388\u0389\x077\u0389\u038B\x078\u038A\u02D4\u038A\u02D7\u038A\u02DB\u038A\u02E0\u038A\u02E5\u038A\u02EA\u038A\u02EF\u038A\u02F4\u038A\u02F9\u038A\u02FE\u038A\u0303\u038A\u0308\u038A\u030D\u038A\u0312\u038A\u0318\u038A\u031E\u038A\u0324\u038A\u032A\u038A\u0330\u038A\u0336\u038A\u033C\u038A\u0342\u038A\u0348\u038A\u034E\u038A\u0354\u038A\u035A\u038A\u0360\u038A\u0366\u038A\u036C\u038A\u0372\u038A\u0378\u038A\u037E\u038A\u0384\u038B\xC6\u038C\u038D\x07w\u038D\u038E\x07k\u038E\u038F\x07p\u038F\u0464\x07v\u0390\u0391\x07w\u0391\u0392\x07k\u0392\u0393\x07p\u0393\u0394\x07v\u0394\u0464\x07:\u0395\u0396\x07w\u0396\u0397\x07k\u0397\u0398\x07p\u0398\u0399\x07v\u0399\u039A\x073\u039A\u0464\x078\u039B\u039C";
SolidityLexer._serializedATNSegment2 = "\x07w\u039C\u039D\x07k\u039D\u039E\x07p\u039E\u039F\x07v\u039F\u03A0\x074\u03A0\u0464\x076\u03A1\u03A2\x07w\u03A2\u03A3\x07k\u03A3\u03A4\x07p\u03A4\u03A5\x07v\u03A5\u03A6\x075\u03A6\u0464\x074\u03A7\u03A8\x07w\u03A8\u03A9\x07k\u03A9\u03AA\x07p\u03AA\u03AB\x07v\u03AB\u03AC\x076\u03AC\u0464\x072\u03AD\u03AE\x07w\u03AE\u03AF\x07k\u03AF\u03B0\x07p\u03B0\u03B1\x07v\u03B1\u03B2\x076\u03B2\u0464\x07:\u03B3\u03B4\x07w\u03B4\u03B5\x07k\u03B5\u03B6\x07p\u03B6\u03B7\x07v\u03B7\u03B8\x077\u03B8\u0464\x078\u03B9\u03BA\x07w\u03BA\u03BB\x07k\u03BB\u03BC\x07p\u03BC\u03BD\x07v\u03BD\u03BE\x078\u03BE\u0464\x076\u03BF\u03C0\x07w\u03C0\u03C1\x07k\u03C1\u03C2\x07p\u03C2\u03C3\x07v\u03C3\u03C4\x079\u03C4\u0464\x074\u03C5\u03C6\x07w\u03C6\u03C7\x07k\u03C7\u03C8\x07p\u03C8\u03C9\x07v\u03C9\u03CA\x07:\u03CA\u0464\x072\u03CB\u03CC\x07w\u03CC\u03CD\x07k\u03CD\u03CE\x07p\u03CE\u03CF\x07v\u03CF\u03D0\x07:\u03D0\u0464\x07:\u03D1\u03D2\x07w\u03D2\u03D3\x07k\u03D3\u03D4\x07p\u03D4\u03D5\x07v\u03D5\u03D6\x07;\u03D6\u0464\x078\u03D7\u03D8\x07w\u03D8\u03D9\x07k\u03D9\u03DA\x07p\u03DA\u03DB\x07v\u03DB\u03DC\x073\u03DC\u03DD\x072\u03DD\u0464\x076\u03DE\u03DF\x07w\u03DF\u03E0\x07k\u03E0\u03E1\x07p\u03E1\u03E2\x07v\u03E2\u03E3\x073\u03E3\u03E4\x073\u03E4\u0464\x074\u03E5\u03E6\x07w\u03E6\u03E7\x07k\u03E7\u03E8\x07p\u03E8\u03E9\x07v\u03E9\u03EA\x073\u03EA\u03EB\x074\u03EB\u0464\x072\u03EC\u03ED\x07w\u03ED\u03EE\x07k\u03EE\u03EF\x07p\u03EF\u03F0\x07v\u03F0\u03F1\x073\u03F1\u03F2\x074\u03F2\u0464\x07:\u03F3\u03F4\x07w\u03F4\u03F5\x07k\u03F5\u03F6\x07p\u03F6\u03F7\x07v\u03F7\u03F8\x073\u03F8\u03F9\x075\u03F9\u0464\x078\u03FA\u03FB\x07w\u03FB\u03FC\x07k\u03FC\u03FD\x07p\u03FD\u03FE\x07v\u03FE\u03FF\x073\u03FF\u0400\x076\u0400\u0464\x076\u0401\u0402\x07w\u0402\u0403\x07k\u0403\u0404\x07p\u0404\u0405\x07v\u0405\u0406\x073\u0406\u0407\x077\u0407\u0464\x074\u0408\u0409\x07w\u0409\u040A\x07k\u040A\u040B\x07p\u040B\u040C\x07v\u040C\u040D\x073\u040D\u040E\x078\u040E\u0464\x072\u040F\u0410\x07w\u0410\u0411\x07k\u0411\u0412\x07p\u0412\u0413\x07v\u0413\u0414\x073\u0414\u0415\x078\u0415\u0464\x07:\u0416\u0417\x07w\u0417\u0418\x07k\u0418\u0419\x07p\u0419\u041A\x07v\u041A\u041B\x073\u041B\u041C\x079\u041C\u0464\x078\u041D\u041E\x07w\u041E\u041F\x07k\u041F\u0420\x07p\u0420\u0421\x07v\u0421\u0422\x073\u0422\u0423\x07:\u0423\u0464\x076\u0424\u0425\x07w\u0425\u0426\x07k\u0426\u0427\x07p\u0427\u0428\x07v\u0428\u0429\x073\u0429\u042A\x07;\u042A\u0464\x074\u042B\u042C\x07w\u042C\u042D\x07k\u042D\u042E\x07p\u042E\u042F\x07v\u042F\u0430\x074\u0430\u0431\x072\u0431\u0464\x072\u0432\u0433\x07w\u0433\u0434\x07k\u0434\u0435\x07p\u0435\u0436\x07v\u0436\u0437\x074\u0437\u0438\x072\u0438\u0464\x07:\u0439\u043A\x07w\u043A\u043B\x07k\u043B\u043C\x07p\u043C\u043D\x07v\u043D\u043E\x074\u043E\u043F\x073\u043F\u0464\x078\u0440\u0441\x07w\u0441\u0442\x07k\u0442\u0443\x07p\u0443\u0444\x07v\u0444\u0445\x074\u0445\u0446\x074\u0446\u0464\x076\u0447\u0448\x07w\u0448\u0449\x07k\u0449\u044A\x07p\u044A\u044B\x07v\u044B\u044C\x074\u044C\u044D\x075\u044D\u0464\x074\u044E\u044F\x07w\u044F\u0450\x07k\u0450\u0451\x07p\u0451\u0452\x07v\u0452\u0453\x074\u0453\u0454\x076\u0454\u0464\x072\u0455\u0456\x07w\u0456\u0457\x07k\u0457\u0458\x07p\u0458\u0459\x07v\u0459\u045A\x074\u045A\u045B\x076\u045B\u0464\x07:\u045C\u045D\x07w\u045D\u045E\x07k\u045E\u045F\x07p\u045F\u0460\x07v\u0460\u0461\x074\u0461\u0462\x077\u0462\u0464\x078\u0463\u038C\u0463\u0390\u0463\u0395\u0463\u039B\u0463\u03A1\u0463\u03A7\u0463\u03AD\u0463\u03B3\u0463\u03B9\u0463\u03BF\u0463\u03C5\u0463\u03CB\u0463\u03D1\u0463\u03D7\u0463\u03DE\u0463\u03E5\u0463\u03EC\u0463\u03F3\u0463\u03FA\u0463\u0401\u0463\u0408\u0463\u040F\u0463\u0416\u0463\u041D\u0463\u0424\u0463\u042B\u0463\u0432\u0463\u0439\u0463\u0440\u0463\u0447\u0463\u044E\u0463\u0455\u0463\u045C\u0464\xC8\u0465\u0466\x07d\u0466\u0467\x07{\u0467\u0468\x07v\u0468\u0469\x07g\u0469\u0542\x07u\u046A\u046B\x07d\u046B\u046C\x07{\u046C\u046D\x07v\u046D\u046E\x07g\u046E\u046F\x07u\u046F\u0542\x073\u0470\u0471\x07d\u0471\u0472\x07{\u0472\u0473\x07v\u0473\u0474\x07g\u0474\u0475\x07u\u0475\u0542\x074\u0476\u0477\x07d\u0477\u0478\x07{\u0478\u0479\x07v\u0479\u047A\x07g\u047A\u047B\x07u\u047B\u0542\x075\u047C\u047D\x07d\u047D\u047E\x07{\u047E\u047F\x07v\u047F\u0480\x07g\u0480\u0481\x07u\u0481\u0542\x076\u0482\u0483\x07d\u0483\u0484\x07{\u0484\u0485\x07v\u0485\u0486\x07g\u0486\u0487\x07u\u0487\u0542\x077\u0488\u0489\x07d\u0489\u048A\x07{\u048A\u048B\x07v\u048B\u048C\x07g\u048C\u048D\x07u\u048D\u0542\x078\u048E\u048F\x07d\u048F\u0490\x07{\u0490\u0491\x07v\u0491\u0492\x07g\u0492\u0493\x07u\u0493\u0542\x079\u0494\u0495\x07d\u0495\u0496\x07{\u0496\u0497\x07v\u0497\u0498\x07g\u0498\u0499\x07u\u0499\u0542\x07:\u049A\u049B\x07d\u049B\u049C\x07{\u049C\u049D\x07v\u049D\u049E\x07g\u049E\u049F\x07u\u049F\u0542\x07;\u04A0\u04A1\x07d\u04A1\u04A2\x07{\u04A2\u04A3\x07v\u04A3\u04A4\x07g\u04A4\u04A5\x07u\u04A5\u04A6\x073\u04A6\u0542\x072\u04A7\u04A8\x07d\u04A8\u04A9\x07{\u04A9\u04AA\x07v\u04AA\u04AB\x07g\u04AB\u04AC\x07u\u04AC\u04AD\x073\u04AD\u0542\x073\u04AE\u04AF\x07d\u04AF\u04B0\x07{\u04B0\u04B1\x07v\u04B1\u04B2\x07g\u04B2\u04B3\x07u\u04B3\u04B4\x073\u04B4\u0542\x074\u04B5\u04B6\x07d\u04B6\u04B7\x07{\u04B7\u04B8\x07v\u04B8\u04B9\x07g\u04B9\u04BA\x07u\u04BA\u04BB\x073\u04BB\u0542\x075\u04BC\u04BD\x07d\u04BD\u04BE\x07{\u04BE\u04BF\x07v\u04BF\u04C0\x07g\u04C0\u04C1\x07u\u04C1\u04C2\x073\u04C2\u0542\x076\u04C3\u04C4\x07d\u04C4\u04C5\x07{\u04C5\u04C6\x07v\u04C6\u04C7\x07g\u04C7\u04C8\x07u\u04C8\u04C9\x073\u04C9\u0542\x077\u04CA\u04CB\x07d\u04CB\u04CC\x07{\u04CC\u04CD\x07v\u04CD\u04CE\x07g\u04CE\u04CF\x07u\u04CF\u04D0\x073\u04D0\u0542\x078\u04D1\u04D2\x07d\u04D2\u04D3\x07{\u04D3\u04D4\x07v\u04D4\u04D5\x07g\u04D5\u04D6\x07u\u04D6\u04D7\x073\u04D7\u0542\x079\u04D8\u04D9\x07d\u04D9\u04DA\x07{\u04DA\u04DB\x07v\u04DB\u04DC\x07g\u04DC\u04DD\x07u\u04DD\u04DE\x073\u04DE\u0542\x07:\u04DF\u04E0\x07d\u04E0\u04E1\x07{\u04E1\u04E2\x07v\u04E2\u04E3\x07g\u04E3\u04E4\x07u\u04E4\u04E5\x073\u04E5\u0542\x07;\u04E6\u04E7\x07d\u04E7\u04E8\x07{\u04E8\u04E9\x07v\u04E9\u04EA\x07g\u04EA\u04EB\x07u\u04EB\u04EC\x074\u04EC\u0542\x072\u04ED\u04EE\x07d\u04EE\u04EF\x07{\u04EF\u04F0\x07v\u04F0\u04F1\x07g\u04F1\u04F2\x07u\u04F2\u04F3\x074\u04F3\u0542\x073\u04F4\u04F5\x07d\u04F5\u04F6\x07{\u04F6\u04F7\x07v\u04F7\u04F8\x07g\u04F8\u04F9\x07u\u04F9\u04FA\x074\u04FA\u0542\x074\u04FB\u04FC\x07d\u04FC\u04FD\x07{\u04FD\u04FE\x07v\u04FE\u04FF\x07g\u04FF\u0500\x07u\u0500\u0501\x074\u0501\u0542\x075\u0502\u0503\x07d\u0503\u0504\x07{\u0504\u0505\x07v\u0505\u0506\x07g\u0506\u0507\x07u\u0507\u0508\x074\u0508\u0542\x076\u0509\u050A\x07d\u050A\u050B\x07{\u050B\u050C\x07v\u050C\u050D\x07g\u050D\u050E\x07u\u050E\u050F\x074\u050F\u0542\x077\u0510\u0511\x07d\u0511\u0512\x07{\u0512\u0513\x07v\u0513\u0514\x07g\u0514\u0515\x07u\u0515\u0516\x074\u0516\u0542\x078\u0517\u0518\x07d\u0518\u0519\x07{\u0519\u051A\x07v\u051A\u051B\x07g\u051B\u051C\x07u\u051C\u051D\x074\u051D\u0542\x079\u051E\u051F\x07d\u051F\u0520\x07{\u0520\u0521\x07v\u0521\u0522\x07g\u0522\u0523\x07u\u0523\u0524\x074\u0524\u0542\x07:\u0525\u0526\x07d\u0526\u0527\x07{\u0527\u0528\x07v\u0528\u0529\x07g\u0529\u052A\x07u\u052A\u052B\x074\u052B\u0542\x07;\u052C\u052D\x07d\u052D\u052E\x07{\u052E\u052F\x07v\u052F\u0530\x07g\u0530\u0531\x07u\u0531\u0532\x075\u0532\u0542\x072\u0533\u0534\x07d\u0534\u0535\x07{\u0535\u0536\x07v\u0536\u0537\x07g\u0537\u0538\x07u\u0538\u0539\x075\u0539\u0542\x073\u053A\u053B\x07d\u053B\u053C\x07{\u053C\u053D\x07v\u053D\u053E\x07g\u053E\u053F\x07u\u053F\u0540\x075\u0540\u0542\x074\u0541\u0465\u0541\u046A\u0541\u0470\u0541\u0476\u0541\u047C\u0541\u0482\u0541\u0488\u0541\u048E\u0541\u0494\u0541\u049A\u0541\u04A0\u0541\u04A7\u0541\u04AE\u0541\u04B5\u0541\u04BC\u0541\u04C3\u0541\u04CA\u0541\u04D1\u0541\u04D8\u0541\u04DF\u0541\u04E6\u0541\u04ED\u0541\u04F4\u0541\u04FB\u0541\u0502\u0541\u0509\u0541\u0510\u0541\u0517\u0541\u051E\u0541\u0525\u0541\u052C\u0541\u0533\u0541\u053A\u0542\xCA\u0543\u0544\x07h\u0544\u0545\x07k\u0545\u0546\x07z\u0546\u0547\x07g\u0547\u055A\x07f\u0548\u0549\x07h\u0549\u054A\x07k\u054A\u054B\x07z\u054B\u054C\x07g\u054C\u054D\x07f\u054D\u054F\u054E\u0550	\u054F\u054E\u0550\u0551\u0551\u054F\u0551\u0552\u0552\u0553\u0553\u0555\x07z\u0554\u0556	\u0555\u0554\u0556\u0557\u0557\u0555\u0557\u0558\u0558\u055A\u0559\u0543\u0559\u0548\u055A\xCC\u055B\u055C\x07w\u055C\u055D\x07h\u055D\u055E\x07k\u055E\u055F\x07z\u055F\u0560\x07g\u0560\u0574\x07f\u0561\u0562\x07w\u0562\u0563\x07h\u0563\u0564\x07k\u0564\u0565\x07z\u0565\u0566\x07g\u0566\u0567\x07f\u0567\u0569\u0568\u056A	\u0569\u0568\u056A\u056B\u056B\u0569\u056B\u056C\u056C\u056D\u056D\u056F\x07z\u056E\u0570	\u056F\u056E\u0570\u0571\u0571\u056F\u0571\u0572\u0572\u0574\u0573\u055B\u0573\u0561\u0574\xCE\u0575\u0576\x07v\u0576\u0577\x07t\u0577\u0578\x07w\u0578\u057F\x07g\u0579\u057A\x07h\u057A\u057B\x07c\u057B\u057C\x07n\u057C\u057D\x07u\u057D\u057F\x07g\u057E\u0575\u057E\u0579\u057F\xD0\u0580\u0587\xD3j\u0581\u0583\xD3j\u0582\u0581\u0582\u0583\u0583\u0584\u0584\u0585\x070\u0585\u0587\xD3j\u0586\u0580\u0586\u0582\u0587\u058A\u0588\u0589	\u0589\u058B\xD3j\u058A\u0588\u058A\u058B\u058B\xD2\u058C\u0593	\u058D\u058F\x07a\u058E\u058D\u058E\u058F\u058F\u0590\u0590\u0592	\u0591\u058E\u0592\u0595\u0593\u0591\u0593\u0594\u0594\xD4\u0595\u0593\u0596\u0597\x072\u0597\u0598	\u0598\u0599\xD7l\u0599\xD6\u059A\u05A1\xDFp\u059B\u059D\x07a\u059C\u059B\u059C\u059D\u059D\u059E\u059E\u05A0\xDFp\u059F\u059C\u05A0\u05A3\u05A1\u059F\u05A1\u05A2\u05A2\xD8\u05A3\u05A1\u05A4\u05A5\x07y\u05A5\u05A6\x07g\u05A6\u05DD\x07k\u05A7\u05A8\x07i\u05A8\u05A9\x07y\u05A9\u05AA\x07g\u05AA\u05DD\x07k\u05AB\u05AC\x07u\u05AC\u05AD\x07|\u05AD\u05AE\x07c\u05AE\u05AF\x07d\u05AF\u05DD\x07q\u05B0\u05B1\x07h\u05B1\u05B2\x07k\u05B2\u05B3\x07p\u05B3\u05B4\x07p\u05B4\u05B5\x07g\u05B5\u05DD\x07{\u05B6\u05B7\x07g\u05B7\u05B8\x07v\u05B8\u05B9\x07j\u05B9\u05BA\x07g\u05BA\u05DD\x07t\u05BB\u05BC\x07u\u05BC\u05BD\x07g\u05BD\u05BE\x07e\u05BE\u05BF\x07q\u05BF\u05C0\x07p\u05C0\u05C1\x07f\u05C1\u05DD\x07u\u05C2\u05C3\x07o\u05C3\u05C4\x07k\u05C4\u05C5\x07p\u05C5\u05C6\x07w\u05C6\u05C7\x07v\u05C7\u05C8\x07g\u05C8\u05DD\x07u\u05C9\u05CA\x07j\u05CA\u05CB\x07q\u05CB\u05CC\x07w\u05CC\u05CD\x07t\u05CD\u05DD\x07u\u05CE\u05CF\x07f\u05CF\u05D0\x07c\u05D0\u05D1\x07{\u05D1\u05DD\x07u\u05D2\u05D3\x07y\u05D3\u05D4\x07g\u05D4\u05D5\x07g\u05D5\u05D6\x07m\u05D6\u05DD\x07u\u05D7\u05D8\x07{\u05D8\u05D9\x07g\u05D9\u05DA\x07c\u05DA\u05DB\x07t\u05DB\u05DD\x07u\u05DC\u05A4\u05DC\u05A7\u05DC\u05AB\u05DC\u05B0\u05DC\u05B6\u05DC\u05BB\u05DC\u05C2\u05DC\u05C9\u05DC\u05CE\u05DC\u05D2\u05DC\u05D7\u05DD\xDA\u05DE\u05DF\x07j\u05DF\u05E0\x07g\u05E0\u05E1\x07z\u05E1\u05EC\u05E2\u05E4\x07$\u05E3\u05E5\xD7l\u05E4\u05E3\u05E4\u05E5\u05E5\u05E6\u05E6\u05ED\x07$\u05E7\u05E9\x07)\u05E8\u05EA\xD7l\u05E9\u05E8\u05E9\u05EA\u05EA\u05EB\u05EB\u05ED\x07)\u05EC\u05E2\u05EC\u05E7\u05ED\xDC\u05EE\u05EF\xDFp\u05EF\u05F0\xDFp\u05F0\xDE\u05F1\u05F2	\u05F2\xE0\u05F3\u05F4\x07c\u05F4\u05F5\x07d\u05F5\u05F6\x07u\u05F6\u05F7\x07v\u05F7\u05F8\x07t\u05F8\u05F9\x07c\u05F9\u05FA\x07e\u05FA\u064C\x07v\u05FB\u05FC\x07c\u05FC\u05FD\x07h\u05FD\u05FE\x07v\u05FE\u05FF\x07g\u05FF\u064C\x07t\u0600\u0601\x07e\u0601\u0602\x07c\u0602\u0603\x07u\u0603\u064C\x07g\u0604\u0605\x07e\u0605\u0606\x07c\u0606\u0607\x07v\u0607\u0608\x07e\u0608\u064C\x07j\u0609\u060A\x07f\u060A\u060B\x07g\u060B\u060C\x07h\u060C\u060D\x07c\u060D\u060E\x07w\u060E\u060F\x07n\u060F\u064C\x07v\u0610\u0611\x07h\u0611\u0612\x07k\u0612\u0613\x07p\u0613\u0614\x07c\u0614\u064C\x07n\u0615\u0616\x07k\u0616\u064C\x07p\u0617\u0618\x07k\u0618\u0619\x07p\u0619\u061A\x07n\u061A\u061B\x07k\u061B\u061C\x07p\u061C\u064C\x07g\u061D\u061E\x07n\u061E\u061F\x07g\u061F\u064C\x07v\u0620\u0621\x07o\u0621\u0622\x07c\u0622\u0623\x07v\u0623\u0624\x07e\u0624\u064C\x07j\u0625\u0626\x07p\u0626\u0627\x07w\u0627\u0628\x07n\u0628\u064C\x07n\u0629\u062A\x07q\u062A\u064C\x07h\u062B\u062C\x07t\u062C\u062D\x07g\u062D\u062E\x07n\u062E\u062F\x07q\u062F\u0630\x07e\u0630\u0631\x07c\u0631\u0632\x07v\u0632\u0633\x07c\u0633\u0634\x07d\u0634\u0635\x07n\u0635\u064C\x07g\u0636\u0637\x07u\u0637\u0638\x07v\u0638\u0639\x07c\u0639\u063A\x07v\u063A\u063B\x07k\u063B\u064C\x07e\u063C\u063D\x07u\u063D\u063E\x07y\u063E\u063F\x07k\u063F\u0640\x07v\u0640\u0641\x07e\u0641\u064C\x07j\u0642\u0643\x07v\u0643\u0644\x07t\u0644\u064C\x07{\u0645\u0646\x07v\u0646\u0647\x07{\u0647\u0648\x07r\u0648\u0649\x07g\u0649\u064A\x07q\u064A\u064C\x07h\u064B\u05F3\u064B\u05FB\u064B\u0600\u064B\u0604\u064B\u0609\u064B\u0610\u064B\u0615\u064B\u0617\u064B\u061D\u064B\u0620\u064B\u0625\u064B\u0629\u064B\u062B\u064B\u0636\u064B\u063C\u064B\u0642\u064B\u0645\u064C\xE2\u064D\u064E\x07c\u064E\u064F\x07p\u064F\u0650\x07q\u0650\u0651\x07p\u0651\u0652\x07{\u0652\u0653\x07o\u0653\u0654\x07q\u0654\u0655\x07w\u0655\u0656\x07u\u0656\xE4\u0657\u0658\x07d\u0658\u0659\x07t\u0659\u065A\x07g\u065A\u065B\x07c\u065B\u065C\x07m\u065C\xE6\u065D\u065E\x07e\u065E\u065F\x07q\u065F\u0660\x07p\u0660\u0661\x07u\u0661\u0662\x07v\u0662\u0663\x07c\u0663\u0664\x07p\u0664\u0665\x07v\u0665\xE8\u0666\u0667\x07k\u0667\u0668\x07o\u0668\u0669\x07o\u0669\u066A\x07w\u066A\u066B\x07v\u066B\u066C\x07c\u066C\u066D\x07d\u066D\u066E\x07n\u066E\u066F\x07g\u066F\xEA\u0670\u0671\x07e\u0671\u0672\x07q";
SolidityLexer._serializedATNSegment3 = "\u0672\u0673\x07p\u0673\u0674\x07v\u0674\u0675\x07k\u0675\u0676\x07p\u0676\u0677\x07w\u0677\u0678\x07g\u0678\xEC\u0679\u067A\x07n\u067A\u067B\x07g\u067B\u067C\x07c\u067C\u067D\x07x\u067D\u067E\x07g\u067E\xEE\u067F\u0680\x07g\u0680\u0681\x07z\u0681\u0682\x07v\u0682\u0683\x07g\u0683\u0684\x07t\u0684\u0685\x07p\u0685\u0686\x07c\u0686\u0687\x07n\u0687\xF0\u0688\u0689\x07k\u0689\u068A\x07p\u068A\u068B\x07f\u068B\u068C\x07g\u068C\u068D\x07z\u068D\u068E\x07g\u068E\u068F\x07f\u068F\xF2\u0690\u0691\x07k\u0691\u0692\x07p\u0692\u0693\x07v\u0693\u0694\x07g\u0694\u0695\x07t\u0695\u0696\x07p\u0696\u0697\x07c\u0697\u0698\x07n\u0698\xF4\u0699\u069A\x07r\u069A\u069B\x07c\u069B\u069C\x07{\u069C\u069D\x07c\u069D\u069E\x07d\u069E\u069F\x07n\u069F\u06A0\x07g\u06A0\xF6\u06A1\u06A2\x07r\u06A2\u06A3\x07t\u06A3\u06A4\x07k\u06A4\u06A5\x07x\u06A5\u06A6\x07c\u06A6\u06A7\x07v\u06A7\u06A8\x07g\u06A8\xF8\u06A9\u06AA\x07r\u06AA\u06AB\x07w\u06AB\u06AC\x07d\u06AC\u06AD\x07n\u06AD\u06AE\x07k\u06AE\u06AF\x07e\u06AF\xFA\u06B0\u06B1\x07x\u06B1\u06B2\x07k\u06B2\u06B3\x07t\u06B3\u06B4\x07v\u06B4\u06B5\x07w\u06B5\u06B6\x07c\u06B6\u06B7\x07n\u06B7\xFC\u06B8\u06B9\x07r\u06B9\u06BA\x07w\u06BA\u06BB\x07t\u06BB\u06BC\x07g\u06BC\xFE\u06BD\u06BE\x07v\u06BE\u06BF\x07{\u06BF\u06C0\x07r\u06C0\u06C1\x07g\u06C1\u0100\u06C2\u06C3\x07x\u06C3\u06C4\x07k\u06C4\u06C5\x07g\u06C5\u06C6\x07y\u06C6\u0102\u06C7\u06C8\x07i\u06C8\u06C9\x07n\u06C9\u06CA\x07q\u06CA\u06CB\x07d\u06CB\u06CC\x07c\u06CC\u06CD\x07n\u06CD\u0104\u06CE\u06CF\x07e\u06CF\u06D0\x07q\u06D0\u06D1\x07p\u06D1\u06D2\x07u\u06D2\u06D3\x07v\u06D3\u06D4\x07t\u06D4\u06D5\x07w\u06D5\u06D6\x07e\u06D6\u06D7\x07v\u06D7\u06D8\x07q\u06D8\u06D9\x07t\u06D9\u0106\u06DA\u06DB\x07h\u06DB\u06DC\x07c\u06DC\u06DD\x07n\u06DD\u06DE\x07n\u06DE\u06DF\x07d\u06DF\u06E0\x07c\u06E0\u06E1\x07e\u06E1\u06E2\x07m\u06E2\u0108\u06E3\u06E4\x07t\u06E4\u06E5\x07g\u06E5\u06E6\x07e\u06E6\u06E7\x07g\u06E7\u06E8\x07k\u06E8\u06E9\x07x\u06E9\u06EA\x07g\u06EA\u010A\u06EB\u06EF\u010D\x87\u06EC\u06EE\u010F\x88\u06ED\u06EC\u06EE\u06F1\u06EF\u06ED\u06EF\u06F0\u06F0\u010C\u06F1\u06EF\u06F2\u06F3	\u06F3\u010E\u06F4\u06F5	\x07\u06F5\u0110\u06F6\u06F7\x07w\u06F7\u06F8\x07p\u06F8\u06F9\x07k\u06F9\u06FA\x07e\u06FA\u06FB\x07q\u06FB\u06FC\x07f\u06FC\u06FE\x07g\u06FD\u06F6\u06FD\u06FE\u06FE\u06FF\u06FF\u0703\x07$\u0700\u0702\u0113\x8A\u0701\u0700\u0702\u0705\u0703\u0701\u0703\u0704\u0704\u0706\u0705\u0703\u0706\u0719\x07$\u0707\u0708\x07w\u0708\u0709\x07p\u0709\u070A\x07k\u070A\u070B\x07e\u070B\u070C\x07q\u070C\u070D\x07f\u070D\u070F\x07g\u070E\u0707\u070E\u070F\u070F\u0710\u0710\u0714\x07)\u0711\u0713\u0115\x8B\u0712\u0711\u0713\u0716\u0714\u0712\u0714\u0715\u0715\u0717\u0716\u0714\u0717\u0719\x07)\u0718\u06FD\u0718\u070E\u0719\u0112\u071A\u071E\n\b\u071B\u071C\x07^\u071C\u071E\v\u071D\u071A\u071D\u071B\u071E\u0114\u071F\u0723\n	\u0720\u0721\x07^\u0721\u0723\v\u0722\u071F\u0722\u0720\u0723\u0116\u0724\u0726	\u0725\u0724\u0726\u0727\u0727\u0725\u0727\u0728\u0728\u0729\u0729\u072B\x070\u072A\u072C	\u072B\u072A\u072C\u072D\u072D\u072B\u072D\u072E\u072E\u0735\u072F\u0731\x070\u0730\u0732	\u0731\u0730\u0732\u0733\u0733\u0731\u0733\u0734\u0734\u0736\u0735\u072F\u0735\u0736\u0736\u0118\u0737\u0739	\n\u0738\u0737\u0739\u073A\u073A\u0738\u073A\u073B\u073B\u073C\u073C\u073D\b\x8D\u073D\u011A\u073E\u073F\x071\u073F\u0740\x07,\u0740\u0744\u0741\u0743\v\u0742\u0741\u0743\u0746\u0744\u0745\u0744\u0742\u0745\u0747\u0746\u0744\u0747\u0748\x07,\u0748\u0749\x071\u0749\u074A\u074A\u074B\b\x8E\u074B\u011C\u074C\u074D\x071\u074D\u074E\x071\u074E\u0752\u074F\u0751\n\v\u0750\u074F\u0751\u0754\u0752\u0750\u0752\u0753\u0753\u0755\u0754\u0752\u0755\u0756\b\x8F\u0756\u011E(\u038A\u0463\u0541\u0551\u0557\u0559\u056B\u0571\u0573\u057E\u0582\u0586\u058A\u058E\u0593\u059C\u05A1\u05DC\u05E4\u05E9\u05EC\u064B\u06EF\u06FD\u0703\u070E\u0714\u0718\u071D\u0722\u0727\u072D\u0733\u0735\u073A\u0744\u0752\b";
SolidityLexer._serializedATN = Utils.join([
  _SolidityLexer._serializedATNSegment0,
  _SolidityLexer._serializedATNSegment1,
  _SolidityLexer._serializedATNSegment2,
  _SolidityLexer._serializedATNSegment3
], "");

// src/antlr/SolidityParser.ts
var import_ATN = __toModule(require_ATN());
var import_ATNDeserializer2 = __toModule(require_ATNDeserializer());
var import_FailedPredicateException = __toModule(require_FailedPredicateException());
var import_NoViableAltException = __toModule(require_NoViableAltException());
var import_Parser = __toModule(require_Parser());
var import_ParserRuleContext = __toModule(require_ParserRuleContext());
var import_ParserATNSimulator = __toModule(require_ParserATNSimulator());
var import_RecognitionException = __toModule(require_RecognitionException());
var import_Token = __toModule(require_Token());
var import_VocabularyImpl2 = __toModule(require_VocabularyImpl());
var Utils2 = __toModule(require_Utils());
var _SolidityParser = class extends import_Parser.Parser {
  get vocabulary() {
    return _SolidityParser.VOCABULARY;
  }
  get grammarFileName() {
    return "Solidity.g4";
  }
  get ruleNames() {
    return _SolidityParser.ruleNames;
  }
  get serializedATN() {
    return _SolidityParser._serializedATN;
  }
  createFailedPredicateException(predicate, message) {
    return new import_FailedPredicateException.FailedPredicateException(this, predicate, message);
  }
  constructor(input) {
    super(input);
    this._interp = new import_ParserATNSimulator.ParserATNSimulator(_SolidityParser._ATN, this);
  }
  sourceUnit() {
    let _localctx = new SourceUnitContext(this._ctx, this.state);
    this.enterRule(_localctx, 0, _SolidityParser.RULE_sourceUnit);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__0 | 1 << _SolidityParser.T__12 | 1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__17 | 1 << _SolidityParser.T__18 | 1 << _SolidityParser.T__19 | 1 << _SolidityParser.T__20 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__25 | 1 << _SolidityParser.T__27 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 33 & ~31) === 0 && (1 << _la - 33 & (1 << _SolidityParser.T__32 - 33 | 1 << _SolidityParser.T__35 - 33 | 1 << _SolidityParser.T__37 - 33 | 1 << _SolidityParser.T__41 - 33 | 1 << _SolidityParser.T__53 - 33 | 1 << _SolidityParser.T__54 - 33 | 1 << _SolidityParser.T__55 - 33 | 1 << _SolidityParser.T__56 - 33 | 1 << _SolidityParser.T__57 - 33)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96 | 1 << _SolidityParser.FallbackKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 206;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {
              case 1:
                {
                  this.state = 196;
                  this.pragmaDirective();
                }
                break;
              case 2:
                {
                  this.state = 197;
                  this.importDirective();
                }
                break;
              case 3:
                {
                  this.state = 198;
                  this.contractDefinition();
                }
                break;
              case 4:
                {
                  this.state = 199;
                  this.enumDefinition();
                }
                break;
              case 5:
                {
                  this.state = 200;
                  this.structDefinition();
                }
                break;
              case 6:
                {
                  this.state = 201;
                  this.functionDefinition();
                }
                break;
              case 7:
                {
                  this.state = 202;
                  this.fileLevelConstant();
                }
                break;
              case 8:
                {
                  this.state = 203;
                  this.customErrorDefinition();
                }
                break;
              case 9:
                {
                  this.state = 204;
                  this.typeDefinition();
                }
                break;
              case 10:
                {
                  this.state = 205;
                  this.usingForDeclaration();
                }
                break;
            }
          }
          this.state = 210;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 211;
        this.match(_SolidityParser.EOF);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  pragmaDirective() {
    let _localctx = new PragmaDirectiveContext(this._ctx, this.state);
    this.enterRule(_localctx, 2, _SolidityParser.RULE_pragmaDirective);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 213;
        this.match(_SolidityParser.T__0);
        this.state = 214;
        this.pragmaName();
        this.state = 215;
        this.pragmaValue();
        this.state = 216;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  pragmaName() {
    let _localctx = new PragmaNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 4, _SolidityParser.RULE_pragmaName);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 218;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  pragmaValue() {
    let _localctx = new PragmaValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 6, _SolidityParser.RULE_pragmaValue);
    try {
      this.state = 223;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 220;
            this.match(_SolidityParser.T__2);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 221;
            this.version();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 222;
            this.expression(0);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  version() {
    let _localctx = new VersionContext(this._ctx, this.state);
    this.enterRule(_localctx, 8, _SolidityParser.RULE_version);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 225;
        this.versionConstraint();
        this.state = 232;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__3 | 1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0 || _la === _SolidityParser.DecimalNumber || _la === _SolidityParser.VersionLiteral) {
          {
            {
              this.state = 227;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _SolidityParser.T__3) {
                {
                  this.state = 226;
                  this.match(_SolidityParser.T__3);
                }
              }
              this.state = 229;
              this.versionConstraint();
            }
          }
          this.state = 234;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  versionOperator() {
    let _localctx = new VersionOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 10, _SolidityParser.RULE_versionOperator);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 235;
        _la = this._input.LA(1);
        if (!((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === import_Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  versionConstraint() {
    let _localctx = new VersionConstraintContext(this._ctx, this.state);
    this.enterRule(_localctx, 12, _SolidityParser.RULE_versionConstraint);
    let _la;
    try {
      this.state = 245;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0) {
              {
                this.state = 237;
                this.versionOperator();
              }
            }
            this.state = 240;
            this.match(_SolidityParser.VersionLiteral);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0) {
              {
                this.state = 241;
                this.versionOperator();
              }
            }
            this.state = 244;
            this.match(_SolidityParser.DecimalNumber);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  importDeclaration() {
    let _localctx = new ImportDeclarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 14, _SolidityParser.RULE_importDeclaration);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 247;
        this.identifier();
        this.state = 250;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__11) {
          {
            this.state = 248;
            this.match(_SolidityParser.T__11);
            this.state = 249;
            this.identifier();
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  importDirective() {
    let _localctx = new ImportDirectiveContext(this._ctx, this.state);
    this.enterRule(_localctx, 16, _SolidityParser.RULE_importDirective);
    let _la;
    try {
      this.state = 288;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 252;
            this.match(_SolidityParser.T__12);
            this.state = 253;
            this.importPath();
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _SolidityParser.T__11) {
              {
                this.state = 254;
                this.match(_SolidityParser.T__11);
                this.state = 255;
                this.identifier();
              }
            }
            this.state = 258;
            this.match(_SolidityParser.T__1);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 260;
            this.match(_SolidityParser.T__12);
            this.state = 263;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case _SolidityParser.T__2:
                {
                  this.state = 261;
                  this.match(_SolidityParser.T__2);
                }
                break;
              case _SolidityParser.T__13:
              case _SolidityParser.T__24:
              case _SolidityParser.T__35:
              case _SolidityParser.T__41:
              case _SolidityParser.T__53:
              case _SolidityParser.T__95:
              case _SolidityParser.LeaveKeyword:
              case _SolidityParser.PayableKeyword:
              case _SolidityParser.ConstructorKeyword:
              case _SolidityParser.ReceiveKeyword:
              case _SolidityParser.Identifier:
                {
                  this.state = 262;
                  this.identifier();
                }
                break;
              default:
                throw new import_NoViableAltException.NoViableAltException(this);
            }
            this.state = 267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _SolidityParser.T__11) {
              {
                this.state = 265;
                this.match(_SolidityParser.T__11);
                this.state = 266;
                this.identifier();
              }
            }
            this.state = 269;
            this.match(_SolidityParser.T__13);
            this.state = 270;
            this.importPath();
            this.state = 271;
            this.match(_SolidityParser.T__1);
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 273;
            this.match(_SolidityParser.T__12);
            this.state = 274;
            this.match(_SolidityParser.T__14);
            this.state = 275;
            this.importDeclaration();
            this.state = 280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === _SolidityParser.T__15) {
              {
                {
                  this.state = 276;
                  this.match(_SolidityParser.T__15);
                  this.state = 277;
                  this.importDeclaration();
                }
              }
              this.state = 282;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 283;
            this.match(_SolidityParser.T__16);
            this.state = 284;
            this.match(_SolidityParser.T__13);
            this.state = 285;
            this.importPath();
            this.state = 286;
            this.match(_SolidityParser.T__1);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  importPath() {
    let _localctx = new ImportPathContext(this._ctx, this.state);
    this.enterRule(_localctx, 18, _SolidityParser.RULE_importPath);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 290;
        this.match(_SolidityParser.StringLiteralFragment);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  contractDefinition() {
    let _localctx = new ContractDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 20, _SolidityParser.RULE_contractDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__17) {
          {
            this.state = 292;
            this.match(_SolidityParser.T__17);
          }
        }
        this.state = 295;
        _la = this._input.LA(1);
        if (!((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__18 | 1 << _SolidityParser.T__19 | 1 << _SolidityParser.T__20)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === import_Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 296;
        this.identifier();
        this.state = 306;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__21) {
          {
            this.state = 297;
            this.match(_SolidityParser.T__21);
            this.state = 298;
            this.inheritanceSpecifier();
            this.state = 303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === _SolidityParser.T__15) {
              {
                {
                  this.state = 299;
                  this.match(_SolidityParser.T__15);
                  this.state = 300;
                  this.inheritanceSpecifier();
                }
              }
              this.state = 305;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 308;
        this.match(_SolidityParser.T__14);
        this.state = 312;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__25 | 1 << _SolidityParser.T__27 | 1 << _SolidityParser.T__28 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 32 & ~31) === 0 && (1 << _la - 32 & (1 << _SolidityParser.T__31 - 32 | 1 << _SolidityParser.T__32 - 32 | 1 << _SolidityParser.T__35 - 32 | 1 << _SolidityParser.T__37 - 32 | 1 << _SolidityParser.T__41 - 32 | 1 << _SolidityParser.T__53 - 32 | 1 << _SolidityParser.T__54 - 32 | 1 << _SolidityParser.T__55 - 32 | 1 << _SolidityParser.T__56 - 32 | 1 << _SolidityParser.T__57 - 32)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96 | 1 << _SolidityParser.FallbackKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            {
              this.state = 309;
              this.contractPart();
            }
          }
          this.state = 314;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 315;
        this.match(_SolidityParser.T__16);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  inheritanceSpecifier() {
    let _localctx = new InheritanceSpecifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 22, _SolidityParser.RULE_inheritanceSpecifier);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 317;
        this.userDefinedTypeName();
        this.state = 323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__22) {
          {
            this.state = 318;
            this.match(_SolidityParser.T__22);
            this.state = 320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
              {
                this.state = 319;
                this.expressionList();
              }
            }
            this.state = 322;
            this.match(_SolidityParser.T__23);
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  contractPart() {
    let _localctx = new ContractPartContext(this._ctx, this.state);
    this.enterRule(_localctx, 24, _SolidityParser.RULE_contractPart);
    try {
      this.state = 334;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 20, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 325;
            this.stateVariableDeclaration();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 326;
            this.usingForDeclaration();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 327;
            this.structDefinition();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 328;
            this.modifierDefinition();
          }
          break;
        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 329;
            this.functionDefinition();
          }
          break;
        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 330;
            this.eventDefinition();
          }
          break;
        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 331;
            this.enumDefinition();
          }
          break;
        case 8:
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 332;
            this.customErrorDefinition();
          }
          break;
        case 9:
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 333;
            this.typeDefinition();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  stateVariableDeclaration() {
    let _localctx = new StateVariableDeclarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 26, _SolidityParser.RULE_stateVariableDeclaration);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 336;
        this.typeName(0);
        this.state = 345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la - 97 & ~31) === 0 && (1 << _la - 97 & (1 << _SolidityParser.T__96 - 97 | 1 << _SolidityParser.ConstantKeyword - 97 | 1 << _SolidityParser.ImmutableKeyword - 97 | 1 << _SolidityParser.InternalKeyword - 97 | 1 << _SolidityParser.PrivateKeyword - 97 | 1 << _SolidityParser.PublicKeyword - 97)) !== 0) {
          {
            this.state = 343;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case _SolidityParser.PublicKeyword:
                {
                  this.state = 337;
                  this.match(_SolidityParser.PublicKeyword);
                }
                break;
              case _SolidityParser.InternalKeyword:
                {
                  this.state = 338;
                  this.match(_SolidityParser.InternalKeyword);
                }
                break;
              case _SolidityParser.PrivateKeyword:
                {
                  this.state = 339;
                  this.match(_SolidityParser.PrivateKeyword);
                }
                break;
              case _SolidityParser.ConstantKeyword:
                {
                  this.state = 340;
                  this.match(_SolidityParser.ConstantKeyword);
                }
                break;
              case _SolidityParser.ImmutableKeyword:
                {
                  this.state = 341;
                  this.match(_SolidityParser.ImmutableKeyword);
                }
                break;
              case _SolidityParser.T__96:
                {
                  this.state = 342;
                  this.overrideSpecifier();
                }
                break;
              default:
                throw new import_NoViableAltException.NoViableAltException(this);
            }
          }
          this.state = 347;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 348;
        this.identifier();
        this.state = 351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__10) {
          {
            this.state = 349;
            this.match(_SolidityParser.T__10);
            this.state = 350;
            this.expression(0);
          }
        }
        this.state = 353;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  fileLevelConstant() {
    let _localctx = new FileLevelConstantContext(this._ctx, this.state);
    this.enterRule(_localctx, 28, _SolidityParser.RULE_fileLevelConstant);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 355;
        this.typeName(0);
        this.state = 356;
        this.match(_SolidityParser.ConstantKeyword);
        this.state = 357;
        this.identifier();
        this.state = 358;
        this.match(_SolidityParser.T__10);
        this.state = 359;
        this.expression(0);
        this.state = 360;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  customErrorDefinition() {
    let _localctx = new CustomErrorDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 30, _SolidityParser.RULE_customErrorDefinition);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 362;
        this.match(_SolidityParser.T__24);
        this.state = 363;
        this.identifier();
        this.state = 364;
        this.parameterList();
        this.state = 365;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  typeDefinition() {
    let _localctx = new TypeDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 32, _SolidityParser.RULE_typeDefinition);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 367;
        this.match(_SolidityParser.TypeKeyword);
        this.state = 368;
        this.identifier();
        this.state = 369;
        this.match(_SolidityParser.T__21);
        this.state = 370;
        this.elementaryTypeName();
        this.state = 371;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  usingForDeclaration() {
    let _localctx = new UsingForDeclarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 34, _SolidityParser.RULE_usingForDeclaration);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 373;
        this.match(_SolidityParser.T__25);
        this.state = 374;
        this.usingForObject();
        this.state = 375;
        this.match(_SolidityParser.T__26);
        this.state = 378;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _SolidityParser.T__2:
            {
              this.state = 376;
              this.match(_SolidityParser.T__2);
            }
            break;
          case _SolidityParser.T__13:
          case _SolidityParser.T__24:
          case _SolidityParser.T__29:
          case _SolidityParser.T__35:
          case _SolidityParser.T__37:
          case _SolidityParser.T__41:
          case _SolidityParser.T__53:
          case _SolidityParser.T__54:
          case _SolidityParser.T__55:
          case _SolidityParser.T__56:
          case _SolidityParser.T__57:
          case _SolidityParser.T__95:
          case _SolidityParser.Int:
          case _SolidityParser.Uint:
          case _SolidityParser.Byte:
          case _SolidityParser.Fixed:
          case _SolidityParser.Ufixed:
          case _SolidityParser.LeaveKeyword:
          case _SolidityParser.PayableKeyword:
          case _SolidityParser.ConstructorKeyword:
          case _SolidityParser.ReceiveKeyword:
          case _SolidityParser.Identifier:
            {
              this.state = 377;
              this.typeName(0);
            }
            break;
          default:
            throw new import_NoViableAltException.NoViableAltException(this);
        }
        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.GlobalKeyword) {
          {
            this.state = 380;
            this.match(_SolidityParser.GlobalKeyword);
          }
        }
        this.state = 383;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  usingForObject() {
    let _localctx = new UsingForObjectContext(this._ctx, this.state);
    this.enterRule(_localctx, 36, _SolidityParser.RULE_usingForObject);
    let _la;
    try {
      this.state = 397;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _SolidityParser.T__13:
        case _SolidityParser.T__24:
        case _SolidityParser.T__35:
        case _SolidityParser.T__41:
        case _SolidityParser.T__53:
        case _SolidityParser.T__95:
        case _SolidityParser.LeaveKeyword:
        case _SolidityParser.PayableKeyword:
        case _SolidityParser.ConstructorKeyword:
        case _SolidityParser.ReceiveKeyword:
        case _SolidityParser.Identifier:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 385;
            this.userDefinedTypeName();
          }
          break;
        case _SolidityParser.T__14:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 386;
            this.match(_SolidityParser.T__14);
            this.state = 387;
            this.userDefinedTypeName();
            this.state = 392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === _SolidityParser.T__15) {
              {
                {
                  this.state = 388;
                  this.match(_SolidityParser.T__15);
                  this.state = 389;
                  this.userDefinedTypeName();
                }
              }
              this.state = 394;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 395;
            this.match(_SolidityParser.T__16);
          }
          break;
        default:
          throw new import_NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  structDefinition() {
    let _localctx = new StructDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 38, _SolidityParser.RULE_structDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 399;
        this.match(_SolidityParser.T__27);
        this.state = 400;
        this.identifier();
        this.state = 401;
        this.match(_SolidityParser.T__14);
        this.state = 412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 402;
            this.variableDeclaration();
            this.state = 403;
            this.match(_SolidityParser.T__1);
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
              {
                {
                  this.state = 404;
                  this.variableDeclaration();
                  this.state = 405;
                  this.match(_SolidityParser.T__1);
                }
              }
              this.state = 411;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 414;
        this.match(_SolidityParser.T__16);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  modifierDefinition() {
    let _localctx = new ModifierDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 40, _SolidityParser.RULE_modifierDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 416;
        this.match(_SolidityParser.T__28);
        this.state = 417;
        this.identifier();
        this.state = 419;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__22) {
          {
            this.state = 418;
            this.parameterList();
          }
        }
        this.state = 425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _SolidityParser.T__96 || _la === _SolidityParser.VirtualKeyword) {
          {
            this.state = 423;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case _SolidityParser.VirtualKeyword:
                {
                  this.state = 421;
                  this.match(_SolidityParser.VirtualKeyword);
                }
                break;
              case _SolidityParser.T__96:
                {
                  this.state = 422;
                  this.overrideSpecifier();
                }
                break;
              default:
                throw new import_NoViableAltException.NoViableAltException(this);
            }
          }
          this.state = 427;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 430;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _SolidityParser.T__1:
            {
              this.state = 428;
              this.match(_SolidityParser.T__1);
            }
            break;
          case _SolidityParser.T__14:
            {
              this.state = 429;
              this.block();
            }
            break;
          default:
            throw new import_NoViableAltException.NoViableAltException(this);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  modifierInvocation() {
    let _localctx = new ModifierInvocationContext(this._ctx, this.state);
    this.enterRule(_localctx, 42, _SolidityParser.RULE_modifierInvocation);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 432;
        this.identifier();
        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__22) {
          {
            this.state = 433;
            this.match(_SolidityParser.T__22);
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
              {
                this.state = 434;
                this.expressionList();
              }
            }
            this.state = 437;
            this.match(_SolidityParser.T__23);
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  functionDefinition() {
    let _localctx = new FunctionDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 44, _SolidityParser.RULE_functionDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 440;
        this.functionDescriptor();
        this.state = 441;
        this.parameterList();
        this.state = 442;
        this.modifierList();
        this.state = 444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__30) {
          {
            this.state = 443;
            this.returnParameters();
          }
        }
        this.state = 448;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _SolidityParser.T__1:
            {
              this.state = 446;
              this.match(_SolidityParser.T__1);
            }
            break;
          case _SolidityParser.T__14:
            {
              this.state = 447;
              this.block();
            }
            break;
          default:
            throw new import_NoViableAltException.NoViableAltException(this);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  functionDescriptor() {
    let _localctx = new FunctionDescriptorContext(this._ctx, this.state);
    this.enterRule(_localctx, 46, _SolidityParser.RULE_functionDescriptor);
    let _la;
    try {
      this.state = 457;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _SolidityParser.T__29:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 450;
            this.match(_SolidityParser.T__29);
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
              {
                this.state = 451;
                this.identifier();
              }
            }
          }
          break;
        case _SolidityParser.ConstructorKeyword:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 454;
            this.match(_SolidityParser.ConstructorKeyword);
          }
          break;
        case _SolidityParser.FallbackKeyword:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 455;
            this.match(_SolidityParser.FallbackKeyword);
          }
          break;
        case _SolidityParser.ReceiveKeyword:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 456;
            this.match(_SolidityParser.ReceiveKeyword);
          }
          break;
        default:
          throw new import_NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  returnParameters() {
    let _localctx = new ReturnParametersContext(this._ctx, this.state);
    this.enterRule(_localctx, 48, _SolidityParser.RULE_returnParameters);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 459;
        this.match(_SolidityParser.T__30);
        this.state = 460;
        this.parameterList();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  modifierList() {
    let _localctx = new ModifierListContext(this._ctx, this.state);
    this.enterRule(_localctx, 50, _SolidityParser.RULE_modifierList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.T__96 - 96 | 1 << _SolidityParser.ConstantKeyword - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.ExternalKeyword - 96 | 1 << _SolidityParser.InternalKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.PrivateKeyword - 96 | 1 << _SolidityParser.PublicKeyword - 96 | 1 << _SolidityParser.VirtualKeyword - 96 | 1 << _SolidityParser.PureKeyword - 96 | 1 << _SolidityParser.ViewKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 470;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 40, this._ctx)) {
              case 1:
                {
                  this.state = 462;
                  this.match(_SolidityParser.ExternalKeyword);
                }
                break;
              case 2:
                {
                  this.state = 463;
                  this.match(_SolidityParser.PublicKeyword);
                }
                break;
              case 3:
                {
                  this.state = 464;
                  this.match(_SolidityParser.InternalKeyword);
                }
                break;
              case 4:
                {
                  this.state = 465;
                  this.match(_SolidityParser.PrivateKeyword);
                }
                break;
              case 5:
                {
                  this.state = 466;
                  this.match(_SolidityParser.VirtualKeyword);
                }
                break;
              case 6:
                {
                  this.state = 467;
                  this.stateMutability();
                }
                break;
              case 7:
                {
                  this.state = 468;
                  this.modifierInvocation();
                }
                break;
              case 8:
                {
                  this.state = 469;
                  this.overrideSpecifier();
                }
                break;
            }
          }
          this.state = 474;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  eventDefinition() {
    let _localctx = new EventDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 52, _SolidityParser.RULE_eventDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 475;
        this.match(_SolidityParser.T__31);
        this.state = 476;
        this.identifier();
        this.state = 477;
        this.eventParameterList();
        this.state = 479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.AnonymousKeyword) {
          {
            this.state = 478;
            this.match(_SolidityParser.AnonymousKeyword);
          }
        }
        this.state = 481;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  enumValue() {
    let _localctx = new EnumValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 54, _SolidityParser.RULE_enumValue);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 483;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  enumDefinition() {
    let _localctx = new EnumDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 56, _SolidityParser.RULE_enumDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 485;
        this.match(_SolidityParser.T__32);
        this.state = 486;
        this.identifier();
        this.state = 487;
        this.match(_SolidityParser.T__14);
        this.state = 489;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 488;
            this.enumValue();
          }
        }
        this.state = 495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _SolidityParser.T__15) {
          {
            {
              this.state = 491;
              this.match(_SolidityParser.T__15);
              this.state = 492;
              this.enumValue();
            }
          }
          this.state = 497;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 498;
        this.match(_SolidityParser.T__16);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  parameterList() {
    let _localctx = new ParameterListContext(this._ctx, this.state);
    this.enterRule(_localctx, 58, _SolidityParser.RULE_parameterList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 500;
        this.match(_SolidityParser.T__22);
        this.state = 509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 501;
            this.parameter();
            this.state = 506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === _SolidityParser.T__15) {
              {
                {
                  this.state = 502;
                  this.match(_SolidityParser.T__15);
                  this.state = 503;
                  this.parameter();
                }
              }
              this.state = 508;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 511;
        this.match(_SolidityParser.T__23);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  parameter() {
    let _localctx = new ParameterContext(this._ctx, this.state);
    this.enterRule(_localctx, 60, _SolidityParser.RULE_parameter);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 513;
        this.typeName(0);
        this.state = 515;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
          case 1:
            {
              this.state = 514;
              this.storageLocation();
            }
            break;
        }
        this.state = 518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 517;
            this.identifier();
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  eventParameterList() {
    let _localctx = new EventParameterListContext(this._ctx, this.state);
    this.enterRule(_localctx, 62, _SolidityParser.RULE_eventParameterList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 520;
        this.match(_SolidityParser.T__22);
        this.state = 529;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 521;
            this.eventParameter();
            this.state = 526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === _SolidityParser.T__15) {
              {
                {
                  this.state = 522;
                  this.match(_SolidityParser.T__15);
                  this.state = 523;
                  this.eventParameter();
                }
              }
              this.state = 528;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 531;
        this.match(_SolidityParser.T__23);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  eventParameter() {
    let _localctx = new EventParameterContext(this._ctx, this.state);
    this.enterRule(_localctx, 64, _SolidityParser.RULE_eventParameter);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 533;
        this.typeName(0);
        this.state = 535;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.IndexedKeyword) {
          {
            this.state = 534;
            this.match(_SolidityParser.IndexedKeyword);
          }
        }
        this.state = 538;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 537;
            this.identifier();
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  functionTypeParameterList() {
    let _localctx = new FunctionTypeParameterListContext(this._ctx, this.state);
    this.enterRule(_localctx, 66, _SolidityParser.RULE_functionTypeParameterList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 540;
        this.match(_SolidityParser.T__22);
        this.state = 549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 541;
            this.functionTypeParameter();
            this.state = 546;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === _SolidityParser.T__15) {
              {
                {
                  this.state = 542;
                  this.match(_SolidityParser.T__15);
                  this.state = 543;
                  this.functionTypeParameter();
                }
              }
              this.state = 548;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 551;
        this.match(_SolidityParser.T__23);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  functionTypeParameter() {
    let _localctx = new FunctionTypeParameterContext(this._ctx, this.state);
    this.enterRule(_localctx, 68, _SolidityParser.RULE_functionTypeParameter);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 553;
        this.typeName(0);
        this.state = 555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 40 & ~31) === 0 && (1 << _la - 40 & (1 << _SolidityParser.T__39 - 40 | 1 << _SolidityParser.T__40 - 40 | 1 << _SolidityParser.T__41 - 40)) !== 0) {
          {
            this.state = 554;
            this.storageLocation();
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  variableDeclaration() {
    let _localctx = new VariableDeclarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 70, _SolidityParser.RULE_variableDeclaration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 557;
        this.typeName(0);
        this.state = 559;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 56, this._ctx)) {
          case 1:
            {
              this.state = 558;
              this.storageLocation();
            }
            break;
        }
        this.state = 561;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  typeName(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let _localctx = new TypeNameContext(this._ctx, _parentState);
    let _prevctx = _localctx;
    let _startState = 72;
    this.enterRecursionRule(_localctx, 72, _SolidityParser.RULE_typeName, _p);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 570;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {
          case 1:
            {
              this.state = 564;
              this.elementaryTypeName();
            }
            break;
          case 2:
            {
              this.state = 565;
              this.userDefinedTypeName();
            }
            break;
          case 3:
            {
              this.state = 566;
              this.mapping();
            }
            break;
          case 4:
            {
              this.state = 567;
              this.functionTypeName();
            }
            break;
          case 5:
            {
              this.state = 568;
              this.match(_SolidityParser.T__35);
              this.state = 569;
              this.match(_SolidityParser.PayableKeyword);
            }
            break;
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 580;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              {
                _localctx = new TypeNameContext(_parentctx, _parentState);
                this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_typeName);
                this.state = 572;
                if (!this.precpred(this._ctx, 3)) {
                  throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                }
                this.state = 573;
                this.match(_SolidityParser.T__33);
                this.state = 575;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
                  {
                    this.state = 574;
                    this.expression(0);
                  }
                }
                this.state = 577;
                this.match(_SolidityParser.T__34);
              }
            }
          }
          this.state = 582;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  userDefinedTypeName() {
    let _localctx = new UserDefinedTypeNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 74, _SolidityParser.RULE_userDefinedTypeName);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 583;
        this.identifier();
        this.state = 588;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);
        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 584;
                this.match(_SolidityParser.T__36);
                this.state = 585;
                this.identifier();
              }
            }
          }
          this.state = 590;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  mappingKey() {
    let _localctx = new MappingKeyContext(this._ctx, this.state);
    this.enterRule(_localctx, 76, _SolidityParser.RULE_mappingKey);
    try {
      this.state = 593;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 591;
            this.elementaryTypeName();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 592;
            this.userDefinedTypeName();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  mapping() {
    let _localctx = new MappingContext(this._ctx, this.state);
    this.enterRule(_localctx, 78, _SolidityParser.RULE_mapping);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 595;
        this.match(_SolidityParser.T__37);
        this.state = 596;
        this.match(_SolidityParser.T__22);
        this.state = 597;
        this.mappingKey();
        this.state = 598;
        this.match(_SolidityParser.T__38);
        this.state = 599;
        this.typeName(0);
        this.state = 600;
        this.match(_SolidityParser.T__23);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  functionTypeName() {
    let _localctx = new FunctionTypeNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 80, _SolidityParser.RULE_functionTypeName);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 602;
        this.match(_SolidityParser.T__29);
        this.state = 603;
        this.functionTypeParameterList();
        this.state = 609;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              this.state = 607;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case _SolidityParser.InternalKeyword:
                  {
                    this.state = 604;
                    this.match(_SolidityParser.InternalKeyword);
                  }
                  break;
                case _SolidityParser.ExternalKeyword:
                  {
                    this.state = 605;
                    this.match(_SolidityParser.ExternalKeyword);
                  }
                  break;
                case _SolidityParser.ConstantKeyword:
                case _SolidityParser.PayableKeyword:
                case _SolidityParser.PureKeyword:
                case _SolidityParser.ViewKeyword:
                  {
                    this.state = 606;
                    this.stateMutability();
                  }
                  break;
                default:
                  throw new import_NoViableAltException.NoViableAltException(this);
              }
            }
          }
          this.state = 611;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
        }
        this.state = 614;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 64, this._ctx)) {
          case 1:
            {
              this.state = 612;
              this.match(_SolidityParser.T__30);
              this.state = 613;
              this.functionTypeParameterList();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  storageLocation() {
    let _localctx = new StorageLocationContext(this._ctx, this.state);
    this.enterRule(_localctx, 82, _SolidityParser.RULE_storageLocation);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 616;
        _la = this._input.LA(1);
        if (!((_la - 40 & ~31) === 0 && (1 << _la - 40 & (1 << _SolidityParser.T__39 - 40 | 1 << _SolidityParser.T__40 - 40 | 1 << _SolidityParser.T__41 - 40)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === import_Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  stateMutability() {
    let _localctx = new StateMutabilityContext(this._ctx, this.state);
    this.enterRule(_localctx, 84, _SolidityParser.RULE_stateMutability);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 618;
        _la = this._input.LA(1);
        if (!((_la - 111 & ~31) === 0 && (1 << _la - 111 & (1 << _SolidityParser.ConstantKeyword - 111 | 1 << _SolidityParser.PayableKeyword - 111 | 1 << _SolidityParser.PureKeyword - 111 | 1 << _SolidityParser.ViewKeyword - 111)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === import_Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  block() {
    let _localctx = new BlockContext(this._ctx, this.state);
    this.enterRule(_localctx, 86, _SolidityParser.RULE_block);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 620;
        this.match(_SolidityParser.T__14);
        this.state = 624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__14 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__26 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__42 - 38 | 1 << _SolidityParser.T__44 - 38 | 1 << _SolidityParser.T__46 - 38 | 1 << _SolidityParser.T__47 - 38 | 1 << _SolidityParser.T__48 - 38 | 1 << _SolidityParser.T__49 - 38 | 1 << _SolidityParser.T__50 - 38 | 1 << _SolidityParser.T__51 - 38 | 1 << _SolidityParser.T__52 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.BreakKeyword - 96 | 1 << _SolidityParser.ContinueKeyword - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
          {
            {
              this.state = 621;
              this.statement();
            }
          }
          this.state = 626;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 627;
        this.match(_SolidityParser.T__16);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  statement() {
    let _localctx = new StatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 88, _SolidityParser.RULE_statement);
    try {
      this.state = 644;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 66, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 629;
            this.ifStatement();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 630;
            this.tryStatement();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 631;
            this.whileStatement();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 632;
            this.forStatement();
          }
          break;
        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 633;
            this.block();
          }
          break;
        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 634;
            this.inlineAssemblyStatement();
          }
          break;
        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 635;
            this.doWhileStatement();
          }
          break;
        case 8:
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 636;
            this.continueStatement();
          }
          break;
        case 9:
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 637;
            this.breakStatement();
          }
          break;
        case 10:
          this.enterOuterAlt(_localctx, 10);
          {
            this.state = 638;
            this.returnStatement();
          }
          break;
        case 11:
          this.enterOuterAlt(_localctx, 11);
          {
            this.state = 639;
            this.throwStatement();
          }
          break;
        case 12:
          this.enterOuterAlt(_localctx, 12);
          {
            this.state = 640;
            this.emitStatement();
          }
          break;
        case 13:
          this.enterOuterAlt(_localctx, 13);
          {
            this.state = 641;
            this.simpleStatement();
          }
          break;
        case 14:
          this.enterOuterAlt(_localctx, 14);
          {
            this.state = 642;
            this.uncheckedStatement();
          }
          break;
        case 15:
          this.enterOuterAlt(_localctx, 15);
          {
            this.state = 643;
            this.revertStatement();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  expressionStatement() {
    let _localctx = new ExpressionStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 90, _SolidityParser.RULE_expressionStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 646;
        this.expression(0);
        this.state = 647;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  ifStatement() {
    let _localctx = new IfStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 92, _SolidityParser.RULE_ifStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 649;
        this.match(_SolidityParser.T__42);
        this.state = 650;
        this.match(_SolidityParser.T__22);
        this.state = 651;
        this.expression(0);
        this.state = 652;
        this.match(_SolidityParser.T__23);
        this.state = 653;
        this.statement();
        this.state = 656;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 67, this._ctx)) {
          case 1:
            {
              this.state = 654;
              this.match(_SolidityParser.T__43);
              this.state = 655;
              this.statement();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  tryStatement() {
    let _localctx = new TryStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 94, _SolidityParser.RULE_tryStatement);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 658;
        this.match(_SolidityParser.T__44);
        this.state = 659;
        this.expression(0);
        this.state = 661;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__30) {
          {
            this.state = 660;
            this.returnParameters();
          }
        }
        this.state = 663;
        this.block();
        this.state = 665;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          {
            {
              this.state = 664;
              this.catchClause();
            }
          }
          this.state = 667;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === _SolidityParser.T__45);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  catchClause() {
    let _localctx = new CatchClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 96, _SolidityParser.RULE_catchClause);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 669;
        this.match(_SolidityParser.T__45);
        this.state = 674;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__22 | 1 << _SolidityParser.T__24)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
              {
                this.state = 670;
                this.identifier();
              }
            }
            this.state = 673;
            this.parameterList();
          }
        }
        this.state = 676;
        this.block();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  whileStatement() {
    let _localctx = new WhileStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 98, _SolidityParser.RULE_whileStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 678;
        this.match(_SolidityParser.T__46);
        this.state = 679;
        this.match(_SolidityParser.T__22);
        this.state = 680;
        this.expression(0);
        this.state = 681;
        this.match(_SolidityParser.T__23);
        this.state = 682;
        this.statement();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  simpleStatement() {
    let _localctx = new SimpleStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 100, _SolidityParser.RULE_simpleStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 686;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {
          case 1:
            {
              this.state = 684;
              this.variableDeclarationStatement();
            }
            break;
          case 2:
            {
              this.state = 685;
              this.expressionStatement();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  uncheckedStatement() {
    let _localctx = new UncheckedStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 102, _SolidityParser.RULE_uncheckedStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 688;
        this.match(_SolidityParser.T__47);
        this.state = 689;
        this.block();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  forStatement() {
    let _localctx = new ForStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 104, _SolidityParser.RULE_forStatement);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 691;
        this.match(_SolidityParser.T__26);
        this.state = 692;
        this.match(_SolidityParser.T__22);
        this.state = 695;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _SolidityParser.T__5:
          case _SolidityParser.T__13:
          case _SolidityParser.T__22:
          case _SolidityParser.T__24:
          case _SolidityParser.T__29:
          case _SolidityParser.T__33:
          case _SolidityParser.T__35:
          case _SolidityParser.T__37:
          case _SolidityParser.T__41:
          case _SolidityParser.T__53:
          case _SolidityParser.T__54:
          case _SolidityParser.T__55:
          case _SolidityParser.T__56:
          case _SolidityParser.T__57:
          case _SolidityParser.T__58:
          case _SolidityParser.T__59:
          case _SolidityParser.T__60:
          case _SolidityParser.T__62:
          case _SolidityParser.T__63:
          case _SolidityParser.T__64:
          case _SolidityParser.T__65:
          case _SolidityParser.T__66:
          case _SolidityParser.T__95:
          case _SolidityParser.Int:
          case _SolidityParser.Uint:
          case _SolidityParser.Byte:
          case _SolidityParser.Fixed:
          case _SolidityParser.Ufixed:
          case _SolidityParser.BooleanLiteral:
          case _SolidityParser.DecimalNumber:
          case _SolidityParser.HexNumber:
          case _SolidityParser.HexLiteralFragment:
          case _SolidityParser.LeaveKeyword:
          case _SolidityParser.PayableKeyword:
          case _SolidityParser.TypeKeyword:
          case _SolidityParser.ConstructorKeyword:
          case _SolidityParser.ReceiveKeyword:
          case _SolidityParser.Identifier:
          case _SolidityParser.StringLiteralFragment:
            {
              this.state = 693;
              this.simpleStatement();
            }
            break;
          case _SolidityParser.T__1:
            {
              this.state = 694;
              this.match(_SolidityParser.T__1);
            }
            break;
          default:
            throw new import_NoViableAltException.NoViableAltException(this);
        }
        this.state = 699;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _SolidityParser.T__5:
          case _SolidityParser.T__13:
          case _SolidityParser.T__22:
          case _SolidityParser.T__24:
          case _SolidityParser.T__29:
          case _SolidityParser.T__33:
          case _SolidityParser.T__35:
          case _SolidityParser.T__37:
          case _SolidityParser.T__41:
          case _SolidityParser.T__53:
          case _SolidityParser.T__54:
          case _SolidityParser.T__55:
          case _SolidityParser.T__56:
          case _SolidityParser.T__57:
          case _SolidityParser.T__58:
          case _SolidityParser.T__59:
          case _SolidityParser.T__60:
          case _SolidityParser.T__62:
          case _SolidityParser.T__63:
          case _SolidityParser.T__64:
          case _SolidityParser.T__65:
          case _SolidityParser.T__66:
          case _SolidityParser.T__95:
          case _SolidityParser.Int:
          case _SolidityParser.Uint:
          case _SolidityParser.Byte:
          case _SolidityParser.Fixed:
          case _SolidityParser.Ufixed:
          case _SolidityParser.BooleanLiteral:
          case _SolidityParser.DecimalNumber:
          case _SolidityParser.HexNumber:
          case _SolidityParser.HexLiteralFragment:
          case _SolidityParser.LeaveKeyword:
          case _SolidityParser.PayableKeyword:
          case _SolidityParser.TypeKeyword:
          case _SolidityParser.ConstructorKeyword:
          case _SolidityParser.ReceiveKeyword:
          case _SolidityParser.Identifier:
          case _SolidityParser.StringLiteralFragment:
            {
              this.state = 697;
              this.expressionStatement();
            }
            break;
          case _SolidityParser.T__1:
            {
              this.state = 698;
              this.match(_SolidityParser.T__1);
            }
            break;
          default:
            throw new import_NoViableAltException.NoViableAltException(this);
        }
        this.state = 702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
          {
            this.state = 701;
            this.expression(0);
          }
        }
        this.state = 704;
        this.match(_SolidityParser.T__23);
        this.state = 705;
        this.statement();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  inlineAssemblyStatement() {
    let _localctx = new InlineAssemblyStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 106, _SolidityParser.RULE_inlineAssemblyStatement);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 707;
        this.match(_SolidityParser.T__48);
        this.state = 709;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.StringLiteralFragment) {
          {
            this.state = 708;
            this.match(_SolidityParser.StringLiteralFragment);
          }
        }
        this.state = 715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__22) {
          {
            this.state = 711;
            this.match(_SolidityParser.T__22);
            this.state = 712;
            this.inlineAssemblyStatementFlag();
            this.state = 713;
            this.match(_SolidityParser.T__23);
          }
        }
        this.state = 717;
        this.assemblyBlock();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  inlineAssemblyStatementFlag() {
    let _localctx = new InlineAssemblyStatementFlagContext(this._ctx, this.state);
    this.enterRule(_localctx, 108, _SolidityParser.RULE_inlineAssemblyStatementFlag);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 719;
        this.stringLiteral();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  doWhileStatement() {
    let _localctx = new DoWhileStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 110, _SolidityParser.RULE_doWhileStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 721;
        this.match(_SolidityParser.T__49);
        this.state = 722;
        this.statement();
        this.state = 723;
        this.match(_SolidityParser.T__46);
        this.state = 724;
        this.match(_SolidityParser.T__22);
        this.state = 725;
        this.expression(0);
        this.state = 726;
        this.match(_SolidityParser.T__23);
        this.state = 727;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  continueStatement() {
    let _localctx = new ContinueStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 112, _SolidityParser.RULE_continueStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 729;
        this.match(_SolidityParser.ContinueKeyword);
        this.state = 730;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  breakStatement() {
    let _localctx = new BreakStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 114, _SolidityParser.RULE_breakStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 732;
        this.match(_SolidityParser.BreakKeyword);
        this.state = 733;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  returnStatement() {
    let _localctx = new ReturnStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 116, _SolidityParser.RULE_returnStatement);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 735;
        this.match(_SolidityParser.T__50);
        this.state = 737;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
          {
            this.state = 736;
            this.expression(0);
          }
        }
        this.state = 739;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  throwStatement() {
    let _localctx = new ThrowStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 118, _SolidityParser.RULE_throwStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 741;
        this.match(_SolidityParser.T__51);
        this.state = 742;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  emitStatement() {
    let _localctx = new EmitStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 120, _SolidityParser.RULE_emitStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 744;
        this.match(_SolidityParser.T__52);
        this.state = 745;
        this.functionCall();
        this.state = 746;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  revertStatement() {
    let _localctx = new RevertStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 122, _SolidityParser.RULE_revertStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 748;
        this.match(_SolidityParser.T__53);
        this.state = 749;
        this.functionCall();
        this.state = 750;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  variableDeclarationStatement() {
    let _localctx = new VariableDeclarationStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 124, _SolidityParser.RULE_variableDeclarationStatement);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 759;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 79, this._ctx)) {
          case 1:
            {
              this.state = 752;
              this.match(_SolidityParser.T__54);
              this.state = 753;
              this.identifierList();
            }
            break;
          case 2:
            {
              this.state = 754;
              this.variableDeclaration();
            }
            break;
          case 3:
            {
              this.state = 755;
              this.match(_SolidityParser.T__22);
              this.state = 756;
              this.variableDeclarationList();
              this.state = 757;
              this.match(_SolidityParser.T__23);
            }
            break;
        }
        this.state = 763;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__10) {
          {
            this.state = 761;
            this.match(_SolidityParser.T__10);
            this.state = 762;
            this.expression(0);
          }
        }
        this.state = 765;
        this.match(_SolidityParser.T__1);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  variableDeclarationList() {
    let _localctx = new VariableDeclarationListContext(this._ctx, this.state);
    this.enterRule(_localctx, 126, _SolidityParser.RULE_variableDeclarationList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 768;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 767;
            this.variableDeclaration();
          }
        }
        this.state = 776;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _SolidityParser.T__15) {
          {
            {
              this.state = 770;
              this.match(_SolidityParser.T__15);
              this.state = 772;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
                {
                  this.state = 771;
                  this.variableDeclaration();
                }
              }
            }
          }
          this.state = 778;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  identifierList() {
    let _localctx = new IdentifierListContext(this._ctx, this.state);
    this.enterRule(_localctx, 128, _SolidityParser.RULE_identifierList);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 779;
        this.match(_SolidityParser.T__22);
        this.state = 786;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 781;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
                  {
                    this.state = 780;
                    this.identifier();
                  }
                }
                this.state = 783;
                this.match(_SolidityParser.T__15);
              }
            }
          }
          this.state = 788;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
        }
        this.state = 790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 789;
            this.identifier();
          }
        }
        this.state = 792;
        this.match(_SolidityParser.T__23);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  elementaryTypeName() {
    let _localctx = new ElementaryTypeNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 130, _SolidityParser.RULE_elementaryTypeName);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 794;
        _la = this._input.LA(1);
        if (!((_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 98 & ~31) === 0 && (1 << _la - 98 & (1 << _SolidityParser.Int - 98 | 1 << _SolidityParser.Uint - 98 | 1 << _SolidityParser.Byte - 98 | 1 << _SolidityParser.Fixed - 98 | 1 << _SolidityParser.Ufixed - 98)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === import_Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  expression(_p) {
    if (_p === void 0) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let _localctx = new ExpressionContext(this._ctx, _parentState);
    let _prevctx = _localctx;
    let _startState = 132;
    this.enterRecursionRule(_localctx, 132, _SolidityParser.RULE_expression, _p);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 814;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 87, this._ctx)) {
          case 1:
            {
              this.state = 797;
              this.match(_SolidityParser.T__60);
              this.state = 798;
              this.typeName(0);
            }
            break;
          case 2:
            {
              this.state = 799;
              this.match(_SolidityParser.T__22);
              this.state = 800;
              this.expression(0);
              this.state = 801;
              this.match(_SolidityParser.T__23);
            }
            break;
          case 3:
            {
              this.state = 803;
              _la = this._input.LA(1);
              if (!(_la === _SolidityParser.T__58 || _la === _SolidityParser.T__59)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === import_Token.Token.EOF) {
                  this.matchedEOF = true;
                }
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 804;
              this.expression(19);
            }
            break;
          case 4:
            {
              this.state = 805;
              _la = this._input.LA(1);
              if (!(_la === _SolidityParser.T__62 || _la === _SolidityParser.T__63)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === import_Token.Token.EOF) {
                  this.matchedEOF = true;
                }
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 806;
              this.expression(18);
            }
            break;
          case 5:
            {
              this.state = 807;
              _la = this._input.LA(1);
              if (!(_la === _SolidityParser.T__64 || _la === _SolidityParser.T__65)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === import_Token.Token.EOF) {
                  this.matchedEOF = true;
                }
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 808;
              this.expression(17);
            }
            break;
          case 6:
            {
              this.state = 809;
              this.match(_SolidityParser.T__66);
              this.state = 810;
              this.expression(16);
            }
            break;
          case 7:
            {
              this.state = 811;
              this.match(_SolidityParser.T__5);
              this.state = 812;
              this.expression(15);
            }
            break;
          case 8:
            {
              this.state = 813;
              this.primaryExpression();
            }
            break;
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 890;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);
        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 888;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 90, this._ctx)) {
                case 1:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 816;
                    if (!this.precpred(this._ctx, 14)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 14)");
                    }
                    this.state = 817;
                    this.match(_SolidityParser.T__67);
                    this.state = 818;
                    this.expression(15);
                  }
                  break;
                case 2:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 819;
                    if (!this.precpred(this._ctx, 13)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
                    }
                    this.state = 820;
                    _la = this._input.LA(1);
                    if (!(_la === _SolidityParser.T__2 || _la === _SolidityParser.T__68 || _la === _SolidityParser.T__69)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === import_Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 821;
                    this.expression(14);
                  }
                  break;
                case 3:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 822;
                    if (!this.precpred(this._ctx, 12)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                    }
                    this.state = 823;
                    _la = this._input.LA(1);
                    if (!(_la === _SolidityParser.T__62 || _la === _SolidityParser.T__63)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === import_Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 824;
                    this.expression(13);
                  }
                  break;
                case 4:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 825;
                    if (!this.precpred(this._ctx, 11)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                    }
                    this.state = 826;
                    _la = this._input.LA(1);
                    if (!(_la === _SolidityParser.T__70 || _la === _SolidityParser.T__71)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === import_Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 827;
                    this.expression(12);
                  }
                  break;
                case 5:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 828;
                    if (!this.precpred(this._ctx, 10)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                    }
                    this.state = 829;
                    this.match(_SolidityParser.T__72);
                    this.state = 830;
                    this.expression(11);
                  }
                  break;
                case 6:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 831;
                    if (!this.precpred(this._ctx, 9)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                    }
                    this.state = 832;
                    this.match(_SolidityParser.T__4);
                    this.state = 833;
                    this.expression(10);
                  }
                  break;
                case 7:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 834;
                    if (!this.precpred(this._ctx, 8)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                    }
                    this.state = 835;
                    this.match(_SolidityParser.T__73);
                    this.state = 836;
                    this.expression(9);
                  }
                  break;
                case 8:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 837;
                    if (!this.precpred(this._ctx, 7)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                    }
                    this.state = 838;
                    _la = this._input.LA(1);
                    if (!((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9)) !== 0)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === import_Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 839;
                    this.expression(8);
                  }
                  break;
                case 9:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 840;
                    if (!this.precpred(this._ctx, 6)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                    }
                    this.state = 841;
                    _la = this._input.LA(1);
                    if (!(_la === _SolidityParser.T__74 || _la === _SolidityParser.T__75)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === import_Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 842;
                    this.expression(7);
                  }
                  break;
                case 10:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 843;
                    if (!this.precpred(this._ctx, 5)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                    }
                    this.state = 844;
                    this.match(_SolidityParser.T__76);
                    this.state = 845;
                    this.expression(6);
                  }
                  break;
                case 11:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 846;
                    if (!this.precpred(this._ctx, 4)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                    }
                    this.state = 847;
                    this.match(_SolidityParser.T__3);
                    this.state = 848;
                    this.expression(5);
                  }
                  break;
                case 12:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 849;
                    if (!this.precpred(this._ctx, 3)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                    }
                    this.state = 850;
                    this.match(_SolidityParser.T__77);
                    this.state = 851;
                    this.expression(0);
                    this.state = 852;
                    this.match(_SolidityParser.T__61);
                    this.state = 853;
                    this.expression(4);
                  }
                  break;
                case 13:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 855;
                    if (!this.precpred(this._ctx, 2)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                    }
                    this.state = 856;
                    _la = this._input.LA(1);
                    if (!(_la === _SolidityParser.T__10 || (_la - 79 & ~31) === 0 && (1 << _la - 79 & (1 << _SolidityParser.T__78 - 79 | 1 << _SolidityParser.T__79 - 79 | 1 << _SolidityParser.T__80 - 79 | 1 << _SolidityParser.T__81 - 79 | 1 << _SolidityParser.T__82 - 79 | 1 << _SolidityParser.T__83 - 79 | 1 << _SolidityParser.T__84 - 79 | 1 << _SolidityParser.T__85 - 79 | 1 << _SolidityParser.T__86 - 79 | 1 << _SolidityParser.T__87 - 79)) !== 0)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === import_Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 857;
                    this.expression(3);
                  }
                  break;
                case 14:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 858;
                    if (!this.precpred(this._ctx, 27)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 27)");
                    }
                    this.state = 859;
                    _la = this._input.LA(1);
                    if (!(_la === _SolidityParser.T__58 || _la === _SolidityParser.T__59)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === import_Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                  }
                  break;
                case 15:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 860;
                    if (!this.precpred(this._ctx, 25)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 25)");
                    }
                    this.state = 861;
                    this.match(_SolidityParser.T__33);
                    this.state = 862;
                    this.expression(0);
                    this.state = 863;
                    this.match(_SolidityParser.T__34);
                  }
                  break;
                case 16:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 865;
                    if (!this.precpred(this._ctx, 24)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 24)");
                    }
                    this.state = 866;
                    this.match(_SolidityParser.T__33);
                    this.state = 868;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
                      {
                        this.state = 867;
                        this.expression(0);
                      }
                    }
                    this.state = 870;
                    this.match(_SolidityParser.T__61);
                    this.state = 872;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
                      {
                        this.state = 871;
                        this.expression(0);
                      }
                    }
                    this.state = 874;
                    this.match(_SolidityParser.T__34);
                  }
                  break;
                case 17:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 875;
                    if (!this.precpred(this._ctx, 23)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 23)");
                    }
                    this.state = 876;
                    this.match(_SolidityParser.T__36);
                    this.state = 877;
                    this.identifier();
                  }
                  break;
                case 18:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 878;
                    if (!this.precpred(this._ctx, 22)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 22)");
                    }
                    this.state = 879;
                    this.match(_SolidityParser.T__14);
                    this.state = 880;
                    this.nameValueList();
                    this.state = 881;
                    this.match(_SolidityParser.T__16);
                  }
                  break;
                case 19:
                  {
                    _localctx = new ExpressionContext(_parentctx, _parentState);
                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);
                    this.state = 883;
                    if (!this.precpred(this._ctx, 21)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 21)");
                    }
                    this.state = 884;
                    this.match(_SolidityParser.T__22);
                    this.state = 885;
                    this.functionCallArguments();
                    this.state = 886;
                    this.match(_SolidityParser.T__23);
                  }
                  break;
              }
            }
          }
          this.state = 892;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  primaryExpression() {
    let _localctx = new PrimaryExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 134, _SolidityParser.RULE_primaryExpression);
    try {
      this.state = 902;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 92, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 893;
            this.match(_SolidityParser.BooleanLiteral);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 894;
            this.numberLiteral();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 895;
            this.hexLiteral();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 896;
            this.stringLiteral();
          }
          break;
        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 897;
            this.identifier();
          }
          break;
        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 898;
            this.match(_SolidityParser.TypeKeyword);
          }
          break;
        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 899;
            this.match(_SolidityParser.PayableKeyword);
          }
          break;
        case 8:
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 900;
            this.tupleExpression();
          }
          break;
        case 9:
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 901;
            this.typeName(0);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  expressionList() {
    let _localctx = new ExpressionListContext(this._ctx, this.state);
    this.enterRule(_localctx, 136, _SolidityParser.RULE_expressionList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 904;
        this.expression(0);
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _SolidityParser.T__15) {
          {
            {
              this.state = 905;
              this.match(_SolidityParser.T__15);
              this.state = 906;
              this.expression(0);
            }
          }
          this.state = 911;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  nameValueList() {
    let _localctx = new NameValueListContext(this._ctx, this.state);
    this.enterRule(_localctx, 138, _SolidityParser.RULE_nameValueList);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 912;
        this.nameValue();
        this.state = 917;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 913;
                this.match(_SolidityParser.T__15);
                this.state = 914;
                this.nameValue();
              }
            }
          }
          this.state = 919;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
        }
        this.state = 921;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__15) {
          {
            this.state = 920;
            this.match(_SolidityParser.T__15);
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  nameValue() {
    let _localctx = new NameValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 140, _SolidityParser.RULE_nameValue);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 923;
        this.identifier();
        this.state = 924;
        this.match(_SolidityParser.T__61);
        this.state = 925;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  functionCallArguments() {
    let _localctx = new FunctionCallArgumentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 142, _SolidityParser.RULE_functionCallArguments);
    let _la;
    try {
      this.state = 935;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _SolidityParser.T__14:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 927;
            this.match(_SolidityParser.T__14);
            this.state = 929;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
              {
                this.state = 928;
                this.nameValueList();
              }
            }
            this.state = 931;
            this.match(_SolidityParser.T__16);
          }
          break;
        case _SolidityParser.T__5:
        case _SolidityParser.T__13:
        case _SolidityParser.T__22:
        case _SolidityParser.T__23:
        case _SolidityParser.T__24:
        case _SolidityParser.T__29:
        case _SolidityParser.T__33:
        case _SolidityParser.T__35:
        case _SolidityParser.T__37:
        case _SolidityParser.T__41:
        case _SolidityParser.T__53:
        case _SolidityParser.T__54:
        case _SolidityParser.T__55:
        case _SolidityParser.T__56:
        case _SolidityParser.T__57:
        case _SolidityParser.T__58:
        case _SolidityParser.T__59:
        case _SolidityParser.T__60:
        case _SolidityParser.T__62:
        case _SolidityParser.T__63:
        case _SolidityParser.T__64:
        case _SolidityParser.T__65:
        case _SolidityParser.T__66:
        case _SolidityParser.T__95:
        case _SolidityParser.Int:
        case _SolidityParser.Uint:
        case _SolidityParser.Byte:
        case _SolidityParser.Fixed:
        case _SolidityParser.Ufixed:
        case _SolidityParser.BooleanLiteral:
        case _SolidityParser.DecimalNumber:
        case _SolidityParser.HexNumber:
        case _SolidityParser.HexLiteralFragment:
        case _SolidityParser.LeaveKeyword:
        case _SolidityParser.PayableKeyword:
        case _SolidityParser.TypeKeyword:
        case _SolidityParser.ConstructorKeyword:
        case _SolidityParser.ReceiveKeyword:
        case _SolidityParser.Identifier:
        case _SolidityParser.StringLiteralFragment:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
              {
                this.state = 932;
                this.expressionList();
              }
            }
          }
          break;
        default:
          throw new import_NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  functionCall() {
    let _localctx = new FunctionCallContext(this._ctx, this.state);
    this.enterRule(_localctx, 144, _SolidityParser.RULE_functionCall);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 937;
        this.expression(0);
        this.state = 938;
        this.match(_SolidityParser.T__22);
        this.state = 939;
        this.functionCallArguments();
        this.state = 940;
        this.match(_SolidityParser.T__23);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyBlock() {
    let _localctx = new AssemblyBlockContext(this._ctx, this.state);
    this.enterRule(_localctx, 146, _SolidityParser.RULE_assemblyBlock);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 942;
        this.match(_SolidityParser.T__14);
        this.state = 946;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__14 | 1 << _SolidityParser.T__22 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__26 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__42 - 36 | 1 << _SolidityParser.T__48 - 36 | 1 << _SolidityParser.T__50 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 89 & ~31) === 0 && (1 << _la - 89 & (1 << _SolidityParser.T__88 - 89 | 1 << _SolidityParser.T__91 - 89 | 1 << _SolidityParser.T__95 - 89 | 1 << _SolidityParser.BooleanLiteral - 89 | 1 << _SolidityParser.DecimalNumber - 89 | 1 << _SolidityParser.HexNumber - 89 | 1 << _SolidityParser.HexLiteralFragment - 89 | 1 << _SolidityParser.BreakKeyword - 89 | 1 << _SolidityParser.ContinueKeyword - 89 | 1 << _SolidityParser.LeaveKeyword - 89 | 1 << _SolidityParser.PayableKeyword - 89)) !== 0 || (_la - 126 & ~31) === 0 && (1 << _la - 126 & (1 << _SolidityParser.ConstructorKeyword - 126 | 1 << _SolidityParser.ReceiveKeyword - 126 | 1 << _SolidityParser.Identifier - 126 | 1 << _SolidityParser.StringLiteralFragment - 126)) !== 0) {
          {
            {
              this.state = 943;
              this.assemblyItem();
            }
          }
          this.state = 948;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 949;
        this.match(_SolidityParser.T__16);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyItem() {
    let _localctx = new AssemblyItemContext(this._ctx, this.state);
    this.enterRule(_localctx, 148, _SolidityParser.RULE_assemblyItem);
    try {
      this.state = 969;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 100, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 951;
            this.identifier();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 952;
            this.assemblyBlock();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 953;
            this.assemblyExpression();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 954;
            this.assemblyLocalDefinition();
          }
          break;
        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 955;
            this.assemblyAssignment();
          }
          break;
        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 956;
            this.assemblyStackAssignment();
          }
          break;
        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 957;
            this.labelDefinition();
          }
          break;
        case 8:
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 958;
            this.assemblySwitch();
          }
          break;
        case 9:
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 959;
            this.assemblyFunctionDefinition();
          }
          break;
        case 10:
          this.enterOuterAlt(_localctx, 10);
          {
            this.state = 960;
            this.assemblyFor();
          }
          break;
        case 11:
          this.enterOuterAlt(_localctx, 11);
          {
            this.state = 961;
            this.assemblyIf();
          }
          break;
        case 12:
          this.enterOuterAlt(_localctx, 12);
          {
            this.state = 962;
            this.match(_SolidityParser.BreakKeyword);
          }
          break;
        case 13:
          this.enterOuterAlt(_localctx, 13);
          {
            this.state = 963;
            this.match(_SolidityParser.ContinueKeyword);
          }
          break;
        case 14:
          this.enterOuterAlt(_localctx, 14);
          {
            this.state = 964;
            this.match(_SolidityParser.LeaveKeyword);
          }
          break;
        case 15:
          this.enterOuterAlt(_localctx, 15);
          {
            this.state = 965;
            this.subAssembly();
          }
          break;
        case 16:
          this.enterOuterAlt(_localctx, 16);
          {
            this.state = 966;
            this.numberLiteral();
          }
          break;
        case 17:
          this.enterOuterAlt(_localctx, 17);
          {
            this.state = 967;
            this.stringLiteral();
          }
          break;
        case 18:
          this.enterOuterAlt(_localctx, 18);
          {
            this.state = 968;
            this.hexLiteral();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyExpression() {
    let _localctx = new AssemblyExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 150, _SolidityParser.RULE_assemblyExpression);
    try {
      this.state = 974;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 101, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 971;
            this.assemblyCall();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 972;
            this.assemblyLiteral();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 973;
            this.assemblyMember();
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyMember() {
    let _localctx = new AssemblyMemberContext(this._ctx, this.state);
    this.enterRule(_localctx, 152, _SolidityParser.RULE_assemblyMember);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 976;
        this.identifier();
        this.state = 977;
        this.match(_SolidityParser.T__36);
        this.state = 978;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyCall() {
    let _localctx = new AssemblyCallContext(this._ctx, this.state);
    this.enterRule(_localctx, 154, _SolidityParser.RULE_assemblyCall);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 984;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {
          case 1:
            {
              this.state = 980;
              this.match(_SolidityParser.T__50);
            }
            break;
          case 2:
            {
              this.state = 981;
              this.match(_SolidityParser.T__35);
            }
            break;
          case 3:
            {
              this.state = 982;
              this.match(_SolidityParser.T__57);
            }
            break;
          case 4:
            {
              this.state = 983;
              this.identifier();
            }
            break;
        }
        this.state = 998;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 105, this._ctx)) {
          case 1:
            {
              this.state = 986;
              this.match(_SolidityParser.T__22);
              this.state = 988;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__50 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
                {
                  this.state = 987;
                  this.assemblyExpression();
                }
              }
              this.state = 994;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === _SolidityParser.T__15) {
                {
                  {
                    this.state = 990;
                    this.match(_SolidityParser.T__15);
                    this.state = 991;
                    this.assemblyExpression();
                  }
                }
                this.state = 996;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 997;
              this.match(_SolidityParser.T__23);
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyLocalDefinition() {
    let _localctx = new AssemblyLocalDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 156, _SolidityParser.RULE_assemblyLocalDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1e3;
        this.match(_SolidityParser.T__88);
        this.state = 1001;
        this.assemblyIdentifierOrList();
        this.state = 1004;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__89) {
          {
            this.state = 1002;
            this.match(_SolidityParser.T__89);
            this.state = 1003;
            this.assemblyExpression();
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyAssignment() {
    let _localctx = new AssemblyAssignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 158, _SolidityParser.RULE_assemblyAssignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1006;
        this.assemblyIdentifierOrList();
        this.state = 1007;
        this.match(_SolidityParser.T__89);
        this.state = 1008;
        this.assemblyExpression();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyIdentifierOrList() {
    let _localctx = new AssemblyIdentifierOrListContext(this._ctx, this.state);
    this.enterRule(_localctx, 160, _SolidityParser.RULE_assemblyIdentifierOrList);
    try {
      this.state = 1017;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 107, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1010;
            this.identifier();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1011;
            this.assemblyMember();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1012;
            this.assemblyIdentifierList();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1013;
            this.match(_SolidityParser.T__22);
            this.state = 1014;
            this.assemblyIdentifierList();
            this.state = 1015;
            this.match(_SolidityParser.T__23);
          }
          break;
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyIdentifierList() {
    let _localctx = new AssemblyIdentifierListContext(this._ctx, this.state);
    this.enterRule(_localctx, 162, _SolidityParser.RULE_assemblyIdentifierList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1019;
        this.identifier();
        this.state = 1024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _SolidityParser.T__15) {
          {
            {
              this.state = 1020;
              this.match(_SolidityParser.T__15);
              this.state = 1021;
              this.identifier();
            }
          }
          this.state = 1026;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyStackAssignment() {
    let _localctx = new AssemblyStackAssignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 164, _SolidityParser.RULE_assemblyStackAssignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1027;
        this.assemblyExpression();
        this.state = 1028;
        this.match(_SolidityParser.T__90);
        this.state = 1029;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  labelDefinition() {
    let _localctx = new LabelDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 166, _SolidityParser.RULE_labelDefinition);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1031;
        this.identifier();
        this.state = 1032;
        this.match(_SolidityParser.T__61);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblySwitch() {
    let _localctx = new AssemblySwitchContext(this._ctx, this.state);
    this.enterRule(_localctx, 168, _SolidityParser.RULE_assemblySwitch);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1034;
        this.match(_SolidityParser.T__91);
        this.state = 1035;
        this.assemblyExpression();
        this.state = 1039;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === _SolidityParser.T__92 || _la === _SolidityParser.T__93) {
          {
            {
              this.state = 1036;
              this.assemblyCase();
            }
          }
          this.state = 1041;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyCase() {
    let _localctx = new AssemblyCaseContext(this._ctx, this.state);
    this.enterRule(_localctx, 170, _SolidityParser.RULE_assemblyCase);
    try {
      this.state = 1048;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _SolidityParser.T__92:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1042;
            this.match(_SolidityParser.T__92);
            this.state = 1043;
            this.assemblyLiteral();
            this.state = 1044;
            this.assemblyBlock();
          }
          break;
        case _SolidityParser.T__93:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1046;
            this.match(_SolidityParser.T__93);
            this.state = 1047;
            this.assemblyBlock();
          }
          break;
        default:
          throw new import_NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyFunctionDefinition() {
    let _localctx = new AssemblyFunctionDefinitionContext(this._ctx, this.state);
    this.enterRule(_localctx, 172, _SolidityParser.RULE_assemblyFunctionDefinition);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1050;
        this.match(_SolidityParser.T__29);
        this.state = 1051;
        this.identifier();
        this.state = 1052;
        this.match(_SolidityParser.T__22);
        this.state = 1054;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {
          {
            this.state = 1053;
            this.assemblyIdentifierList();
          }
        }
        this.state = 1056;
        this.match(_SolidityParser.T__23);
        this.state = 1058;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__94) {
          {
            this.state = 1057;
            this.assemblyFunctionReturns();
          }
        }
        this.state = 1060;
        this.assemblyBlock();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyFunctionReturns() {
    let _localctx = new AssemblyFunctionReturnsContext(this._ctx, this.state);
    this.enterRule(_localctx, 174, _SolidityParser.RULE_assemblyFunctionReturns);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        {
          this.state = 1062;
          this.match(_SolidityParser.T__94);
          this.state = 1063;
          this.assemblyIdentifierList();
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyFor() {
    let _localctx = new AssemblyForContext(this._ctx, this.state);
    this.enterRule(_localctx, 176, _SolidityParser.RULE_assemblyFor);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1065;
        this.match(_SolidityParser.T__26);
        this.state = 1068;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _SolidityParser.T__14:
            {
              this.state = 1066;
              this.assemblyBlock();
            }
            break;
          case _SolidityParser.T__13:
          case _SolidityParser.T__24:
          case _SolidityParser.T__35:
          case _SolidityParser.T__41:
          case _SolidityParser.T__50:
          case _SolidityParser.T__53:
          case _SolidityParser.T__57:
          case _SolidityParser.T__95:
          case _SolidityParser.BooleanLiteral:
          case _SolidityParser.DecimalNumber:
          case _SolidityParser.HexNumber:
          case _SolidityParser.HexLiteralFragment:
          case _SolidityParser.LeaveKeyword:
          case _SolidityParser.PayableKeyword:
          case _SolidityParser.ConstructorKeyword:
          case _SolidityParser.ReceiveKeyword:
          case _SolidityParser.Identifier:
          case _SolidityParser.StringLiteralFragment:
            {
              this.state = 1067;
              this.assemblyExpression();
            }
            break;
          default:
            throw new import_NoViableAltException.NoViableAltException(this);
        }
        this.state = 1070;
        this.assemblyExpression();
        this.state = 1073;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case _SolidityParser.T__14:
            {
              this.state = 1071;
              this.assemblyBlock();
            }
            break;
          case _SolidityParser.T__13:
          case _SolidityParser.T__24:
          case _SolidityParser.T__35:
          case _SolidityParser.T__41:
          case _SolidityParser.T__50:
          case _SolidityParser.T__53:
          case _SolidityParser.T__57:
          case _SolidityParser.T__95:
          case _SolidityParser.BooleanLiteral:
          case _SolidityParser.DecimalNumber:
          case _SolidityParser.HexNumber:
          case _SolidityParser.HexLiteralFragment:
          case _SolidityParser.LeaveKeyword:
          case _SolidityParser.PayableKeyword:
          case _SolidityParser.ConstructorKeyword:
          case _SolidityParser.ReceiveKeyword:
          case _SolidityParser.Identifier:
          case _SolidityParser.StringLiteralFragment:
            {
              this.state = 1072;
              this.assemblyExpression();
            }
            break;
          default:
            throw new import_NoViableAltException.NoViableAltException(this);
        }
        this.state = 1075;
        this.assemblyBlock();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyIf() {
    let _localctx = new AssemblyIfContext(this._ctx, this.state);
    this.enterRule(_localctx, 178, _SolidityParser.RULE_assemblyIf);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1077;
        this.match(_SolidityParser.T__42);
        this.state = 1078;
        this.assemblyExpression();
        this.state = 1079;
        this.assemblyBlock();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  assemblyLiteral() {
    let _localctx = new AssemblyLiteralContext(this._ctx, this.state);
    this.enterRule(_localctx, 180, _SolidityParser.RULE_assemblyLiteral);
    try {
      this.state = 1086;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _SolidityParser.StringLiteralFragment:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1081;
            this.stringLiteral();
          }
          break;
        case _SolidityParser.DecimalNumber:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1082;
            this.match(_SolidityParser.DecimalNumber);
          }
          break;
        case _SolidityParser.HexNumber:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 1083;
            this.match(_SolidityParser.HexNumber);
          }
          break;
        case _SolidityParser.HexLiteralFragment:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 1084;
            this.hexLiteral();
          }
          break;
        case _SolidityParser.BooleanLiteral:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 1085;
            this.match(_SolidityParser.BooleanLiteral);
          }
          break;
        default:
          throw new import_NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  subAssembly() {
    let _localctx = new SubAssemblyContext(this._ctx, this.state);
    this.enterRule(_localctx, 182, _SolidityParser.RULE_subAssembly);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1088;
        this.match(_SolidityParser.T__48);
        this.state = 1089;
        this.identifier();
        this.state = 1090;
        this.assemblyBlock();
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  tupleExpression() {
    let _localctx = new TupleExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 184, _SolidityParser.RULE_tupleExpression);
    let _la;
    try {
      this.state = 1118;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case _SolidityParser.T__22:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 1092;
            this.match(_SolidityParser.T__22);
            {
              this.state = 1094;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
                {
                  this.state = 1093;
                  this.expression(0);
                }
              }
              this.state = 1102;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === _SolidityParser.T__15) {
                {
                  {
                    this.state = 1096;
                    this.match(_SolidityParser.T__15);
                    this.state = 1098;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
                      {
                        this.state = 1097;
                        this.expression(0);
                      }
                    }
                  }
                }
                this.state = 1104;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
            }
            this.state = 1105;
            this.match(_SolidityParser.T__23);
          }
          break;
        case _SolidityParser.T__33:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 1106;
            this.match(_SolidityParser.T__33);
            this.state = 1115;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {
              {
                this.state = 1107;
                this.expression(0);
                this.state = 1112;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === _SolidityParser.T__15) {
                  {
                    {
                      this.state = 1108;
                      this.match(_SolidityParser.T__15);
                      this.state = 1109;
                      this.expression(0);
                    }
                  }
                  this.state = 1114;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                }
              }
            }
            this.state = 1117;
            this.match(_SolidityParser.T__34);
          }
          break;
        default:
          throw new import_NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  numberLiteral() {
    let _localctx = new NumberLiteralContext(this._ctx, this.state);
    this.enterRule(_localctx, 186, _SolidityParser.RULE_numberLiteral);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1120;
        _la = this._input.LA(1);
        if (!(_la === _SolidityParser.DecimalNumber || _la === _SolidityParser.HexNumber)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === import_Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 1122;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 122, this._ctx)) {
          case 1:
            {
              this.state = 1121;
              this.match(_SolidityParser.NumberUnit);
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  identifier() {
    let _localctx = new IdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 188, _SolidityParser.RULE_identifier);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1124;
        _la = this._input.LA(1);
        if (!(_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === import_Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  hexLiteral() {
    let _localctx = new HexLiteralContext(this._ctx, this.state);
    this.enterRule(_localctx, 190, _SolidityParser.RULE_hexLiteral);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1127;
        this._errHandler.sync(this);
        _alt = 1;
        do {
          switch (_alt) {
            case 1:
              {
                {
                  this.state = 1126;
                  this.match(_SolidityParser.HexLiteralFragment);
                }
              }
              break;
            default:
              throw new import_NoViableAltException.NoViableAltException(this);
          }
          this.state = 1129;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 123, this._ctx);
        } while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  overrideSpecifier() {
    let _localctx = new OverrideSpecifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 192, _SolidityParser.RULE_overrideSpecifier);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1131;
        this.match(_SolidityParser.T__96);
        this.state = 1143;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === _SolidityParser.T__22) {
          {
            this.state = 1132;
            this.match(_SolidityParser.T__22);
            this.state = 1133;
            this.userDefinedTypeName();
            this.state = 1138;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === _SolidityParser.T__15) {
              {
                {
                  this.state = 1134;
                  this.match(_SolidityParser.T__15);
                  this.state = 1135;
                  this.userDefinedTypeName();
                }
              }
              this.state = 1140;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 1141;
            this.match(_SolidityParser.T__23);
          }
        }
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  stringLiteral() {
    let _localctx = new StringLiteralContext(this._ctx, this.state);
    this.enterRule(_localctx, 194, _SolidityParser.RULE_stringLiteral);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1146;
        this._errHandler.sync(this);
        _alt = 1;
        do {
          switch (_alt) {
            case 1:
              {
                {
                  this.state = 1145;
                  this.match(_SolidityParser.StringLiteralFragment);
                }
              }
              break;
            default:
              throw new import_NoViableAltException.NoViableAltException(this);
          }
          this.state = 1148;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 126, this._ctx);
        } while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER);
      }
    } catch (re) {
      if (re instanceof import_RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  sempred(_localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 36:
        return this.typeName_sempred(_localctx, predIndex);
      case 66:
        return this.expression_sempred(_localctx, predIndex);
    }
    return true;
  }
  typeName_sempred(_localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 3);
    }
    return true;
  }
  expression_sempred(_localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.precpred(this._ctx, 14);
      case 2:
        return this.precpred(this._ctx, 13);
      case 3:
        return this.precpred(this._ctx, 12);
      case 4:
        return this.precpred(this._ctx, 11);
      case 5:
        return this.precpred(this._ctx, 10);
      case 6:
        return this.precpred(this._ctx, 9);
      case 7:
        return this.precpred(this._ctx, 8);
      case 8:
        return this.precpred(this._ctx, 7);
      case 9:
        return this.precpred(this._ctx, 6);
      case 10:
        return this.precpred(this._ctx, 5);
      case 11:
        return this.precpred(this._ctx, 4);
      case 12:
        return this.precpred(this._ctx, 3);
      case 13:
        return this.precpred(this._ctx, 2);
      case 14:
        return this.precpred(this._ctx, 27);
      case 15:
        return this.precpred(this._ctx, 25);
      case 16:
        return this.precpred(this._ctx, 24);
      case 17:
        return this.precpred(this._ctx, 23);
      case 18:
        return this.precpred(this._ctx, 22);
      case 19:
        return this.precpred(this._ctx, 21);
    }
    return true;
  }
  static get _ATN() {
    if (!_SolidityParser.__ATN) {
      _SolidityParser.__ATN = new import_ATNDeserializer2.ATNDeserializer().deserialize(Utils2.toCharArray(_SolidityParser._serializedATN));
    }
    return _SolidityParser.__ATN;
  }
};
var SolidityParser = _SolidityParser;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.T__92 = 93;
SolidityParser.T__93 = 94;
SolidityParser.T__94 = 95;
SolidityParser.T__95 = 96;
SolidityParser.T__96 = 97;
SolidityParser.Int = 98;
SolidityParser.Uint = 99;
SolidityParser.Byte = 100;
SolidityParser.Fixed = 101;
SolidityParser.Ufixed = 102;
SolidityParser.BooleanLiteral = 103;
SolidityParser.DecimalNumber = 104;
SolidityParser.HexNumber = 105;
SolidityParser.NumberUnit = 106;
SolidityParser.HexLiteralFragment = 107;
SolidityParser.ReservedKeyword = 108;
SolidityParser.AnonymousKeyword = 109;
SolidityParser.BreakKeyword = 110;
SolidityParser.ConstantKeyword = 111;
SolidityParser.ImmutableKeyword = 112;
SolidityParser.ContinueKeyword = 113;
SolidityParser.LeaveKeyword = 114;
SolidityParser.ExternalKeyword = 115;
SolidityParser.IndexedKeyword = 116;
SolidityParser.InternalKeyword = 117;
SolidityParser.PayableKeyword = 118;
SolidityParser.PrivateKeyword = 119;
SolidityParser.PublicKeyword = 120;
SolidityParser.VirtualKeyword = 121;
SolidityParser.PureKeyword = 122;
SolidityParser.TypeKeyword = 123;
SolidityParser.ViewKeyword = 124;
SolidityParser.GlobalKeyword = 125;
SolidityParser.ConstructorKeyword = 126;
SolidityParser.FallbackKeyword = 127;
SolidityParser.ReceiveKeyword = 128;
SolidityParser.Identifier = 129;
SolidityParser.StringLiteralFragment = 130;
SolidityParser.VersionLiteral = 131;
SolidityParser.WS = 132;
SolidityParser.COMMENT = 133;
SolidityParser.LINE_COMMENT = 134;
SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionOperator = 5;
SolidityParser.RULE_versionConstraint = 6;
SolidityParser.RULE_importDeclaration = 7;
SolidityParser.RULE_importDirective = 8;
SolidityParser.RULE_importPath = 9;
SolidityParser.RULE_contractDefinition = 10;
SolidityParser.RULE_inheritanceSpecifier = 11;
SolidityParser.RULE_contractPart = 12;
SolidityParser.RULE_stateVariableDeclaration = 13;
SolidityParser.RULE_fileLevelConstant = 14;
SolidityParser.RULE_customErrorDefinition = 15;
SolidityParser.RULE_typeDefinition = 16;
SolidityParser.RULE_usingForDeclaration = 17;
SolidityParser.RULE_usingForObject = 18;
SolidityParser.RULE_structDefinition = 19;
SolidityParser.RULE_modifierDefinition = 20;
SolidityParser.RULE_modifierInvocation = 21;
SolidityParser.RULE_functionDefinition = 22;
SolidityParser.RULE_functionDescriptor = 23;
SolidityParser.RULE_returnParameters = 24;
SolidityParser.RULE_modifierList = 25;
SolidityParser.RULE_eventDefinition = 26;
SolidityParser.RULE_enumValue = 27;
SolidityParser.RULE_enumDefinition = 28;
SolidityParser.RULE_parameterList = 29;
SolidityParser.RULE_parameter = 30;
SolidityParser.RULE_eventParameterList = 31;
SolidityParser.RULE_eventParameter = 32;
SolidityParser.RULE_functionTypeParameterList = 33;
SolidityParser.RULE_functionTypeParameter = 34;
SolidityParser.RULE_variableDeclaration = 35;
SolidityParser.RULE_typeName = 36;
SolidityParser.RULE_userDefinedTypeName = 37;
SolidityParser.RULE_mappingKey = 38;
SolidityParser.RULE_mapping = 39;
SolidityParser.RULE_functionTypeName = 40;
SolidityParser.RULE_storageLocation = 41;
SolidityParser.RULE_stateMutability = 42;
SolidityParser.RULE_block = 43;
SolidityParser.RULE_statement = 44;
SolidityParser.RULE_expressionStatement = 45;
SolidityParser.RULE_ifStatement = 46;
SolidityParser.RULE_tryStatement = 47;
SolidityParser.RULE_catchClause = 48;
SolidityParser.RULE_whileStatement = 49;
SolidityParser.RULE_simpleStatement = 50;
SolidityParser.RULE_uncheckedStatement = 51;
SolidityParser.RULE_forStatement = 52;
SolidityParser.RULE_inlineAssemblyStatement = 53;
SolidityParser.RULE_inlineAssemblyStatementFlag = 54;
SolidityParser.RULE_doWhileStatement = 55;
SolidityParser.RULE_continueStatement = 56;
SolidityParser.RULE_breakStatement = 57;
SolidityParser.RULE_returnStatement = 58;
SolidityParser.RULE_throwStatement = 59;
SolidityParser.RULE_emitStatement = 60;
SolidityParser.RULE_revertStatement = 61;
SolidityParser.RULE_variableDeclarationStatement = 62;
SolidityParser.RULE_variableDeclarationList = 63;
SolidityParser.RULE_identifierList = 64;
SolidityParser.RULE_elementaryTypeName = 65;
SolidityParser.RULE_expression = 66;
SolidityParser.RULE_primaryExpression = 67;
SolidityParser.RULE_expressionList = 68;
SolidityParser.RULE_nameValueList = 69;
SolidityParser.RULE_nameValue = 70;
SolidityParser.RULE_functionCallArguments = 71;
SolidityParser.RULE_functionCall = 72;
SolidityParser.RULE_assemblyBlock = 73;
SolidityParser.RULE_assemblyItem = 74;
SolidityParser.RULE_assemblyExpression = 75;
SolidityParser.RULE_assemblyMember = 76;
SolidityParser.RULE_assemblyCall = 77;
SolidityParser.RULE_assemblyLocalDefinition = 78;
SolidityParser.RULE_assemblyAssignment = 79;
SolidityParser.RULE_assemblyIdentifierOrList = 80;
SolidityParser.RULE_assemblyIdentifierList = 81;
SolidityParser.RULE_assemblyStackAssignment = 82;
SolidityParser.RULE_labelDefinition = 83;
SolidityParser.RULE_assemblySwitch = 84;
SolidityParser.RULE_assemblyCase = 85;
SolidityParser.RULE_assemblyFunctionDefinition = 86;
SolidityParser.RULE_assemblyFunctionReturns = 87;
SolidityParser.RULE_assemblyFor = 88;
SolidityParser.RULE_assemblyIf = 89;
SolidityParser.RULE_assemblyLiteral = 90;
SolidityParser.RULE_subAssembly = 91;
SolidityParser.RULE_tupleExpression = 92;
SolidityParser.RULE_numberLiteral = 93;
SolidityParser.RULE_identifier = 94;
SolidityParser.RULE_hexLiteral = 95;
SolidityParser.RULE_overrideSpecifier = 96;
SolidityParser.RULE_stringLiteral = 97;
SolidityParser.ruleNames = [
  "sourceUnit",
  "pragmaDirective",
  "pragmaName",
  "pragmaValue",
  "version",
  "versionOperator",
  "versionConstraint",
  "importDeclaration",
  "importDirective",
  "importPath",
  "contractDefinition",
  "inheritanceSpecifier",
  "contractPart",
  "stateVariableDeclaration",
  "fileLevelConstant",
  "customErrorDefinition",
  "typeDefinition",
  "usingForDeclaration",
  "usingForObject",
  "structDefinition",
  "modifierDefinition",
  "modifierInvocation",
  "functionDefinition",
  "functionDescriptor",
  "returnParameters",
  "modifierList",
  "eventDefinition",
  "enumValue",
  "enumDefinition",
  "parameterList",
  "parameter",
  "eventParameterList",
  "eventParameter",
  "functionTypeParameterList",
  "functionTypeParameter",
  "variableDeclaration",
  "typeName",
  "userDefinedTypeName",
  "mappingKey",
  "mapping",
  "functionTypeName",
  "storageLocation",
  "stateMutability",
  "block",
  "statement",
  "expressionStatement",
  "ifStatement",
  "tryStatement",
  "catchClause",
  "whileStatement",
  "simpleStatement",
  "uncheckedStatement",
  "forStatement",
  "inlineAssemblyStatement",
  "inlineAssemblyStatementFlag",
  "doWhileStatement",
  "continueStatement",
  "breakStatement",
  "returnStatement",
  "throwStatement",
  "emitStatement",
  "revertStatement",
  "variableDeclarationStatement",
  "variableDeclarationList",
  "identifierList",
  "elementaryTypeName",
  "expression",
  "primaryExpression",
  "expressionList",
  "nameValueList",
  "nameValue",
  "functionCallArguments",
  "functionCall",
  "assemblyBlock",
  "assemblyItem",
  "assemblyExpression",
  "assemblyMember",
  "assemblyCall",
  "assemblyLocalDefinition",
  "assemblyAssignment",
  "assemblyIdentifierOrList",
  "assemblyIdentifierList",
  "assemblyStackAssignment",
  "labelDefinition",
  "assemblySwitch",
  "assemblyCase",
  "assemblyFunctionDefinition",
  "assemblyFunctionReturns",
  "assemblyFor",
  "assemblyIf",
  "assemblyLiteral",
  "subAssembly",
  "tupleExpression",
  "numberLiteral",
  "identifier",
  "hexLiteral",
  "overrideSpecifier",
  "stringLiteral"
];
SolidityParser._LITERAL_NAMES = [
  void 0,
  "'pragma'",
  "';'",
  "'*'",
  "'||'",
  "'^'",
  "'~'",
  "'>='",
  "'>'",
  "'<'",
  "'<='",
  "'='",
  "'as'",
  "'import'",
  "'from'",
  "'{'",
  "','",
  "'}'",
  "'abstract'",
  "'contract'",
  "'interface'",
  "'library'",
  "'is'",
  "'('",
  "')'",
  "'error'",
  "'using'",
  "'for'",
  "'struct'",
  "'modifier'",
  "'function'",
  "'returns'",
  "'event'",
  "'enum'",
  "'['",
  "']'",
  "'address'",
  "'.'",
  "'mapping'",
  "'=>'",
  "'memory'",
  "'storage'",
  "'calldata'",
  "'if'",
  "'else'",
  "'try'",
  "'catch'",
  "'while'",
  "'unchecked'",
  "'assembly'",
  "'do'",
  "'return'",
  "'throw'",
  "'emit'",
  "'revert'",
  "'var'",
  "'bool'",
  "'string'",
  "'byte'",
  "'++'",
  "'--'",
  "'new'",
  "':'",
  "'+'",
  "'-'",
  "'after'",
  "'delete'",
  "'!'",
  "'**'",
  "'/'",
  "'%'",
  "'<<'",
  "'>>'",
  "'&'",
  "'|'",
  "'=='",
  "'!='",
  "'&&'",
  "'?'",
  "'|='",
  "'^='",
  "'&='",
  "'<<='",
  "'>>='",
  "'+='",
  "'-='",
  "'*='",
  "'/='",
  "'%='",
  "'let'",
  "':='",
  "'=:'",
  "'switch'",
  "'case'",
  "'default'",
  "'->'",
  "'callback'",
  "'override'",
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  "'anonymous'",
  "'break'",
  "'constant'",
  "'immutable'",
  "'continue'",
  "'leave'",
  "'external'",
  "'indexed'",
  "'internal'",
  "'payable'",
  "'private'",
  "'public'",
  "'virtual'",
  "'pure'",
  "'type'",
  "'view'",
  "'global'",
  "'constructor'",
  "'fallback'",
  "'receive'"
];
SolidityParser._SYMBOLIC_NAMES = [
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  void 0,
  "Int",
  "Uint",
  "Byte",
  "Fixed",
  "Ufixed",
  "BooleanLiteral",
  "DecimalNumber",
  "HexNumber",
  "NumberUnit",
  "HexLiteralFragment",
  "ReservedKeyword",
  "AnonymousKeyword",
  "BreakKeyword",
  "ConstantKeyword",
  "ImmutableKeyword",
  "ContinueKeyword",
  "LeaveKeyword",
  "ExternalKeyword",
  "IndexedKeyword",
  "InternalKeyword",
  "PayableKeyword",
  "PrivateKeyword",
  "PublicKeyword",
  "VirtualKeyword",
  "PureKeyword",
  "TypeKeyword",
  "ViewKeyword",
  "GlobalKeyword",
  "ConstructorKeyword",
  "FallbackKeyword",
  "ReceiveKeyword",
  "Identifier",
  "StringLiteralFragment",
  "VersionLiteral",
  "WS",
  "COMMENT",
  "LINE_COMMENT"
];
SolidityParser.VOCABULARY = new import_VocabularyImpl2.VocabularyImpl(_SolidityParser._LITERAL_NAMES, _SolidityParser._SYMBOLIC_NAMES, []);
SolidityParser._serializedATNSegments = 3;
SolidityParser._serializedATNSegment0 = "\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x88\u0481					\x07	\x07\b	\b			\n	\n\v	\v\f	\f\r	\r																		 	 !	!\"	\"#	#$	$%	%&	&'	'(	()	)*	*+	+,	,-	-.	./	/0	01	12	23	34	45	56	67	78	89	9:	:;	;<	<=	=>	>?	?@	@A	AB	BC	CD	DE	EF	FG	GH	HI	IJ	JK	KL	LM	MN	NO	OP	PQ	QR	RS	ST	TU	UV	VW	WX	XY	YZ	Z[	[\\	\\]	]^	^_	_`	`a	ab	bc	c\x07\xD1\n\f\xD4\v\xE2\n\xE6\n\x07\xE9\n\f\xEC\v\x07\x07\b\b\xF1\n\b\b\b\b\xF5\n\b\b\b\xF8\n\b				\xFD\n	\n\n\n\n\n\u0103\n\n\n\n\n\n\n\n\u010A\n\n\n\n\n\u010E\n\n\n\n\n\n\n\n\n\n\n\x07\n\u0119\n\n\f\n\n\u011C\v\n\n\n\n\n\n\n\u0123\n\n\v\v\f\f\u0128\n\f\f\f\f\f\f\f\x07\f\u0130\n\f\f\f\f\u0133\v\f\f\u0135\n\f\f\f\x07\f\u0139\n\f\f\f\f\u013C\v\f\f\f\r\r\r\r\u0143\n\r\r\r\u0146\n\r\u0151\n\x07\u015A\n\f\u015D\v\u0162\n\u017D\n\u0180\n\x07\u0189\n\f\u018C\v\u0190\n\x07\u019A\n\f\u019D\v\u019F\n\u01A6\n\x07\u01AA\n\f\u01AD\v\u01B1\n\u01B6\n\u01B9\n\u01BF\n\u01C3\n\u01C7\n\u01CC\n\x07\u01D9\n\f\u01DC\v\u01E2\n\u01EC\n\x07\u01F0\n\f\u01F3\v\x07\u01FB\n\f\u01FE\v\u0200\n   \u0206\n   \u0209\n !!!!\x07!\u020F\n!\f!!\u0212\v!!\u0214\n!!!\"\"\"\u021A\n\"\"\"\u021D\n\"####\x07#\u0223\n#\f##\u0226\v##\u0228\n###$$$\u022E\n$%%%\u0232\n%%%&&&&&&&&\u023D\n&&&&&\u0242\n&&\x07&\u0245\n&\f&&\u0248\v&'''\x07'\u024D\n'\f''\u0250\v'(((\u0254\n()))))))*****\x07*\u0262\n*\f**\u0265\v****\u0269\n*++,,--\x07-\u0271\n-\f--\u0274\v---................\u0287\n.///00000000\u0293\n01111\u0298\n1111\u029C\n1\r11\u029D222\u02A2\n222\u02A5\n222333333444\u02B1\n455566666\u02BA\n6666\u02BE\n666\u02C1\n6666777\u02C8\n777777\u02CE\n7778899999999:::;;;<<<\u02E4\n<<<===>>>>????@@@@@@@@\u02FA\n@@@@\u02FE\n@@@AA\u0303\nAAAA\u0307\nA\x07A\u0309\nA\fAA\u030C\vABBB\u0310\nBB\x07B\u0313\nB\fBB\u0316\vBBB\u0319\nBBBCCDDDDDDDDDDDDDDDDDDD\u0331\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\u0367\nDDDD\u036B\nDDDDDDDDDDDDDDD\x07D\u037B\nD\fDD\u037E\vDEEEEEEEEEE\u0389\nEFFF\x07F\u038E\nF\fFF\u0391\vFGGG\x07G\u0396\nG\fGG\u0399\vGGG\u039C\nGHHHHIII\u03A4\nIIII\u03A8\nII\u03AA\nIJJJJJKK\x07K\u03B3\nK\fKK\u03B6\vKKKLLLLLLLLLLLLLLLLLLL\u03CC\nLMMMM\u03D1\nMNNNNOOOOO\u03DB\nOOOO\u03DF\nOOO\x07O\u03E3\nO\fOO\u03E6\vOOO\u03E9\nOPPPPP\u03EF\nPQQQQRRRRRRRR\u03FC\nRSSS\x07S\u0401\nS\fSS\u0404\vSTTTTUUUVVV\x07V\u0410\nV\fVV\u0413\vVWWWWWWW\u041B\nWXXXXX\u0421\nXXXX\u0425\nXXXYYYZZZZ\u042F\nZZZZZ\u0434\nZZZ[[[[\\\\\\\\\\\\\u0441\n\\]]]]^^^\u0449\n^^^^\u044D\n^\x07^\u044F\n^\f^^\u0452\v^^^^^^\x07^\u0459\n^\f^^\u045C\v^^\u045E\n^^^\u0461\n^___\u0465\n_``aa\u046A\na\raa\u046Bbbbbb\x07b\u0473\nb\fbb\u0476\vbbbb\u047A\nbcc\u047D\nc\rcc\u047EcJ\x86d\b\n\f \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\x07\r*,qqxx||~~&&9<dh=>ABCDGHIJ	\fMN\r\rQZjk\f&&,,88bbttxx\x80\x80\x82\x83\u0502\xD2\xD7\xDC\b\xE1\n\xE3\f\xED\xF7\xF9\u0122\u0124\u0127\u013F\u0150\u0152\u0165 \u016C\"\u0171$\u0177&\u018F(\u0191*\u01A2,\u01B2.\u01BA0\u01CB2\u01CD4\u01DA6\u01DD8\u01E5:\u01E7<\u01F6>\u0203@\u020AB\u0217D\u021EF\u022BH\u022FJ\u023CL\u0249N\u0253P\u0255R\u025CT\u026AV\u026CX\u026EZ\u0286\\\u0288^\u028B`\u0294b\u029Fd\u02A8f\u02B0h\u02B2j\u02B5l\u02C5n\u02D1p\u02D3r\u02DBt\u02DEv\u02E1x\u02E7z\u02EA|\u02EE~\u02F9\x80\u0302\x82\u030D\x84\u031C\x86\u0330\x88\u0388\x8A\u038A\x8C\u0392\x8E\u039D\x90\u03A9\x92\u03AB\x94\u03B0\x96\u03CB\x98\u03D0\x9A\u03D2\x9C\u03DA\x9E\u03EA\xA0\u03F0\xA2\u03FB\xA4\u03FD\xA6\u0405\xA8\u0409\xAA\u040C\xAC\u041A\xAE\u041C\xB0\u0428\xB2\u042B\xB4\u0437\xB6\u0440\xB8\u0442\xBA\u0460\xBC\u0462\xBE\u0466\xC0\u0469\xC2\u046D\xC4\u047C\xC6\xD1\xC7\xD1\n\xC8\xD1\f\xC9\xD1:\xCA\xD1(\xCB\xD1.\xCC\xD1\xCD\xD1 \xCE\xD1\"\xCF\xD1$\xD0\xC6\xD0\xC7\xD0\xC8\xD0\xC9\xD0\xCA\xD0\xCB\xD0\xCC\xD0\xCD\xD0\xCE\xD0\xCF\xD1\xD4\xD2\xD0\xD2\xD3\xD3\xD5\xD4\xD2\xD5\xD6\x07\xD6\xD7\xD8\x07\xD8\xD9\xD9\xDA\b\xDA\xDB\x07\xDB\xDC\xDD\xBE`\xDD\x07\xDE\xE2\x07\xDF\xE2\n\xE0\xE2\x86D\xE1\xDE\xE1\xDF\xE1\xE0\xE2	\xE3\xEA\b\xE4\xE6\x07\xE5\xE4\xE5\xE6\xE6\xE7\xE7\xE9\b\xE8\xE5\xE9\xEC\xEA\xE8\xEA\xEB\xEB\v\xEC\xEA\xED\xEE	\xEE\r\xEF\xF1\f\x07\xF0\xEF\xF0\xF1\xF1\xF2\xF2\xF8\x07\x85\xF3\xF5\f\x07\xF4\xF3\xF4\xF5\xF5\xF6\xF6\xF8\x07j\xF7\xF0\xF7\xF4\xF8\xF9\xFC\xBE`\xFA\xFB\x07\xFB\xFD\xBE`\xFC\xFA\xFC\xFD\xFD\xFE\xFF\x07\xFF\u0102\v\u0100\u0101\x07\u0101\u0103\xBE`\u0102\u0100\u0102\u0103\u0103\u0104\u0104\u0105\x07\u0105\u0123\u0106\u0109\x07\u0107\u010A\x07\u0108\u010A\xBE`\u0109\u0107\u0109\u0108\u010A\u010D\u010B\u010C\x07\u010C\u010E\xBE`\u010D\u010B\u010D\u010E\u010E\u010F\u010F\u0110\x07\u0110\u0111\v\u0111\u0112\x07\u0112\u0123\u0113\u0114\x07\u0114\u0115\x07\u0115\u011A	\u0116\u0117\x07\u0117\u0119	\u0118\u0116\u0119\u011C\u011A\u0118\u011A\u011B\u011B\u011D\u011C\u011A\u011D\u011E\x07\u011E\u011F\x07\u011F\u0120\v\u0120\u0121\x07\u0121\u0123\u0122\xFE\u0122\u0106\u0122\u0113\u0123\u0124\u0125\x07\x84\u0125\u0126\u0128\x07\u0127\u0126\u0127\u0128\u0128\u0129\u0129\u012A	\u012A\u0134\xBE`\u012B\u012C\x07\u012C\u0131\r\u012D\u012E\x07\u012E\u0130\r\u012F\u012D\u0130\u0133\u0131\u012F\u0131\u0132\u0132\u0135\u0133\u0131\u0134\u012B\u0134\u0135\u0135\u0136\u0136\u013A\x07\u0137\u0139\u0138\u0137\u0139\u013C\u013A\u0138\u013A\u013B\u013B\u013D\u013C\u013A\u013D\u013E\x07\u013E\u013F\u0145L'\u0140\u0142\x07\u0141\u0143\x8AF\u0142\u0141\u0142\u0143\u0143\u0144\u0144\u0146\x07\u0145\u0140\u0145\u0146\u0146\u0147\u0151\u0148\u0151$\u0149\u0151(\u014A\u0151*\u014B\u0151.\u014C\u01516\u014D\u0151:\u014E\u0151 \u014F\u0151\"\u0150\u0147\u0150\u0148\u0150\u0149\u0150\u014A\u0150\u014B\u0150\u014C\u0150\u014D\u0150\u014E\u0150\u014F\u0151\u0152\u015BJ&\u0153\u015A\x07z\u0154\u015A\x07w\u0155\u015A\x07y\u0156\u015A\x07q\u0157\u015A\x07r\u0158\u015A\xC2b\u0159\u0153\u0159\u0154\u0159\u0155\u0159\u0156\u0159\u0157\u0159\u0158\u015A\u015D\u015B\u0159\u015B\u015C\u015C\u015E\u015D\u015B\u015E\u0161\xBE`\u015F\u0160\x07\r\u0160\u0162\x86D\u0161\u015F\u0161\u0162\u0162\u0163\u0163\u0164\x07\u0164\u0165\u0166J&\u0166\u0167\x07q\u0167\u0168\xBE`\u0168\u0169\x07\r\u0169\u016A\x86D\u016A\u016B\x07\u016B\u016C\u016D\x07\u016D\u016E\xBE`\u016E\u016F<\u016F\u0170\x07\u0170!\u0171\u0172\x07}\u0172\u0173\xBE`\u0173\u0174\x07\u0174\u0175\x84C\u0175\u0176\x07\u0176#\u0177\u0178\x07\u0178\u0179&\u0179\u017C\x07\u017A\u017D\x07\u017B\u017DJ&\u017C\u017A\u017C\u017B\u017D\u017F\u017E\u0180\x07\x7F\u017F\u017E\u017F\u0180\u0180\u0181\u0181\u0182\x07\u0182%\u0183\u0190L'\u0184\u0185\x07\u0185\u018AL'\u0186\u0187\x07\u0187\u0189L'\u0188\u0186\u0189\u018C\u018A\u0188\u018A\u018B\u018B\u018D\u018C\u018A\u018D\u018E\x07\u018E\u0190\u018F\u0183\u018F\u0184\u0190'\u0191\u0192\x07\u0192\u0193\xBE`\u0193\u019E\x07\u0194\u0195H%\u0195\u019B\x07\u0196\u0197H%\u0197\u0198\x07\u0198\u019A\u0199\u0196\u019A\u019D\u019B\u0199\u019B\u019C\u019C\u019F\u019D\u019B\u019E\u0194\u019E\u019F\u019F\u01A0\u01A0\u01A1\x07\u01A1)\u01A2\u01A3\x07\u01A3\u01A5\xBE`\u01A4\u01A6<\u01A5\u01A4";
SolidityParser._serializedATNSegment1 = "\u01A5\u01A6\u01A6\u01AB\u01A7\u01AA\x07{\u01A8\u01AA\xC2b\u01A9\u01A7\u01A9\u01A8\u01AA\u01AD\u01AB\u01A9\u01AB\u01AC\u01AC\u01B0\u01AD\u01AB\u01AE\u01B1\x07\u01AF\u01B1X-\u01B0\u01AE\u01B0\u01AF\u01B1+\u01B2\u01B8\xBE`\u01B3\u01B5\x07\u01B4\u01B6\x8AF\u01B5\u01B4\u01B5\u01B6\u01B6\u01B7\u01B7\u01B9\x07\u01B8\u01B3\u01B8\u01B9\u01B9-\u01BA\u01BB0\u01BB\u01BC<\u01BC\u01BE4\u01BD\u01BF2\u01BE\u01BD\u01BE\u01BF\u01BF\u01C2\u01C0\u01C3\x07\u01C1\u01C3X-\u01C2\u01C0\u01C2\u01C1\u01C3/\u01C4\u01C6\x07 \u01C5\u01C7\xBE`\u01C6\u01C5\u01C6\u01C7\u01C7\u01CC\u01C8\u01CC\x07\x80\u01C9\u01CC\x07\x81\u01CA\u01CC\x07\x82\u01CB\u01C4\u01CB\u01C8\u01CB\u01C9\u01CB\u01CA\u01CC1\u01CD\u01CE\x07!\u01CE\u01CF<\u01CF3\u01D0\u01D9\x07u\u01D1\u01D9\x07z\u01D2\u01D9\x07w\u01D3\u01D9\x07y\u01D4\u01D9\x07{\u01D5\u01D9V,\u01D6\u01D9,\u01D7\u01D9\xC2b\u01D8\u01D0\u01D8\u01D1\u01D8\u01D2\u01D8\u01D3\u01D8\u01D4\u01D8\u01D5\u01D8\u01D6\u01D8\u01D7\u01D9\u01DC\u01DA\u01D8\u01DA\u01DB\u01DB5\u01DC\u01DA\u01DD\u01DE\x07\"\u01DE\u01DF\xBE`\u01DF\u01E1@!\u01E0\u01E2\x07o\u01E1\u01E0\u01E1\u01E2\u01E2\u01E3\u01E3\u01E4\x07\u01E47\u01E5\u01E6\xBE`\u01E69\u01E7\u01E8\x07#\u01E8\u01E9\xBE`\u01E9\u01EB\x07\u01EA\u01EC8\u01EB\u01EA\u01EB\u01EC\u01EC\u01F1\u01ED\u01EE\x07\u01EE\u01F08\u01EF\u01ED\u01F0\u01F3\u01F1\u01EF\u01F1\u01F2\u01F2\u01F4\u01F3\u01F1\u01F4\u01F5\x07\u01F5;\u01F6\u01FF\x07\u01F7\u01FC> \u01F8\u01F9\x07\u01F9\u01FB> \u01FA\u01F8\u01FB\u01FE\u01FC\u01FA\u01FC\u01FD\u01FD\u0200\u01FE\u01FC\u01FF\u01F7\u01FF\u0200\u0200\u0201\u0201\u0202\x07\u0202=\u0203\u0205J&\u0204\u0206T+\u0205\u0204\u0205\u0206\u0206\u0208\u0207\u0209\xBE`\u0208\u0207\u0208\u0209\u0209?\u020A\u0213\x07\u020B\u0210B\"\u020C\u020D\x07\u020D\u020FB\"\u020E\u020C\u020F\u0212\u0210\u020E\u0210\u0211\u0211\u0214\u0212\u0210\u0213\u020B\u0213\u0214\u0214\u0215\u0215\u0216\x07\u0216A\u0217\u0219J&\u0218\u021A\x07v\u0219\u0218\u0219\u021A\u021A\u021C\u021B\u021D\xBE`\u021C\u021B\u021C\u021D\u021DC\u021E\u0227\x07\u021F\u0224F$\u0220\u0221\x07\u0221\u0223F$\u0222\u0220\u0223\u0226\u0224\u0222\u0224\u0225\u0225\u0228\u0226\u0224\u0227\u021F\u0227\u0228\u0228\u0229\u0229\u022A\x07\u022AE\u022B\u022DJ&\u022C\u022ET+\u022D\u022C\u022D\u022E\u022EG\u022F\u0231J&\u0230\u0232T+\u0231\u0230\u0231\u0232\u0232\u0233\u0233\u0234\xBE`\u0234I\u0235\u0236\b&\u0236\u023D\x84C\u0237\u023DL'\u0238\u023DP)\u0239\u023DR*\u023A\u023B\x07&\u023B\u023D\x07x\u023C\u0235\u023C\u0237\u023C\u0238\u023C\u0239\u023C\u023A\u023D\u0246\u023E\u023F\f\u023F\u0241\x07$\u0240\u0242\x86D\u0241\u0240\u0241\u0242\u0242\u0243\u0243\u0245\x07%\u0244\u023E\u0245\u0248\u0246\u0244\u0246\u0247\u0247K\u0248\u0246\u0249\u024E\xBE`\u024A\u024B\x07'\u024B\u024D\xBE`\u024C\u024A\u024D\u0250\u024E\u024C\u024E\u024F\u024FM\u0250\u024E\u0251\u0254\x84C\u0252\u0254L'\u0253\u0251\u0253\u0252\u0254O\u0255\u0256\x07(\u0256\u0257\x07\u0257\u0258N(\u0258\u0259\x07)\u0259\u025AJ&\u025A\u025B\x07\u025BQ\u025C\u025D\x07 \u025D\u0263D#\u025E\u0262\x07w\u025F\u0262\x07u\u0260\u0262V,\u0261\u025E\u0261\u025F\u0261\u0260\u0262\u0265\u0263\u0261\u0263\u0264\u0264\u0268\u0265\u0263\u0266\u0267\x07!\u0267\u0269D#\u0268\u0266\u0268\u0269\u0269S\u026A\u026B	\u026BU\u026C\u026D	\u026DW\u026E\u0272\x07\u026F\u0271Z.\u0270\u026F\u0271\u0274\u0272\u0270\u0272\u0273\u0273\u0275\u0274\u0272\u0275\u0276\x07\u0276Y\u0277\u0287^0\u0278\u0287`1\u0279\u0287d3\u027A\u0287j6\u027B\u0287X-\u027C\u0287l7\u027D\u0287p9\u027E\u0287r:\u027F\u0287t;\u0280\u0287v<\u0281\u0287x=\u0282\u0287z>\u0283\u0287f4\u0284\u0287h5\u0285\u0287|?\u0286\u0277\u0286\u0278\u0286\u0279\u0286\u027A\u0286\u027B\u0286\u027C\u0286\u027D\u0286\u027E\u0286\u027F\u0286\u0280\u0286\u0281\u0286\u0282\u0286\u0283\u0286\u0284\u0286\u0285\u0287[\u0288\u0289\x86D\u0289\u028A\x07\u028A]\u028B\u028C\x07-\u028C\u028D\x07\u028D\u028E\x86D\u028E\u028F\x07\u028F\u0292Z.\u0290\u0291\x07.\u0291\u0293Z.\u0292\u0290\u0292\u0293\u0293_\u0294\u0295\x07/\u0295\u0297\x86D\u0296\u02982\u0297\u0296\u0297\u0298\u0298\u0299\u0299\u029BX-\u029A\u029Cb2\u029B\u029A\u029C\u029D\u029D\u029B\u029D\u029E\u029Ea\u029F\u02A4\x070\u02A0\u02A2\xBE`\u02A1\u02A0\u02A1\u02A2\u02A2\u02A3\u02A3\u02A5<\u02A4\u02A1\u02A4\u02A5\u02A5\u02A6\u02A6\u02A7X-\u02A7c\u02A8\u02A9\x071\u02A9\u02AA\x07\u02AA\u02AB\x86D\u02AB\u02AC\x07\u02AC\u02ADZ.\u02ADe\u02AE\u02B1~@\u02AF\u02B1\\/\u02B0\u02AE\u02B0\u02AF\u02B1g\u02B2\u02B3\x072\u02B3\u02B4X-\u02B4i\u02B5\u02B6\x07\u02B6\u02B9\x07\u02B7\u02BAf4\u02B8\u02BA\x07\u02B9\u02B7\u02B9\u02B8\u02BA\u02BD\u02BB\u02BE\\/\u02BC\u02BE\x07\u02BD\u02BB\u02BD\u02BC\u02BE\u02C0\u02BF\u02C1\x86D\u02C0\u02BF\u02C0\u02C1\u02C1\u02C2\u02C2\u02C3\x07\u02C3\u02C4Z.\u02C4k\u02C5\u02C7\x073\u02C6\u02C8\x07\x84\u02C7\u02C6\u02C7\u02C8\u02C8\u02CD\u02C9\u02CA\x07\u02CA\u02CBn8\u02CB\u02CC\x07\u02CC\u02CE\u02CD\u02C9\u02CD\u02CE\u02CE\u02CF\u02CF\u02D0\x94K\u02D0m\u02D1\u02D2\xC4c\u02D2o\u02D3\u02D4\x074\u02D4\u02D5Z.\u02D5\u02D6\x071\u02D6\u02D7\x07\u02D7\u02D8\x86D\u02D8\u02D9\x07\u02D9\u02DA\x07\u02DAq\u02DB\u02DC\x07s\u02DC\u02DD\x07\u02DDs\u02DE\u02DF\x07p\u02DF\u02E0\x07\u02E0u\u02E1\u02E3\x075\u02E2\u02E4\x86D\u02E3\u02E2\u02E3\u02E4\u02E4\u02E5\u02E5\u02E6\x07\u02E6w\u02E7\u02E8\x076\u02E8\u02E9\x07\u02E9y\u02EA\u02EB\x077\u02EB\u02EC\x92J\u02EC\u02ED\x07\u02ED{\u02EE\u02EF\x078\u02EF\u02F0\x92J\u02F0\u02F1\x07\u02F1}\u02F2\u02F3\x079\u02F3\u02FA\x82B\u02F4\u02FAH%\u02F5\u02F6\x07\u02F6\u02F7\x80A\u02F7\u02F8\x07\u02F8\u02FA\u02F9\u02F2\u02F9\u02F4\u02F9\u02F5\u02FA\u02FD\u02FB\u02FC\x07\r\u02FC\u02FE\x86D\u02FD\u02FB\u02FD\u02FE\u02FE\u02FF\u02FF\u0300\x07\u0300\x7F\u0301\u0303H%\u0302\u0301\u0302\u0303\u0303\u030A\u0304\u0306\x07\u0305\u0307H%\u0306\u0305\u0306\u0307\u0307\u0309\u0308\u0304\u0309\u030C\u030A\u0308\u030A\u030B\u030B\x81\u030C\u030A\u030D\u0314\x07\u030E\u0310\xBE`\u030F\u030E\u030F\u0310\u0310\u0311\u0311\u0313\x07\u0312\u030F\u0313\u0316\u0314\u0312\u0314\u0315\u0315\u0318\u0316\u0314\u0317\u0319\xBE`\u0318\u0317\u0318\u0319\u0319\u031A\u031A\u031B\x07\u031B\x83\u031C\u031D	\u031D\x85\u031E\u031F\bD\u031F\u0320\x07?\u0320\u0331J&\u0321\u0322\x07\u0322\u0323\x86D\u0323\u0324\x07\u0324\u0331\u0325\u0326	\x07\u0326\u0331\x86D\u0327\u0328	\b\u0328\u0331\x86D\u0329\u032A		\u032A\u0331\x86D\u032B\u032C\x07E\u032C\u0331\x86D\u032D\u032E\x07\b\u032E\u0331\x86D\u032F\u0331\x88E\u0330\u031E\u0330\u0321\u0330\u0325\u0330\u0327\u0330\u0329\u0330\u032B\u0330\u032D\u0330\u032F\u0331\u037C\u0332\u0333\f\u0333\u0334\x07F\u0334\u037B\x86D\u0335\u0336\f\u0336\u0337	\n\u0337\u037B\x86D\u0338\u0339\f\u0339\u033A	\b\u033A\u037B\x86D\u033B\u033C\f\r\u033C\u033D	\v\u033D\u037B\x86D\u033E\u033F\f\f\u033F\u0340\x07K\u0340\u037B\x86D\r\u0341\u0342\f\v\u0342\u0343\x07\x07\u0343\u037B\x86D\f\u0344\u0345\f\n\u0345\u0346\x07L\u0346\u037B\x86D\v\u0347\u0348\f	\u0348\u0349	\f\u0349\u037B\x86D\n\u034A\u034B\f\b\u034B\u034C	\r\u034C\u037B\x86D	\u034D\u034E\f\x07\u034E\u034F\x07O\u034F\u037B\x86D\b\u0350\u0351\f\u0351\u0352\x07\u0352\u037B\x86D\x07\u0353\u0354\f\u0354\u0355\x07P\u0355\u0356\x86D\u0356\u0357\x07@\u0357\u0358\x86D\u0358\u037B\u0359\u035A\f\u035A\u035B	\u035B\u037B\x86D\u035C\u035D\f\u035D\u037B	\x07\u035E\u035F\f\u035F\u0360\x07$\u0360\u0361\x86D\u0361\u0362\x07%\u0362\u037B\u0363\u0364\f\u0364\u0366\x07$\u0365\u0367\x86D\u0366\u0365\u0366\u0367\u0367\u0368\u0368\u036A\x07@\u0369\u036B\x86D\u036A\u0369\u036A\u036B\u036B\u036C\u036C\u037B\x07%\u036D\u036E\f\u036E\u036F\x07'\u036F\u037B\xBE`\u0370\u0371\f\u0371\u0372\x07\u0372\u0373\x8CG\u0373\u0374\x07\u0374\u037B\u0375\u0376\f\u0376\u0377\x07\u0377\u0378\x90I\u0378\u0379\x07\u0379\u037B\u037A\u0332\u037A\u0335\u037A\u0338\u037A\u033B\u037A\u033E\u037A\u0341\u037A\u0344\u037A\u0347\u037A\u034A\u037A\u034D\u037A\u0350\u037A\u0353\u037A\u0359\u037A\u035C\u037A\u035E\u037A\u0363\u037A\u036D\u037A\u0370\u037A\u0375\u037B\u037E\u037C\u037A\u037C\u037D\u037D\x87\u037E\u037C\u037F\u0389\x07i\u0380\u0389\xBC_\u0381\u0389\xC0a\u0382\u0389\xC4c\u0383\u0389\xBE`\u0384\u0389\x07}\u0385\u0389\x07x\u0386\u0389\xBA^\u0387\u0389J&\u0388\u037F\u0388\u0380\u0388\u0381\u0388\u0382\u0388\u0383\u0388\u0384\u0388\u0385\u0388\u0386\u0388\u0387\u0389\x89\u038A\u038F\x86D\u038B\u038C\x07\u038C\u038E\x86D\u038D\u038B\u038E\u0391\u038F\u038D\u038F\u0390\u0390\x8B\u0391\u038F\u0392\u0397\x8EH\u0393\u0394\x07\u0394\u0396\x8EH\u0395\u0393\u0396\u0399\u0397\u0395\u0397\u0398\u0398\u039B\u0399\u0397\u039A\u039C\x07\u039B\u039A\u039B\u039C\u039C\x8D\u039D\u039E\xBE`\u039E\u039F\x07@\u039F\u03A0\x86D\u03A0\x8F\u03A1\u03A3\x07\u03A2\u03A4\x8CG\u03A3\u03A2\u03A3\u03A4\u03A4\u03A5\u03A5\u03AA\x07\u03A6\u03A8\x8AF\u03A7\u03A6\u03A7\u03A8\u03A8\u03AA\u03A9\u03A1\u03A9\u03A7\u03AA\x91\u03AB\u03AC\x86D\u03AC\u03AD\x07\u03AD\u03AE\x90I\u03AE\u03AF\x07\u03AF\x93\u03B0\u03B4\x07\u03B1\u03B3\x96L\u03B2\u03B1\u03B3\u03B6\u03B4\u03B2\u03B4\u03B5\u03B5\u03B7\u03B6\u03B4\u03B7\u03B8\x07\u03B8\x95\u03B9\u03CC\xBE`\u03BA\u03CC\x94K\u03BB\u03CC\x98M\u03BC\u03CC\x9EP\u03BD\u03CC\xA0Q\u03BE\u03CC\xA6T\u03BF\u03CC\xA8U\u03C0\u03CC\xAAV\u03C1\u03CC\xAEX\u03C2\u03CC\xB2Z\u03C3\u03CC\xB4[\u03C4\u03CC\x07p\u03C5\u03CC\x07s\u03C6\u03CC\x07t\u03C7\u03CC\xB8]\u03C8\u03CC\xBC_\u03C9\u03CC\xC4c\u03CA\u03CC\xC0a\u03CB\u03B9\u03CB\u03BA\u03CB\u03BB\u03CB\u03BC\u03CB\u03BD\u03CB\u03BE\u03CB\u03BF\u03CB\u03C0\u03CB\u03C1\u03CB\u03C2\u03CB\u03C3\u03CB\u03C4\u03CB\u03C5\u03CB\u03C6\u03CB\u03C7\u03CB\u03C8\u03CB\u03C9\u03CB\u03CA\u03CC\x97\u03CD\u03D1\x9CO\u03CE\u03D1\xB6\\\u03CF\u03D1\x9AN\u03D0\u03CD\u03D0\u03CE\u03D0\u03CF\u03D1\x99\u03D2\u03D3\xBE`\u03D3\u03D4\x07'\u03D4\u03D5\xBE`\u03D5\x9B\u03D6\u03DB\x075\u03D7\u03DB\x07&\u03D8\u03DB\x07<\u03D9\u03DB\xBE`\u03DA\u03D6\u03DA\u03D7\u03DA\u03D8\u03DA\u03D9\u03DB\u03E8\u03DC\u03DE\x07\u03DD\u03DF\x98M\u03DE\u03DD\u03DE\u03DF\u03DF\u03E4\u03E0\u03E1\x07\u03E1\u03E3\x98M\u03E2\u03E0\u03E3\u03E6\u03E4\u03E2\u03E4\u03E5\u03E5\u03E7\u03E6\u03E4\u03E7\u03E9\x07\u03E8\u03DC\u03E8\u03E9\u03E9\x9D\u03EA\u03EB\x07[\u03EB\u03EE\xA2R\u03EC\u03ED\x07\\\u03ED\u03EF\x98M\u03EE\u03EC\u03EE\u03EF\u03EF\x9F\u03F0\u03F1\xA2R\u03F1\u03F2\x07\\\u03F2\u03F3\x98M\u03F3\xA1\u03F4\u03FC\xBE`\u03F5\u03FC\x9AN\u03F6\u03FC\xA4S\u03F7\u03F8\x07\u03F8\u03F9\xA4S\u03F9\u03FA\x07\u03FA\u03FC\u03FB\u03F4\u03FB\u03F5\u03FB\u03F6\u03FB\u03F7\u03FC\xA3\u03FD\u0402\xBE`\u03FE\u03FF\x07\u03FF\u0401\xBE`\u0400\u03FE\u0401\u0404\u0402\u0400\u0402\u0403\u0403\xA5\u0404\u0402\u0405\u0406\x98M\u0406\u0407\x07]\u0407\u0408\xBE`\u0408\xA7\u0409\u040A\xBE`\u040A\u040B\x07@\u040B\xA9\u040C\u040D\x07^\u040D\u0411\x98M\u040E\u0410\xACW\u040F\u040E\u0410\u0413\u0411\u040F\u0411\u0412\u0412\xAB\u0413\u0411\u0414\u0415\x07_\u0415\u0416\xB6\\\u0416\u0417\x94K\u0417\u041B\u0418\u0419\x07`\u0419\u041B\x94K\u041A\u0414\u041A\u0418\u041B\xAD\u041C\u041D\x07 \u041D\u041E\xBE`\u041E\u0420\x07\u041F\u0421\xA4S\u0420\u041F\u0420\u0421\u0421\u0422\u0422\u0424\x07\u0423\u0425\xB0Y\u0424\u0423\u0424\u0425\u0425\u0426\u0426\u0427\x94K\u0427\xAF\u0428\u0429\x07a\u0429\u042A\xA4S\u042A\xB1\u042B\u042E\x07\u042C\u042F\x94K\u042D\u042F\x98M\u042E\u042C\u042E\u042D\u042F\u0430\u0430\u0433\x98M\u0431\u0434\x94K\u0432\u0434\x98M\u0433\u0431\u0433\u0432\u0434\u0435\u0435\u0436\x94K\u0436\xB3\u0437\u0438\x07-\u0438\u0439\x98M\u0439\u043A\x94K\u043A\xB5\u043B\u0441\xC4c\u043C\u0441\x07j\u043D\u0441\x07k\u043E\u0441\xC0a\u043F\u0441\x07i\u0440\u043B\u0440\u043C\u0440\u043D\u0440\u043E\u0440\u043F";
SolidityParser._serializedATNSegment2 = "\u0441\xB7\u0442\u0443\x073\u0443\u0444\xBE`\u0444\u0445\x94K\u0445\xB9\u0446\u0448\x07\u0447\u0449\x86D\u0448\u0447\u0448\u0449\u0449\u0450\u044A\u044C\x07\u044B\u044D\x86D\u044C\u044B\u044C\u044D\u044D\u044F\u044E\u044A\u044F\u0452\u0450\u044E\u0450\u0451\u0451\u0453\u0452\u0450\u0453\u0461\x07\u0454\u045D\x07$\u0455\u045A\x86D\u0456\u0457\x07\u0457\u0459\x86D\u0458\u0456\u0459\u045C\u045A\u0458\u045A\u045B\u045B\u045E\u045C\u045A\u045D\u0455\u045D\u045E\u045E\u045F\u045F\u0461\x07%\u0460\u0446\u0460\u0454\u0461\xBB\u0462\u0464	\u0463\u0465\x07l\u0464\u0463\u0464\u0465\u0465\xBD\u0466\u0467	\u0467\xBF\u0468\u046A\x07m\u0469\u0468\u046A\u046B\u046B\u0469\u046B\u046C\u046C\xC1\u046D\u0479\x07c\u046E\u046F\x07\u046F\u0474L'\u0470\u0471\x07\u0471\u0473L'\u0472\u0470\u0473\u0476\u0474\u0472\u0474\u0475\u0475\u0477\u0476\u0474\u0477\u0478\x07\u0478\u047A\u0479\u046E\u0479\u047A\u047A\xC3\u047B\u047D\x07\x84\u047C\u047B\u047D\u047E\u047E\u047C\u047E\u047F\u047F\xC5\x81\xD0\xD2\xE1\xE5\xEA\xF0\xF4\xF7\xFC\u0102\u0109\u010D\u011A\u0122\u0127\u0131\u0134\u013A\u0142\u0145\u0150\u0159\u015B\u0161\u017C\u017F\u018A\u018F\u019B\u019E\u01A5\u01A9\u01AB\u01B0\u01B5\u01B8\u01BE\u01C2\u01C6\u01CB\u01D8\u01DA\u01E1\u01EB\u01F1\u01FC\u01FF\u0205\u0208\u0210\u0213\u0219\u021C\u0224\u0227\u022D\u0231\u023C\u0241\u0246\u024E\u0253\u0261\u0263\u0268\u0272\u0286\u0292\u0297\u029D\u02A1\u02A4\u02B0\u02B9\u02BD\u02C0\u02C7\u02CD\u02E3\u02F9\u02FD\u0302\u0306\u030A\u030F\u0314\u0318\u0330\u0366\u036A\u037A\u037C\u0388\u038F\u0397\u039B\u03A3\u03A7\u03A9\u03B4\u03CB\u03D0\u03DA\u03DE\u03E4\u03E8\u03EE\u03FB\u0402\u0411\u041A\u0420\u0424\u042E\u0433\u0440\u0448\u044C\u0450\u045A\u045D\u0460\u0464\u046B\u0474\u0479\u047E";
SolidityParser._serializedATN = Utils2.join([
  _SolidityParser._serializedATNSegment0,
  _SolidityParser._serializedATNSegment1,
  _SolidityParser._serializedATNSegment2
], "");
var SourceUnitContext = class extends import_ParserRuleContext.ParserRuleContext {
  EOF() {
    return this.getToken(SolidityParser.EOF, 0);
  }
  pragmaDirective(i) {
    if (i === void 0) {
      return this.getRuleContexts(PragmaDirectiveContext);
    } else {
      return this.getRuleContext(i, PragmaDirectiveContext);
    }
  }
  importDirective(i) {
    if (i === void 0) {
      return this.getRuleContexts(ImportDirectiveContext);
    } else {
      return this.getRuleContext(i, ImportDirectiveContext);
    }
  }
  contractDefinition(i) {
    if (i === void 0) {
      return this.getRuleContexts(ContractDefinitionContext);
    } else {
      return this.getRuleContext(i, ContractDefinitionContext);
    }
  }
  enumDefinition(i) {
    if (i === void 0) {
      return this.getRuleContexts(EnumDefinitionContext);
    } else {
      return this.getRuleContext(i, EnumDefinitionContext);
    }
  }
  structDefinition(i) {
    if (i === void 0) {
      return this.getRuleContexts(StructDefinitionContext);
    } else {
      return this.getRuleContext(i, StructDefinitionContext);
    }
  }
  functionDefinition(i) {
    if (i === void 0) {
      return this.getRuleContexts(FunctionDefinitionContext);
    } else {
      return this.getRuleContext(i, FunctionDefinitionContext);
    }
  }
  fileLevelConstant(i) {
    if (i === void 0) {
      return this.getRuleContexts(FileLevelConstantContext);
    } else {
      return this.getRuleContext(i, FileLevelConstantContext);
    }
  }
  customErrorDefinition(i) {
    if (i === void 0) {
      return this.getRuleContexts(CustomErrorDefinitionContext);
    } else {
      return this.getRuleContext(i, CustomErrorDefinitionContext);
    }
  }
  typeDefinition(i) {
    if (i === void 0) {
      return this.getRuleContexts(TypeDefinitionContext);
    } else {
      return this.getRuleContext(i, TypeDefinitionContext);
    }
  }
  usingForDeclaration(i) {
    if (i === void 0) {
      return this.getRuleContexts(UsingForDeclarationContext);
    } else {
      return this.getRuleContext(i, UsingForDeclarationContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_sourceUnit;
  }
  enterRule(listener) {
    if (listener.enterSourceUnit) {
      listener.enterSourceUnit(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSourceUnit) {
      listener.exitSourceUnit(this);
    }
  }
  accept(visitor) {
    if (visitor.visitSourceUnit) {
      return visitor.visitSourceUnit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var PragmaDirectiveContext = class extends import_ParserRuleContext.ParserRuleContext {
  pragmaName() {
    return this.getRuleContext(0, PragmaNameContext);
  }
  pragmaValue() {
    return this.getRuleContext(0, PragmaValueContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_pragmaDirective;
  }
  enterRule(listener) {
    if (listener.enterPragmaDirective) {
      listener.enterPragmaDirective(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPragmaDirective) {
      listener.exitPragmaDirective(this);
    }
  }
  accept(visitor) {
    if (visitor.visitPragmaDirective) {
      return visitor.visitPragmaDirective(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var PragmaNameContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_pragmaName;
  }
  enterRule(listener) {
    if (listener.enterPragmaName) {
      listener.enterPragmaName(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPragmaName) {
      listener.exitPragmaName(this);
    }
  }
  accept(visitor) {
    if (visitor.visitPragmaName) {
      return visitor.visitPragmaName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var PragmaValueContext = class extends import_ParserRuleContext.ParserRuleContext {
  version() {
    return this.tryGetRuleContext(0, VersionContext);
  }
  expression() {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_pragmaValue;
  }
  enterRule(listener) {
    if (listener.enterPragmaValue) {
      listener.enterPragmaValue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPragmaValue) {
      listener.exitPragmaValue(this);
    }
  }
  accept(visitor) {
    if (visitor.visitPragmaValue) {
      return visitor.visitPragmaValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var VersionContext = class extends import_ParserRuleContext.ParserRuleContext {
  versionConstraint(i) {
    if (i === void 0) {
      return this.getRuleContexts(VersionConstraintContext);
    } else {
      return this.getRuleContext(i, VersionConstraintContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_version;
  }
  enterRule(listener) {
    if (listener.enterVersion) {
      listener.enterVersion(this);
    }
  }
  exitRule(listener) {
    if (listener.exitVersion) {
      listener.exitVersion(this);
    }
  }
  accept(visitor) {
    if (visitor.visitVersion) {
      return visitor.visitVersion(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var VersionOperatorContext = class extends import_ParserRuleContext.ParserRuleContext {
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_versionOperator;
  }
  enterRule(listener) {
    if (listener.enterVersionOperator) {
      listener.enterVersionOperator(this);
    }
  }
  exitRule(listener) {
    if (listener.exitVersionOperator) {
      listener.exitVersionOperator(this);
    }
  }
  accept(visitor) {
    if (visitor.visitVersionOperator) {
      return visitor.visitVersionOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var VersionConstraintContext = class extends import_ParserRuleContext.ParserRuleContext {
  VersionLiteral() {
    return this.tryGetToken(SolidityParser.VersionLiteral, 0);
  }
  versionOperator() {
    return this.tryGetRuleContext(0, VersionOperatorContext);
  }
  DecimalNumber() {
    return this.tryGetToken(SolidityParser.DecimalNumber, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_versionConstraint;
  }
  enterRule(listener) {
    if (listener.enterVersionConstraint) {
      listener.enterVersionConstraint(this);
    }
  }
  exitRule(listener) {
    if (listener.exitVersionConstraint) {
      listener.exitVersionConstraint(this);
    }
  }
  accept(visitor) {
    if (visitor.visitVersionConstraint) {
      return visitor.visitVersionConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ImportDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_importDeclaration;
  }
  enterRule(listener) {
    if (listener.enterImportDeclaration) {
      listener.enterImportDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener.exitImportDeclaration) {
      listener.exitImportDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor.visitImportDeclaration) {
      return visitor.visitImportDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ImportDirectiveContext = class extends import_ParserRuleContext.ParserRuleContext {
  importPath() {
    return this.getRuleContext(0, ImportPathContext);
  }
  identifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  importDeclaration(i) {
    if (i === void 0) {
      return this.getRuleContexts(ImportDeclarationContext);
    } else {
      return this.getRuleContext(i, ImportDeclarationContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_importDirective;
  }
  enterRule(listener) {
    if (listener.enterImportDirective) {
      listener.enterImportDirective(this);
    }
  }
  exitRule(listener) {
    if (listener.exitImportDirective) {
      listener.exitImportDirective(this);
    }
  }
  accept(visitor) {
    if (visitor.visitImportDirective) {
      return visitor.visitImportDirective(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ImportPathContext = class extends import_ParserRuleContext.ParserRuleContext {
  StringLiteralFragment() {
    return this.getToken(SolidityParser.StringLiteralFragment, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_importPath;
  }
  enterRule(listener) {
    if (listener.enterImportPath) {
      listener.enterImportPath(this);
    }
  }
  exitRule(listener) {
    if (listener.exitImportPath) {
      listener.exitImportPath(this);
    }
  }
  accept(visitor) {
    if (visitor.visitImportPath) {
      return visitor.visitImportPath(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ContractDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  inheritanceSpecifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(InheritanceSpecifierContext);
    } else {
      return this.getRuleContext(i, InheritanceSpecifierContext);
    }
  }
  contractPart(i) {
    if (i === void 0) {
      return this.getRuleContexts(ContractPartContext);
    } else {
      return this.getRuleContext(i, ContractPartContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_contractDefinition;
  }
  enterRule(listener) {
    if (listener.enterContractDefinition) {
      listener.enterContractDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitContractDefinition) {
      listener.exitContractDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitContractDefinition) {
      return visitor.visitContractDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var InheritanceSpecifierContext = class extends import_ParserRuleContext.ParserRuleContext {
  userDefinedTypeName() {
    return this.getRuleContext(0, UserDefinedTypeNameContext);
  }
  expressionList() {
    return this.tryGetRuleContext(0, ExpressionListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_inheritanceSpecifier;
  }
  enterRule(listener) {
    if (listener.enterInheritanceSpecifier) {
      listener.enterInheritanceSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInheritanceSpecifier) {
      listener.exitInheritanceSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor.visitInheritanceSpecifier) {
      return visitor.visitInheritanceSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ContractPartContext = class extends import_ParserRuleContext.ParserRuleContext {
  stateVariableDeclaration() {
    return this.tryGetRuleContext(0, StateVariableDeclarationContext);
  }
  usingForDeclaration() {
    return this.tryGetRuleContext(0, UsingForDeclarationContext);
  }
  structDefinition() {
    return this.tryGetRuleContext(0, StructDefinitionContext);
  }
  modifierDefinition() {
    return this.tryGetRuleContext(0, ModifierDefinitionContext);
  }
  functionDefinition() {
    return this.tryGetRuleContext(0, FunctionDefinitionContext);
  }
  eventDefinition() {
    return this.tryGetRuleContext(0, EventDefinitionContext);
  }
  enumDefinition() {
    return this.tryGetRuleContext(0, EnumDefinitionContext);
  }
  customErrorDefinition() {
    return this.tryGetRuleContext(0, CustomErrorDefinitionContext);
  }
  typeDefinition() {
    return this.tryGetRuleContext(0, TypeDefinitionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_contractPart;
  }
  enterRule(listener) {
    if (listener.enterContractPart) {
      listener.enterContractPart(this);
    }
  }
  exitRule(listener) {
    if (listener.exitContractPart) {
      listener.exitContractPart(this);
    }
  }
  accept(visitor) {
    if (visitor.visitContractPart) {
      return visitor.visitContractPart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var StateVariableDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {
  typeName() {
    return this.getRuleContext(0, TypeNameContext);
  }
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  PublicKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.PublicKeyword);
    } else {
      return this.getToken(SolidityParser.PublicKeyword, i);
    }
  }
  InternalKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.InternalKeyword);
    } else {
      return this.getToken(SolidityParser.InternalKeyword, i);
    }
  }
  PrivateKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.PrivateKeyword);
    } else {
      return this.getToken(SolidityParser.PrivateKeyword, i);
    }
  }
  ConstantKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.ConstantKeyword);
    } else {
      return this.getToken(SolidityParser.ConstantKeyword, i);
    }
  }
  ImmutableKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.ImmutableKeyword);
    } else {
      return this.getToken(SolidityParser.ImmutableKeyword, i);
    }
  }
  overrideSpecifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(OverrideSpecifierContext);
    } else {
      return this.getRuleContext(i, OverrideSpecifierContext);
    }
  }
  expression() {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_stateVariableDeclaration;
  }
  enterRule(listener) {
    if (listener.enterStateVariableDeclaration) {
      listener.enterStateVariableDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStateVariableDeclaration) {
      listener.exitStateVariableDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor.visitStateVariableDeclaration) {
      return visitor.visitStateVariableDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FileLevelConstantContext = class extends import_ParserRuleContext.ParserRuleContext {
  typeName() {
    return this.getRuleContext(0, TypeNameContext);
  }
  ConstantKeyword() {
    return this.getToken(SolidityParser.ConstantKeyword, 0);
  }
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_fileLevelConstant;
  }
  enterRule(listener) {
    if (listener.enterFileLevelConstant) {
      listener.enterFileLevelConstant(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFileLevelConstant) {
      listener.exitFileLevelConstant(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFileLevelConstant) {
      return visitor.visitFileLevelConstant(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var CustomErrorDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  parameterList() {
    return this.getRuleContext(0, ParameterListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_customErrorDefinition;
  }
  enterRule(listener) {
    if (listener.enterCustomErrorDefinition) {
      listener.enterCustomErrorDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCustomErrorDefinition) {
      listener.exitCustomErrorDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitCustomErrorDefinition) {
      return visitor.visitCustomErrorDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var TypeDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  TypeKeyword() {
    return this.getToken(SolidityParser.TypeKeyword, 0);
  }
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  elementaryTypeName() {
    return this.getRuleContext(0, ElementaryTypeNameContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_typeDefinition;
  }
  enterRule(listener) {
    if (listener.enterTypeDefinition) {
      listener.enterTypeDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTypeDefinition) {
      listener.exitTypeDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitTypeDefinition) {
      return visitor.visitTypeDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var UsingForDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {
  usingForObject() {
    return this.getRuleContext(0, UsingForObjectContext);
  }
  typeName() {
    return this.tryGetRuleContext(0, TypeNameContext);
  }
  GlobalKeyword() {
    return this.tryGetToken(SolidityParser.GlobalKeyword, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_usingForDeclaration;
  }
  enterRule(listener) {
    if (listener.enterUsingForDeclaration) {
      listener.enterUsingForDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener.exitUsingForDeclaration) {
      listener.exitUsingForDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor.visitUsingForDeclaration) {
      return visitor.visitUsingForDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var UsingForObjectContext = class extends import_ParserRuleContext.ParserRuleContext {
  userDefinedTypeName(i) {
    if (i === void 0) {
      return this.getRuleContexts(UserDefinedTypeNameContext);
    } else {
      return this.getRuleContext(i, UserDefinedTypeNameContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_usingForObject;
  }
  enterRule(listener) {
    if (listener.enterUsingForObject) {
      listener.enterUsingForObject(this);
    }
  }
  exitRule(listener) {
    if (listener.exitUsingForObject) {
      listener.exitUsingForObject(this);
    }
  }
  accept(visitor) {
    if (visitor.visitUsingForObject) {
      return visitor.visitUsingForObject(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var StructDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  variableDeclaration(i) {
    if (i === void 0) {
      return this.getRuleContexts(VariableDeclarationContext);
    } else {
      return this.getRuleContext(i, VariableDeclarationContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_structDefinition;
  }
  enterRule(listener) {
    if (listener.enterStructDefinition) {
      listener.enterStructDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStructDefinition) {
      listener.exitStructDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitStructDefinition) {
      return visitor.visitStructDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ModifierDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  block() {
    return this.tryGetRuleContext(0, BlockContext);
  }
  parameterList() {
    return this.tryGetRuleContext(0, ParameterListContext);
  }
  VirtualKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.VirtualKeyword);
    } else {
      return this.getToken(SolidityParser.VirtualKeyword, i);
    }
  }
  overrideSpecifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(OverrideSpecifierContext);
    } else {
      return this.getRuleContext(i, OverrideSpecifierContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_modifierDefinition;
  }
  enterRule(listener) {
    if (listener.enterModifierDefinition) {
      listener.enterModifierDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitModifierDefinition) {
      listener.exitModifierDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitModifierDefinition) {
      return visitor.visitModifierDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ModifierInvocationContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  expressionList() {
    return this.tryGetRuleContext(0, ExpressionListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_modifierInvocation;
  }
  enterRule(listener) {
    if (listener.enterModifierInvocation) {
      listener.enterModifierInvocation(this);
    }
  }
  exitRule(listener) {
    if (listener.exitModifierInvocation) {
      listener.exitModifierInvocation(this);
    }
  }
  accept(visitor) {
    if (visitor.visitModifierInvocation) {
      return visitor.visitModifierInvocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FunctionDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  functionDescriptor() {
    return this.getRuleContext(0, FunctionDescriptorContext);
  }
  parameterList() {
    return this.getRuleContext(0, ParameterListContext);
  }
  modifierList() {
    return this.getRuleContext(0, ModifierListContext);
  }
  block() {
    return this.tryGetRuleContext(0, BlockContext);
  }
  returnParameters() {
    return this.tryGetRuleContext(0, ReturnParametersContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_functionDefinition;
  }
  enterRule(listener) {
    if (listener.enterFunctionDefinition) {
      listener.enterFunctionDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionDefinition) {
      listener.exitFunctionDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFunctionDefinition) {
      return visitor.visitFunctionDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FunctionDescriptorContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  ConstructorKeyword() {
    return this.tryGetToken(SolidityParser.ConstructorKeyword, 0);
  }
  FallbackKeyword() {
    return this.tryGetToken(SolidityParser.FallbackKeyword, 0);
  }
  ReceiveKeyword() {
    return this.tryGetToken(SolidityParser.ReceiveKeyword, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_functionDescriptor;
  }
  enterRule(listener) {
    if (listener.enterFunctionDescriptor) {
      listener.enterFunctionDescriptor(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionDescriptor) {
      listener.exitFunctionDescriptor(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFunctionDescriptor) {
      return visitor.visitFunctionDescriptor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ReturnParametersContext = class extends import_ParserRuleContext.ParserRuleContext {
  parameterList() {
    return this.getRuleContext(0, ParameterListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_returnParameters;
  }
  enterRule(listener) {
    if (listener.enterReturnParameters) {
      listener.enterReturnParameters(this);
    }
  }
  exitRule(listener) {
    if (listener.exitReturnParameters) {
      listener.exitReturnParameters(this);
    }
  }
  accept(visitor) {
    if (visitor.visitReturnParameters) {
      return visitor.visitReturnParameters(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ModifierListContext = class extends import_ParserRuleContext.ParserRuleContext {
  ExternalKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.ExternalKeyword);
    } else {
      return this.getToken(SolidityParser.ExternalKeyword, i);
    }
  }
  PublicKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.PublicKeyword);
    } else {
      return this.getToken(SolidityParser.PublicKeyword, i);
    }
  }
  InternalKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.InternalKeyword);
    } else {
      return this.getToken(SolidityParser.InternalKeyword, i);
    }
  }
  PrivateKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.PrivateKeyword);
    } else {
      return this.getToken(SolidityParser.PrivateKeyword, i);
    }
  }
  VirtualKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.VirtualKeyword);
    } else {
      return this.getToken(SolidityParser.VirtualKeyword, i);
    }
  }
  stateMutability(i) {
    if (i === void 0) {
      return this.getRuleContexts(StateMutabilityContext);
    } else {
      return this.getRuleContext(i, StateMutabilityContext);
    }
  }
  modifierInvocation(i) {
    if (i === void 0) {
      return this.getRuleContexts(ModifierInvocationContext);
    } else {
      return this.getRuleContext(i, ModifierInvocationContext);
    }
  }
  overrideSpecifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(OverrideSpecifierContext);
    } else {
      return this.getRuleContext(i, OverrideSpecifierContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_modifierList;
  }
  enterRule(listener) {
    if (listener.enterModifierList) {
      listener.enterModifierList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitModifierList) {
      listener.exitModifierList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitModifierList) {
      return visitor.visitModifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var EventDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  eventParameterList() {
    return this.getRuleContext(0, EventParameterListContext);
  }
  AnonymousKeyword() {
    return this.tryGetToken(SolidityParser.AnonymousKeyword, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_eventDefinition;
  }
  enterRule(listener) {
    if (listener.enterEventDefinition) {
      listener.enterEventDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEventDefinition) {
      listener.exitEventDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitEventDefinition) {
      return visitor.visitEventDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var EnumValueContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_enumValue;
  }
  enterRule(listener) {
    if (listener.enterEnumValue) {
      listener.enterEnumValue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEnumValue) {
      listener.exitEnumValue(this);
    }
  }
  accept(visitor) {
    if (visitor.visitEnumValue) {
      return visitor.visitEnumValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var EnumDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  enumValue(i) {
    if (i === void 0) {
      return this.getRuleContexts(EnumValueContext);
    } else {
      return this.getRuleContext(i, EnumValueContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_enumDefinition;
  }
  enterRule(listener) {
    if (listener.enterEnumDefinition) {
      listener.enterEnumDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEnumDefinition) {
      listener.exitEnumDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitEnumDefinition) {
      return visitor.visitEnumDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ParameterListContext = class extends import_ParserRuleContext.ParserRuleContext {
  parameter(i) {
    if (i === void 0) {
      return this.getRuleContexts(ParameterContext);
    } else {
      return this.getRuleContext(i, ParameterContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_parameterList;
  }
  enterRule(listener) {
    if (listener.enterParameterList) {
      listener.enterParameterList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitParameterList) {
      listener.exitParameterList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitParameterList) {
      return visitor.visitParameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ParameterContext = class extends import_ParserRuleContext.ParserRuleContext {
  typeName() {
    return this.getRuleContext(0, TypeNameContext);
  }
  storageLocation() {
    return this.tryGetRuleContext(0, StorageLocationContext);
  }
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_parameter;
  }
  enterRule(listener) {
    if (listener.enterParameter) {
      listener.enterParameter(this);
    }
  }
  exitRule(listener) {
    if (listener.exitParameter) {
      listener.exitParameter(this);
    }
  }
  accept(visitor) {
    if (visitor.visitParameter) {
      return visitor.visitParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var EventParameterListContext = class extends import_ParserRuleContext.ParserRuleContext {
  eventParameter(i) {
    if (i === void 0) {
      return this.getRuleContexts(EventParameterContext);
    } else {
      return this.getRuleContext(i, EventParameterContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_eventParameterList;
  }
  enterRule(listener) {
    if (listener.enterEventParameterList) {
      listener.enterEventParameterList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEventParameterList) {
      listener.exitEventParameterList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitEventParameterList) {
      return visitor.visitEventParameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var EventParameterContext = class extends import_ParserRuleContext.ParserRuleContext {
  typeName() {
    return this.getRuleContext(0, TypeNameContext);
  }
  IndexedKeyword() {
    return this.tryGetToken(SolidityParser.IndexedKeyword, 0);
  }
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_eventParameter;
  }
  enterRule(listener) {
    if (listener.enterEventParameter) {
      listener.enterEventParameter(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEventParameter) {
      listener.exitEventParameter(this);
    }
  }
  accept(visitor) {
    if (visitor.visitEventParameter) {
      return visitor.visitEventParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FunctionTypeParameterListContext = class extends import_ParserRuleContext.ParserRuleContext {
  functionTypeParameter(i) {
    if (i === void 0) {
      return this.getRuleContexts(FunctionTypeParameterContext);
    } else {
      return this.getRuleContext(i, FunctionTypeParameterContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_functionTypeParameterList;
  }
  enterRule(listener) {
    if (listener.enterFunctionTypeParameterList) {
      listener.enterFunctionTypeParameterList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionTypeParameterList) {
      listener.exitFunctionTypeParameterList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFunctionTypeParameterList) {
      return visitor.visitFunctionTypeParameterList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FunctionTypeParameterContext = class extends import_ParserRuleContext.ParserRuleContext {
  typeName() {
    return this.getRuleContext(0, TypeNameContext);
  }
  storageLocation() {
    return this.tryGetRuleContext(0, StorageLocationContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_functionTypeParameter;
  }
  enterRule(listener) {
    if (listener.enterFunctionTypeParameter) {
      listener.enterFunctionTypeParameter(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionTypeParameter) {
      listener.exitFunctionTypeParameter(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFunctionTypeParameter) {
      return visitor.visitFunctionTypeParameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var VariableDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {
  typeName() {
    return this.getRuleContext(0, TypeNameContext);
  }
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  storageLocation() {
    return this.tryGetRuleContext(0, StorageLocationContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_variableDeclaration;
  }
  enterRule(listener) {
    if (listener.enterVariableDeclaration) {
      listener.enterVariableDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener.exitVariableDeclaration) {
      listener.exitVariableDeclaration(this);
    }
  }
  accept(visitor) {
    if (visitor.visitVariableDeclaration) {
      return visitor.visitVariableDeclaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var TypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {
  elementaryTypeName() {
    return this.tryGetRuleContext(0, ElementaryTypeNameContext);
  }
  userDefinedTypeName() {
    return this.tryGetRuleContext(0, UserDefinedTypeNameContext);
  }
  mapping() {
    return this.tryGetRuleContext(0, MappingContext);
  }
  typeName() {
    return this.tryGetRuleContext(0, TypeNameContext);
  }
  expression() {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  functionTypeName() {
    return this.tryGetRuleContext(0, FunctionTypeNameContext);
  }
  PayableKeyword() {
    return this.tryGetToken(SolidityParser.PayableKeyword, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_typeName;
  }
  enterRule(listener) {
    if (listener.enterTypeName) {
      listener.enterTypeName(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTypeName) {
      listener.exitTypeName(this);
    }
  }
  accept(visitor) {
    if (visitor.visitTypeName) {
      return visitor.visitTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var UserDefinedTypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_userDefinedTypeName;
  }
  enterRule(listener) {
    if (listener.enterUserDefinedTypeName) {
      listener.enterUserDefinedTypeName(this);
    }
  }
  exitRule(listener) {
    if (listener.exitUserDefinedTypeName) {
      listener.exitUserDefinedTypeName(this);
    }
  }
  accept(visitor) {
    if (visitor.visitUserDefinedTypeName) {
      return visitor.visitUserDefinedTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var MappingKeyContext = class extends import_ParserRuleContext.ParserRuleContext {
  elementaryTypeName() {
    return this.tryGetRuleContext(0, ElementaryTypeNameContext);
  }
  userDefinedTypeName() {
    return this.tryGetRuleContext(0, UserDefinedTypeNameContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_mappingKey;
  }
  enterRule(listener) {
    if (listener.enterMappingKey) {
      listener.enterMappingKey(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMappingKey) {
      listener.exitMappingKey(this);
    }
  }
  accept(visitor) {
    if (visitor.visitMappingKey) {
      return visitor.visitMappingKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var MappingContext = class extends import_ParserRuleContext.ParserRuleContext {
  mappingKey() {
    return this.getRuleContext(0, MappingKeyContext);
  }
  typeName() {
    return this.getRuleContext(0, TypeNameContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_mapping;
  }
  enterRule(listener) {
    if (listener.enterMapping) {
      listener.enterMapping(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMapping) {
      listener.exitMapping(this);
    }
  }
  accept(visitor) {
    if (visitor.visitMapping) {
      return visitor.visitMapping(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FunctionTypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {
  functionTypeParameterList(i) {
    if (i === void 0) {
      return this.getRuleContexts(FunctionTypeParameterListContext);
    } else {
      return this.getRuleContext(i, FunctionTypeParameterListContext);
    }
  }
  InternalKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.InternalKeyword);
    } else {
      return this.getToken(SolidityParser.InternalKeyword, i);
    }
  }
  ExternalKeyword(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.ExternalKeyword);
    } else {
      return this.getToken(SolidityParser.ExternalKeyword, i);
    }
  }
  stateMutability(i) {
    if (i === void 0) {
      return this.getRuleContexts(StateMutabilityContext);
    } else {
      return this.getRuleContext(i, StateMutabilityContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_functionTypeName;
  }
  enterRule(listener) {
    if (listener.enterFunctionTypeName) {
      listener.enterFunctionTypeName(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionTypeName) {
      listener.exitFunctionTypeName(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFunctionTypeName) {
      return visitor.visitFunctionTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var StorageLocationContext = class extends import_ParserRuleContext.ParserRuleContext {
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_storageLocation;
  }
  enterRule(listener) {
    if (listener.enterStorageLocation) {
      listener.enterStorageLocation(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStorageLocation) {
      listener.exitStorageLocation(this);
    }
  }
  accept(visitor) {
    if (visitor.visitStorageLocation) {
      return visitor.visitStorageLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var StateMutabilityContext = class extends import_ParserRuleContext.ParserRuleContext {
  PureKeyword() {
    return this.tryGetToken(SolidityParser.PureKeyword, 0);
  }
  ConstantKeyword() {
    return this.tryGetToken(SolidityParser.ConstantKeyword, 0);
  }
  ViewKeyword() {
    return this.tryGetToken(SolidityParser.ViewKeyword, 0);
  }
  PayableKeyword() {
    return this.tryGetToken(SolidityParser.PayableKeyword, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_stateMutability;
  }
  enterRule(listener) {
    if (listener.enterStateMutability) {
      listener.enterStateMutability(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStateMutability) {
      listener.exitStateMutability(this);
    }
  }
  accept(visitor) {
    if (visitor.visitStateMutability) {
      return visitor.visitStateMutability(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var BlockContext = class extends import_ParserRuleContext.ParserRuleContext {
  statement(i) {
    if (i === void 0) {
      return this.getRuleContexts(StatementContext);
    } else {
      return this.getRuleContext(i, StatementContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_block;
  }
  enterRule(listener) {
    if (listener.enterBlock) {
      listener.enterBlock(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBlock) {
      listener.exitBlock(this);
    }
  }
  accept(visitor) {
    if (visitor.visitBlock) {
      return visitor.visitBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var StatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  ifStatement() {
    return this.tryGetRuleContext(0, IfStatementContext);
  }
  tryStatement() {
    return this.tryGetRuleContext(0, TryStatementContext);
  }
  whileStatement() {
    return this.tryGetRuleContext(0, WhileStatementContext);
  }
  forStatement() {
    return this.tryGetRuleContext(0, ForStatementContext);
  }
  block() {
    return this.tryGetRuleContext(0, BlockContext);
  }
  inlineAssemblyStatement() {
    return this.tryGetRuleContext(0, InlineAssemblyStatementContext);
  }
  doWhileStatement() {
    return this.tryGetRuleContext(0, DoWhileStatementContext);
  }
  continueStatement() {
    return this.tryGetRuleContext(0, ContinueStatementContext);
  }
  breakStatement() {
    return this.tryGetRuleContext(0, BreakStatementContext);
  }
  returnStatement() {
    return this.tryGetRuleContext(0, ReturnStatementContext);
  }
  throwStatement() {
    return this.tryGetRuleContext(0, ThrowStatementContext);
  }
  emitStatement() {
    return this.tryGetRuleContext(0, EmitStatementContext);
  }
  simpleStatement() {
    return this.tryGetRuleContext(0, SimpleStatementContext);
  }
  uncheckedStatement() {
    return this.tryGetRuleContext(0, UncheckedStatementContext);
  }
  revertStatement() {
    return this.tryGetRuleContext(0, RevertStatementContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_statement;
  }
  enterRule(listener) {
    if (listener.enterStatement) {
      listener.enterStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStatement) {
      listener.exitStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitStatement) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ExpressionStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_expressionStatement;
  }
  enterRule(listener) {
    if (listener.enterExpressionStatement) {
      listener.enterExpressionStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitExpressionStatement) {
      listener.exitExpressionStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitExpressionStatement) {
      return visitor.visitExpressionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var IfStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  statement(i) {
    if (i === void 0) {
      return this.getRuleContexts(StatementContext);
    } else {
      return this.getRuleContext(i, StatementContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_ifStatement;
  }
  enterRule(listener) {
    if (listener.enterIfStatement) {
      listener.enterIfStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIfStatement) {
      listener.exitIfStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitIfStatement) {
      return visitor.visitIfStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var TryStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  block() {
    return this.getRuleContext(0, BlockContext);
  }
  returnParameters() {
    return this.tryGetRuleContext(0, ReturnParametersContext);
  }
  catchClause(i) {
    if (i === void 0) {
      return this.getRuleContexts(CatchClauseContext);
    } else {
      return this.getRuleContext(i, CatchClauseContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_tryStatement;
  }
  enterRule(listener) {
    if (listener.enterTryStatement) {
      listener.enterTryStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTryStatement) {
      listener.exitTryStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitTryStatement) {
      return visitor.visitTryStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var CatchClauseContext = class extends import_ParserRuleContext.ParserRuleContext {
  block() {
    return this.getRuleContext(0, BlockContext);
  }
  parameterList() {
    return this.tryGetRuleContext(0, ParameterListContext);
  }
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_catchClause;
  }
  enterRule(listener) {
    if (listener.enterCatchClause) {
      listener.enterCatchClause(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCatchClause) {
      listener.exitCatchClause(this);
    }
  }
  accept(visitor) {
    if (visitor.visitCatchClause) {
      return visitor.visitCatchClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var WhileStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  statement() {
    return this.getRuleContext(0, StatementContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_whileStatement;
  }
  enterRule(listener) {
    if (listener.enterWhileStatement) {
      listener.enterWhileStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitWhileStatement) {
      listener.exitWhileStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitWhileStatement) {
      return visitor.visitWhileStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var SimpleStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  variableDeclarationStatement() {
    return this.tryGetRuleContext(0, VariableDeclarationStatementContext);
  }
  expressionStatement() {
    return this.tryGetRuleContext(0, ExpressionStatementContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_simpleStatement;
  }
  enterRule(listener) {
    if (listener.enterSimpleStatement) {
      listener.enterSimpleStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSimpleStatement) {
      listener.exitSimpleStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitSimpleStatement) {
      return visitor.visitSimpleStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var UncheckedStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  block() {
    return this.getRuleContext(0, BlockContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_uncheckedStatement;
  }
  enterRule(listener) {
    if (listener.enterUncheckedStatement) {
      listener.enterUncheckedStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitUncheckedStatement) {
      listener.exitUncheckedStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitUncheckedStatement) {
      return visitor.visitUncheckedStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ForStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  statement() {
    return this.getRuleContext(0, StatementContext);
  }
  simpleStatement() {
    return this.tryGetRuleContext(0, SimpleStatementContext);
  }
  expressionStatement() {
    return this.tryGetRuleContext(0, ExpressionStatementContext);
  }
  expression() {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_forStatement;
  }
  enterRule(listener) {
    if (listener.enterForStatement) {
      listener.enterForStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitForStatement) {
      listener.exitForStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitForStatement) {
      return visitor.visitForStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var InlineAssemblyStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyBlock() {
    return this.getRuleContext(0, AssemblyBlockContext);
  }
  StringLiteralFragment() {
    return this.tryGetToken(SolidityParser.StringLiteralFragment, 0);
  }
  inlineAssemblyStatementFlag() {
    return this.tryGetRuleContext(0, InlineAssemblyStatementFlagContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_inlineAssemblyStatement;
  }
  enterRule(listener) {
    if (listener.enterInlineAssemblyStatement) {
      listener.enterInlineAssemblyStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInlineAssemblyStatement) {
      listener.exitInlineAssemblyStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitInlineAssemblyStatement) {
      return visitor.visitInlineAssemblyStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var InlineAssemblyStatementFlagContext = class extends import_ParserRuleContext.ParserRuleContext {
  stringLiteral() {
    return this.getRuleContext(0, StringLiteralContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_inlineAssemblyStatementFlag;
  }
  enterRule(listener) {
    if (listener.enterInlineAssemblyStatementFlag) {
      listener.enterInlineAssemblyStatementFlag(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInlineAssemblyStatementFlag) {
      listener.exitInlineAssemblyStatementFlag(this);
    }
  }
  accept(visitor) {
    if (visitor.visitInlineAssemblyStatementFlag) {
      return visitor.visitInlineAssemblyStatementFlag(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var DoWhileStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  statement() {
    return this.getRuleContext(0, StatementContext);
  }
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_doWhileStatement;
  }
  enterRule(listener) {
    if (listener.enterDoWhileStatement) {
      listener.enterDoWhileStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDoWhileStatement) {
      listener.exitDoWhileStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitDoWhileStatement) {
      return visitor.visitDoWhileStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ContinueStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  ContinueKeyword() {
    return this.getToken(SolidityParser.ContinueKeyword, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_continueStatement;
  }
  enterRule(listener) {
    if (listener.enterContinueStatement) {
      listener.enterContinueStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitContinueStatement) {
      listener.exitContinueStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitContinueStatement) {
      return visitor.visitContinueStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var BreakStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  BreakKeyword() {
    return this.getToken(SolidityParser.BreakKeyword, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_breakStatement;
  }
  enterRule(listener) {
    if (listener.enterBreakStatement) {
      listener.enterBreakStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBreakStatement) {
      listener.exitBreakStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitBreakStatement) {
      return visitor.visitBreakStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ReturnStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression() {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_returnStatement;
  }
  enterRule(listener) {
    if (listener.enterReturnStatement) {
      listener.enterReturnStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitReturnStatement) {
      listener.exitReturnStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitReturnStatement) {
      return visitor.visitReturnStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ThrowStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_throwStatement;
  }
  enterRule(listener) {
    if (listener.enterThrowStatement) {
      listener.enterThrowStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitThrowStatement) {
      listener.exitThrowStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitThrowStatement) {
      return visitor.visitThrowStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var EmitStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  functionCall() {
    return this.getRuleContext(0, FunctionCallContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_emitStatement;
  }
  enterRule(listener) {
    if (listener.enterEmitStatement) {
      listener.enterEmitStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEmitStatement) {
      listener.exitEmitStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitEmitStatement) {
      return visitor.visitEmitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var RevertStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  functionCall() {
    return this.getRuleContext(0, FunctionCallContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_revertStatement;
  }
  enterRule(listener) {
    if (listener.enterRevertStatement) {
      listener.enterRevertStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRevertStatement) {
      listener.exitRevertStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitRevertStatement) {
      return visitor.visitRevertStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var VariableDeclarationStatementContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifierList() {
    return this.tryGetRuleContext(0, IdentifierListContext);
  }
  variableDeclaration() {
    return this.tryGetRuleContext(0, VariableDeclarationContext);
  }
  variableDeclarationList() {
    return this.tryGetRuleContext(0, VariableDeclarationListContext);
  }
  expression() {
    return this.tryGetRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_variableDeclarationStatement;
  }
  enterRule(listener) {
    if (listener.enterVariableDeclarationStatement) {
      listener.enterVariableDeclarationStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitVariableDeclarationStatement) {
      listener.exitVariableDeclarationStatement(this);
    }
  }
  accept(visitor) {
    if (visitor.visitVariableDeclarationStatement) {
      return visitor.visitVariableDeclarationStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var VariableDeclarationListContext = class extends import_ParserRuleContext.ParserRuleContext {
  variableDeclaration(i) {
    if (i === void 0) {
      return this.getRuleContexts(VariableDeclarationContext);
    } else {
      return this.getRuleContext(i, VariableDeclarationContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_variableDeclarationList;
  }
  enterRule(listener) {
    if (listener.enterVariableDeclarationList) {
      listener.enterVariableDeclarationList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitVariableDeclarationList) {
      listener.exitVariableDeclarationList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitVariableDeclarationList) {
      return visitor.visitVariableDeclarationList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var IdentifierListContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_identifierList;
  }
  enterRule(listener) {
    if (listener.enterIdentifierList) {
      listener.enterIdentifierList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIdentifierList) {
      listener.exitIdentifierList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitIdentifierList) {
      return visitor.visitIdentifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ElementaryTypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {
  Int() {
    return this.tryGetToken(SolidityParser.Int, 0);
  }
  Uint() {
    return this.tryGetToken(SolidityParser.Uint, 0);
  }
  Byte() {
    return this.tryGetToken(SolidityParser.Byte, 0);
  }
  Fixed() {
    return this.tryGetToken(SolidityParser.Fixed, 0);
  }
  Ufixed() {
    return this.tryGetToken(SolidityParser.Ufixed, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_elementaryTypeName;
  }
  enterRule(listener) {
    if (listener.enterElementaryTypeName) {
      listener.enterElementaryTypeName(this);
    }
  }
  exitRule(listener) {
    if (listener.exitElementaryTypeName) {
      listener.exitElementaryTypeName(this);
    }
  }
  accept(visitor) {
    if (visitor.visitElementaryTypeName) {
      return visitor.visitElementaryTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression(i) {
    if (i === void 0) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  typeName() {
    return this.tryGetRuleContext(0, TypeNameContext);
  }
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  nameValueList() {
    return this.tryGetRuleContext(0, NameValueListContext);
  }
  functionCallArguments() {
    return this.tryGetRuleContext(0, FunctionCallArgumentsContext);
  }
  primaryExpression() {
    return this.tryGetRuleContext(0, PrimaryExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_expression;
  }
  enterRule(listener) {
    if (listener.enterExpression) {
      listener.enterExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitExpression) {
      listener.exitExpression(this);
    }
  }
  accept(visitor) {
    if (visitor.visitExpression) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var PrimaryExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {
  BooleanLiteral() {
    return this.tryGetToken(SolidityParser.BooleanLiteral, 0);
  }
  numberLiteral() {
    return this.tryGetRuleContext(0, NumberLiteralContext);
  }
  hexLiteral() {
    return this.tryGetRuleContext(0, HexLiteralContext);
  }
  stringLiteral() {
    return this.tryGetRuleContext(0, StringLiteralContext);
  }
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  TypeKeyword() {
    return this.tryGetToken(SolidityParser.TypeKeyword, 0);
  }
  PayableKeyword() {
    return this.tryGetToken(SolidityParser.PayableKeyword, 0);
  }
  tupleExpression() {
    return this.tryGetRuleContext(0, TupleExpressionContext);
  }
  typeName() {
    return this.tryGetRuleContext(0, TypeNameContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_primaryExpression;
  }
  enterRule(listener) {
    if (listener.enterPrimaryExpression) {
      listener.enterPrimaryExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPrimaryExpression) {
      listener.exitPrimaryExpression(this);
    }
  }
  accept(visitor) {
    if (visitor.visitPrimaryExpression) {
      return visitor.visitPrimaryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var ExpressionListContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression(i) {
    if (i === void 0) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_expressionList;
  }
  enterRule(listener) {
    if (listener.enterExpressionList) {
      listener.enterExpressionList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitExpressionList) {
      listener.exitExpressionList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitExpressionList) {
      return visitor.visitExpressionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var NameValueListContext = class extends import_ParserRuleContext.ParserRuleContext {
  nameValue(i) {
    if (i === void 0) {
      return this.getRuleContexts(NameValueContext);
    } else {
      return this.getRuleContext(i, NameValueContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_nameValueList;
  }
  enterRule(listener) {
    if (listener.enterNameValueList) {
      listener.enterNameValueList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNameValueList) {
      listener.exitNameValueList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitNameValueList) {
      return visitor.visitNameValueList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var NameValueContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_nameValue;
  }
  enterRule(listener) {
    if (listener.enterNameValue) {
      listener.enterNameValue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNameValue) {
      listener.exitNameValue(this);
    }
  }
  accept(visitor) {
    if (visitor.visitNameValue) {
      return visitor.visitNameValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FunctionCallArgumentsContext = class extends import_ParserRuleContext.ParserRuleContext {
  nameValueList() {
    return this.tryGetRuleContext(0, NameValueListContext);
  }
  expressionList() {
    return this.tryGetRuleContext(0, ExpressionListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_functionCallArguments;
  }
  enterRule(listener) {
    if (listener.enterFunctionCallArguments) {
      listener.enterFunctionCallArguments(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionCallArguments) {
      listener.exitFunctionCallArguments(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFunctionCallArguments) {
      return visitor.visitFunctionCallArguments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var FunctionCallContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression() {
    return this.getRuleContext(0, ExpressionContext);
  }
  functionCallArguments() {
    return this.getRuleContext(0, FunctionCallArgumentsContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_functionCall;
  }
  enterRule(listener) {
    if (listener.enterFunctionCall) {
      listener.enterFunctionCall(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionCall) {
      listener.exitFunctionCall(this);
    }
  }
  accept(visitor) {
    if (visitor.visitFunctionCall) {
      return visitor.visitFunctionCall(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyBlockContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyItem(i) {
    if (i === void 0) {
      return this.getRuleContexts(AssemblyItemContext);
    } else {
      return this.getRuleContext(i, AssemblyItemContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyBlock;
  }
  enterRule(listener) {
    if (listener.enterAssemblyBlock) {
      listener.enterAssemblyBlock(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyBlock) {
      listener.exitAssemblyBlock(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyBlock) {
      return visitor.visitAssemblyBlock(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyItemContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  assemblyBlock() {
    return this.tryGetRuleContext(0, AssemblyBlockContext);
  }
  assemblyExpression() {
    return this.tryGetRuleContext(0, AssemblyExpressionContext);
  }
  assemblyLocalDefinition() {
    return this.tryGetRuleContext(0, AssemblyLocalDefinitionContext);
  }
  assemblyAssignment() {
    return this.tryGetRuleContext(0, AssemblyAssignmentContext);
  }
  assemblyStackAssignment() {
    return this.tryGetRuleContext(0, AssemblyStackAssignmentContext);
  }
  labelDefinition() {
    return this.tryGetRuleContext(0, LabelDefinitionContext);
  }
  assemblySwitch() {
    return this.tryGetRuleContext(0, AssemblySwitchContext);
  }
  assemblyFunctionDefinition() {
    return this.tryGetRuleContext(0, AssemblyFunctionDefinitionContext);
  }
  assemblyFor() {
    return this.tryGetRuleContext(0, AssemblyForContext);
  }
  assemblyIf() {
    return this.tryGetRuleContext(0, AssemblyIfContext);
  }
  BreakKeyword() {
    return this.tryGetToken(SolidityParser.BreakKeyword, 0);
  }
  ContinueKeyword() {
    return this.tryGetToken(SolidityParser.ContinueKeyword, 0);
  }
  LeaveKeyword() {
    return this.tryGetToken(SolidityParser.LeaveKeyword, 0);
  }
  subAssembly() {
    return this.tryGetRuleContext(0, SubAssemblyContext);
  }
  numberLiteral() {
    return this.tryGetRuleContext(0, NumberLiteralContext);
  }
  stringLiteral() {
    return this.tryGetRuleContext(0, StringLiteralContext);
  }
  hexLiteral() {
    return this.tryGetRuleContext(0, HexLiteralContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyItem;
  }
  enterRule(listener) {
    if (listener.enterAssemblyItem) {
      listener.enterAssemblyItem(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyItem) {
      listener.exitAssemblyItem(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyItem) {
      return visitor.visitAssemblyItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyCall() {
    return this.tryGetRuleContext(0, AssemblyCallContext);
  }
  assemblyLiteral() {
    return this.tryGetRuleContext(0, AssemblyLiteralContext);
  }
  assemblyMember() {
    return this.tryGetRuleContext(0, AssemblyMemberContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyExpression;
  }
  enterRule(listener) {
    if (listener.enterAssemblyExpression) {
      listener.enterAssemblyExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyExpression) {
      listener.exitAssemblyExpression(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyExpression) {
      return visitor.visitAssemblyExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyMemberContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyMember;
  }
  enterRule(listener) {
    if (listener.enterAssemblyMember) {
      listener.enterAssemblyMember(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyMember) {
      listener.exitAssemblyMember(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyMember) {
      return visitor.visitAssemblyMember(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyCallContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  assemblyExpression(i) {
    if (i === void 0) {
      return this.getRuleContexts(AssemblyExpressionContext);
    } else {
      return this.getRuleContext(i, AssemblyExpressionContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyCall;
  }
  enterRule(listener) {
    if (listener.enterAssemblyCall) {
      listener.enterAssemblyCall(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyCall) {
      listener.exitAssemblyCall(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyCall) {
      return visitor.visitAssemblyCall(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyLocalDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyIdentifierOrList() {
    return this.getRuleContext(0, AssemblyIdentifierOrListContext);
  }
  assemblyExpression() {
    return this.tryGetRuleContext(0, AssemblyExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyLocalDefinition;
  }
  enterRule(listener) {
    if (listener.enterAssemblyLocalDefinition) {
      listener.enterAssemblyLocalDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyLocalDefinition) {
      listener.exitAssemblyLocalDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyLocalDefinition) {
      return visitor.visitAssemblyLocalDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyAssignmentContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyIdentifierOrList() {
    return this.getRuleContext(0, AssemblyIdentifierOrListContext);
  }
  assemblyExpression() {
    return this.getRuleContext(0, AssemblyExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyAssignment;
  }
  enterRule(listener) {
    if (listener.enterAssemblyAssignment) {
      listener.enterAssemblyAssignment(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyAssignment) {
      listener.exitAssemblyAssignment(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyAssignment) {
      return visitor.visitAssemblyAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyIdentifierOrListContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  assemblyMember() {
    return this.tryGetRuleContext(0, AssemblyMemberContext);
  }
  assemblyIdentifierList() {
    return this.tryGetRuleContext(0, AssemblyIdentifierListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyIdentifierOrList;
  }
  enterRule(listener) {
    if (listener.enterAssemblyIdentifierOrList) {
      listener.enterAssemblyIdentifierOrList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyIdentifierOrList) {
      listener.exitAssemblyIdentifierOrList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyIdentifierOrList) {
      return visitor.visitAssemblyIdentifierOrList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyIdentifierListContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier(i) {
    if (i === void 0) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyIdentifierList;
  }
  enterRule(listener) {
    if (listener.enterAssemblyIdentifierList) {
      listener.enterAssemblyIdentifierList(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyIdentifierList) {
      listener.exitAssemblyIdentifierList(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyIdentifierList) {
      return visitor.visitAssemblyIdentifierList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyStackAssignmentContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyExpression() {
    return this.getRuleContext(0, AssemblyExpressionContext);
  }
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyStackAssignment;
  }
  enterRule(listener) {
    if (listener.enterAssemblyStackAssignment) {
      listener.enterAssemblyStackAssignment(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyStackAssignment) {
      listener.exitAssemblyStackAssignment(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyStackAssignment) {
      return visitor.visitAssemblyStackAssignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var LabelDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_labelDefinition;
  }
  enterRule(listener) {
    if (listener.enterLabelDefinition) {
      listener.enterLabelDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLabelDefinition) {
      listener.exitLabelDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitLabelDefinition) {
      return visitor.visitLabelDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblySwitchContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyExpression() {
    return this.getRuleContext(0, AssemblyExpressionContext);
  }
  assemblyCase(i) {
    if (i === void 0) {
      return this.getRuleContexts(AssemblyCaseContext);
    } else {
      return this.getRuleContext(i, AssemblyCaseContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblySwitch;
  }
  enterRule(listener) {
    if (listener.enterAssemblySwitch) {
      listener.enterAssemblySwitch(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblySwitch) {
      listener.exitAssemblySwitch(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblySwitch) {
      return visitor.visitAssemblySwitch(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyCaseContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyLiteral() {
    return this.tryGetRuleContext(0, AssemblyLiteralContext);
  }
  assemblyBlock() {
    return this.getRuleContext(0, AssemblyBlockContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyCase;
  }
  enterRule(listener) {
    if (listener.enterAssemblyCase) {
      listener.enterAssemblyCase(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyCase) {
      listener.exitAssemblyCase(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyCase) {
      return visitor.visitAssemblyCase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyFunctionDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  assemblyBlock() {
    return this.getRuleContext(0, AssemblyBlockContext);
  }
  assemblyIdentifierList() {
    return this.tryGetRuleContext(0, AssemblyIdentifierListContext);
  }
  assemblyFunctionReturns() {
    return this.tryGetRuleContext(0, AssemblyFunctionReturnsContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyFunctionDefinition;
  }
  enterRule(listener) {
    if (listener.enterAssemblyFunctionDefinition) {
      listener.enterAssemblyFunctionDefinition(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyFunctionDefinition) {
      listener.exitAssemblyFunctionDefinition(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyFunctionDefinition) {
      return visitor.visitAssemblyFunctionDefinition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyFunctionReturnsContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyIdentifierList() {
    return this.tryGetRuleContext(0, AssemblyIdentifierListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyFunctionReturns;
  }
  enterRule(listener) {
    if (listener.enterAssemblyFunctionReturns) {
      listener.enterAssemblyFunctionReturns(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyFunctionReturns) {
      listener.exitAssemblyFunctionReturns(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyFunctionReturns) {
      return visitor.visitAssemblyFunctionReturns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyForContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyExpression(i) {
    if (i === void 0) {
      return this.getRuleContexts(AssemblyExpressionContext);
    } else {
      return this.getRuleContext(i, AssemblyExpressionContext);
    }
  }
  assemblyBlock(i) {
    if (i === void 0) {
      return this.getRuleContexts(AssemblyBlockContext);
    } else {
      return this.getRuleContext(i, AssemblyBlockContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyFor;
  }
  enterRule(listener) {
    if (listener.enterAssemblyFor) {
      listener.enterAssemblyFor(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyFor) {
      listener.exitAssemblyFor(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyFor) {
      return visitor.visitAssemblyFor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyIfContext = class extends import_ParserRuleContext.ParserRuleContext {
  assemblyExpression() {
    return this.getRuleContext(0, AssemblyExpressionContext);
  }
  assemblyBlock() {
    return this.getRuleContext(0, AssemblyBlockContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyIf;
  }
  enterRule(listener) {
    if (listener.enterAssemblyIf) {
      listener.enterAssemblyIf(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyIf) {
      listener.exitAssemblyIf(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyIf) {
      return visitor.visitAssemblyIf(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var AssemblyLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {
  stringLiteral() {
    return this.tryGetRuleContext(0, StringLiteralContext);
  }
  DecimalNumber() {
    return this.tryGetToken(SolidityParser.DecimalNumber, 0);
  }
  HexNumber() {
    return this.tryGetToken(SolidityParser.HexNumber, 0);
  }
  hexLiteral() {
    return this.tryGetRuleContext(0, HexLiteralContext);
  }
  BooleanLiteral() {
    return this.tryGetToken(SolidityParser.BooleanLiteral, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_assemblyLiteral;
  }
  enterRule(listener) {
    if (listener.enterAssemblyLiteral) {
      listener.enterAssemblyLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssemblyLiteral) {
      listener.exitAssemblyLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor.visitAssemblyLiteral) {
      return visitor.visitAssemblyLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var SubAssemblyContext = class extends import_ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  assemblyBlock() {
    return this.getRuleContext(0, AssemblyBlockContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_subAssembly;
  }
  enterRule(listener) {
    if (listener.enterSubAssembly) {
      listener.enterSubAssembly(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSubAssembly) {
      listener.exitSubAssembly(this);
    }
  }
  accept(visitor) {
    if (visitor.visitSubAssembly) {
      return visitor.visitSubAssembly(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var TupleExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {
  expression(i) {
    if (i === void 0) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_tupleExpression;
  }
  enterRule(listener) {
    if (listener.enterTupleExpression) {
      listener.enterTupleExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTupleExpression) {
      listener.exitTupleExpression(this);
    }
  }
  accept(visitor) {
    if (visitor.visitTupleExpression) {
      return visitor.visitTupleExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var NumberLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {
  DecimalNumber() {
    return this.tryGetToken(SolidityParser.DecimalNumber, 0);
  }
  HexNumber() {
    return this.tryGetToken(SolidityParser.HexNumber, 0);
  }
  NumberUnit() {
    return this.tryGetToken(SolidityParser.NumberUnit, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_numberLiteral;
  }
  enterRule(listener) {
    if (listener.enterNumberLiteral) {
      listener.enterNumberLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNumberLiteral) {
      listener.exitNumberLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor.visitNumberLiteral) {
      return visitor.visitNumberLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var IdentifierContext = class extends import_ParserRuleContext.ParserRuleContext {
  ReceiveKeyword() {
    return this.tryGetToken(SolidityParser.ReceiveKeyword, 0);
  }
  ConstructorKeyword() {
    return this.tryGetToken(SolidityParser.ConstructorKeyword, 0);
  }
  PayableKeyword() {
    return this.tryGetToken(SolidityParser.PayableKeyword, 0);
  }
  LeaveKeyword() {
    return this.tryGetToken(SolidityParser.LeaveKeyword, 0);
  }
  Identifier() {
    return this.tryGetToken(SolidityParser.Identifier, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_identifier;
  }
  enterRule(listener) {
    if (listener.enterIdentifier) {
      listener.enterIdentifier(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIdentifier) {
      listener.exitIdentifier(this);
    }
  }
  accept(visitor) {
    if (visitor.visitIdentifier) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var HexLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {
  HexLiteralFragment(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.HexLiteralFragment);
    } else {
      return this.getToken(SolidityParser.HexLiteralFragment, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_hexLiteral;
  }
  enterRule(listener) {
    if (listener.enterHexLiteral) {
      listener.enterHexLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitHexLiteral) {
      listener.exitHexLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor.visitHexLiteral) {
      return visitor.visitHexLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var OverrideSpecifierContext = class extends import_ParserRuleContext.ParserRuleContext {
  userDefinedTypeName(i) {
    if (i === void 0) {
      return this.getRuleContexts(UserDefinedTypeNameContext);
    } else {
      return this.getRuleContext(i, UserDefinedTypeNameContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_overrideSpecifier;
  }
  enterRule(listener) {
    if (listener.enterOverrideSpecifier) {
      listener.enterOverrideSpecifier(this);
    }
  }
  exitRule(listener) {
    if (listener.exitOverrideSpecifier) {
      listener.exitOverrideSpecifier(this);
    }
  }
  accept(visitor) {
    if (visitor.visitOverrideSpecifier) {
      return visitor.visitOverrideSpecifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};
var StringLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {
  StringLiteralFragment(i) {
    if (i === void 0) {
      return this.getTokens(SolidityParser.StringLiteralFragment);
    } else {
      return this.getToken(SolidityParser.StringLiteralFragment, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  get ruleIndex() {
    return SolidityParser.RULE_stringLiteral;
  }
  enterRule(listener) {
    if (listener.enterStringLiteral) {
      listener.enterStringLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStringLiteral) {
      listener.exitStringLiteral(this);
    }
  }
  accept(visitor) {
    if (visitor.visitStringLiteral) {
      return visitor.visitStringLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
};

// src/ast-types.ts
var astNodeTypes = [
  "SourceUnit",
  "PragmaDirective",
  "ImportDirective",
  "ContractDefinition",
  "InheritanceSpecifier",
  "StateVariableDeclaration",
  "UsingForDeclaration",
  "StructDefinition",
  "ModifierDefinition",
  "ModifierInvocation",
  "FunctionDefinition",
  "EventDefinition",
  "CustomErrorDefinition",
  "RevertStatement",
  "EnumValue",
  "EnumDefinition",
  "VariableDeclaration",
  "UserDefinedTypeName",
  "Mapping",
  "ArrayTypeName",
  "FunctionTypeName",
  "Block",
  "ExpressionStatement",
  "IfStatement",
  "WhileStatement",
  "ForStatement",
  "InlineAssemblyStatement",
  "DoWhileStatement",
  "ContinueStatement",
  "Break",
  "Continue",
  "BreakStatement",
  "ReturnStatement",
  "EmitStatement",
  "ThrowStatement",
  "VariableDeclarationStatement",
  "ElementaryTypeName",
  "FunctionCall",
  "AssemblyBlock",
  "AssemblyCall",
  "AssemblyLocalDefinition",
  "AssemblyAssignment",
  "AssemblyStackAssignment",
  "LabelDefinition",
  "AssemblySwitch",
  "AssemblyCase",
  "AssemblyFunctionDefinition",
  "AssemblyFunctionReturns",
  "AssemblyFor",
  "AssemblyIf",
  "SubAssembly",
  "TupleExpression",
  "NameValueExpression",
  "BooleanLiteral",
  "NumberLiteral",
  "Identifier",
  "BinaryOperation",
  "UnaryOperation",
  "NewExpression",
  "Conditional",
  "StringLiteral",
  "HexLiteral",
  "HexNumber",
  "DecimalNumber",
  "MemberAccess",
  "IndexAccess",
  "IndexRangeAccess",
  "NameValueList",
  "UncheckedStatement",
  "TryStatement",
  "CatchClause",
  "FileLevelConstant",
  "AssemblyMemberAccess",
  "TypeDefinition"
];
var binaryOpValues = [
  "+",
  "-",
  "*",
  "/",
  "**",
  "%",
  "<<",
  ">>",
  "&&",
  "||",
  ",,",
  "&",
  ",",
  "^",
  "<",
  ">",
  "<=",
  ">=",
  "==",
  "!=",
  "=",
  ",=",
  "^=",
  "&=",
  "<<=",
  ">>=",
  "+=",
  "-=",
  "*=",
  "/=",
  "%=",
  "|",
  "|="
];
var unaryOpValues = [
  "-",
  "+",
  "++",
  "--",
  "~",
  "after",
  "delete",
  "!"
];

// src/ASTBuilder.ts
var import_AbstractParseTreeVisitor = __toModule(require_AbstractParseTreeVisitor());
var import_ErrorNode = __toModule(require_ErrorNode());
var ASTBuilder = class extends import_AbstractParseTreeVisitor.AbstractParseTreeVisitor {
  constructor(options) {
    super();
    this.options = options;
    this.result = null;
  }
  defaultResult() {
    throw new Error("Unknown node");
  }
  aggregateResult() {
    return {type: ""};
  }
  visitSourceUnit(ctx) {
    var _a;
    const children = ((_a = ctx.children) != null ? _a : []).filter((x) => !(x instanceof import_ErrorNode.ErrorNode));
    const node = {
      type: "SourceUnit",
      children: children.slice(0, -1).map((child) => this.visit(child))
    };
    const result = this._addMeta(node, ctx);
    this.result = result;
    return result;
  }
  visitContractPart(ctx) {
    return this.visit(ctx.getChild(0));
  }
  visitContractDefinition(ctx) {
    const name = this._toText(ctx.identifier());
    const kind = this._toText(ctx.getChild(0));
    this._currentContract = name;
    const node = {
      type: "ContractDefinition",
      name,
      baseContracts: ctx.inheritanceSpecifier().map((x) => this.visitInheritanceSpecifier(x)),
      subNodes: ctx.contractPart().map((x) => this.visit(x)),
      kind
    };
    return this._addMeta(node, ctx);
  }
  visitStateVariableDeclaration(ctx) {
    const type = this.visitTypeName(ctx.typeName());
    const iden = ctx.identifier();
    const name = this._toText(iden);
    let expression = null;
    const ctxExpression = ctx.expression();
    if (ctxExpression) {
      expression = this.visitExpression(ctxExpression);
    }
    let visibility = "default";
    if (ctx.InternalKeyword().length > 0) {
      visibility = "internal";
    } else if (ctx.PublicKeyword().length > 0) {
      visibility = "public";
    } else if (ctx.PrivateKeyword().length > 0) {
      visibility = "private";
    }
    let isDeclaredConst = false;
    if (ctx.ConstantKeyword().length > 0) {
      isDeclaredConst = true;
    }
    let override;
    const overrideSpecifier = ctx.overrideSpecifier();
    if (overrideSpecifier.length === 0) {
      override = null;
    } else {
      override = overrideSpecifier[0].userDefinedTypeName().map((x) => this.visitUserDefinedTypeName(x));
    }
    let isImmutable = false;
    if (ctx.ImmutableKeyword().length > 0) {
      isImmutable = true;
    }
    const decl = {
      type: "VariableDeclaration",
      typeName: type,
      name,
      identifier: this.visitIdentifier(iden),
      expression,
      visibility,
      isStateVar: true,
      isDeclaredConst,
      isIndexed: false,
      isImmutable,
      override,
      storageLocation: null
    };
    const node = {
      type: "StateVariableDeclaration",
      variables: [this._addMeta(decl, ctx)],
      initialValue: expression
    };
    return this._addMeta(node, ctx);
  }
  visitVariableDeclaration(ctx) {
    let storageLocation = null;
    const ctxStorageLocation = ctx.storageLocation();
    if (ctxStorageLocation) {
      storageLocation = this._toText(ctxStorageLocation);
    }
    const identifierCtx = ctx.identifier();
    const node = {
      type: "VariableDeclaration",
      typeName: this.visitTypeName(ctx.typeName()),
      name: this._toText(identifierCtx),
      identifier: this.visitIdentifier(identifierCtx),
      storageLocation,
      isStateVar: false,
      isIndexed: false,
      expression: null
    };
    return this._addMeta(node, ctx);
  }
  visitVariableDeclarationStatement(ctx) {
    let variables = [];
    const ctxVariableDeclaration = ctx.variableDeclaration();
    const ctxIdentifierList = ctx.identifierList();
    const ctxVariableDeclarationList = ctx.variableDeclarationList();
    if (ctxVariableDeclaration !== void 0) {
      variables = [this.visitVariableDeclaration(ctxVariableDeclaration)];
    } else if (ctxIdentifierList !== void 0) {
      variables = this.buildIdentifierList(ctxIdentifierList);
    } else if (ctxVariableDeclarationList) {
      variables = this.buildVariableDeclarationList(ctxVariableDeclarationList);
    }
    let initialValue = null;
    const ctxExpression = ctx.expression();
    if (ctxExpression) {
      initialValue = this.visitExpression(ctxExpression);
    }
    const node = {
      type: "VariableDeclarationStatement",
      variables,
      initialValue
    };
    return this._addMeta(node, ctx);
  }
  visitStatement(ctx) {
    return this.visit(ctx.getChild(0));
  }
  visitSimpleStatement(ctx) {
    return this.visit(ctx.getChild(0));
  }
  visitEventDefinition(ctx) {
    const parameters = ctx.eventParameterList().eventParameter().map((paramCtx) => {
      const type = this.visitTypeName(paramCtx.typeName());
      let name = null;
      const paramCtxIdentifier = paramCtx.identifier();
      if (paramCtxIdentifier) {
        name = this._toText(paramCtxIdentifier);
      }
      const node2 = {
        type: "VariableDeclaration",
        typeName: type,
        name,
        identifier: paramCtxIdentifier !== void 0 ? this.visitIdentifier(paramCtxIdentifier) : null,
        isStateVar: false,
        isIndexed: paramCtx.IndexedKeyword() !== void 0,
        storageLocation: null,
        expression: null
      };
      return this._addMeta(node2, paramCtx);
    });
    const node = {
      type: "EventDefinition",
      name: this._toText(ctx.identifier()),
      parameters,
      isAnonymous: ctx.AnonymousKeyword() !== void 0
    };
    return this._addMeta(node, ctx);
  }
  visitBlock(ctx) {
    const node = {
      type: "Block",
      statements: ctx.statement().map((x) => this.visitStatement(x))
    };
    return this._addMeta(node, ctx);
  }
  visitParameter(ctx) {
    let storageLocation = null;
    const ctxStorageLocation = ctx.storageLocation();
    if (ctxStorageLocation !== void 0) {
      storageLocation = this._toText(ctxStorageLocation);
    }
    let name = null;
    const ctxIdentifier = ctx.identifier();
    if (ctxIdentifier !== void 0) {
      name = this._toText(ctxIdentifier);
    }
    const node = {
      type: "VariableDeclaration",
      typeName: this.visitTypeName(ctx.typeName()),
      name,
      identifier: ctxIdentifier !== void 0 ? this.visitIdentifier(ctxIdentifier) : null,
      storageLocation,
      isStateVar: false,
      isIndexed: false,
      expression: null
    };
    return this._addMeta(node, ctx);
  }
  visitFunctionDefinition(ctx) {
    let isConstructor = false;
    let isFallback = false;
    let isReceiveEther = false;
    let isVirtual = false;
    let name = null;
    let parameters = [];
    let returnParameters = null;
    let visibility = "default";
    let block = null;
    const ctxBlock = ctx.block();
    if (ctxBlock !== void 0) {
      block = this.visitBlock(ctxBlock);
    }
    const modifiers = ctx.modifierList().modifierInvocation().map((mod) => this.visitModifierInvocation(mod));
    let stateMutability = null;
    if (ctx.modifierList().stateMutability().length > 0) {
      stateMutability = this._stateMutabilityToText(ctx.modifierList().stateMutability(0));
    }
    const ctxReturnParameters = ctx.returnParameters();
    switch (this._toText(ctx.functionDescriptor().getChild(0))) {
      case "constructor":
        parameters = ctx.parameterList().parameter().map((x) => this.visit(x));
        if (ctx.modifierList().InternalKeyword().length > 0) {
          visibility = "internal";
        } else if (ctx.modifierList().PublicKeyword().length > 0) {
          visibility = "public";
        } else {
          visibility = "default";
        }
        isConstructor = true;
        break;
      case "fallback":
        parameters = ctx.parameterList().parameter().map((x) => this.visit(x));
        returnParameters = ctxReturnParameters !== void 0 ? this.visitReturnParameters(ctxReturnParameters) : null;
        visibility = "external";
        isFallback = true;
        break;
      case "receive":
        visibility = "external";
        isReceiveEther = true;
        break;
      case "function": {
        const identifier = ctx.functionDescriptor().identifier();
        name = identifier !== void 0 ? this._toText(identifier) : "";
        parameters = ctx.parameterList().parameter().map((x) => this.visit(x));
        returnParameters = ctxReturnParameters !== void 0 ? this.visitReturnParameters(ctxReturnParameters) : null;
        if (ctx.modifierList().ExternalKeyword().length > 0) {
          visibility = "external";
        } else if (ctx.modifierList().InternalKeyword().length > 0) {
          visibility = "internal";
        } else if (ctx.modifierList().PublicKeyword().length > 0) {
          visibility = "public";
        } else if (ctx.modifierList().PrivateKeyword().length > 0) {
          visibility = "private";
        }
        isConstructor = name === this._currentContract;
        isFallback = name === "";
        break;
      }
    }
    if (ctx.modifierList().VirtualKeyword().length > 0) {
      isVirtual = true;
    }
    let override;
    const overrideSpecifier = ctx.modifierList().overrideSpecifier();
    if (overrideSpecifier.length === 0) {
      override = null;
    } else {
      override = overrideSpecifier[0].userDefinedTypeName().map((x) => this.visitUserDefinedTypeName(x));
    }
    const node = {
      type: "FunctionDefinition",
      name,
      parameters,
      returnParameters,
      body: block,
      visibility,
      modifiers,
      override,
      isConstructor,
      isReceiveEther,
      isFallback,
      isVirtual,
      stateMutability
    };
    return this._addMeta(node, ctx);
  }
  visitEnumDefinition(ctx) {
    const node = {
      type: "EnumDefinition",
      name: this._toText(ctx.identifier()),
      members: ctx.enumValue().map((x) => this.visitEnumValue(x))
    };
    return this._addMeta(node, ctx);
  }
  visitEnumValue(ctx) {
    const node = {
      type: "EnumValue",
      name: this._toText(ctx.identifier())
    };
    return this._addMeta(node, ctx);
  }
  visitElementaryTypeName(ctx) {
    const node = {
      type: "ElementaryTypeName",
      name: this._toText(ctx),
      stateMutability: null
    };
    return this._addMeta(node, ctx);
  }
  visitIdentifier(ctx) {
    const node = {
      type: "Identifier",
      name: this._toText(ctx)
    };
    return this._addMeta(node, ctx);
  }
  visitTypeName(ctx) {
    var _a;
    if (ctx.children !== void 0 && ctx.children.length > 2) {
      let length = null;
      if (ctx.children.length === 4) {
        const expression = ctx.expression();
        if (expression === void 0) {
          throw new Error("Assertion error: a typeName with 4 children should have an expression");
        }
        length = this.visitExpression(expression);
      }
      const ctxTypeName = ctx.typeName();
      const node = {
        type: "ArrayTypeName",
        baseTypeName: this.visitTypeName(ctxTypeName),
        length
      };
      return this._addMeta(node, ctx);
    }
    if (((_a = ctx.children) == null ? void 0 : _a.length) === 2) {
      const node = {
        type: "ElementaryTypeName",
        name: this._toText(ctx.getChild(0)),
        stateMutability: this._toText(ctx.getChild(1))
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.elementaryTypeName() !== void 0) {
      return this.visitElementaryTypeName(ctx.elementaryTypeName());
    }
    if (ctx.userDefinedTypeName() !== void 0) {
      return this.visitUserDefinedTypeName(ctx.userDefinedTypeName());
    }
    if (ctx.mapping() !== void 0) {
      return this.visitMapping(ctx.mapping());
    }
    if (ctx.functionTypeName() !== void 0) {
      return this.visitFunctionTypeName(ctx.functionTypeName());
    }
    throw new Error("Assertion error: unhandled type name case");
  }
  visitUserDefinedTypeName(ctx) {
    const node = {
      type: "UserDefinedTypeName",
      namePath: this._toText(ctx)
    };
    return this._addMeta(node, ctx);
  }
  visitUsingForDeclaration(ctx) {
    let typeName = null;
    const ctxTypeName = ctx.typeName();
    if (ctxTypeName !== void 0) {
      typeName = this.visitTypeName(ctxTypeName);
    }
    const isGlobal = ctx.GlobalKeyword() !== void 0;
    let node;
    const usingForObject = ctx.usingForObject();
    const firstChild = this._toText(usingForObject.getChild(0));
    if (firstChild === "{") {
      node = {
        type: "UsingForDeclaration",
        isGlobal,
        typeName,
        libraryName: null,
        functions: usingForObject.userDefinedTypeName().map((x) => this._toText(x))
      };
    } else {
      node = {
        type: "UsingForDeclaration",
        isGlobal,
        typeName,
        libraryName: this._toText(usingForObject.userDefinedTypeName(0)),
        functions: []
      };
    }
    return this._addMeta(node, ctx);
  }
  visitPragmaDirective(ctx) {
    const versionContext = ctx.pragmaValue().version();
    let value = this._toText(ctx.pragmaValue());
    if ((versionContext == null ? void 0 : versionContext.children) !== void 0) {
      value = versionContext.children.map((x) => this._toText(x)).join(" ");
    }
    const node = {
      type: "PragmaDirective",
      name: this._toText(ctx.pragmaName()),
      value
    };
    return this._addMeta(node, ctx);
  }
  visitInheritanceSpecifier(ctx) {
    const exprList = ctx.expressionList();
    const args = exprList !== void 0 ? exprList.expression().map((x) => this.visitExpression(x)) : [];
    const node = {
      type: "InheritanceSpecifier",
      baseName: this.visitUserDefinedTypeName(ctx.userDefinedTypeName()),
      arguments: args
    };
    return this._addMeta(node, ctx);
  }
  visitModifierInvocation(ctx) {
    const exprList = ctx.expressionList();
    let args;
    if (exprList != null) {
      args = exprList.expression().map((x) => this.visit(x));
    } else if (ctx.children !== void 0 && ctx.children.length > 1) {
      args = [];
    } else {
      args = null;
    }
    const node = {
      type: "ModifierInvocation",
      name: this._toText(ctx.identifier()),
      arguments: args
    };
    return this._addMeta(node, ctx);
  }
  visitFunctionTypeName(ctx) {
    const parameterTypes = ctx.functionTypeParameterList(0).functionTypeParameter().map((typeCtx) => this.visitFunctionTypeParameter(typeCtx));
    let returnTypes = [];
    if (ctx.functionTypeParameterList().length > 1) {
      returnTypes = ctx.functionTypeParameterList(1).functionTypeParameter().map((typeCtx) => this.visitFunctionTypeParameter(typeCtx));
    }
    let visibility = "default";
    if (ctx.InternalKeyword().length > 0) {
      visibility = "internal";
    } else if (ctx.ExternalKeyword().length > 0) {
      visibility = "external";
    }
    let stateMutability = null;
    if (ctx.stateMutability().length > 0) {
      stateMutability = this._toText(ctx.stateMutability(0));
    }
    const node = {
      type: "FunctionTypeName",
      parameterTypes,
      returnTypes,
      visibility,
      stateMutability
    };
    return this._addMeta(node, ctx);
  }
  visitFunctionTypeParameter(ctx) {
    let storageLocation = null;
    if (ctx.storageLocation()) {
      storageLocation = this._toText(ctx.storageLocation());
    }
    const node = {
      type: "VariableDeclaration",
      typeName: this.visitTypeName(ctx.typeName()),
      name: null,
      identifier: null,
      storageLocation,
      isStateVar: false,
      isIndexed: false,
      expression: null
    };
    return this._addMeta(node, ctx);
  }
  visitThrowStatement(ctx) {
    const node = {
      type: "ThrowStatement"
    };
    return this._addMeta(node, ctx);
  }
  visitReturnStatement(ctx) {
    let expression = null;
    const ctxExpression = ctx.expression();
    if (ctxExpression) {
      expression = this.visitExpression(ctxExpression);
    }
    const node = {
      type: "ReturnStatement",
      expression
    };
    return this._addMeta(node, ctx);
  }
  visitEmitStatement(ctx) {
    const node = {
      type: "EmitStatement",
      eventCall: this.visitFunctionCall(ctx.functionCall())
    };
    return this._addMeta(node, ctx);
  }
  visitCustomErrorDefinition(ctx) {
    const node = {
      type: "CustomErrorDefinition",
      name: this._toText(ctx.identifier()),
      parameters: this.visitParameterList(ctx.parameterList())
    };
    return this._addMeta(node, ctx);
  }
  visitTypeDefinition(ctx) {
    const node = {
      type: "TypeDefinition",
      name: this._toText(ctx.identifier()),
      definition: this.visitElementaryTypeName(ctx.elementaryTypeName())
    };
    return this._addMeta(node, ctx);
  }
  visitRevertStatement(ctx) {
    const node = {
      type: "RevertStatement",
      revertCall: this.visitFunctionCall(ctx.functionCall())
    };
    return this._addMeta(node, ctx);
  }
  visitFunctionCall(ctx) {
    let args = [];
    const names = [];
    const identifiers = [];
    const ctxArgs = ctx.functionCallArguments();
    const ctxArgsExpressionList = ctxArgs.expressionList();
    const ctxArgsNameValueList = ctxArgs.nameValueList();
    if (ctxArgsExpressionList) {
      args = ctxArgsExpressionList.expression().map((exprCtx) => this.visitExpression(exprCtx));
    } else if (ctxArgsNameValueList) {
      for (const nameValue of ctxArgsNameValueList.nameValue()) {
        args.push(this.visitExpression(nameValue.expression()));
        names.push(this._toText(nameValue.identifier()));
        identifiers.push(this.visitIdentifier(nameValue.identifier()));
      }
    }
    const node = {
      type: "FunctionCall",
      expression: this.visitExpression(ctx.expression()),
      arguments: args,
      names,
      identifiers
    };
    return this._addMeta(node, ctx);
  }
  visitStructDefinition(ctx) {
    const node = {
      type: "StructDefinition",
      name: this._toText(ctx.identifier()),
      members: ctx.variableDeclaration().map((x) => this.visitVariableDeclaration(x))
    };
    return this._addMeta(node, ctx);
  }
  visitWhileStatement(ctx) {
    const node = {
      type: "WhileStatement",
      condition: this.visitExpression(ctx.expression()),
      body: this.visitStatement(ctx.statement())
    };
    return this._addMeta(node, ctx);
  }
  visitDoWhileStatement(ctx) {
    const node = {
      type: "DoWhileStatement",
      condition: this.visitExpression(ctx.expression()),
      body: this.visitStatement(ctx.statement())
    };
    return this._addMeta(node, ctx);
  }
  visitIfStatement(ctx) {
    const trueBody = this.visitStatement(ctx.statement(0));
    let falseBody = null;
    if (ctx.statement().length > 1) {
      falseBody = this.visitStatement(ctx.statement(1));
    }
    const node = {
      type: "IfStatement",
      condition: this.visitExpression(ctx.expression()),
      trueBody,
      falseBody
    };
    return this._addMeta(node, ctx);
  }
  visitTryStatement(ctx) {
    let returnParameters = null;
    const ctxReturnParameters = ctx.returnParameters();
    if (ctxReturnParameters !== void 0) {
      returnParameters = this.visitReturnParameters(ctxReturnParameters);
    }
    const catchClauses = ctx.catchClause().map((exprCtx) => this.visitCatchClause(exprCtx));
    const node = {
      type: "TryStatement",
      expression: this.visitExpression(ctx.expression()),
      returnParameters,
      body: this.visitBlock(ctx.block()),
      catchClauses
    };
    return this._addMeta(node, ctx);
  }
  visitCatchClause(ctx) {
    let parameters = null;
    if (ctx.parameterList()) {
      parameters = this.visitParameterList(ctx.parameterList());
    }
    if (ctx.identifier() && this._toText(ctx.identifier()) !== "Error" && this._toText(ctx.identifier()) !== "Panic") {
      throw new Error('Expected "Error" or "Panic" identifier in catch clause');
    }
    let kind = null;
    const ctxIdentifier = ctx.identifier();
    if (ctxIdentifier !== void 0) {
      kind = this._toText(ctxIdentifier);
    }
    const node = {
      type: "CatchClause",
      isReasonStringType: kind === "Error",
      kind,
      parameters,
      body: this.visitBlock(ctx.block())
    };
    return this._addMeta(node, ctx);
  }
  visitExpressionStatement(ctx) {
    if (!ctx) {
      return null;
    }
    const node = {
      type: "ExpressionStatement",
      expression: this.visitExpression(ctx.expression())
    };
    return this._addMeta(node, ctx);
  }
  visitNumberLiteral(ctx) {
    var _a;
    const number = this._toText(ctx.getChild(0));
    let subdenomination = null;
    if (((_a = ctx.children) == null ? void 0 : _a.length) === 2) {
      subdenomination = this._toText(ctx.getChild(1));
    }
    const node = {
      type: "NumberLiteral",
      number,
      subdenomination
    };
    return this._addMeta(node, ctx);
  }
  visitMappingKey(ctx) {
    if (ctx.elementaryTypeName()) {
      return this.visitElementaryTypeName(ctx.elementaryTypeName());
    } else if (ctx.userDefinedTypeName()) {
      return this.visitUserDefinedTypeName(ctx.userDefinedTypeName());
    } else {
      throw new Error("Expected MappingKey to have either elementaryTypeName or userDefinedTypeName");
    }
  }
  visitMapping(ctx) {
    const node = {
      type: "Mapping",
      keyType: this.visitMappingKey(ctx.mappingKey()),
      valueType: this.visitTypeName(ctx.typeName())
    };
    return this._addMeta(node, ctx);
  }
  visitModifierDefinition(ctx) {
    let parameters = null;
    if (ctx.parameterList()) {
      parameters = this.visitParameterList(ctx.parameterList());
    }
    let isVirtual = false;
    if (ctx.VirtualKeyword().length > 0) {
      isVirtual = true;
    }
    let override;
    const overrideSpecifier = ctx.overrideSpecifier();
    if (overrideSpecifier.length === 0) {
      override = null;
    } else {
      override = overrideSpecifier[0].userDefinedTypeName().map((x) => this.visitUserDefinedTypeName(x));
    }
    let body = null;
    const blockCtx = ctx.block();
    if (blockCtx !== void 0) {
      body = this.visitBlock(blockCtx);
    }
    const node = {
      type: "ModifierDefinition",
      name: this._toText(ctx.identifier()),
      parameters,
      body,
      isVirtual,
      override
    };
    return this._addMeta(node, ctx);
  }
  visitUncheckedStatement(ctx) {
    const node = {
      type: "UncheckedStatement",
      block: this.visitBlock(ctx.block())
    };
    return this._addMeta(node, ctx);
  }
  visitExpression(ctx) {
    let op;
    switch (ctx.children.length) {
      case 1: {
        const primaryExpressionCtx = ctx.tryGetRuleContext(0, PrimaryExpressionContext);
        if (primaryExpressionCtx === void 0) {
          throw new Error("Assertion error: primary expression should exist when children length is 1");
        }
        return this.visitPrimaryExpression(primaryExpressionCtx);
      }
      case 2:
        op = this._toText(ctx.getChild(0));
        if (op === "new") {
          const node = {
            type: "NewExpression",
            typeName: this.visitTypeName(ctx.typeName())
          };
          return this._addMeta(node, ctx);
        }
        if (unaryOpValues.includes(op)) {
          const node = {
            type: "UnaryOperation",
            operator: op,
            subExpression: this.visitExpression(ctx.getRuleContext(0, ExpressionContext)),
            isPrefix: true
          };
          return this._addMeta(node, ctx);
        }
        op = this._toText(ctx.getChild(1));
        if (["++", "--"].includes(op)) {
          const node = {
            type: "UnaryOperation",
            operator: op,
            subExpression: this.visitExpression(ctx.getRuleContext(0, ExpressionContext)),
            isPrefix: false
          };
          return this._addMeta(node, ctx);
        }
        break;
      case 3:
        if (this._toText(ctx.getChild(0)) === "(" && this._toText(ctx.getChild(2)) === ")") {
          const node = {
            type: "TupleExpression",
            components: [
              this.visitExpression(ctx.getRuleContext(0, ExpressionContext))
            ],
            isArray: false
          };
          return this._addMeta(node, ctx);
        }
        op = this._toText(ctx.getChild(1));
        if (op === ".") {
          const node = {
            type: "MemberAccess",
            expression: this.visitExpression(ctx.expression(0)),
            memberName: this._toText(ctx.identifier())
          };
          return this._addMeta(node, ctx);
        }
        if (isBinOp(op)) {
          const node = {
            type: "BinaryOperation",
            operator: op,
            left: this.visitExpression(ctx.expression(0)),
            right: this.visitExpression(ctx.expression(1))
          };
          return this._addMeta(node, ctx);
        }
        break;
      case 4:
        if (this._toText(ctx.getChild(1)) === "(" && this._toText(ctx.getChild(3)) === ")") {
          let args = [];
          const names = [];
          const identifiers = [];
          const ctxArgs = ctx.functionCallArguments();
          if (ctxArgs.expressionList()) {
            args = ctxArgs.expressionList().expression().map((exprCtx) => this.visitExpression(exprCtx));
          } else if (ctxArgs.nameValueList()) {
            for (const nameValue of ctxArgs.nameValueList().nameValue()) {
              args.push(this.visitExpression(nameValue.expression()));
              names.push(this._toText(nameValue.identifier()));
              identifiers.push(this.visitIdentifier(nameValue.identifier()));
            }
          }
          const node = {
            type: "FunctionCall",
            expression: this.visitExpression(ctx.expression(0)),
            arguments: args,
            names,
            identifiers
          };
          return this._addMeta(node, ctx);
        }
        if (this._toText(ctx.getChild(1)) === "[" && this._toText(ctx.getChild(3)) === "]") {
          if (ctx.getChild(2).text === ":") {
            const node2 = {
              type: "IndexRangeAccess",
              base: this.visitExpression(ctx.expression(0))
            };
            return this._addMeta(node2, ctx);
          }
          const node = {
            type: "IndexAccess",
            base: this.visitExpression(ctx.expression(0)),
            index: this.visitExpression(ctx.expression(1))
          };
          return this._addMeta(node, ctx);
        }
        if (this._toText(ctx.getChild(1)) === "{" && this._toText(ctx.getChild(3)) === "}") {
          const node = {
            type: "NameValueExpression",
            expression: this.visitExpression(ctx.expression(0)),
            arguments: this.visitNameValueList(ctx.nameValueList())
          };
          return this._addMeta(node, ctx);
        }
        break;
      case 5:
        if (this._toText(ctx.getChild(1)) === "?" && this._toText(ctx.getChild(3)) === ":") {
          const node = {
            type: "Conditional",
            condition: this.visitExpression(ctx.expression(0)),
            trueExpression: this.visitExpression(ctx.expression(1)),
            falseExpression: this.visitExpression(ctx.expression(2))
          };
          return this._addMeta(node, ctx);
        }
        if (this._toText(ctx.getChild(1)) === "[" && this._toText(ctx.getChild(2)) === ":" && this._toText(ctx.getChild(4)) === "]") {
          const node = {
            type: "IndexRangeAccess",
            base: this.visitExpression(ctx.expression(0)),
            indexEnd: this.visitExpression(ctx.expression(1))
          };
          return this._addMeta(node, ctx);
        } else if (this._toText(ctx.getChild(1)) === "[" && this._toText(ctx.getChild(3)) === ":" && this._toText(ctx.getChild(4)) === "]") {
          const node = {
            type: "IndexRangeAccess",
            base: this.visitExpression(ctx.expression(0)),
            indexStart: this.visitExpression(ctx.expression(1))
          };
          return this._addMeta(node, ctx);
        }
        break;
      case 6:
        if (this._toText(ctx.getChild(1)) === "[" && this._toText(ctx.getChild(3)) === ":" && this._toText(ctx.getChild(5)) === "]") {
          const node = {
            type: "IndexRangeAccess",
            base: this.visitExpression(ctx.expression(0)),
            indexStart: this.visitExpression(ctx.expression(1)),
            indexEnd: this.visitExpression(ctx.expression(2))
          };
          return this._addMeta(node, ctx);
        }
        break;
    }
    throw new Error("Unrecognized expression");
  }
  visitNameValueList(ctx) {
    const names = [];
    const identifiers = [];
    const args = [];
    for (const nameValue of ctx.nameValue()) {
      names.push(this._toText(nameValue.identifier()));
      identifiers.push(this.visitIdentifier(nameValue.identifier()));
      args.push(this.visitExpression(nameValue.expression()));
    }
    const node = {
      type: "NameValueList",
      names,
      identifiers,
      arguments: args
    };
    return this._addMeta(node, ctx);
  }
  visitFileLevelConstant(ctx) {
    const type = this.visitTypeName(ctx.typeName());
    const iden = ctx.identifier();
    const name = this._toText(iden);
    const expression = this.visitExpression(ctx.expression());
    const node = {
      type: "FileLevelConstant",
      typeName: type,
      name,
      initialValue: expression,
      isDeclaredConst: true,
      isImmutable: false
    };
    return this._addMeta(node, ctx);
  }
  visitForStatement(ctx) {
    let conditionExpression = this.visitExpressionStatement(ctx.expressionStatement());
    if (conditionExpression) {
      conditionExpression = conditionExpression.expression;
    }
    const node = {
      type: "ForStatement",
      initExpression: ctx.simpleStatement() ? this.visitSimpleStatement(ctx.simpleStatement()) : null,
      conditionExpression,
      loopExpression: {
        type: "ExpressionStatement",
        expression: ctx.expression() !== void 0 ? this.visitExpression(ctx.expression()) : null
      },
      body: this.visitStatement(ctx.statement())
    };
    return this._addMeta(node, ctx);
  }
  visitHexLiteral(ctx) {
    const parts = ctx.HexLiteralFragment().map((x) => this._toText(x)).map((x) => x.substring(4, x.length - 1));
    const node = {
      type: "HexLiteral",
      value: parts.join(""),
      parts
    };
    return this._addMeta(node, ctx);
  }
  visitPrimaryExpression(ctx) {
    if (ctx.BooleanLiteral()) {
      const node = {
        type: "BooleanLiteral",
        value: this._toText(ctx.BooleanLiteral()) === "true"
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.hexLiteral()) {
      return this.visitHexLiteral(ctx.hexLiteral());
    }
    if (ctx.stringLiteral()) {
      const fragments = ctx.stringLiteral().StringLiteralFragment().map((stringLiteralFragmentCtx) => {
        let text = this._toText(stringLiteralFragmentCtx);
        const isUnicode = text.slice(0, 7) === "unicode";
        if (isUnicode) {
          text = text.slice(7);
        }
        const singleQuotes = text[0] === "'";
        const textWithoutQuotes = text.substring(1, text.length - 1);
        const value = singleQuotes ? textWithoutQuotes.replace(new RegExp("\\\\'", "g"), "'") : textWithoutQuotes.replace(new RegExp('\\\\"', "g"), '"');
        return {value, isUnicode};
      });
      const parts = fragments.map((x) => x.value);
      const node = {
        type: "StringLiteral",
        value: parts.join(""),
        parts,
        isUnicode: fragments.map((x) => x.isUnicode)
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.numberLiteral()) {
      return this.visitNumberLiteral(ctx.numberLiteral());
    }
    if (ctx.TypeKeyword()) {
      const node = {
        type: "Identifier",
        name: "type"
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.typeName()) {
      return this.visitTypeName(ctx.typeName());
    }
    return this.visit(ctx.getChild(0));
  }
  visitTupleExpression(ctx) {
    const children = ctx.children.slice(1, -1);
    const components = this._mapCommasToNulls(children).map((expr) => {
      if (expr === null) {
        return null;
      }
      return this.visit(expr);
    });
    const node = {
      type: "TupleExpression",
      components,
      isArray: this._toText(ctx.getChild(0)) === "["
    };
    return this._addMeta(node, ctx);
  }
  buildIdentifierList(ctx) {
    const children = ctx.children.slice(1, -1);
    const identifiers = ctx.identifier();
    let i = 0;
    return this._mapCommasToNulls(children).map((idenOrNull) => {
      if (!idenOrNull) {
        return null;
      }
      const iden = identifiers[i];
      i++;
      const node = {
        type: "VariableDeclaration",
        name: this._toText(iden),
        identifier: this.visitIdentifier(iden),
        isStateVar: false,
        isIndexed: false,
        typeName: null,
        storageLocation: null,
        expression: null
      };
      return this._addMeta(node, iden);
    });
  }
  buildVariableDeclarationList(ctx) {
    var _a;
    const variableDeclarations = ctx.variableDeclaration();
    let i = 0;
    return this._mapCommasToNulls((_a = ctx.children) != null ? _a : []).map((declOrNull) => {
      if (!declOrNull) {
        return null;
      }
      const decl = variableDeclarations[i];
      i++;
      let storageLocation = null;
      if (decl.storageLocation()) {
        storageLocation = this._toText(decl.storageLocation());
      }
      const identifierCtx = decl.identifier();
      const result = {
        type: "VariableDeclaration",
        name: this._toText(identifierCtx),
        identifier: this.visitIdentifier(identifierCtx),
        typeName: this.visitTypeName(decl.typeName()),
        storageLocation,
        isStateVar: false,
        isIndexed: false,
        expression: null
      };
      return this._addMeta(result, decl);
    });
  }
  visitImportDirective(ctx) {
    const pathString = this._toText(ctx.importPath());
    let unitAlias = null;
    let unitAliasIdentifier = null;
    let symbolAliases = null;
    let symbolAliasesIdentifiers = null;
    if (ctx.importDeclaration().length > 0) {
      symbolAliases = ctx.importDeclaration().map((decl) => {
        const symbol = this._toText(decl.identifier(0));
        let alias = null;
        if (decl.identifier().length > 1) {
          alias = this._toText(decl.identifier(1));
        }
        return [symbol, alias];
      });
      symbolAliasesIdentifiers = ctx.importDeclaration().map((decl) => {
        const symbolIdentifier = this.visitIdentifier(decl.identifier(0));
        let aliasIdentifier = null;
        if (decl.identifier().length > 1) {
          aliasIdentifier = this.visitIdentifier(decl.identifier(1));
        }
        return [symbolIdentifier, aliasIdentifier];
      });
    } else {
      const identifierCtxList = ctx.identifier();
      if (identifierCtxList.length === 0) {
      } else if (identifierCtxList.length === 1) {
        const aliasIdentifierCtx = ctx.identifier(0);
        unitAlias = this._toText(aliasIdentifierCtx);
        unitAliasIdentifier = this.visitIdentifier(aliasIdentifierCtx);
      } else if (identifierCtxList.length === 2) {
        const aliasIdentifierCtx = ctx.identifier(1);
        unitAlias = this._toText(aliasIdentifierCtx);
        unitAliasIdentifier = this.visitIdentifier(aliasIdentifierCtx);
      } else {
        throw new Error("Assertion error: an import should have one or two identifiers");
      }
    }
    const path = pathString.substring(1, pathString.length - 1);
    const pathLiteral = {
      type: "StringLiteral",
      value: path,
      parts: [path],
      isUnicode: [false]
    };
    const node = {
      type: "ImportDirective",
      path,
      pathLiteral: this._addMeta(pathLiteral, ctx.importPath()),
      unitAlias,
      unitAliasIdentifier,
      symbolAliases,
      symbolAliasesIdentifiers
    };
    return this._addMeta(node, ctx);
  }
  buildEventParameterList(ctx) {
    return ctx.eventParameter().map((paramCtx) => {
      const type = this.visit(paramCtx.typeName());
      let name = null;
      if (paramCtx.identifier()) {
        name = this._toText(paramCtx.identifier());
      }
      return {
        type: "VariableDeclaration",
        typeName: type,
        name,
        isStateVar: false,
        isIndexed: !!paramCtx.IndexedKeyword(0)
      };
    });
  }
  visitReturnParameters(ctx) {
    return this.visitParameterList(ctx.parameterList());
  }
  visitParameterList(ctx) {
    return ctx.parameter().map((paramCtx) => this.visitParameter(paramCtx));
  }
  visitInlineAssemblyStatement(ctx) {
    let language = null;
    if (ctx.StringLiteralFragment()) {
      language = this._toText(ctx.StringLiteralFragment());
      language = language.substring(1, language.length - 1);
    }
    const flags = [];
    const flag = ctx.inlineAssemblyStatementFlag();
    if (flag !== void 0) {
      const flagString = this._toText(flag.stringLiteral());
      flags.push(flagString.slice(1, flagString.length - 1));
    }
    const node = {
      type: "InlineAssemblyStatement",
      language,
      flags,
      body: this.visitAssemblyBlock(ctx.assemblyBlock())
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyBlock(ctx) {
    const operations = ctx.assemblyItem().map((item) => this.visitAssemblyItem(item));
    const node = {
      type: "AssemblyBlock",
      operations
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyItem(ctx) {
    let text;
    if (ctx.hexLiteral()) {
      return this.visitHexLiteral(ctx.hexLiteral());
    }
    if (ctx.stringLiteral()) {
      text = this._toText(ctx.stringLiteral());
      const value = text.substring(1, text.length - 1);
      const node = {
        type: "StringLiteral",
        value,
        parts: [value],
        isUnicode: [false]
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.BreakKeyword()) {
      const node = {
        type: "Break"
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.ContinueKeyword()) {
      const node = {
        type: "Continue"
      };
      return this._addMeta(node, ctx);
    }
    return this.visit(ctx.getChild(0));
  }
  visitAssemblyExpression(ctx) {
    return this.visit(ctx.getChild(0));
  }
  visitAssemblyCall(ctx) {
    const functionName = this._toText(ctx.getChild(0));
    const args = ctx.assemblyExpression().map((assemblyExpr) => this.visitAssemblyExpression(assemblyExpr));
    const node = {
      type: "AssemblyCall",
      functionName,
      arguments: args
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyLiteral(ctx) {
    let text;
    if (ctx.stringLiteral()) {
      text = this._toText(ctx);
      const value = text.substring(1, text.length - 1);
      const node = {
        type: "StringLiteral",
        value,
        parts: [value],
        isUnicode: [false]
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.BooleanLiteral()) {
      const node = {
        type: "BooleanLiteral",
        value: this._toText(ctx.BooleanLiteral()) === "true"
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.DecimalNumber()) {
      const node = {
        type: "DecimalNumber",
        value: this._toText(ctx)
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.HexNumber()) {
      const node = {
        type: "HexNumber",
        value: this._toText(ctx)
      };
      return this._addMeta(node, ctx);
    }
    if (ctx.hexLiteral()) {
      return this.visitHexLiteral(ctx.hexLiteral());
    }
    throw new Error("Should never reach here");
  }
  visitAssemblySwitch(ctx) {
    const node = {
      type: "AssemblySwitch",
      expression: this.visitAssemblyExpression(ctx.assemblyExpression()),
      cases: ctx.assemblyCase().map((c) => this.visitAssemblyCase(c))
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyCase(ctx) {
    let value = null;
    if (this._toText(ctx.getChild(0)) === "case") {
      value = this.visitAssemblyLiteral(ctx.assemblyLiteral());
    }
    const node = {
      type: "AssemblyCase",
      block: this.visitAssemblyBlock(ctx.assemblyBlock()),
      value,
      default: value === null
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyLocalDefinition(ctx) {
    const ctxAssemblyIdentifierOrList = ctx.assemblyIdentifierOrList();
    let names;
    if (ctxAssemblyIdentifierOrList.identifier()) {
      names = [this.visitIdentifier(ctxAssemblyIdentifierOrList.identifier())];
    } else if (ctxAssemblyIdentifierOrList.assemblyMember()) {
      names = [
        this.visitAssemblyMember(ctxAssemblyIdentifierOrList.assemblyMember())
      ];
    } else {
      names = ctxAssemblyIdentifierOrList.assemblyIdentifierList().identifier().map((x) => this.visitIdentifier(x));
    }
    let expression = null;
    if (ctx.assemblyExpression() !== void 0) {
      expression = this.visitAssemblyExpression(ctx.assemblyExpression());
    }
    const node = {
      type: "AssemblyLocalDefinition",
      names,
      expression
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyFunctionDefinition(ctx) {
    const ctxAssemblyIdentifierList = ctx.assemblyIdentifierList();
    const args = ctxAssemblyIdentifierList !== void 0 ? ctxAssemblyIdentifierList.identifier().map((x) => this.visitIdentifier(x)) : [];
    const ctxAssemblyFunctionReturns = ctx.assemblyFunctionReturns();
    const returnArgs = ctxAssemblyFunctionReturns ? ctxAssemblyFunctionReturns.assemblyIdentifierList().identifier().map((x) => this.visitIdentifier(x)) : [];
    const node = {
      type: "AssemblyFunctionDefinition",
      name: this._toText(ctx.identifier()),
      arguments: args,
      returnArguments: returnArgs,
      body: this.visitAssemblyBlock(ctx.assemblyBlock())
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyAssignment(ctx) {
    const ctxAssemblyIdentifierOrList = ctx.assemblyIdentifierOrList();
    let names;
    if (ctxAssemblyIdentifierOrList.identifier()) {
      names = [this.visitIdentifier(ctxAssemblyIdentifierOrList.identifier())];
    } else if (ctxAssemblyIdentifierOrList.assemblyMember()) {
      names = [
        this.visitAssemblyMember(ctxAssemblyIdentifierOrList.assemblyMember())
      ];
    } else {
      names = ctxAssemblyIdentifierOrList.assemblyIdentifierList().identifier().map((x) => this.visitIdentifier(x));
    }
    const node = {
      type: "AssemblyAssignment",
      names,
      expression: this.visitAssemblyExpression(ctx.assemblyExpression())
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyMember(ctx) {
    const [accessed, member] = ctx.identifier();
    const node = {
      type: "AssemblyMemberAccess",
      expression: this.visitIdentifier(accessed),
      memberName: this.visitIdentifier(member)
    };
    return this._addMeta(node, ctx);
  }
  visitLabelDefinition(ctx) {
    const node = {
      type: "LabelDefinition",
      name: this._toText(ctx.identifier())
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyStackAssignment(ctx) {
    const node = {
      type: "AssemblyStackAssignment",
      name: this._toText(ctx.identifier()),
      expression: this.visitAssemblyExpression(ctx.assemblyExpression())
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyFor(ctx) {
    const node = {
      type: "AssemblyFor",
      pre: this.visit(ctx.getChild(1)),
      condition: this.visit(ctx.getChild(2)),
      post: this.visit(ctx.getChild(3)),
      body: this.visit(ctx.getChild(4))
    };
    return this._addMeta(node, ctx);
  }
  visitAssemblyIf(ctx) {
    const node = {
      type: "AssemblyIf",
      condition: this.visitAssemblyExpression(ctx.assemblyExpression()),
      body: this.visitAssemblyBlock(ctx.assemblyBlock())
    };
    return this._addMeta(node, ctx);
  }
  visitContinueStatement(ctx) {
    const node = {
      type: "ContinueStatement"
    };
    return this._addMeta(node, ctx);
  }
  visitBreakStatement(ctx) {
    const node = {
      type: "BreakStatement"
    };
    return this._addMeta(node, ctx);
  }
  _toText(ctx) {
    const text = ctx.text;
    if (text === void 0) {
      throw new Error("Assertion error: text should never be undefiend");
    }
    return text;
  }
  _stateMutabilityToText(ctx) {
    if (ctx.PureKeyword() !== void 0) {
      return "pure";
    }
    if (ctx.ConstantKeyword() !== void 0) {
      return "constant";
    }
    if (ctx.PayableKeyword() !== void 0) {
      return "payable";
    }
    if (ctx.ViewKeyword() !== void 0) {
      return "view";
    }
    throw new Error("Assertion error: non-exhaustive stateMutability check");
  }
  _loc(ctx) {
    const sourceLocation = {
      start: {
        line: ctx.start.line,
        column: ctx.start.charPositionInLine
      },
      end: {
        line: ctx.stop ? ctx.stop.line : ctx.start.line,
        column: ctx.stop ? ctx.stop.charPositionInLine : ctx.start.charPositionInLine
      }
    };
    return sourceLocation;
  }
  _range(ctx) {
    var _a, _b;
    return [ctx.start.startIndex, (_b = (_a = ctx.stop) == null ? void 0 : _a.stopIndex) != null ? _b : ctx.start.startIndex];
  }
  _addMeta(node, ctx) {
    const nodeWithMeta = {
      type: node.type
    };
    if (this.options.loc === true) {
      node.loc = this._loc(ctx);
    }
    if (this.options.range === true) {
      node.range = this._range(ctx);
    }
    return __objSpread(__objSpread({}, nodeWithMeta), node);
  }
  _mapCommasToNulls(children) {
    if (children.length === 0) {
      return [];
    }
    const values = [];
    let comma = true;
    for (const el of children) {
      if (comma) {
        if (this._toText(el) === ",") {
          values.push(null);
        } else {
          values.push(el);
          comma = false;
        }
      } else {
        if (this._toText(el) !== ",") {
          throw new Error("expected comma");
        }
        comma = true;
      }
    }
    if (comma) {
      values.push(null);
    }
    return values;
  }
};
function isBinOp(op) {
  return binaryOpValues.includes(op);
}

// src/ErrorListener.ts
var import_antlr4 = __toModule(require_antlr4());
var ErrorListener = class extends import_antlr4.default.error.ErrorListener {
  constructor() {
    super();
    this._errors = [];
  }
  syntaxError(recognizer, offendingSymbol, line, column, message) {
    this._errors.push({message, line, column});
  }
  getErrors() {
    return this._errors;
  }
  hasErrors() {
    return this._errors.length > 0;
  }
};
var ErrorListener_default = ErrorListener;

// src/tokens.ts
var import_tokens_string = __toModule(require_tokens_string());
var tokens = import_tokens_string.default;
var TYPE_TOKENS = [
  "var",
  "bool",
  "address",
  "string",
  "Int",
  "Uint",
  "Byte",
  "Fixed",
  "UFixed"
];
function rsplit(str, value) {
  const index = str.lastIndexOf(value);
  return [str.substring(0, index), str.substring(index + 1, str.length)];
}
function normalizeTokenType(value) {
  if (value.endsWith("'")) {
    value = value.substring(0, value.length - 1);
  }
  if (value.startsWith("'")) {
    value = value.substring(1, value.length);
  }
  return value;
}
function getTokenType(value) {
  if (value === "Identifier" || value === "from") {
    return "Identifier";
  } else if (value === "TrueLiteral" || value === "FalseLiteral") {
    return "Boolean";
  } else if (value === "VersionLiteral") {
    return "Version";
  } else if (value === "StringLiteral") {
    return "String";
  } else if (TYPE_TOKENS.includes(value)) {
    return "Type";
  } else if (value === "NumberUnit") {
    return "Subdenomination";
  } else if (value === "DecimalNumber") {
    return "Numeric";
  } else if (value === "HexLiteral") {
    return "Hex";
  } else if (value === "ReservedKeyword") {
    return "Reserved";
  } else if (/^\W+$/.test(value)) {
    return "Punctuator";
  } else {
    return "Keyword";
  }
}
function getTokenTypeMap() {
  return tokens.split("\n").map((line) => rsplit(line, "=")).reduce((acum, [value, key]) => {
    acum[parseInt(key, 10)] = normalizeTokenType(value);
    return acum;
  }, {});
}
function buildTokenList(tokensArg, options) {
  const tokenTypes = getTokenTypeMap();
  const result = tokensArg.map((token) => {
    var _a, _b;
    const type = getTokenType(tokenTypes[token.type]);
    const node = {type, value: token.text};
    if (options.range === true) {
      node.range = [token.startIndex, token.stopIndex + 1];
    }
    if (options.loc === true) {
      node.loc = {
        start: {line: token.line, column: token.charPositionInLine},
        end: {line: token.line, column: token.charPositionInLine + ((_b = (_a = token.text) == null ? void 0 : _a.length) != null ? _b : 0)}
      };
    }
    return node;
  });
  return result;
}

// src/parser.ts
var ParserError = class extends Error {
  constructor(args) {
    super();
    const {message, line, column} = args.errors[0];
    this.message = `${message} (${line}:${column})`;
    this.errors = args.errors;
    if (Error.captureStackTrace !== void 0) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
  }
};
function tokenize(input, options = {}) {
  const inputStream = new import_antlr4ts.ANTLRInputStream(input);
  const lexer = new SolidityLexer(inputStream);
  return buildTokenList(lexer.getAllTokens(), options);
}
function parse(input, options = {}) {
  const inputStream = new import_antlr4ts.ANTLRInputStream(input);
  const lexer = new SolidityLexer(inputStream);
  const tokenStream = new import_antlr4ts.CommonTokenStream(lexer);
  const parser = new SolidityParser(tokenStream);
  const listener = new ErrorListener_default();
  lexer.removeErrorListeners();
  lexer.addErrorListener(listener);
  parser.removeErrorListeners();
  parser.addErrorListener(listener);
  parser.buildParseTree = true;
  const sourceUnit = parser.sourceUnit();
  const astBuilder = new ASTBuilder(options);
  astBuilder.visit(sourceUnit);
  const ast = astBuilder.result;
  if (ast === null) {
    throw new Error("ast should never be null");
  }
  let tokenList = [];
  if (options.tokens === true) {
    tokenList = buildTokenList(tokenStream.getTokens(), options);
  }
  if (options.tolerant !== true && listener.hasErrors()) {
    throw new ParserError({errors: listener.getErrors()});
  }
  if (options.tolerant === true && listener.hasErrors()) {
    ast.errors = listener.getErrors();
  }
  if (options.tokens === true) {
    ast.tokens = tokenList;
  }
  return ast;
}
function _isASTNode(node) {
  if (typeof node !== "object" || node === null) {
    return false;
  }
  const nodeAsAny = node;
  if (Object.prototype.hasOwnProperty.call(nodeAsAny, "type") && typeof nodeAsAny.type === "string") {
    return astNodeTypes.includes(nodeAsAny.type);
  }
  return false;
}
function visit(node, visitor, nodeParent) {
  if (Array.isArray(node)) {
    node.forEach((child) => visit(child, visitor, nodeParent));
  }
  if (!_isASTNode(node))
    return;
  let cont = true;
  if (visitor[node.type] !== void 0) {
    cont = visitor[node.type](node, nodeParent);
  }
  if (cont === false)
    return;
  for (const prop in node) {
    if (Object.prototype.hasOwnProperty.call(node, prop)) {
      visit(node[prop], visitor, node);
    }
  }
  const selector = node.type + ":exit";
  if (visitor[selector] !== void 0) {
    visitor[selector](node, nodeParent);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ParserError,
  parse,
  tokenize,
  visit
});
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
/*! https://mths.be/codepointat v0.2.0 by @mathias */
/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
//# sourceMappingURL=index.cjs.js.map
