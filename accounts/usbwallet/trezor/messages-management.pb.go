// This file originates from the SatoshiLabs Trezor `common` repository at:
//   https://github.com/trezor/trezor-common/blob/master/protob/messages-management.proto
// dated 30.06.2025, commit 421b45d4677f2499234692b0f54010bc45b3ae5f.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: messages-management.proto

package trezor

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Type of the mnemonic backup given/received by the device during reset/recovery.
type BackupType int32

const (
	BackupType_Bip39                      BackupType = 0 // also called "Single Backup", see BIP-0039
	BackupType_Slip39_Basic               BackupType = 1 // also called "Shamir Backup", see SLIP-0039
	BackupType_Slip39_Advanced            BackupType = 2 // also called "Super Shamir" or "Shamir with Groups", see SLIP-0039#two-level-scheme
	BackupType_Slip39_Single_Extendable   BackupType = 3 // extendable single-share Shamir backup
	BackupType_Slip39_Basic_Extendable    BackupType = 4 // extendable multi-share Shamir backup
	BackupType_Slip39_Advanced_Extendable BackupType = 5 // extendable multi-share Shamir backup with groups
)

// Enum value maps for BackupType.
var (
	BackupType_name = map[int32]string{
		0: "Bip39",
		1: "Slip39_Basic",
		2: "Slip39_Advanced",
		3: "Slip39_Single_Extendable",
		4: "Slip39_Basic_Extendable",
		5: "Slip39_Advanced_Extendable",
	}
	BackupType_value = map[string]int32{
		"Bip39":                      0,
		"Slip39_Basic":               1,
		"Slip39_Advanced":            2,
		"Slip39_Single_Extendable":   3,
		"Slip39_Basic_Extendable":    4,
		"Slip39_Advanced_Extendable": 5,
	}
)

func (x BackupType) Enum() *BackupType {
	p := new(BackupType)
	*p = x
	return p
}

func (x BackupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[0].Descriptor()
}

func (BackupType) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[0]
}

func (x BackupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackupType(num)
	return nil
}

// Deprecated: Use BackupType.Descriptor instead.
func (BackupType) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{0}
}

// *
// Level of safety checks for unsafe actions like spending from invalid path namespace or setting high transaction fee.
type SafetyCheckLevel int32

const (
	SafetyCheckLevel_Strict            SafetyCheckLevel = 0 // disallow unsafe actions, this is the default
	SafetyCheckLevel_PromptAlways      SafetyCheckLevel = 1 // ask user before unsafe action
	SafetyCheckLevel_PromptTemporarily SafetyCheckLevel = 2 // like PromptAlways but reverts to Strict after reboot
)

// Enum value maps for SafetyCheckLevel.
var (
	SafetyCheckLevel_name = map[int32]string{
		0: "Strict",
		1: "PromptAlways",
		2: "PromptTemporarily",
	}
	SafetyCheckLevel_value = map[string]int32{
		"Strict":            0,
		"PromptAlways":      1,
		"PromptTemporarily": 2,
	}
)

func (x SafetyCheckLevel) Enum() *SafetyCheckLevel {
	p := new(SafetyCheckLevel)
	*p = x
	return p
}

func (x SafetyCheckLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SafetyCheckLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[1].Descriptor()
}

func (SafetyCheckLevel) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[1]
}

func (x SafetyCheckLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SafetyCheckLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SafetyCheckLevel(num)
	return nil
}

// Deprecated: Use SafetyCheckLevel.Descriptor instead.
func (SafetyCheckLevel) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{1}
}

// *
// Allowed display rotation angles (in degrees from North)
type DisplayRotation int32

const (
	DisplayRotation_North DisplayRotation = 0
	DisplayRotation_East  DisplayRotation = 90
	DisplayRotation_South DisplayRotation = 180
	DisplayRotation_West  DisplayRotation = 270
)

// Enum value maps for DisplayRotation.
var (
	DisplayRotation_name = map[int32]string{
		0:   "North",
		90:  "East",
		180: "South",
		270: "West",
	}
	DisplayRotation_value = map[string]int32{
		"North": 0,
		"East":  90,
		"South": 180,
		"West":  270,
	}
)

func (x DisplayRotation) Enum() *DisplayRotation {
	p := new(DisplayRotation)
	*p = x
	return p
}

func (x DisplayRotation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayRotation) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[2].Descriptor()
}

func (DisplayRotation) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[2]
}

func (x DisplayRotation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisplayRotation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisplayRotation(num)
	return nil
}

// Deprecated: Use DisplayRotation.Descriptor instead.
func (DisplayRotation) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{2}
}

// *
// Format of the homescreen image
type HomescreenFormat int32

const (
	HomescreenFormat_Toif HomescreenFormat = 1 // full-color toif
	HomescreenFormat_Jpeg HomescreenFormat = 2 // jpeg
	HomescreenFormat_ToiG HomescreenFormat = 3 // greyscale toif
)

// Enum value maps for HomescreenFormat.
var (
	HomescreenFormat_name = map[int32]string{
		1: "Toif",
		2: "Jpeg",
		3: "ToiG",
	}
	HomescreenFormat_value = map[string]int32{
		"Toif": 1,
		"Jpeg": 2,
		"ToiG": 3,
	}
)

func (x HomescreenFormat) Enum() *HomescreenFormat {
	p := new(HomescreenFormat)
	*p = x
	return p
}

func (x HomescreenFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HomescreenFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[3].Descriptor()
}

func (HomescreenFormat) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[3]
}

func (x HomescreenFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HomescreenFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HomescreenFormat(num)
	return nil
}

// Deprecated: Use HomescreenFormat.Descriptor instead.
func (HomescreenFormat) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{3}
}

type RecoveryType int32

const (
	RecoveryType_NormalRecovery       RecoveryType = 0 // recovery from seedphrase on an uninitialized device
	RecoveryType_DryRun               RecoveryType = 1 // mnemonic validation
	RecoveryType_UnlockRepeatedBackup RecoveryType = 2 // unlock SLIP-39 repeated backup
)

// Enum value maps for RecoveryType.
var (
	RecoveryType_name = map[int32]string{
		0: "NormalRecovery",
		1: "DryRun",
		2: "UnlockRepeatedBackup",
	}
	RecoveryType_value = map[string]int32{
		"NormalRecovery":       0,
		"DryRun":               1,
		"UnlockRepeatedBackup": 2,
	}
)

func (x RecoveryType) Enum() *RecoveryType {
	p := new(RecoveryType)
	*p = x
	return p
}

func (x RecoveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecoveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[4].Descriptor()
}

func (RecoveryType) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[4]
}

func (x RecoveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecoveryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecoveryType(num)
	return nil
}

// Deprecated: Use RecoveryType.Descriptor instead.
func (RecoveryType) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{4}
}

type Features_BackupAvailability int32

const (
	// / Device is already backed up, or a previous backup has failed.
	Features_NotAvailable Features_BackupAvailability = 0
	// / Device is not backed up. Backup is required.
	Features_Required Features_BackupAvailability = 1
	// / Device is already backed up and can be backed up again.
	Features_Available Features_BackupAvailability = 2
)

// Enum value maps for Features_BackupAvailability.
var (
	Features_BackupAvailability_name = map[int32]string{
		0: "NotAvailable",
		1: "Required",
		2: "Available",
	}
	Features_BackupAvailability_value = map[string]int32{
		"NotAvailable": 0,
		"Required":     1,
		"Available":    2,
	}
)

func (x Features_BackupAvailability) Enum() *Features_BackupAvailability {
	p := new(Features_BackupAvailability)
	*p = x
	return p
}

func (x Features_BackupAvailability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Features_BackupAvailability) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[5].Descriptor()
}

func (Features_BackupAvailability) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[5]
}

func (x Features_BackupAvailability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Features_BackupAvailability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Features_BackupAvailability(num)
	return nil
}

// Deprecated: Use Features_BackupAvailability.Descriptor instead.
func (Features_BackupAvailability) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{2, 0}
}

type Features_RecoveryStatus int32

const (
	Features_Nothing  Features_RecoveryStatus = 0 // we are not in recovery mode
	Features_Recovery Features_RecoveryStatus = 1 // we are in "Normal" or "DryRun" recovery
	Features_Backup   Features_RecoveryStatus = 2 // we are in repeated backup mode
)

// Enum value maps for Features_RecoveryStatus.
var (
	Features_RecoveryStatus_name = map[int32]string{
		0: "Nothing",
		1: "Recovery",
		2: "Backup",
	}
	Features_RecoveryStatus_value = map[string]int32{
		"Nothing":  0,
		"Recovery": 1,
		"Backup":   2,
	}
)

func (x Features_RecoveryStatus) Enum() *Features_RecoveryStatus {
	p := new(Features_RecoveryStatus)
	*p = x
	return p
}

func (x Features_RecoveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Features_RecoveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[6].Descriptor()
}

func (Features_RecoveryStatus) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[6]
}

func (x Features_RecoveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Features_RecoveryStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Features_RecoveryStatus(num)
	return nil
}

// Deprecated: Use Features_RecoveryStatus.Descriptor instead.
func (Features_RecoveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{2, 1}
}

type Features_Capability int32

const (
	Features_Capability_Bitcoin      Features_Capability = 1
	Features_Capability_Bitcoin_like Features_Capability = 2 // Altcoins based on the Bitcoin source code
	Features_Capability_Binance      Features_Capability = 3 // BNB Smart Chain
	Features_Capability_Cardano      Features_Capability = 4
	Features_Capability_Crypto       Features_Capability = 5 // generic crypto operations for GPG, SSH, etc.
	Features_Capability_EOS          Features_Capability = 6
	Features_Capability_Ethereum     Features_Capability = 7
	// Deprecated: Marked as deprecated in messages-management.proto.
	Features_Capability_Lisk            Features_Capability = 8
	Features_Capability_Monero          Features_Capability = 9
	Features_Capability_NEM             Features_Capability = 10
	Features_Capability_Ripple          Features_Capability = 11
	Features_Capability_Stellar         Features_Capability = 12
	Features_Capability_Tezos           Features_Capability = 13
	Features_Capability_U2F             Features_Capability = 14
	Features_Capability_Shamir          Features_Capability = 15
	Features_Capability_ShamirGroups    Features_Capability = 16
	Features_Capability_PassphraseEntry Features_Capability = 17 // the device is capable of passphrase entry directly on the device
	Features_Capability_Solana          Features_Capability = 18
	Features_Capability_Translations    Features_Capability = 19
	Features_Capability_Brightness      Features_Capability = 20
	Features_Capability_Haptic          Features_Capability = 21
	Features_Capability_BLE             Features_Capability = 22 // Bluetooth Low Energy
	Features_Capability_NFC             Features_Capability = 23 // Near Field Communications
)

// Enum value maps for Features_Capability.
var (
	Features_Capability_name = map[int32]string{
		1:  "Capability_Bitcoin",
		2:  "Capability_Bitcoin_like",
		3:  "Capability_Binance",
		4:  "Capability_Cardano",
		5:  "Capability_Crypto",
		6:  "Capability_EOS",
		7:  "Capability_Ethereum",
		8:  "Capability_Lisk",
		9:  "Capability_Monero",
		10: "Capability_NEM",
		11: "Capability_Ripple",
		12: "Capability_Stellar",
		13: "Capability_Tezos",
		14: "Capability_U2F",
		15: "Capability_Shamir",
		16: "Capability_ShamirGroups",
		17: "Capability_PassphraseEntry",
		18: "Capability_Solana",
		19: "Capability_Translations",
		20: "Capability_Brightness",
		21: "Capability_Haptic",
		22: "Capability_BLE",
		23: "Capability_NFC",
	}
	Features_Capability_value = map[string]int32{
		"Capability_Bitcoin":         1,
		"Capability_Bitcoin_like":    2,
		"Capability_Binance":         3,
		"Capability_Cardano":         4,
		"Capability_Crypto":          5,
		"Capability_EOS":             6,
		"Capability_Ethereum":        7,
		"Capability_Lisk":            8,
		"Capability_Monero":          9,
		"Capability_NEM":             10,
		"Capability_Ripple":          11,
		"Capability_Stellar":         12,
		"Capability_Tezos":           13,
		"Capability_U2F":             14,
		"Capability_Shamir":          15,
		"Capability_ShamirGroups":    16,
		"Capability_PassphraseEntry": 17,
		"Capability_Solana":          18,
		"Capability_Translations":    19,
		"Capability_Brightness":      20,
		"Capability_Haptic":          21,
		"Capability_BLE":             22,
		"Capability_NFC":             23,
	}
)

func (x Features_Capability) Enum() *Features_Capability {
	p := new(Features_Capability)
	*p = x
	return p
}

func (x Features_Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Features_Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[7].Descriptor()
}

func (Features_Capability) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[7]
}

func (x Features_Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Features_Capability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Features_Capability(num)
	return nil
}

// Deprecated: Use Features_Capability.Descriptor instead.
func (Features_Capability) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{2, 2}
}

// *
// Structure representing SD card protection operation
type SdProtect_SdProtectOperationType int32

const (
	SdProtect_DISABLE SdProtect_SdProtectOperationType = 0
	SdProtect_ENABLE  SdProtect_SdProtectOperationType = 1
	SdProtect_REFRESH SdProtect_SdProtectOperationType = 2
)

// Enum value maps for SdProtect_SdProtectOperationType.
var (
	SdProtect_SdProtectOperationType_name = map[int32]string{
		0: "DISABLE",
		1: "ENABLE",
		2: "REFRESH",
	}
	SdProtect_SdProtectOperationType_value = map[string]int32{
		"DISABLE": 0,
		"ENABLE":  1,
		"REFRESH": 2,
	}
)

func (x SdProtect_SdProtectOperationType) Enum() *SdProtect_SdProtectOperationType {
	p := new(SdProtect_SdProtectOperationType)
	*p = x
	return p
}

func (x SdProtect_SdProtectOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdProtect_SdProtectOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[8].Descriptor()
}

func (SdProtect_SdProtectOperationType) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[8]
}

func (x SdProtect_SdProtectOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SdProtect_SdProtectOperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SdProtect_SdProtectOperationType(num)
	return nil
}

// Deprecated: Use SdProtect_SdProtectOperationType.Descriptor instead.
func (SdProtect_SdProtectOperationType) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{13, 0}
}

// *
// Type of recovery procedure. These should be used as bitmask, e.g.,
// `RecoveryDeviceInputMethod_ScrambledWords | RecoveryDeviceInputMethod_Matrix`
// listing every method supported by the host computer.
//
// Note that ScrambledWords must be supported by every implementation
// for backward compatibility; there is no way to not support it.
type RecoveryDevice_RecoveryDeviceInputMethod int32

const (
	// use powers of two when extending this field
	RecoveryDevice_ScrambledWords RecoveryDevice_RecoveryDeviceInputMethod = 0 // words in scrambled order
	RecoveryDevice_Matrix         RecoveryDevice_RecoveryDeviceInputMethod = 1 // matrix recovery type
)

// Enum value maps for RecoveryDevice_RecoveryDeviceInputMethod.
var (
	RecoveryDevice_RecoveryDeviceInputMethod_name = map[int32]string{
		0: "ScrambledWords",
		1: "Matrix",
	}
	RecoveryDevice_RecoveryDeviceInputMethod_value = map[string]int32{
		"ScrambledWords": 0,
		"Matrix":         1,
	}
)

func (x RecoveryDevice_RecoveryDeviceInputMethod) Enum() *RecoveryDevice_RecoveryDeviceInputMethod {
	p := new(RecoveryDevice_RecoveryDeviceInputMethod)
	*p = x
	return p
}

func (x RecoveryDevice_RecoveryDeviceInputMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecoveryDevice_RecoveryDeviceInputMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[9].Descriptor()
}

func (RecoveryDevice_RecoveryDeviceInputMethod) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[9]
}

func (x RecoveryDevice_RecoveryDeviceInputMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecoveryDevice_RecoveryDeviceInputMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecoveryDevice_RecoveryDeviceInputMethod(num)
	return nil
}

// Deprecated: Use RecoveryDevice_RecoveryDeviceInputMethod.Descriptor instead.
func (RecoveryDevice_RecoveryDeviceInputMethod) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{30, 0}
}

// *
// Type of Recovery Word request
type WordRequest_WordRequestType int32

const (
	WordRequest_WordRequestType_Plain   WordRequest_WordRequestType = 0
	WordRequest_WordRequestType_Matrix9 WordRequest_WordRequestType = 1
	WordRequest_WordRequestType_Matrix6 WordRequest_WordRequestType = 2
)

// Enum value maps for WordRequest_WordRequestType.
var (
	WordRequest_WordRequestType_name = map[int32]string{
		0: "WordRequestType_Plain",
		1: "WordRequestType_Matrix9",
		2: "WordRequestType_Matrix6",
	}
	WordRequest_WordRequestType_value = map[string]int32{
		"WordRequestType_Plain":   0,
		"WordRequestType_Matrix9": 1,
		"WordRequestType_Matrix6": 2,
	}
)

func (x WordRequest_WordRequestType) Enum() *WordRequest_WordRequestType {
	p := new(WordRequest_WordRequestType)
	*p = x
	return p
}

func (x WordRequest_WordRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WordRequest_WordRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[10].Descriptor()
}

func (WordRequest_WordRequestType) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[10]
}

func (x WordRequest_WordRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WordRequest_WordRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WordRequest_WordRequestType(num)
	return nil
}

// Deprecated: Use WordRequest_WordRequestType.Descriptor instead.
func (WordRequest_WordRequestType) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{31, 0}
}

type RebootToBootloader_BootCommand int32

const (
	// Go to bootloader menu
	RebootToBootloader_STOP_AND_WAIT RebootToBootloader_BootCommand = 0
	// Connect to host and wait for firmware update
	RebootToBootloader_INSTALL_UPGRADE RebootToBootloader_BootCommand = 1
)

// Enum value maps for RebootToBootloader_BootCommand.
var (
	RebootToBootloader_BootCommand_name = map[int32]string{
		0: "STOP_AND_WAIT",
		1: "INSTALL_UPGRADE",
	}
	RebootToBootloader_BootCommand_value = map[string]int32{
		"STOP_AND_WAIT":   0,
		"INSTALL_UPGRADE": 1,
	}
)

func (x RebootToBootloader_BootCommand) Enum() *RebootToBootloader_BootCommand {
	p := new(RebootToBootloader_BootCommand)
	*p = x
	return p
}

func (x RebootToBootloader_BootCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RebootToBootloader_BootCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_management_proto_enumTypes[11].Descriptor()
}

func (RebootToBootloader_BootCommand) Type() protoreflect.EnumType {
	return &file_messages_management_proto_enumTypes[11]
}

func (x RebootToBootloader_BootCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RebootToBootloader_BootCommand) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RebootToBootloader_BootCommand(num)
	return nil
}

// Deprecated: Use RebootToBootloader_BootCommand.Descriptor instead.
func (RebootToBootloader_BootCommand) EnumDescriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{39, 0}
}

// *
// Request: Reset device to default state and ask for device details
// @start
// @next Features
type Initialize struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId []byte                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"` // assumed device session id; Trezor clears caches if it is different or empty
	// Deprecated: Marked as deprecated in messages-management.proto.
	XSkipPassphrase *bool `protobuf:"varint,2,opt,name=_skip_passphrase,json=SkipPassphrase" json:"_skip_passphrase,omitempty"` // removed as part of passphrase redesign
	DeriveCardano   *bool `protobuf:"varint,3,opt,name=derive_cardano,json=deriveCardano" json:"derive_cardano,omitempty"`      // whether to derive Cardano Icarus root keys in this session
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Initialize) Reset() {
	*x = Initialize{}
	mi := &file_messages_management_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Initialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Initialize) ProtoMessage() {}

func (x *Initialize) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Initialize.ProtoReflect.Descriptor instead.
func (*Initialize) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{0}
}

func (x *Initialize) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

// Deprecated: Marked as deprecated in messages-management.proto.
func (x *Initialize) GetXSkipPassphrase() bool {
	if x != nil && x.XSkipPassphrase != nil {
		return *x.XSkipPassphrase
	}
	return false
}

func (x *Initialize) GetDeriveCardano() bool {
	if x != nil && x.DeriveCardano != nil {
		return *x.DeriveCardano
	}
	return false
}

// *
// Request: Ask for device details (no device reset)
// @start
// @next Features
type GetFeatures struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeatures) Reset() {
	*x = GetFeatures{}
	mi := &file_messages_management_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatures) ProtoMessage() {}

func (x *GetFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatures.ProtoReflect.Descriptor instead.
func (*GetFeatures) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{1}
}

// *
// Response: Reports various information about the device
// @end
type Features struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Vendor               *string                `protobuf:"bytes,1,opt,name=vendor" json:"vendor,omitempty"`                                                          // name of the manufacturer, e.g. "trezor.io"
	MajorVersion         *uint32                `protobuf:"varint,2,req,name=major_version,json=majorVersion" json:"major_version,omitempty"`                         // major version of the firmware/bootloader, e.g. 1
	MinorVersion         *uint32                `protobuf:"varint,3,req,name=minor_version,json=minorVersion" json:"minor_version,omitempty"`                         // minor version of the firmware/bootloader, e.g. 0
	PatchVersion         *uint32                `protobuf:"varint,4,req,name=patch_version,json=patchVersion" json:"patch_version,omitempty"`                         // patch version of the firmware/bootloader, e.g. 0
	BootloaderMode       *bool                  `protobuf:"varint,5,opt,name=bootloader_mode,json=bootloaderMode" json:"bootloader_mode,omitempty"`                   // is device in bootloader mode?
	DeviceId             *string                `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`                                      // device's unique identifier
	PinProtection        *bool                  `protobuf:"varint,7,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`                      // is device protected by PIN?
	PassphraseProtection *bool                  `protobuf:"varint,8,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"` // is node/mnemonic encrypted using passphrase?
	Language             *string                `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`                                                      // device language
	Label                *string                `protobuf:"bytes,10,opt,name=label" json:"label,omitempty"`                                                           // device description label
	Initialized          *bool                  `protobuf:"varint,12,opt,name=initialized" json:"initialized,omitempty"`                                              // does device contain seed?
	Revision             []byte                 `protobuf:"bytes,13,opt,name=revision" json:"revision,omitempty"`                                                     // SCM revision of firmware
	BootloaderHash       []byte                 `protobuf:"bytes,14,opt,name=bootloader_hash,json=bootloaderHash" json:"bootloader_hash,omitempty"`                   // hash of the bootloader
	Imported             *bool                  `protobuf:"varint,15,opt,name=imported" json:"imported,omitempty"`                                                    // was storage imported from an external source?
	Unlocked             *bool                  `protobuf:"varint,16,opt,name=unlocked" json:"unlocked,omitempty"`                                                    // is the device unlocked? called "pin_cached" previously
	// Deprecated: Marked as deprecated in messages-management.proto.
	XPassphraseCached  *bool                        `protobuf:"varint,17,opt,name=_passphrase_cached,json=PassphraseCached" json:"_passphrase_cached,omitempty"`                                                                    // is passphrase already cached in session?
	FirmwarePresent    *bool                        `protobuf:"varint,18,opt,name=firmware_present,json=firmwarePresent" json:"firmware_present,omitempty"`                                                                         // is valid firmware loaded?
	BackupAvailability *Features_BackupAvailability `protobuf:"varint,19,opt,name=backup_availability,json=backupAvailability,enum=hw.trezor.messages.management.Features_BackupAvailability" json:"backup_availability,omitempty"` // does storage need backup? is repeated backup unlocked?
	Flags              *uint32                      `protobuf:"varint,20,opt,name=flags" json:"flags,omitempty"`                                                                                                                    // device flags (equals to Storage.flags)
	Model              *string                      `protobuf:"bytes,21,opt,name=model" json:"model,omitempty"`                                                                                                                     // device hardware model
	FwMajor            *uint32                      `protobuf:"varint,22,opt,name=fw_major,json=fwMajor" json:"fw_major,omitempty"`                                                                                                 // reported firmware version if in bootloader mode
	FwMinor            *uint32                      `protobuf:"varint,23,opt,name=fw_minor,json=fwMinor" json:"fw_minor,omitempty"`                                                                                                 // reported firmware version if in bootloader mode
	FwPatch            *uint32                      `protobuf:"varint,24,opt,name=fw_patch,json=fwPatch" json:"fw_patch,omitempty"`                                                                                                 // reported firmware version if in bootloader mode
	FwVendor           *string                      `protobuf:"bytes,25,opt,name=fw_vendor,json=fwVendor" json:"fw_vendor,omitempty"`                                                                                               // reported firmware vendor if in bootloader mode
	// optional bytes fw_vendor_keys = 26;      // obsoleted, use fw_vendor
	UnfinishedBackup         *bool                    `protobuf:"varint,27,opt,name=unfinished_backup,json=unfinishedBackup" json:"unfinished_backup,omitempty"`                                                      // report unfinished backup (equals to Storage.unfinished_backup)
	NoBackup                 *bool                    `protobuf:"varint,28,opt,name=no_backup,json=noBackup" json:"no_backup,omitempty"`                                                                              // report no backup (equals to Storage.no_backup)
	RecoveryStatus           *Features_RecoveryStatus `protobuf:"varint,29,opt,name=recovery_status,json=recoveryStatus,enum=hw.trezor.messages.management.Features_RecoveryStatus" json:"recovery_status,omitempty"` // whether or not we are in recovery mode and of what kind
	Capabilities             []Features_Capability    `protobuf:"varint,30,rep,name=capabilities,enum=hw.trezor.messages.management.Features_Capability" json:"capabilities,omitempty"`                               // list of supported capabilities
	BackupType               *BackupType              `protobuf:"varint,31,opt,name=backup_type,json=backupType,enum=hw.trezor.messages.management.BackupType" json:"backup_type,omitempty"`                          // type of device backup (BIP-39 / SLIP-39 basic / SLIP-39 advanced)
	SdCardPresent            *bool                    `protobuf:"varint,32,opt,name=sd_card_present,json=sdCardPresent" json:"sd_card_present,omitempty"`                                                             // is SD card present
	SdProtection             *bool                    `protobuf:"varint,33,opt,name=sd_protection,json=sdProtection" json:"sd_protection,omitempty"`                                                                  // is SD Protect enabled
	WipeCodeProtection       *bool                    `protobuf:"varint,34,opt,name=wipe_code_protection,json=wipeCodeProtection" json:"wipe_code_protection,omitempty"`                                              // is wipe code protection enabled
	SessionId                []byte                   `protobuf:"bytes,35,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	PassphraseAlwaysOnDevice *bool                    `protobuf:"varint,36,opt,name=passphrase_always_on_device,json=passphraseAlwaysOnDevice" json:"passphrase_always_on_device,omitempty"`                         // device enforces passphrase entry on Trezor
	SafetyChecks             *SafetyCheckLevel        `protobuf:"varint,37,opt,name=safety_checks,json=safetyChecks,enum=hw.trezor.messages.management.SafetyCheckLevel" json:"safety_checks,omitempty"`             // safety check level, set to Prompt to limit path namespace enforcement
	AutoLockDelayMs          *uint32                  `protobuf:"varint,38,opt,name=auto_lock_delay_ms,json=autoLockDelayMs" json:"auto_lock_delay_ms,omitempty"`                                                    // number of milliseconds after which the device locks itself
	DisplayRotation          *DisplayRotation         `protobuf:"varint,39,opt,name=display_rotation,json=displayRotation,enum=hw.trezor.messages.management.DisplayRotation" json:"display_rotation,omitempty"`     // rotation of display (in degrees from North)
	ExperimentalFeatures     *bool                    `protobuf:"varint,40,opt,name=experimental_features,json=experimentalFeatures" json:"experimental_features,omitempty"`                                         // are experimental message types enabled?
	Busy                     *bool                    `protobuf:"varint,41,opt,name=busy" json:"busy,omitempty"`                                                                                                     // is the device busy, showing "Do not disconnect"?
	HomescreenFormat         *HomescreenFormat        `protobuf:"varint,42,opt,name=homescreen_format,json=homescreenFormat,enum=hw.trezor.messages.management.HomescreenFormat" json:"homescreen_format,omitempty"` // format of the homescreen, 1 = TOIf, 2 = jpg, 3 = TOIG
	HidePassphraseFromHost   *bool                    `protobuf:"varint,43,opt,name=hide_passphrase_from_host,json=hidePassphraseFromHost" json:"hide_passphrase_from_host,omitempty"`                               // should we hide the passphrase when it comes from host?
	InternalModel            *string                  `protobuf:"bytes,44,opt,name=internal_model,json=internalModel" json:"internal_model,omitempty"`                                                               // internal model name
	UnitColor                *uint32                  `protobuf:"varint,45,opt,name=unit_color,json=unitColor" json:"unit_color,omitempty"`                                                                          // color of the unit/device
	UnitBtconly              *bool                    `protobuf:"varint,46,opt,name=unit_btconly,json=unitBtconly" json:"unit_btconly,omitempty"`                                                                    // unit/device is intended as bitcoin only
	HomescreenWidth          *uint32                  `protobuf:"varint,47,opt,name=homescreen_width,json=homescreenWidth" json:"homescreen_width,omitempty"`                                                        // homescreen width in pixels
	HomescreenHeight         *uint32                  `protobuf:"varint,48,opt,name=homescreen_height,json=homescreenHeight" json:"homescreen_height,omitempty"`                                                     // homescreen height in pixels
	BootloaderLocked         *bool                    `protobuf:"varint,49,opt,name=bootloader_locked,json=bootloaderLocked" json:"bootloader_locked,omitempty"`                                                     // bootloader is locked
	LanguageVersionMatches   *bool                    `protobuf:"varint,50,opt,name=language_version_matches,json=languageVersionMatches,def=1" json:"language_version_matches,omitempty"`                           // translation blob version matches firmware version
	UnitPackaging            *uint32                  `protobuf:"varint,51,opt,name=unit_packaging,json=unitPackaging" json:"unit_packaging,omitempty"`                                                              // unit/device packaging version
	HapticFeedback           *bool                    `protobuf:"varint,52,opt,name=haptic_feedback,json=hapticFeedback" json:"haptic_feedback,omitempty"`                                                           // haptic feedback is enabled
	RecoveryType             *RecoveryType            `protobuf:"varint,53,opt,name=recovery_type,json=recoveryType,enum=hw.trezor.messages.management.RecoveryType" json:"recovery_type,omitempty"`                 // what type of recovery we are in. NB: this works in conjunction with recovery_status
	OptigaSec                *uint32                  `protobuf:"varint,54,opt,name=optiga_sec,json=optigaSec" json:"optiga_sec,omitempty"`                                                                          // Optiga's security event counter.
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for Features fields.
const (
	Default_Features_LanguageVersionMatches = bool(true)
)

func (x *Features) Reset() {
	*x = Features{}
	mi := &file_messages_management_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{2}
}

func (x *Features) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *Features) GetMajorVersion() uint32 {
	if x != nil && x.MajorVersion != nil {
		return *x.MajorVersion
	}
	return 0
}

func (x *Features) GetMinorVersion() uint32 {
	if x != nil && x.MinorVersion != nil {
		return *x.MinorVersion
	}
	return 0
}

func (x *Features) GetPatchVersion() uint32 {
	if x != nil && x.PatchVersion != nil {
		return *x.PatchVersion
	}
	return 0
}

func (x *Features) GetBootloaderMode() bool {
	if x != nil && x.BootloaderMode != nil {
		return *x.BootloaderMode
	}
	return false
}

func (x *Features) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *Features) GetPinProtection() bool {
	if x != nil && x.PinProtection != nil {
		return *x.PinProtection
	}
	return false
}

func (x *Features) GetPassphraseProtection() bool {
	if x != nil && x.PassphraseProtection != nil {
		return *x.PassphraseProtection
	}
	return false
}

func (x *Features) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *Features) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Features) GetInitialized() bool {
	if x != nil && x.Initialized != nil {
		return *x.Initialized
	}
	return false
}

func (x *Features) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Features) GetBootloaderHash() []byte {
	if x != nil {
		return x.BootloaderHash
	}
	return nil
}

func (x *Features) GetImported() bool {
	if x != nil && x.Imported != nil {
		return *x.Imported
	}
	return false
}

func (x *Features) GetUnlocked() bool {
	if x != nil && x.Unlocked != nil {
		return *x.Unlocked
	}
	return false
}

// Deprecated: Marked as deprecated in messages-management.proto.
func (x *Features) GetXPassphraseCached() bool {
	if x != nil && x.XPassphraseCached != nil {
		return *x.XPassphraseCached
	}
	return false
}

func (x *Features) GetFirmwarePresent() bool {
	if x != nil && x.FirmwarePresent != nil {
		return *x.FirmwarePresent
	}
	return false
}

func (x *Features) GetBackupAvailability() Features_BackupAvailability {
	if x != nil && x.BackupAvailability != nil {
		return *x.BackupAvailability
	}
	return Features_NotAvailable
}

func (x *Features) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Features) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Features) GetFwMajor() uint32 {
	if x != nil && x.FwMajor != nil {
		return *x.FwMajor
	}
	return 0
}

func (x *Features) GetFwMinor() uint32 {
	if x != nil && x.FwMinor != nil {
		return *x.FwMinor
	}
	return 0
}

func (x *Features) GetFwPatch() uint32 {
	if x != nil && x.FwPatch != nil {
		return *x.FwPatch
	}
	return 0
}

func (x *Features) GetFwVendor() string {
	if x != nil && x.FwVendor != nil {
		return *x.FwVendor
	}
	return ""
}

func (x *Features) GetUnfinishedBackup() bool {
	if x != nil && x.UnfinishedBackup != nil {
		return *x.UnfinishedBackup
	}
	return false
}

func (x *Features) GetNoBackup() bool {
	if x != nil && x.NoBackup != nil {
		return *x.NoBackup
	}
	return false
}

func (x *Features) GetRecoveryStatus() Features_RecoveryStatus {
	if x != nil && x.RecoveryStatus != nil {
		return *x.RecoveryStatus
	}
	return Features_Nothing
}

func (x *Features) GetCapabilities() []Features_Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Features) GetBackupType() BackupType {
	if x != nil && x.BackupType != nil {
		return *x.BackupType
	}
	return BackupType_Bip39
}

func (x *Features) GetSdCardPresent() bool {
	if x != nil && x.SdCardPresent != nil {
		return *x.SdCardPresent
	}
	return false
}

func (x *Features) GetSdProtection() bool {
	if x != nil && x.SdProtection != nil {
		return *x.SdProtection
	}
	return false
}

func (x *Features) GetWipeCodeProtection() bool {
	if x != nil && x.WipeCodeProtection != nil {
		return *x.WipeCodeProtection
	}
	return false
}

func (x *Features) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *Features) GetPassphraseAlwaysOnDevice() bool {
	if x != nil && x.PassphraseAlwaysOnDevice != nil {
		return *x.PassphraseAlwaysOnDevice
	}
	return false
}

func (x *Features) GetSafetyChecks() SafetyCheckLevel {
	if x != nil && x.SafetyChecks != nil {
		return *x.SafetyChecks
	}
	return SafetyCheckLevel_Strict
}

func (x *Features) GetAutoLockDelayMs() uint32 {
	if x != nil && x.AutoLockDelayMs != nil {
		return *x.AutoLockDelayMs
	}
	return 0
}

func (x *Features) GetDisplayRotation() DisplayRotation {
	if x != nil && x.DisplayRotation != nil {
		return *x.DisplayRotation
	}
	return DisplayRotation_North
}

func (x *Features) GetExperimentalFeatures() bool {
	if x != nil && x.ExperimentalFeatures != nil {
		return *x.ExperimentalFeatures
	}
	return false
}

func (x *Features) GetBusy() bool {
	if x != nil && x.Busy != nil {
		return *x.Busy
	}
	return false
}

func (x *Features) GetHomescreenFormat() HomescreenFormat {
	if x != nil && x.HomescreenFormat != nil {
		return *x.HomescreenFormat
	}
	return HomescreenFormat_Toif
}

func (x *Features) GetHidePassphraseFromHost() bool {
	if x != nil && x.HidePassphraseFromHost != nil {
		return *x.HidePassphraseFromHost
	}
	return false
}

func (x *Features) GetInternalModel() string {
	if x != nil && x.InternalModel != nil {
		return *x.InternalModel
	}
	return ""
}

func (x *Features) GetUnitColor() uint32 {
	if x != nil && x.UnitColor != nil {
		return *x.UnitColor
	}
	return 0
}

func (x *Features) GetUnitBtconly() bool {
	if x != nil && x.UnitBtconly != nil {
		return *x.UnitBtconly
	}
	return false
}

func (x *Features) GetHomescreenWidth() uint32 {
	if x != nil && x.HomescreenWidth != nil {
		return *x.HomescreenWidth
	}
	return 0
}

func (x *Features) GetHomescreenHeight() uint32 {
	if x != nil && x.HomescreenHeight != nil {
		return *x.HomescreenHeight
	}
	return 0
}

func (x *Features) GetBootloaderLocked() bool {
	if x != nil && x.BootloaderLocked != nil {
		return *x.BootloaderLocked
	}
	return false
}

func (x *Features) GetLanguageVersionMatches() bool {
	if x != nil && x.LanguageVersionMatches != nil {
		return *x.LanguageVersionMatches
	}
	return Default_Features_LanguageVersionMatches
}

func (x *Features) GetUnitPackaging() uint32 {
	if x != nil && x.UnitPackaging != nil {
		return *x.UnitPackaging
	}
	return 0
}

func (x *Features) GetHapticFeedback() bool {
	if x != nil && x.HapticFeedback != nil {
		return *x.HapticFeedback
	}
	return false
}

func (x *Features) GetRecoveryType() RecoveryType {
	if x != nil && x.RecoveryType != nil {
		return *x.RecoveryType
	}
	return RecoveryType_NormalRecovery
}

func (x *Features) GetOptigaSec() uint32 {
	if x != nil && x.OptigaSec != nil {
		return *x.OptigaSec
	}
	return 0
}

// *
// Request: soft-lock the device. Following actions will require PIN. Passphrases remain cached.
// @start
// @next Success
type LockDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockDevice) Reset() {
	*x = LockDevice{}
	mi := &file_messages_management_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockDevice) ProtoMessage() {}

func (x *LockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockDevice.ProtoReflect.Descriptor instead.
func (*LockDevice) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{3}
}

// *
// Request: Show a "Do not disconnect" dialog instead of the standard homescreen.
// @start
// @next Success
type SetBusy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExpiryMs      *uint32                `protobuf:"varint,1,opt,name=expiry_ms,json=expiryMs" json:"expiry_ms,omitempty"` // The time in milliseconds after which the dialog will automatically disappear. Overrides any previously set expiry. If not set, then the dialog is hidden.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetBusy) Reset() {
	*x = SetBusy{}
	mi := &file_messages_management_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBusy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBusy) ProtoMessage() {}

func (x *SetBusy) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBusy.ProtoReflect.Descriptor instead.
func (*SetBusy) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{4}
}

func (x *SetBusy) GetExpiryMs() uint32 {
	if x != nil && x.ExpiryMs != nil {
		return *x.ExpiryMs
	}
	return 0
}

// *
// Request: end the current sesson. Following actions must call Initialize again.
// Cache for the current session is discarded, other sessions remain intact.
// Device is not PIN-locked.
// @start
// @next Success
type EndSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndSession) Reset() {
	*x = EndSession{}
	mi := &file_messages_management_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSession) ProtoMessage() {}

func (x *EndSession) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSession.ProtoReflect.Descriptor instead.
func (*EndSession) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{5}
}

// *
// Request: change some property of the device, e.g. label or homescreen
// @start
// @next Success
// @next DataChunkRequest
// @next Failure
type ApplySettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in messages-management.proto.
	Language      *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Label         *string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	UsePassphrase *bool   `protobuf:"varint,3,opt,name=use_passphrase,json=usePassphrase" json:"use_passphrase,omitempty"`
	Homescreen    []byte  `protobuf:"bytes,4,opt,name=homescreen" json:"homescreen,omitempty"` // homescreen image in single array, deprecated for 14
	// Deprecated: Marked as deprecated in messages-management.proto.
	XPassphraseSource        *uint32           `protobuf:"varint,5,opt,name=_passphrase_source,json=PassphraseSource" json:"_passphrase_source,omitempty"` // ASK = 0; DEVICE = 1; HOST = 2;
	AutoLockDelayMs          *uint32           `protobuf:"varint,6,opt,name=auto_lock_delay_ms,json=autoLockDelayMs" json:"auto_lock_delay_ms,omitempty"`
	DisplayRotation          *DisplayRotation  `protobuf:"varint,7,opt,name=display_rotation,json=displayRotation,enum=hw.trezor.messages.management.DisplayRotation" json:"display_rotation,omitempty"` // rotation of display (in degrees from North)
	PassphraseAlwaysOnDevice *bool             `protobuf:"varint,8,opt,name=passphrase_always_on_device,json=passphraseAlwaysOnDevice" json:"passphrase_always_on_device,omitempty"`                     // do not prompt for passphrase, enforce device entry
	SafetyChecks             *SafetyCheckLevel `protobuf:"varint,9,opt,name=safety_checks,json=safetyChecks,enum=hw.trezor.messages.management.SafetyCheckLevel" json:"safety_checks,omitempty"`         // Safety check level, set to Prompt to limit path namespace enforcement
	ExperimentalFeatures     *bool             `protobuf:"varint,10,opt,name=experimental_features,json=experimentalFeatures" json:"experimental_features,omitempty"`                                    // enable experimental message types
	HidePassphraseFromHost   *bool             `protobuf:"varint,11,opt,name=hide_passphrase_from_host,json=hidePassphraseFromHost" json:"hide_passphrase_from_host,omitempty"`                          // do not show passphrase coming from host
	HapticFeedback           *bool             `protobuf:"varint,13,opt,name=haptic_feedback,json=hapticFeedback" json:"haptic_feedback,omitempty"`                                                      // enable haptic feedback
	HomescreenLength         *uint32           `protobuf:"varint,14,opt,name=homescreen_length,json=homescreenLength" json:"homescreen_length,omitempty"`                                                // byte length of new homescreen, device will request chunks
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ApplySettings) Reset() {
	*x = ApplySettings{}
	mi := &file_messages_management_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySettings) ProtoMessage() {}

func (x *ApplySettings) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySettings.ProtoReflect.Descriptor instead.
func (*ApplySettings) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Marked as deprecated in messages-management.proto.
func (x *ApplySettings) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *ApplySettings) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ApplySettings) GetUsePassphrase() bool {
	if x != nil && x.UsePassphrase != nil {
		return *x.UsePassphrase
	}
	return false
}

func (x *ApplySettings) GetHomescreen() []byte {
	if x != nil {
		return x.Homescreen
	}
	return nil
}

// Deprecated: Marked as deprecated in messages-management.proto.
func (x *ApplySettings) GetXPassphraseSource() uint32 {
	if x != nil && x.XPassphraseSource != nil {
		return *x.XPassphraseSource
	}
	return 0
}

func (x *ApplySettings) GetAutoLockDelayMs() uint32 {
	if x != nil && x.AutoLockDelayMs != nil {
		return *x.AutoLockDelayMs
	}
	return 0
}

func (x *ApplySettings) GetDisplayRotation() DisplayRotation {
	if x != nil && x.DisplayRotation != nil {
		return *x.DisplayRotation
	}
	return DisplayRotation_North
}

func (x *ApplySettings) GetPassphraseAlwaysOnDevice() bool {
	if x != nil && x.PassphraseAlwaysOnDevice != nil {
		return *x.PassphraseAlwaysOnDevice
	}
	return false
}

func (x *ApplySettings) GetSafetyChecks() SafetyCheckLevel {
	if x != nil && x.SafetyChecks != nil {
		return *x.SafetyChecks
	}
	return SafetyCheckLevel_Strict
}

func (x *ApplySettings) GetExperimentalFeatures() bool {
	if x != nil && x.ExperimentalFeatures != nil {
		return *x.ExperimentalFeatures
	}
	return false
}

func (x *ApplySettings) GetHidePassphraseFromHost() bool {
	if x != nil && x.HidePassphraseFromHost != nil {
		return *x.HidePassphraseFromHost
	}
	return false
}

func (x *ApplySettings) GetHapticFeedback() bool {
	if x != nil && x.HapticFeedback != nil {
		return *x.HapticFeedback
	}
	return false
}

func (x *ApplySettings) GetHomescreenLength() uint32 {
	if x != nil && x.HomescreenLength != nil {
		return *x.HomescreenLength
	}
	return 0
}

// *
// Request: change the device language via translation data.
// Does not send the translation data itself, as they are too large for one message.
// Device will request the translation data in chunks.
// @start
// @next DataChunkRequest
// @next Failure
type ChangeLanguage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// byte length of the whole translation blob (set to 0 for default language - english)
	DataLength *uint32 `protobuf:"varint,1,req,name=data_length,json=dataLength" json:"data_length,omitempty"`
	// Prompt the user on screen.
	// In certain conditions (such as freshly installed device), the confirmation prompt
	// is not mandatory. Setting show_display=false will skip the prompt if that's
	// the case. If the device does not allow skipping the prompt, a request with
	// show_display=false will return a failure. (This way the host can safely try
	// to change the language without invoking a prompt.)
	// Setting show_display to true will always show the prompt.
	// Leaving the option unset will show the prompt only when necessary.
	ShowDisplay   *bool `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeLanguage) Reset() {
	*x = ChangeLanguage{}
	mi := &file_messages_management_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLanguage) ProtoMessage() {}

func (x *ChangeLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLanguage.ProtoReflect.Descriptor instead.
func (*ChangeLanguage) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeLanguage) GetDataLength() uint32 {
	if x != nil && x.DataLength != nil {
		return *x.DataLength
	}
	return 0
}

func (x *ChangeLanguage) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

// *
// Response: Device asks for more data from translation/homescreen image.
// @end
// @next DataChunkAck
type DataChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataLength    *uint32                `protobuf:"varint,1,req,name=data_length,json=dataLength" json:"data_length,omitempty"` // Number of bytes being requested
	DataOffset    *uint32                `protobuf:"varint,2,req,name=data_offset,json=dataOffset" json:"data_offset,omitempty"` // Offset of the first byte being requested
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataChunkRequest) Reset() {
	*x = DataChunkRequest{}
	mi := &file_messages_management_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunkRequest) ProtoMessage() {}

func (x *DataChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunkRequest.ProtoReflect.Descriptor instead.
func (*DataChunkRequest) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{8}
}

func (x *DataChunkRequest) GetDataLength() uint32 {
	if x != nil && x.DataLength != nil {
		return *x.DataLength
	}
	return 0
}

func (x *DataChunkRequest) GetDataOffset() uint32 {
	if x != nil && x.DataOffset != nil {
		return *x.DataOffset
	}
	return 0
}

// *
// Request: Translation/homescreen payload data.
// @next DataChunkRequest
// @next Success
type DataChunkAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataChunk     []byte                 `protobuf:"bytes,1,req,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"` // Bytes from translation/homescreen payload
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataChunkAck) Reset() {
	*x = DataChunkAck{}
	mi := &file_messages_management_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunkAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunkAck) ProtoMessage() {}

func (x *DataChunkAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunkAck.ProtoReflect.Descriptor instead.
func (*DataChunkAck) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{9}
}

func (x *DataChunkAck) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

// *
// Request: set flags of the device
// @start
// @next Success
// @next Failure
type ApplyFlags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flags         *uint32                `protobuf:"varint,1,req,name=flags" json:"flags,omitempty"` // bitmask, can only set bits, not unset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyFlags) Reset() {
	*x = ApplyFlags{}
	mi := &file_messages_management_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFlags) ProtoMessage() {}

func (x *ApplyFlags) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFlags.ProtoReflect.Descriptor instead.
func (*ApplyFlags) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{10}
}

func (x *ApplyFlags) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

// *
// Request: Starts workflow for setting/changing/removing the PIN
// @start
// @next Success
// @next Failure
type ChangePin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Remove        *bool                  `protobuf:"varint,1,opt,name=remove" json:"remove,omitempty"` // is PIN removal requested?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangePin) Reset() {
	*x = ChangePin{}
	mi := &file_messages_management_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePin) ProtoMessage() {}

func (x *ChangePin) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePin.ProtoReflect.Descriptor instead.
func (*ChangePin) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{11}
}

func (x *ChangePin) GetRemove() bool {
	if x != nil && x.Remove != nil {
		return *x.Remove
	}
	return false
}

// *
// Request: Starts workflow for setting/removing the wipe code
// @start
// @next Success
// @next Failure
type ChangeWipeCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Remove        *bool                  `protobuf:"varint,1,opt,name=remove" json:"remove,omitempty"` // is wipe code removal requested?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeWipeCode) Reset() {
	*x = ChangeWipeCode{}
	mi := &file_messages_management_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeWipeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeWipeCode) ProtoMessage() {}

func (x *ChangeWipeCode) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeWipeCode.ProtoReflect.Descriptor instead.
func (*ChangeWipeCode) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{12}
}

func (x *ChangeWipeCode) GetRemove() bool {
	if x != nil && x.Remove != nil {
		return *x.Remove
	}
	return false
}

// *
// Request: Starts workflow for enabling/regenerating/disabling SD card protection
// @start
// @next Success
// @next Failure
type SdProtect struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Operation     *SdProtect_SdProtectOperationType `protobuf:"varint,1,req,name=operation,enum=hw.trezor.messages.management.SdProtect_SdProtectOperationType" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SdProtect) Reset() {
	*x = SdProtect{}
	mi := &file_messages_management_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SdProtect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdProtect) ProtoMessage() {}

func (x *SdProtect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdProtect.ProtoReflect.Descriptor instead.
func (*SdProtect) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{13}
}

func (x *SdProtect) GetOperation() SdProtect_SdProtectOperationType {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return SdProtect_DISABLE
}

// *
// Request: Test if the device is alive, device sends back the message in Success response
// @start
// @next Success
type Ping struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Message          *string                `protobuf:"bytes,1,opt,name=message,def=" json:"message,omitempty"`                                       // message to send back in Success message
	ButtonProtection *bool                  `protobuf:"varint,2,opt,name=button_protection,json=buttonProtection" json:"button_protection,omitempty"` // ask for button press
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for Ping fields.
const (
	Default_Ping_Message = string("")
)

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_messages_management_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{14}
}

func (x *Ping) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return Default_Ping_Message
}

func (x *Ping) GetButtonProtection() bool {
	if x != nil && x.ButtonProtection != nil {
		return *x.ButtonProtection
	}
	return false
}

// *
// Request: Abort last operation that required user interaction
// @start
// @next Failure
type Cancel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cancel) Reset() {
	*x = Cancel{}
	mi := &file_messages_management_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cancel) ProtoMessage() {}

func (x *Cancel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cancel.ProtoReflect.Descriptor instead.
func (*Cancel) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{15}
}

// *
// Request: Request a sample of random data generated by hardware RNG. May be used for testing.
// @start
// @next Entropy
// @next Failure
type GetEntropy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          *uint32                `protobuf:"varint,1,req,name=size" json:"size,omitempty"` // size of requested entropy
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntropy) Reset() {
	*x = GetEntropy{}
	mi := &file_messages_management_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntropy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntropy) ProtoMessage() {}

func (x *GetEntropy) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntropy.ProtoReflect.Descriptor instead.
func (*GetEntropy) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{16}
}

func (x *GetEntropy) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

// *
// Response: Reply with random data generated by internal RNG
// @end
type Entropy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entropy       []byte                 `protobuf:"bytes,1,req,name=entropy" json:"entropy,omitempty"` // chunk of random generated bytes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entropy) Reset() {
	*x = Entropy{}
	mi := &file_messages_management_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entropy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entropy) ProtoMessage() {}

func (x *Entropy) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entropy.ProtoReflect.Descriptor instead.
func (*Entropy) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{17}
}

func (x *Entropy) GetEntropy() []byte {
	if x != nil {
		return x.Entropy
	}
	return nil
}

// *
// Request: Get a hash of the installed firmware combined with an optional challenge.
// @start
// @next FirmwareHash
// @next Failure
type GetFirmwareHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenge     []byte                 `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"` // Blake2s key up to 32 bytes in length.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFirmwareHash) Reset() {
	*x = GetFirmwareHash{}
	mi := &file_messages_management_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFirmwareHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirmwareHash) ProtoMessage() {}

func (x *GetFirmwareHash) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirmwareHash.ProtoReflect.Descriptor instead.
func (*GetFirmwareHash) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{18}
}

func (x *GetFirmwareHash) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

// *
// Response: Hash of the installed firmware combined with the optional challenge.
// @end
type FirmwareHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,req,name=hash" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirmwareHash) Reset() {
	*x = FirmwareHash{}
	mi := &file_messages_management_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirmwareHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareHash) ProtoMessage() {}

func (x *FirmwareHash) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareHash.ProtoReflect.Descriptor instead.
func (*FirmwareHash) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{19}
}

func (x *FirmwareHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// *
// Request: Request a signature of the provided challenge.
// @start
// @next AuthenticityProof
// @next Failure
type AuthenticateDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenge     []byte                 `protobuf:"bytes,1,req,name=challenge" json:"challenge,omitempty"` // A random challenge to sign.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateDevice) Reset() {
	*x = AuthenticateDevice{}
	mi := &file_messages_management_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateDevice) ProtoMessage() {}

func (x *AuthenticateDevice) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateDevice.ProtoReflect.Descriptor instead.
func (*AuthenticateDevice) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{20}
}

func (x *AuthenticateDevice) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

// *
// Response: Signature of the provided challenge along with a certificate issued by the Trezor company.
// @end
type AuthenticityProof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificates  [][]byte               `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"` // A certificate chain starting with the device certificate, followed by intermediate CA certificates, the last of which is signed by Trezor company's root CA.
	Signature     []byte                 `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`       // A DER-encoded signature of "\0x13AuthenticateDevice:" + length-prefixed challenge that should be verified using the device certificate.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticityProof) Reset() {
	*x = AuthenticityProof{}
	mi := &file_messages_management_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticityProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticityProof) ProtoMessage() {}

func (x *AuthenticityProof) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticityProof.ProtoReflect.Descriptor instead.
func (*AuthenticityProof) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{21}
}

func (x *AuthenticityProof) GetCertificates() [][]byte {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *AuthenticityProof) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// *
// Request: Request device to wipe all sensitive data and settings
// @start
// @next Success
// @next Failure
type WipeDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WipeDevice) Reset() {
	*x = WipeDevice{}
	mi := &file_messages_management_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WipeDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WipeDevice) ProtoMessage() {}

func (x *WipeDevice) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WipeDevice.ProtoReflect.Descriptor instead.
func (*WipeDevice) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{22}
}

// *
// Request: Load seed and related internal settings from the computer
// @start
// @next Success
// @next Failure
type LoadDevice struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Mnemonics            []string               `protobuf:"bytes,1,rep,name=mnemonics" json:"mnemonics,omitempty"`                                                    // seed encoded as mnemonic (12, 18 or 24 words for BIP39, 20 or 33 for SLIP39)
	Pin                  *string                `protobuf:"bytes,3,opt,name=pin" json:"pin,omitempty"`                                                                // set PIN protection
	PassphraseProtection *bool                  `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"` // enable master node encryption using passphrase
	// Deprecated: Marked as deprecated in messages-management.proto.
	Language      *string `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`                              // deprecated (use ChangeLanguage)
	Label         *string `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`                                    // device label
	SkipChecksum  *bool   `protobuf:"varint,7,opt,name=skip_checksum,json=skipChecksum" json:"skip_checksum,omitempty"` // do not test mnemonic for valid BIP-39 checksum
	U2FCounter    *uint32 `protobuf:"varint,8,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`       // U2F counter
	NeedsBackup   *bool   `protobuf:"varint,9,opt,name=needs_backup,json=needsBackup" json:"needs_backup,omitempty"`    // set "needs backup" flag
	NoBackup      *bool   `protobuf:"varint,10,opt,name=no_backup,json=noBackup" json:"no_backup,omitempty"`            // indicate that no backup is going to be made
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadDevice) Reset() {
	*x = LoadDevice{}
	mi := &file_messages_management_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadDevice) ProtoMessage() {}

func (x *LoadDevice) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadDevice.ProtoReflect.Descriptor instead.
func (*LoadDevice) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{23}
}

func (x *LoadDevice) GetMnemonics() []string {
	if x != nil {
		return x.Mnemonics
	}
	return nil
}

func (x *LoadDevice) GetPin() string {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return ""
}

func (x *LoadDevice) GetPassphraseProtection() bool {
	if x != nil && x.PassphraseProtection != nil {
		return *x.PassphraseProtection
	}
	return false
}

// Deprecated: Marked as deprecated in messages-management.proto.
func (x *LoadDevice) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *LoadDevice) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *LoadDevice) GetSkipChecksum() bool {
	if x != nil && x.SkipChecksum != nil {
		return *x.SkipChecksum
	}
	return false
}

func (x *LoadDevice) GetU2FCounter() uint32 {
	if x != nil && x.U2FCounter != nil {
		return *x.U2FCounter
	}
	return 0
}

func (x *LoadDevice) GetNeedsBackup() bool {
	if x != nil && x.NeedsBackup != nil {
		return *x.NeedsBackup
	}
	return false
}

func (x *LoadDevice) GetNoBackup() bool {
	if x != nil && x.NoBackup != nil {
		return *x.NoBackup
	}
	return false
}

// *
// Request: Ask device to do initialization involving user interaction
// @start
// @next EntropyRequest
// @next Failure
type ResetDevice struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Strength             *uint32                `protobuf:"varint,2,opt,name=strength,def=256" json:"strength,omitempty"`                                             // strength of seed in bits
	PassphraseProtection *bool                  `protobuf:"varint,3,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"` // enable master node encryption using passphrase
	PinProtection        *bool                  `protobuf:"varint,4,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`                      // enable PIN protection
	// Deprecated: Marked as deprecated in messages-management.proto.
	Language      *string     `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`                                                                             // deprecated (use ChangeLanguage)
	Label         *string     `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`                                                                                   // device label
	U2FCounter    *uint32     `protobuf:"varint,7,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`                                                      // U2F counter
	SkipBackup    *bool       `protobuf:"varint,8,opt,name=skip_backup,json=skipBackup" json:"skip_backup,omitempty"`                                                      // postpone seed backup to BackupDevice workflow
	NoBackup      *bool       `protobuf:"varint,9,opt,name=no_backup,json=noBackup" json:"no_backup,omitempty"`                                                            // indicate that no backup is going to be made
	BackupType    *BackupType `protobuf:"varint,10,opt,name=backup_type,json=backupType,enum=hw.trezor.messages.management.BackupType,def=0" json:"backup_type,omitempty"` // type of the mnemonic backup
	EntropyCheck  *bool       `protobuf:"varint,11,opt,name=entropy_check,json=entropyCheck" json:"entropy_check,omitempty"`                                               // run with entropy check protocol
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ResetDevice fields.
const (
	Default_ResetDevice_Strength   = uint32(256)
	Default_ResetDevice_BackupType = BackupType_Bip39
)

func (x *ResetDevice) Reset() {
	*x = ResetDevice{}
	mi := &file_messages_management_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetDevice) ProtoMessage() {}

func (x *ResetDevice) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetDevice.ProtoReflect.Descriptor instead.
func (*ResetDevice) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{24}
}

func (x *ResetDevice) GetStrength() uint32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return Default_ResetDevice_Strength
}

func (x *ResetDevice) GetPassphraseProtection() bool {
	if x != nil && x.PassphraseProtection != nil {
		return *x.PassphraseProtection
	}
	return false
}

func (x *ResetDevice) GetPinProtection() bool {
	if x != nil && x.PinProtection != nil {
		return *x.PinProtection
	}
	return false
}

// Deprecated: Marked as deprecated in messages-management.proto.
func (x *ResetDevice) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *ResetDevice) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ResetDevice) GetU2FCounter() uint32 {
	if x != nil && x.U2FCounter != nil {
		return *x.U2FCounter
	}
	return 0
}

func (x *ResetDevice) GetSkipBackup() bool {
	if x != nil && x.SkipBackup != nil {
		return *x.SkipBackup
	}
	return false
}

func (x *ResetDevice) GetNoBackup() bool {
	if x != nil && x.NoBackup != nil {
		return *x.NoBackup
	}
	return false
}

func (x *ResetDevice) GetBackupType() BackupType {
	if x != nil && x.BackupType != nil {
		return *x.BackupType
	}
	return Default_ResetDevice_BackupType
}

func (x *ResetDevice) GetEntropyCheck() bool {
	if x != nil && x.EntropyCheck != nil {
		return *x.EntropyCheck
	}
	return false
}

// *
// Request: Perform backup of the device seed if not backed up using ResetDevice
// @start
// @next Success
type BackupDevice struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	GroupThreshold *uint32                     `protobuf:"varint,1,opt,name=group_threshold,json=groupThreshold" json:"group_threshold,omitempty"`
	Groups         []*BackupDevice_Slip39Group `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BackupDevice) Reset() {
	*x = BackupDevice{}
	mi := &file_messages_management_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDevice) ProtoMessage() {}

func (x *BackupDevice) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDevice.ProtoReflect.Descriptor instead.
func (*BackupDevice) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{25}
}

func (x *BackupDevice) GetGroupThreshold() uint32 {
	if x != nil && x.GroupThreshold != nil {
		return *x.GroupThreshold
	}
	return 0
}

func (x *BackupDevice) GetGroups() []*BackupDevice_Slip39Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

// *
// Response: Ask for additional entropy from host computer
// @next EntropyAck
type EntropyRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EntropyCommitment []byte                 `protobuf:"bytes,1,opt,name=entropy_commitment,json=entropyCommitment" json:"entropy_commitment,omitempty"` // HMAC-SHA256 of Trezor's internal entropy used in entropy check.
	PrevEntropy       []byte                 `protobuf:"bytes,2,opt,name=prev_entropy,json=prevEntropy" json:"prev_entropy,omitempty"`                   // Trezor's internal entropy from the previous round of entropy check.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EntropyRequest) Reset() {
	*x = EntropyRequest{}
	mi := &file_messages_management_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntropyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntropyRequest) ProtoMessage() {}

func (x *EntropyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntropyRequest.ProtoReflect.Descriptor instead.
func (*EntropyRequest) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{26}
}

func (x *EntropyRequest) GetEntropyCommitment() []byte {
	if x != nil {
		return x.EntropyCommitment
	}
	return nil
}

func (x *EntropyRequest) GetPrevEntropy() []byte {
	if x != nil {
		return x.PrevEntropy
	}
	return nil
}

// *
// Request: Provide additional entropy for seed generation function
// @next Success
// @next EntropyCheckReady
type EntropyAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entropy       []byte                 `protobuf:"bytes,1,req,name=entropy" json:"entropy,omitempty"` // 256 bits (32 bytes) of the host's random data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntropyAck) Reset() {
	*x = EntropyAck{}
	mi := &file_messages_management_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntropyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntropyAck) ProtoMessage() {}

func (x *EntropyAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntropyAck.ProtoReflect.Descriptor instead.
func (*EntropyAck) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{27}
}

func (x *EntropyAck) GetEntropy() []byte {
	if x != nil {
		return x.Entropy
	}
	return nil
}

// *
// Response: Trezor is ready for the next phase of the entropy check protocol.
// @next EntropyCheckContinue
// @next GetPublicKey
type EntropyCheckReady struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntropyCheckReady) Reset() {
	*x = EntropyCheckReady{}
	mi := &file_messages_management_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntropyCheckReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntropyCheckReady) ProtoMessage() {}

func (x *EntropyCheckReady) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntropyCheckReady.ProtoReflect.Descriptor instead.
func (*EntropyCheckReady) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{28}
}

// *
// Request: Proceed with the next phase of the entropy check protocol, asking Trezor to either reveal its internal entropy or to finish and store the seed.
// @next Success
// @next EntropyRequest
type EntropyCheckContinue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Finish        *bool                  `protobuf:"varint,1,opt,name=finish,def=0" json:"finish,omitempty"` // finish the entropy check protocol, store the seed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntropyCheckContinue fields.
const (
	Default_EntropyCheckContinue_Finish = bool(false)
)

func (x *EntropyCheckContinue) Reset() {
	*x = EntropyCheckContinue{}
	mi := &file_messages_management_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntropyCheckContinue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntropyCheckContinue) ProtoMessage() {}

func (x *EntropyCheckContinue) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntropyCheckContinue.ProtoReflect.Descriptor instead.
func (*EntropyCheckContinue) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{29}
}

func (x *EntropyCheckContinue) GetFinish() bool {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return Default_EntropyCheckContinue_Finish
}

// *
// Request: Start recovery workflow asking user for specific words of mnemonic
// Used to recovery device safely even on untrusted computer.
// @start
// @next WordRequest
type RecoveryDevice struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WordCount            *uint32                `protobuf:"varint,1,opt,name=word_count,json=wordCount" json:"word_count,omitempty"`                                  // number of words in BIP-39 mnemonic (T1 only)
	PassphraseProtection *bool                  `protobuf:"varint,2,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"` // enable master node encryption using passphrase
	PinProtection        *bool                  `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`                      // enable PIN protection
	// Deprecated: Marked as deprecated in messages-management.proto.
	Language        *string                                   `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`                                                                                                       // deprecated (use ChangeLanguage)
	Label           *string                                   `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`                                                                                                             // device label
	EnforceWordlist *bool                                     `protobuf:"varint,6,opt,name=enforce_wordlist,json=enforceWordlist" json:"enforce_wordlist,omitempty"`                                                                 // enforce BIP-39 wordlist during the process (T1 only)
	InputMethod     *RecoveryDevice_RecoveryDeviceInputMethod `protobuf:"varint,8,opt,name=input_method,json=inputMethod,enum=hw.trezor.messages.management.RecoveryDevice_RecoveryDeviceInputMethod" json:"input_method,omitempty"` // supported recovery input method (T1 only)
	U2FCounter      *uint32                                   `protobuf:"varint,9,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`                                                                                // U2F counter
	Type            *RecoveryType                             `protobuf:"varint,10,opt,name=type,enum=hw.trezor.messages.management.RecoveryType,def=0" json:"type,omitempty"`                                                       // the type of recovery to perform
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for RecoveryDevice fields.
const (
	Default_RecoveryDevice_Type = RecoveryType_NormalRecovery
)

func (x *RecoveryDevice) Reset() {
	*x = RecoveryDevice{}
	mi := &file_messages_management_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoveryDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryDevice) ProtoMessage() {}

func (x *RecoveryDevice) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryDevice.ProtoReflect.Descriptor instead.
func (*RecoveryDevice) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{30}
}

func (x *RecoveryDevice) GetWordCount() uint32 {
	if x != nil && x.WordCount != nil {
		return *x.WordCount
	}
	return 0
}

func (x *RecoveryDevice) GetPassphraseProtection() bool {
	if x != nil && x.PassphraseProtection != nil {
		return *x.PassphraseProtection
	}
	return false
}

func (x *RecoveryDevice) GetPinProtection() bool {
	if x != nil && x.PinProtection != nil {
		return *x.PinProtection
	}
	return false
}

// Deprecated: Marked as deprecated in messages-management.proto.
func (x *RecoveryDevice) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *RecoveryDevice) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *RecoveryDevice) GetEnforceWordlist() bool {
	if x != nil && x.EnforceWordlist != nil {
		return *x.EnforceWordlist
	}
	return false
}

func (x *RecoveryDevice) GetInputMethod() RecoveryDevice_RecoveryDeviceInputMethod {
	if x != nil && x.InputMethod != nil {
		return *x.InputMethod
	}
	return RecoveryDevice_ScrambledWords
}

func (x *RecoveryDevice) GetU2FCounter() uint32 {
	if x != nil && x.U2FCounter != nil {
		return *x.U2FCounter
	}
	return 0
}

func (x *RecoveryDevice) GetType() RecoveryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_RecoveryDevice_Type
}

// *
// Response: Device is waiting for user to enter word of the mnemonic
// Its position is shown only on device's internal display.
// @next WordAck
type WordRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Type          *WordRequest_WordRequestType `protobuf:"varint,1,req,name=type,enum=hw.trezor.messages.management.WordRequest_WordRequestType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WordRequest) Reset() {
	*x = WordRequest{}
	mi := &file_messages_management_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordRequest) ProtoMessage() {}

func (x *WordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordRequest.ProtoReflect.Descriptor instead.
func (*WordRequest) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{31}
}

func (x *WordRequest) GetType() WordRequest_WordRequestType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return WordRequest_WordRequestType_Plain
}

// *
// Request: Computer replies with word from the mnemonic
// @next WordRequest
// @next Success
// @next Failure
type WordAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Word          *string                `protobuf:"bytes,1,req,name=word" json:"word,omitempty"` // one word of mnemonic on asked position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WordAck) Reset() {
	*x = WordAck{}
	mi := &file_messages_management_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WordAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordAck) ProtoMessage() {}

func (x *WordAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordAck.ProtoReflect.Descriptor instead.
func (*WordAck) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{32}
}

func (x *WordAck) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

// *
// Request: Set U2F counter
// @start
// @next Success
type SetU2FCounter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	U2FCounter    *uint32                `protobuf:"varint,1,req,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetU2FCounter) Reset() {
	*x = SetU2FCounter{}
	mi := &file_messages_management_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetU2FCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetU2FCounter) ProtoMessage() {}

func (x *SetU2FCounter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetU2FCounter.ProtoReflect.Descriptor instead.
func (*SetU2FCounter) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{33}
}

func (x *SetU2FCounter) GetU2FCounter() uint32 {
	if x != nil && x.U2FCounter != nil {
		return *x.U2FCounter
	}
	return 0
}

// *
// Request: Set U2F counter
// @start
// @next NextU2FCounter
type GetNextU2FCounter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNextU2FCounter) Reset() {
	*x = GetNextU2FCounter{}
	mi := &file_messages_management_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextU2FCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextU2FCounter) ProtoMessage() {}

func (x *GetNextU2FCounter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextU2FCounter.ProtoReflect.Descriptor instead.
func (*GetNextU2FCounter) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{34}
}

// *
// Request: Set U2F counter
// @end
type NextU2FCounter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	U2FCounter    *uint32                `protobuf:"varint,1,req,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextU2FCounter) Reset() {
	*x = NextU2FCounter{}
	mi := &file_messages_management_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextU2FCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextU2FCounter) ProtoMessage() {}

func (x *NextU2FCounter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextU2FCounter.ProtoReflect.Descriptor instead.
func (*NextU2FCounter) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{35}
}

func (x *NextU2FCounter) GetU2FCounter() uint32 {
	if x != nil && x.U2FCounter != nil {
		return *x.U2FCounter
	}
	return 0
}

// *
// Request: Ask device to prepare for a preauthorized operation.
// @start
// @next PreauthorizedRequest
// @next Failure
type DoPreauthorized struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoPreauthorized) Reset() {
	*x = DoPreauthorized{}
	mi := &file_messages_management_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoPreauthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoPreauthorized) ProtoMessage() {}

func (x *DoPreauthorized) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoPreauthorized.ProtoReflect.Descriptor instead.
func (*DoPreauthorized) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{36}
}

// *
// Request: Device awaits a preauthorized operation.
// @start
// @next SignTx
// @next GetOwnershipProof
type PreauthorizedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreauthorizedRequest) Reset() {
	*x = PreauthorizedRequest{}
	mi := &file_messages_management_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreauthorizedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreauthorizedRequest) ProtoMessage() {}

func (x *PreauthorizedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreauthorizedRequest.ProtoReflect.Descriptor instead.
func (*PreauthorizedRequest) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{37}
}

// *
// Request: Cancel any outstanding authorization in the current session.
// @start
// @next Success
// @next Failure
type CancelAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelAuthorization) Reset() {
	*x = CancelAuthorization{}
	mi := &file_messages_management_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAuthorization) ProtoMessage() {}

func (x *CancelAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAuthorization.ProtoReflect.Descriptor instead.
func (*CancelAuthorization) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{38}
}

// *
// Request: Reboot firmware to bootloader
// @start
// @next Success
// @next DataChunkRequest
type RebootToBootloader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Action to be performed after rebooting to bootloader
	BootCommand *RebootToBootloader_BootCommand `protobuf:"varint,1,opt,name=boot_command,json=bootCommand,enum=hw.trezor.messages.management.RebootToBootloader_BootCommand,def=0" json:"boot_command,omitempty"`
	// Firmware header to be flashed after rebooting to bootloader
	FirmwareHeader []byte `protobuf:"bytes,2,opt,name=firmware_header,json=firmwareHeader" json:"firmware_header,omitempty"`
	// Length of language blob to be installed before upgrading firmware
	LanguageDataLength *uint32 `protobuf:"varint,3,opt,name=language_data_length,json=languageDataLength,def=0" json:"language_data_length,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for RebootToBootloader fields.
const (
	Default_RebootToBootloader_BootCommand        = RebootToBootloader_STOP_AND_WAIT
	Default_RebootToBootloader_LanguageDataLength = uint32(0)
)

func (x *RebootToBootloader) Reset() {
	*x = RebootToBootloader{}
	mi := &file_messages_management_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebootToBootloader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootToBootloader) ProtoMessage() {}

func (x *RebootToBootloader) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootToBootloader.ProtoReflect.Descriptor instead.
func (*RebootToBootloader) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{39}
}

func (x *RebootToBootloader) GetBootCommand() RebootToBootloader_BootCommand {
	if x != nil && x.BootCommand != nil {
		return *x.BootCommand
	}
	return Default_RebootToBootloader_BootCommand
}

func (x *RebootToBootloader) GetFirmwareHeader() []byte {
	if x != nil {
		return x.FirmwareHeader
	}
	return nil
}

func (x *RebootToBootloader) GetLanguageDataLength() uint32 {
	if x != nil && x.LanguageDataLength != nil {
		return *x.LanguageDataLength
	}
	return Default_RebootToBootloader_LanguageDataLength
}

// *
// Request: Ask device to generate a random nonce and store it in the session's cache
// @start
// @next Nonce
type GetNonce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNonce) Reset() {
	*x = GetNonce{}
	mi := &file_messages_management_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNonce) ProtoMessage() {}

func (x *GetNonce) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNonce.ProtoReflect.Descriptor instead.
func (*GetNonce) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{40}
}

// *
// Response: Contains a random nonce
// @end
type Nonce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         []byte                 `protobuf:"bytes,1,req,name=nonce" json:"nonce,omitempty"` // a 32-byte random value generated by Trezor
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Nonce) Reset() {
	*x = Nonce{}
	mi := &file_messages_management_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Nonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nonce) ProtoMessage() {}

func (x *Nonce) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nonce.ProtoReflect.Descriptor instead.
func (*Nonce) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{41}
}

func (x *Nonce) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// *
// Request: Ask device to unlock a subtree of the keychain.
// @start
// @next UnlockedPathRequest
// @next Failure
type UnlockPath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressN      []uint32               `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"` // prefix of the BIP-32 path leading to the account (m / purpose')
	Mac           []byte                 `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`                            // the MAC returned by UnlockedPathRequest
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlockPath) Reset() {
	*x = UnlockPath{}
	mi := &file_messages_management_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockPath) ProtoMessage() {}

func (x *UnlockPath) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockPath.ProtoReflect.Descriptor instead.
func (*UnlockPath) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{42}
}

func (x *UnlockPath) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *UnlockPath) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

// *
// Request: Device awaits an operation.
// @start
// @next SignTx
// @next GetPublicKey
// @next GetAddress
type UnlockedPathRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mac           []byte                 `protobuf:"bytes,1,req,name=mac" json:"mac,omitempty"` // authentication code for future UnlockPath calls
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlockedPathRequest) Reset() {
	*x = UnlockedPathRequest{}
	mi := &file_messages_management_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockedPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockedPathRequest) ProtoMessage() {}

func (x *UnlockedPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockedPathRequest.ProtoReflect.Descriptor instead.
func (*UnlockedPathRequest) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{43}
}

func (x *UnlockedPathRequest) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

// *
// Request: Show tutorial screens on the device
// @start
// @next Success
type ShowDeviceTutorial struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShowDeviceTutorial) Reset() {
	*x = ShowDeviceTutorial{}
	mi := &file_messages_management_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowDeviceTutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDeviceTutorial) ProtoMessage() {}

func (x *ShowDeviceTutorial) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDeviceTutorial.ProtoReflect.Descriptor instead.
func (*ShowDeviceTutorial) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{44}
}

// *
// Request: Unlocks bootloader, !irreversible!
// @start
// @next Success
// @next Failure
type UnlockBootloader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlockBootloader) Reset() {
	*x = UnlockBootloader{}
	mi := &file_messages_management_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockBootloader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockBootloader) ProtoMessage() {}

func (x *UnlockBootloader) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockBootloader.ProtoReflect.Descriptor instead.
func (*UnlockBootloader) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{45}
}

// *
// Request: Set device brightness
// @start
// @next Success
type SetBrightness struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *uint32                `protobuf:"varint,1,opt,name=value" json:"value,omitempty"` // if not specified, let the user choose
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetBrightness) Reset() {
	*x = SetBrightness{}
	mi := &file_messages_management_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBrightness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBrightness) ProtoMessage() {}

func (x *SetBrightness) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBrightness.ProtoReflect.Descriptor instead.
func (*SetBrightness) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{46}
}

func (x *SetBrightness) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type BackupDevice_Slip39Group struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MemberThreshold *uint32                `protobuf:"varint,1,req,name=member_threshold,json=memberThreshold" json:"member_threshold,omitempty"`
	MemberCount     *uint32                `protobuf:"varint,2,req,name=member_count,json=memberCount" json:"member_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BackupDevice_Slip39Group) Reset() {
	*x = BackupDevice_Slip39Group{}
	mi := &file_messages_management_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupDevice_Slip39Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDevice_Slip39Group) ProtoMessage() {}

func (x *BackupDevice_Slip39Group) ProtoReflect() protoreflect.Message {
	mi := &file_messages_management_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDevice_Slip39Group.ProtoReflect.Descriptor instead.
func (*BackupDevice_Slip39Group) Descriptor() ([]byte, []int) {
	return file_messages_management_proto_rawDescGZIP(), []int{25, 0}
}

func (x *BackupDevice_Slip39Group) GetMemberThreshold() uint32 {
	if x != nil && x.MemberThreshold != nil {
		return *x.MemberThreshold
	}
	return 0
}

func (x *BackupDevice_Slip39Group) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

var File_messages_management_proto protoreflect.FileDescriptor

const file_messages_management_proto_rawDesc = "" +
	"\n" +
	"\x19messages-management.proto\x12\x1dhw.trezor.messages.management\x1a\roptions.proto\"\x80\x01\n" +
	"\n" +
	"Initialize\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\fR\tsessionId\x12,\n" +
	"\x10_skip_passphrase\x18\x02 \x01(\bB\x02\x18\x01R\x0eSkipPassphrase\x12%\n" +
	"\x0ederive_cardano\x18\x03 \x01(\bR\rderiveCardano\"\r\n" +
	"\vGetFeatures\"\xba\x18\n" +
	"\bFeatures\x12\x16\n" +
	"\x06vendor\x18\x01 \x01(\tR\x06vendor\x12#\n" +
	"\rmajor_version\x18\x02 \x02(\rR\fmajorVersion\x12#\n" +
	"\rminor_version\x18\x03 \x02(\rR\fminorVersion\x12#\n" +
	"\rpatch_version\x18\x04 \x02(\rR\fpatchVersion\x12'\n" +
	"\x0fbootloader_mode\x18\x05 \x01(\bR\x0ebootloaderMode\x12\x1b\n" +
	"\tdevice_id\x18\x06 \x01(\tR\bdeviceId\x12%\n" +
	"\x0epin_protection\x18\a \x01(\bR\rpinProtection\x123\n" +
	"\x15passphrase_protection\x18\b \x01(\bR\x14passphraseProtection\x12\x1a\n" +
	"\blanguage\x18\t \x01(\tR\blanguage\x12\x14\n" +
	"\x05label\x18\n" +
	" \x01(\tR\x05label\x12 \n" +
	"\vinitialized\x18\f \x01(\bR\vinitialized\x12\x1a\n" +
	"\brevision\x18\r \x01(\fR\brevision\x12'\n" +
	"\x0fbootloader_hash\x18\x0e \x01(\fR\x0ebootloaderHash\x12\x1a\n" +
	"\bimported\x18\x0f \x01(\bR\bimported\x12\x1a\n" +
	"\bunlocked\x18\x10 \x01(\bR\bunlocked\x120\n" +
	"\x12_passphrase_cached\x18\x11 \x01(\bB\x02\x18\x01R\x10PassphraseCached\x12)\n" +
	"\x10firmware_present\x18\x12 \x01(\bR\x0ffirmwarePresent\x12k\n" +
	"\x13backup_availability\x18\x13 \x01(\x0e2:.hw.trezor.messages.management.Features.BackupAvailabilityR\x12backupAvailability\x12\x14\n" +
	"\x05flags\x18\x14 \x01(\rR\x05flags\x12\x14\n" +
	"\x05model\x18\x15 \x01(\tR\x05model\x12\x19\n" +
	"\bfw_major\x18\x16 \x01(\rR\afwMajor\x12\x19\n" +
	"\bfw_minor\x18\x17 \x01(\rR\afwMinor\x12\x19\n" +
	"\bfw_patch\x18\x18 \x01(\rR\afwPatch\x12\x1b\n" +
	"\tfw_vendor\x18\x19 \x01(\tR\bfwVendor\x12+\n" +
	"\x11unfinished_backup\x18\x1b \x01(\bR\x10unfinishedBackup\x12\x1b\n" +
	"\tno_backup\x18\x1c \x01(\bR\bnoBackup\x12_\n" +
	"\x0frecovery_status\x18\x1d \x01(\x0e26.hw.trezor.messages.management.Features.RecoveryStatusR\x0erecoveryStatus\x12V\n" +
	"\fcapabilities\x18\x1e \x03(\x0e22.hw.trezor.messages.management.Features.CapabilityR\fcapabilities\x12J\n" +
	"\vbackup_type\x18\x1f \x01(\x0e2).hw.trezor.messages.management.BackupTypeR\n" +
	"backupType\x12&\n" +
	"\x0fsd_card_present\x18  \x01(\bR\rsdCardPresent\x12#\n" +
	"\rsd_protection\x18! \x01(\bR\fsdProtection\x120\n" +
	"\x14wipe_code_protection\x18\" \x01(\bR\x12wipeCodeProtection\x12\x1d\n" +
	"\n" +
	"session_id\x18# \x01(\fR\tsessionId\x12=\n" +
	"\x1bpassphrase_always_on_device\x18$ \x01(\bR\x18passphraseAlwaysOnDevice\x12T\n" +
	"\rsafety_checks\x18% \x01(\x0e2/.hw.trezor.messages.management.SafetyCheckLevelR\fsafetyChecks\x12+\n" +
	"\x12auto_lock_delay_ms\x18& \x01(\rR\x0fautoLockDelayMs\x12Y\n" +
	"\x10display_rotation\x18' \x01(\x0e2..hw.trezor.messages.management.DisplayRotationR\x0fdisplayRotation\x123\n" +
	"\x15experimental_features\x18( \x01(\bR\x14experimentalFeatures\x12\x12\n" +
	"\x04busy\x18) \x01(\bR\x04busy\x12\\\n" +
	"\x11homescreen_format\x18* \x01(\x0e2/.hw.trezor.messages.management.HomescreenFormatR\x10homescreenFormat\x129\n" +
	"\x19hide_passphrase_from_host\x18+ \x01(\bR\x16hidePassphraseFromHost\x12%\n" +
	"\x0einternal_model\x18, \x01(\tR\rinternalModel\x12\x1d\n" +
	"\n" +
	"unit_color\x18- \x01(\rR\tunitColor\x12!\n" +
	"\funit_btconly\x18. \x01(\bR\vunitBtconly\x12)\n" +
	"\x10homescreen_width\x18/ \x01(\rR\x0fhomescreenWidth\x12+\n" +
	"\x11homescreen_height\x180 \x01(\rR\x10homescreenHeight\x12+\n" +
	"\x11bootloader_locked\x181 \x01(\bR\x10bootloaderLocked\x12>\n" +
	"\x18language_version_matches\x182 \x01(\b:\x04trueR\x16languageVersionMatches\x12%\n" +
	"\x0eunit_packaging\x183 \x01(\rR\runitPackaging\x12'\n" +
	"\x0fhaptic_feedback\x184 \x01(\bR\x0ehapticFeedback\x12P\n" +
	"\rrecovery_type\x185 \x01(\x0e2+.hw.trezor.messages.management.RecoveryTypeR\frecoveryType\x12\x1d\n" +
	"\n" +
	"optiga_sec\x186 \x01(\rR\toptigaSec\"C\n" +
	"\x12BackupAvailability\x12\x10\n" +
	"\fNotAvailable\x10\x00\x12\f\n" +
	"\bRequired\x10\x01\x12\r\n" +
	"\tAvailable\x10\x02\"7\n" +
	"\x0eRecoveryStatus\x12\v\n" +
	"\aNothing\x10\x00\x12\f\n" +
	"\bRecovery\x10\x01\x12\n" +
	"\n" +
	"\x06Backup\x10\x02\"\xf6\x04\n" +
	"\n" +
	"Capability\x12\x1c\n" +
	"\x12Capability_Bitcoin\x10\x01\x1a\x04\x80\xa6\x1d\x01\x12\x1b\n" +
	"\x17Capability_Bitcoin_like\x10\x02\x12\x16\n" +
	"\x12Capability_Binance\x10\x03\x12\x16\n" +
	"\x12Capability_Cardano\x10\x04\x12\x1b\n" +
	"\x11Capability_Crypto\x10\x05\x1a\x04\x80\xa6\x1d\x01\x12\x12\n" +
	"\x0eCapability_EOS\x10\x06\x12\x17\n" +
	"\x13Capability_Ethereum\x10\a\x12\x17\n" +
	"\x0fCapability_Lisk\x10\b\x1a\x02\b\x01\x12\x15\n" +
	"\x11Capability_Monero\x10\t\x12\x12\n" +
	"\x0eCapability_NEM\x10\n" +
	"\x12\x15\n" +
	"\x11Capability_Ripple\x10\v\x12\x16\n" +
	"\x12Capability_Stellar\x10\f\x12\x14\n" +
	"\x10Capability_Tezos\x10\r\x12\x12\n" +
	"\x0eCapability_U2F\x10\x0e\x12\x1b\n" +
	"\x11Capability_Shamir\x10\x0f\x1a\x04\x80\xa6\x1d\x01\x12!\n" +
	"\x17Capability_ShamirGroups\x10\x10\x1a\x04\x80\xa6\x1d\x01\x12$\n" +
	"\x1aCapability_PassphraseEntry\x10\x11\x1a\x04\x80\xa6\x1d\x01\x12\x15\n" +
	"\x11Capability_Solana\x10\x12\x12!\n" +
	"\x17Capability_Translations\x10\x13\x1a\x04\x80\xa6\x1d\x01\x12\x1f\n" +
	"\x15Capability_Brightness\x10\x14\x1a\x04\x80\xa6\x1d\x01\x12\x1b\n" +
	"\x11Capability_Haptic\x10\x15\x1a\x04\x80\xa6\x1d\x01\x12\x18\n" +
	"\x0eCapability_BLE\x10\x16\x1a\x04\x80\xa6\x1d\x01\x12\x18\n" +
	"\x0eCapability_NFC\x10\x17\x1a\x04\x80\xa6\x1d\x01\x1a\x04\xc8\xf3\x18\x01\"\f\n" +
	"\n" +
	"LockDevice\"&\n" +
	"\aSetBusy\x12\x1b\n" +
	"\texpiry_ms\x18\x01 \x01(\rR\bexpiryMs\"\f\n" +
	"\n" +
	"EndSession\"\xa1\x05\n" +
	"\rApplySettings\x12\x1e\n" +
	"\blanguage\x18\x01 \x01(\tB\x02\x18\x01R\blanguage\x12\x14\n" +
	"\x05label\x18\x02 \x01(\tR\x05label\x12%\n" +
	"\x0euse_passphrase\x18\x03 \x01(\bR\rusePassphrase\x12\x1e\n" +
	"\n" +
	"homescreen\x18\x04 \x01(\fR\n" +
	"homescreen\x120\n" +
	"\x12_passphrase_source\x18\x05 \x01(\rB\x02\x18\x01R\x10PassphraseSource\x12+\n" +
	"\x12auto_lock_delay_ms\x18\x06 \x01(\rR\x0fautoLockDelayMs\x12Y\n" +
	"\x10display_rotation\x18\a \x01(\x0e2..hw.trezor.messages.management.DisplayRotationR\x0fdisplayRotation\x12=\n" +
	"\x1bpassphrase_always_on_device\x18\b \x01(\bR\x18passphraseAlwaysOnDevice\x12T\n" +
	"\rsafety_checks\x18\t \x01(\x0e2/.hw.trezor.messages.management.SafetyCheckLevelR\fsafetyChecks\x123\n" +
	"\x15experimental_features\x18\n" +
	" \x01(\bR\x14experimentalFeatures\x129\n" +
	"\x19hide_passphrase_from_host\x18\v \x01(\bR\x16hidePassphraseFromHost\x12'\n" +
	"\x0fhaptic_feedback\x18\r \x01(\bR\x0ehapticFeedback\x12+\n" +
	"\x11homescreen_length\x18\x0e \x01(\rR\x10homescreenLength\"T\n" +
	"\x0eChangeLanguage\x12\x1f\n" +
	"\vdata_length\x18\x01 \x02(\rR\n" +
	"dataLength\x12!\n" +
	"\fshow_display\x18\x02 \x01(\bR\vshowDisplay\"T\n" +
	"\x10DataChunkRequest\x12\x1f\n" +
	"\vdata_length\x18\x01 \x02(\rR\n" +
	"dataLength\x12\x1f\n" +
	"\vdata_offset\x18\x02 \x02(\rR\n" +
	"dataOffset\"-\n" +
	"\fDataChunkAck\x12\x1d\n" +
	"\n" +
	"data_chunk\x18\x01 \x02(\fR\tdataChunk\"\"\n" +
	"\n" +
	"ApplyFlags\x12\x14\n" +
	"\x05flags\x18\x01 \x02(\rR\x05flags\"#\n" +
	"\tChangePin\x12\x16\n" +
	"\x06remove\x18\x01 \x01(\bR\x06remove\"(\n" +
	"\x0eChangeWipeCode\x12\x16\n" +
	"\x06remove\x18\x01 \x01(\bR\x06remove\"\xaa\x01\n" +
	"\tSdProtect\x12]\n" +
	"\toperation\x18\x01 \x02(\x0e2?.hw.trezor.messages.management.SdProtect.SdProtectOperationTypeR\toperation\">\n" +
	"\x16SdProtectOperationType\x12\v\n" +
	"\aDISABLE\x10\x00\x12\n" +
	"\n" +
	"\x06ENABLE\x10\x01\x12\v\n" +
	"\aREFRESH\x10\x02\"O\n" +
	"\x04Ping\x12\x1a\n" +
	"\amessage\x18\x01 \x01(\t:\x00R\amessage\x12+\n" +
	"\x11button_protection\x18\x02 \x01(\bR\x10buttonProtection\"\b\n" +
	"\x06Cancel\" \n" +
	"\n" +
	"GetEntropy\x12\x12\n" +
	"\x04size\x18\x01 \x02(\rR\x04size\"#\n" +
	"\aEntropy\x12\x18\n" +
	"\aentropy\x18\x01 \x02(\fR\aentropy\"/\n" +
	"\x0fGetFirmwareHash\x12\x1c\n" +
	"\tchallenge\x18\x01 \x01(\fR\tchallenge\"\"\n" +
	"\fFirmwareHash\x12\x12\n" +
	"\x04hash\x18\x01 \x02(\fR\x04hash\"2\n" +
	"\x12AuthenticateDevice\x12\x1c\n" +
	"\tchallenge\x18\x01 \x02(\fR\tchallenge\"U\n" +
	"\x11AuthenticityProof\x12\"\n" +
	"\fcertificates\x18\x01 \x03(\fR\fcertificates\x12\x1c\n" +
	"\tsignature\x18\x02 \x02(\fR\tsignature\"\f\n" +
	"\n" +
	"WipeDevice\"\xad\x02\n" +
	"\n" +
	"LoadDevice\x12\x1c\n" +
	"\tmnemonics\x18\x01 \x03(\tR\tmnemonics\x12\x10\n" +
	"\x03pin\x18\x03 \x01(\tR\x03pin\x123\n" +
	"\x15passphrase_protection\x18\x04 \x01(\bR\x14passphraseProtection\x12\x1e\n" +
	"\blanguage\x18\x05 \x01(\tB\x02\x18\x01R\blanguage\x12\x14\n" +
	"\x05label\x18\x06 \x01(\tR\x05label\x12#\n" +
	"\rskip_checksum\x18\a \x01(\bR\fskipChecksum\x12\x1f\n" +
	"\vu2f_counter\x18\b \x01(\rR\n" +
	"u2fCounter\x12!\n" +
	"\fneeds_backup\x18\t \x01(\bR\vneedsBackup\x12\x1b\n" +
	"\tno_backup\x18\n" +
	" \x01(\bR\bnoBackup\"\x9d\x03\n" +
	"\vResetDevice\x12\x1f\n" +
	"\bstrength\x18\x02 \x01(\r:\x03256R\bstrength\x123\n" +
	"\x15passphrase_protection\x18\x03 \x01(\bR\x14passphraseProtection\x12%\n" +
	"\x0epin_protection\x18\x04 \x01(\bR\rpinProtection\x12\x1e\n" +
	"\blanguage\x18\x05 \x01(\tB\x02\x18\x01R\blanguage\x12\x14\n" +
	"\x05label\x18\x06 \x01(\tR\x05label\x12\x1f\n" +
	"\vu2f_counter\x18\a \x01(\rR\n" +
	"u2fCounter\x12\x1f\n" +
	"\vskip_backup\x18\b \x01(\bR\n" +
	"skipBackup\x12\x1b\n" +
	"\tno_backup\x18\t \x01(\bR\bnoBackup\x12Q\n" +
	"\vbackup_type\x18\n" +
	" \x01(\x0e2).hw.trezor.messages.management.BackupType:\x05Bip39R\n" +
	"backupType\x12#\n" +
	"\rentropy_check\x18\v \x01(\bR\fentropyCheckJ\x04\b\x01\x10\x02\"\xe5\x01\n" +
	"\fBackupDevice\x12'\n" +
	"\x0fgroup_threshold\x18\x01 \x01(\rR\x0egroupThreshold\x12O\n" +
	"\x06groups\x18\x02 \x03(\v27.hw.trezor.messages.management.BackupDevice.Slip39GroupR\x06groups\x1a[\n" +
	"\vSlip39Group\x12)\n" +
	"\x10member_threshold\x18\x01 \x02(\rR\x0fmemberThreshold\x12!\n" +
	"\fmember_count\x18\x02 \x02(\rR\vmemberCount\"b\n" +
	"\x0eEntropyRequest\x12-\n" +
	"\x12entropy_commitment\x18\x01 \x01(\fR\x11entropyCommitment\x12!\n" +
	"\fprev_entropy\x18\x02 \x01(\fR\vprevEntropy\"&\n" +
	"\n" +
	"EntropyAck\x12\x18\n" +
	"\aentropy\x18\x01 \x02(\fR\aentropy\"\x13\n" +
	"\x11EntropyCheckReady\"5\n" +
	"\x14EntropyCheckContinue\x12\x1d\n" +
	"\x06finish\x18\x01 \x01(\b:\x05falseR\x06finish\"\x8d\x04\n" +
	"\x0eRecoveryDevice\x12\x1d\n" +
	"\n" +
	"word_count\x18\x01 \x01(\rR\twordCount\x123\n" +
	"\x15passphrase_protection\x18\x02 \x01(\bR\x14passphraseProtection\x12%\n" +
	"\x0epin_protection\x18\x03 \x01(\bR\rpinProtection\x12\x1e\n" +
	"\blanguage\x18\x04 \x01(\tB\x02\x18\x01R\blanguage\x12\x14\n" +
	"\x05label\x18\x05 \x01(\tR\x05label\x12)\n" +
	"\x10enforce_wordlist\x18\x06 \x01(\bR\x0fenforceWordlist\x12j\n" +
	"\finput_method\x18\b \x01(\x0e2G.hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceInputMethodR\vinputMethod\x12\x1f\n" +
	"\vu2f_counter\x18\t \x01(\rR\n" +
	"u2fCounter\x12O\n" +
	"\x04type\x18\n" +
	" \x01(\x0e2+.hw.trezor.messages.management.RecoveryType:\x0eNormalRecoveryR\x04type\";\n" +
	"\x19RecoveryDeviceInputMethod\x12\x12\n" +
	"\x0eScrambledWords\x10\x00\x12\n" +
	"\n" +
	"\x06Matrix\x10\x01J\x04\b\a\x10\b\"\xc5\x01\n" +
	"\vWordRequest\x12N\n" +
	"\x04type\x18\x01 \x02(\x0e2:.hw.trezor.messages.management.WordRequest.WordRequestTypeR\x04type\"f\n" +
	"\x0fWordRequestType\x12\x19\n" +
	"\x15WordRequestType_Plain\x10\x00\x12\x1b\n" +
	"\x17WordRequestType_Matrix9\x10\x01\x12\x1b\n" +
	"\x17WordRequestType_Matrix6\x10\x02\"\x1d\n" +
	"\aWordAck\x12\x12\n" +
	"\x04word\x18\x01 \x02(\tR\x04word\"0\n" +
	"\rSetU2FCounter\x12\x1f\n" +
	"\vu2f_counter\x18\x01 \x02(\rR\n" +
	"u2fCounter\"\x13\n" +
	"\x11GetNextU2FCounter\"1\n" +
	"\x0eNextU2FCounter\x12\x1f\n" +
	"\vu2f_counter\x18\x01 \x02(\rR\n" +
	"u2fCounter\"\x11\n" +
	"\x0fDoPreauthorized\"\x16\n" +
	"\x14PreauthorizedRequest\"\x15\n" +
	"\x13CancelAuthorization\"\x9a\x02\n" +
	"\x12RebootToBootloader\x12o\n" +
	"\fboot_command\x18\x01 \x01(\x0e2=.hw.trezor.messages.management.RebootToBootloader.BootCommand:\rSTOP_AND_WAITR\vbootCommand\x12'\n" +
	"\x0ffirmware_header\x18\x02 \x01(\fR\x0efirmwareHeader\x123\n" +
	"\x14language_data_length\x18\x03 \x01(\r:\x010R\x12languageDataLength\"5\n" +
	"\vBootCommand\x12\x11\n" +
	"\rSTOP_AND_WAIT\x10\x00\x12\x13\n" +
	"\x0fINSTALL_UPGRADE\x10\x01\"\x10\n" +
	"\bGetNonce:\x04\x88\xb2\x19\x01\"#\n" +
	"\x05Nonce\x12\x14\n" +
	"\x05nonce\x18\x01 \x02(\fR\x05nonce:\x04\x88\xb2\x19\x01\";\n" +
	"\n" +
	"UnlockPath\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x12\x10\n" +
	"\x03mac\x18\x02 \x01(\fR\x03mac\"'\n" +
	"\x13UnlockedPathRequest\x12\x10\n" +
	"\x03mac\x18\x01 \x02(\fR\x03mac\"\x14\n" +
	"\x12ShowDeviceTutorial\"\x12\n" +
	"\x10UnlockBootloader\"%\n" +
	"\rSetBrightness\x12\x14\n" +
	"\x05value\x18\x01 \x01(\rR\x05value*\x99\x01\n" +
	"\n" +
	"BackupType\x12\t\n" +
	"\x05Bip39\x10\x00\x12\x10\n" +
	"\fSlip39_Basic\x10\x01\x12\x13\n" +
	"\x0fSlip39_Advanced\x10\x02\x12\x1c\n" +
	"\x18Slip39_Single_Extendable\x10\x03\x12\x1b\n" +
	"\x17Slip39_Basic_Extendable\x10\x04\x12\x1e\n" +
	"\x1aSlip39_Advanced_Extendable\x10\x05*G\n" +
	"\x10SafetyCheckLevel\x12\n" +
	"\n" +
	"\x06Strict\x10\x00\x12\x10\n" +
	"\fPromptAlways\x10\x01\x12\x15\n" +
	"\x11PromptTemporarily\x10\x02*=\n" +
	"\x0fDisplayRotation\x12\t\n" +
	"\x05North\x10\x00\x12\b\n" +
	"\x04East\x10Z\x12\n" +
	"\n" +
	"\x05South\x10\xb4\x01\x12\t\n" +
	"\x04West\x10\x8e\x02*0\n" +
	"\x10HomescreenFormat\x12\b\n" +
	"\x04Toif\x10\x01\x12\b\n" +
	"\x04Jpeg\x10\x02\x12\b\n" +
	"\x04ToiG\x10\x03*H\n" +
	"\fRecoveryType\x12\x12\n" +
	"\x0eNormalRecovery\x10\x00\x12\n" +
	"\n" +
	"\x06DryRun\x10\x01\x12\x18\n" +
	"\x14UnlockRepeatedBackup\x10\x02B}\x80\xa6\x1d\x01\n" +
	"#com.satoshilabs.trezor.lib.protobufB\x17TrezorMessageManagementZ9github.com/ethereum/go-ethereum/accounts/usbwallet/trezor"

var (
	file_messages_management_proto_rawDescOnce sync.Once
	file_messages_management_proto_rawDescData []byte
)

func file_messages_management_proto_rawDescGZIP() []byte {
	file_messages_management_proto_rawDescOnce.Do(func() {
		file_messages_management_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_management_proto_rawDesc), len(file_messages_management_proto_rawDesc)))
	})
	return file_messages_management_proto_rawDescData
}

var file_messages_management_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_messages_management_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_messages_management_proto_goTypes = []any{
	(BackupType)(0),                               // 0: hw.trezor.messages.management.BackupType
	(SafetyCheckLevel)(0),                         // 1: hw.trezor.messages.management.SafetyCheckLevel
	(DisplayRotation)(0),                          // 2: hw.trezor.messages.management.DisplayRotation
	(HomescreenFormat)(0),                         // 3: hw.trezor.messages.management.HomescreenFormat
	(RecoveryType)(0),                             // 4: hw.trezor.messages.management.RecoveryType
	(Features_BackupAvailability)(0),              // 5: hw.trezor.messages.management.Features.BackupAvailability
	(Features_RecoveryStatus)(0),                  // 6: hw.trezor.messages.management.Features.RecoveryStatus
	(Features_Capability)(0),                      // 7: hw.trezor.messages.management.Features.Capability
	(SdProtect_SdProtectOperationType)(0),         // 8: hw.trezor.messages.management.SdProtect.SdProtectOperationType
	(RecoveryDevice_RecoveryDeviceInputMethod)(0), // 9: hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceInputMethod
	(WordRequest_WordRequestType)(0),              // 10: hw.trezor.messages.management.WordRequest.WordRequestType
	(RebootToBootloader_BootCommand)(0),           // 11: hw.trezor.messages.management.RebootToBootloader.BootCommand
	(*Initialize)(nil),                            // 12: hw.trezor.messages.management.Initialize
	(*GetFeatures)(nil),                           // 13: hw.trezor.messages.management.GetFeatures
	(*Features)(nil),                              // 14: hw.trezor.messages.management.Features
	(*LockDevice)(nil),                            // 15: hw.trezor.messages.management.LockDevice
	(*SetBusy)(nil),                               // 16: hw.trezor.messages.management.SetBusy
	(*EndSession)(nil),                            // 17: hw.trezor.messages.management.EndSession
	(*ApplySettings)(nil),                         // 18: hw.trezor.messages.management.ApplySettings
	(*ChangeLanguage)(nil),                        // 19: hw.trezor.messages.management.ChangeLanguage
	(*DataChunkRequest)(nil),                      // 20: hw.trezor.messages.management.DataChunkRequest
	(*DataChunkAck)(nil),                          // 21: hw.trezor.messages.management.DataChunkAck
	(*ApplyFlags)(nil),                            // 22: hw.trezor.messages.management.ApplyFlags
	(*ChangePin)(nil),                             // 23: hw.trezor.messages.management.ChangePin
	(*ChangeWipeCode)(nil),                        // 24: hw.trezor.messages.management.ChangeWipeCode
	(*SdProtect)(nil),                             // 25: hw.trezor.messages.management.SdProtect
	(*Ping)(nil),                                  // 26: hw.trezor.messages.management.Ping
	(*Cancel)(nil),                                // 27: hw.trezor.messages.management.Cancel
	(*GetEntropy)(nil),                            // 28: hw.trezor.messages.management.GetEntropy
	(*Entropy)(nil),                               // 29: hw.trezor.messages.management.Entropy
	(*GetFirmwareHash)(nil),                       // 30: hw.trezor.messages.management.GetFirmwareHash
	(*FirmwareHash)(nil),                          // 31: hw.trezor.messages.management.FirmwareHash
	(*AuthenticateDevice)(nil),                    // 32: hw.trezor.messages.management.AuthenticateDevice
	(*AuthenticityProof)(nil),                     // 33: hw.trezor.messages.management.AuthenticityProof
	(*WipeDevice)(nil),                            // 34: hw.trezor.messages.management.WipeDevice
	(*LoadDevice)(nil),                            // 35: hw.trezor.messages.management.LoadDevice
	(*ResetDevice)(nil),                           // 36: hw.trezor.messages.management.ResetDevice
	(*BackupDevice)(nil),                          // 37: hw.trezor.messages.management.BackupDevice
	(*EntropyRequest)(nil),                        // 38: hw.trezor.messages.management.EntropyRequest
	(*EntropyAck)(nil),                            // 39: hw.trezor.messages.management.EntropyAck
	(*EntropyCheckReady)(nil),                     // 40: hw.trezor.messages.management.EntropyCheckReady
	(*EntropyCheckContinue)(nil),                  // 41: hw.trezor.messages.management.EntropyCheckContinue
	(*RecoveryDevice)(nil),                        // 42: hw.trezor.messages.management.RecoveryDevice
	(*WordRequest)(nil),                           // 43: hw.trezor.messages.management.WordRequest
	(*WordAck)(nil),                               // 44: hw.trezor.messages.management.WordAck
	(*SetU2FCounter)(nil),                         // 45: hw.trezor.messages.management.SetU2FCounter
	(*GetNextU2FCounter)(nil),                     // 46: hw.trezor.messages.management.GetNextU2FCounter
	(*NextU2FCounter)(nil),                        // 47: hw.trezor.messages.management.NextU2FCounter
	(*DoPreauthorized)(nil),                       // 48: hw.trezor.messages.management.DoPreauthorized
	(*PreauthorizedRequest)(nil),                  // 49: hw.trezor.messages.management.PreauthorizedRequest
	(*CancelAuthorization)(nil),                   // 50: hw.trezor.messages.management.CancelAuthorization
	(*RebootToBootloader)(nil),                    // 51: hw.trezor.messages.management.RebootToBootloader
	(*GetNonce)(nil),                              // 52: hw.trezor.messages.management.GetNonce
	(*Nonce)(nil),                                 // 53: hw.trezor.messages.management.Nonce
	(*UnlockPath)(nil),                            // 54: hw.trezor.messages.management.UnlockPath
	(*UnlockedPathRequest)(nil),                   // 55: hw.trezor.messages.management.UnlockedPathRequest
	(*ShowDeviceTutorial)(nil),                    // 56: hw.trezor.messages.management.ShowDeviceTutorial
	(*UnlockBootloader)(nil),                      // 57: hw.trezor.messages.management.UnlockBootloader
	(*SetBrightness)(nil),                         // 58: hw.trezor.messages.management.SetBrightness
	(*BackupDevice_Slip39Group)(nil),              // 59: hw.trezor.messages.management.BackupDevice.Slip39Group
}
var file_messages_management_proto_depIdxs = []int32{
	5,  // 0: hw.trezor.messages.management.Features.backup_availability:type_name -> hw.trezor.messages.management.Features.BackupAvailability
	6,  // 1: hw.trezor.messages.management.Features.recovery_status:type_name -> hw.trezor.messages.management.Features.RecoveryStatus
	7,  // 2: hw.trezor.messages.management.Features.capabilities:type_name -> hw.trezor.messages.management.Features.Capability
	0,  // 3: hw.trezor.messages.management.Features.backup_type:type_name -> hw.trezor.messages.management.BackupType
	1,  // 4: hw.trezor.messages.management.Features.safety_checks:type_name -> hw.trezor.messages.management.SafetyCheckLevel
	2,  // 5: hw.trezor.messages.management.Features.display_rotation:type_name -> hw.trezor.messages.management.DisplayRotation
	3,  // 6: hw.trezor.messages.management.Features.homescreen_format:type_name -> hw.trezor.messages.management.HomescreenFormat
	4,  // 7: hw.trezor.messages.management.Features.recovery_type:type_name -> hw.trezor.messages.management.RecoveryType
	2,  // 8: hw.trezor.messages.management.ApplySettings.display_rotation:type_name -> hw.trezor.messages.management.DisplayRotation
	1,  // 9: hw.trezor.messages.management.ApplySettings.safety_checks:type_name -> hw.trezor.messages.management.SafetyCheckLevel
	8,  // 10: hw.trezor.messages.management.SdProtect.operation:type_name -> hw.trezor.messages.management.SdProtect.SdProtectOperationType
	0,  // 11: hw.trezor.messages.management.ResetDevice.backup_type:type_name -> hw.trezor.messages.management.BackupType
	59, // 12: hw.trezor.messages.management.BackupDevice.groups:type_name -> hw.trezor.messages.management.BackupDevice.Slip39Group
	9,  // 13: hw.trezor.messages.management.RecoveryDevice.input_method:type_name -> hw.trezor.messages.management.RecoveryDevice.RecoveryDeviceInputMethod
	4,  // 14: hw.trezor.messages.management.RecoveryDevice.type:type_name -> hw.trezor.messages.management.RecoveryType
	10, // 15: hw.trezor.messages.management.WordRequest.type:type_name -> hw.trezor.messages.management.WordRequest.WordRequestType
	11, // 16: hw.trezor.messages.management.RebootToBootloader.boot_command:type_name -> hw.trezor.messages.management.RebootToBootloader.BootCommand
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_messages_management_proto_init() }
func file_messages_management_proto_init() {
	if File_messages_management_proto != nil {
		return
	}
	file_options_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_management_proto_rawDesc), len(file_messages_management_proto_rawDesc)),
			NumEnums:      12,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_management_proto_goTypes,
		DependencyIndexes: file_messages_management_proto_depIdxs,
		EnumInfos:         file_messages_management_proto_enumTypes,
		MessageInfos:      file_messages_management_proto_msgTypes,
	}.Build()
	File_messages_management_proto = out.File
	file_messages_management_proto_goTypes = nil
	file_messages_management_proto_depIdxs = nil
}
