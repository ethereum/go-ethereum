// This file originates from the SatoshiLabs Trezor `common` repository at:
//   https://github.com/trezor/trezor-common/blob/master/protob/messages-ethereum.proto
// dated 30.06.2025, commit 421b45d4677f2499234692b0f54010bc45b3ae5f.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: messages-ethereum.proto

package trezor

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request: Ask device for public key corresponding to address_n path
// @start
// @next EthereumPublicKey
// @next Failure
type EthereumGetPublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressN      []uint32               `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`          // BIP-32 path to derive the key from master node
	ShowDisplay   *bool                  `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"` // optionally show on display before sending the result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumGetPublicKey) Reset() {
	*x = EthereumGetPublicKey{}
	mi := &file_messages_ethereum_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumGetPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumGetPublicKey) ProtoMessage() {}

func (x *EthereumGetPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumGetPublicKey.ProtoReflect.Descriptor instead.
func (*EthereumGetPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{0}
}

func (x *EthereumGetPublicKey) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *EthereumGetPublicKey) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

// *
// Response: Contains public key derived from device private seed
// @end
type EthereumPublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *HDNodeType            `protobuf:"bytes,1,req,name=node" json:"node,omitempty"` // BIP32 public node
	Xpub          *string                `protobuf:"bytes,2,req,name=xpub" json:"xpub,omitempty"` // serialized form of public node
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumPublicKey) Reset() {
	*x = EthereumPublicKey{}
	mi := &file_messages_ethereum_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumPublicKey) ProtoMessage() {}

func (x *EthereumPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumPublicKey.ProtoReflect.Descriptor instead.
func (*EthereumPublicKey) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{1}
}

func (x *EthereumPublicKey) GetNode() *HDNodeType {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *EthereumPublicKey) GetXpub() string {
	if x != nil && x.Xpub != nil {
		return *x.Xpub
	}
	return ""
}

// *
// Request: Ask device for Ethereum address corresponding to address_n path
// @start
// @next EthereumAddress
// @next Failure
type EthereumGetAddress struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AddressN       []uint32               `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                  // BIP-32 path to derive the key from master node
	ShowDisplay    *bool                  `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`         // optionally show on display before sending the result
	EncodedNetwork []byte                 `protobuf:"bytes,3,opt,name=encoded_network,json=encodedNetwork" json:"encoded_network,omitempty"` // encoded Ethereum network, see external-definitions.md for details
	Chunkify       *bool                  `protobuf:"varint,4,opt,name=chunkify" json:"chunkify,omitempty"`                                  // display the address in chunks of 4 characters
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EthereumGetAddress) Reset() {
	*x = EthereumGetAddress{}
	mi := &file_messages_ethereum_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumGetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumGetAddress) ProtoMessage() {}

func (x *EthereumGetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumGetAddress.ProtoReflect.Descriptor instead.
func (*EthereumGetAddress) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{2}
}

func (x *EthereumGetAddress) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *EthereumGetAddress) GetShowDisplay() bool {
	if x != nil && x.ShowDisplay != nil {
		return *x.ShowDisplay
	}
	return false
}

func (x *EthereumGetAddress) GetEncodedNetwork() []byte {
	if x != nil {
		return x.EncodedNetwork
	}
	return nil
}

func (x *EthereumGetAddress) GetChunkify() bool {
	if x != nil && x.Chunkify != nil {
		return *x.Chunkify
	}
	return false
}

// *
// Response: Contains an Ethereum address derived from device private seed
// @end
type EthereumAddress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in messages-ethereum.proto.
	XOldAddress   []byte  `protobuf:"bytes,1,opt,name=_old_address,json=OldAddress" json:"_old_address,omitempty"` // trezor <1.8.0, <2.1.0 - raw bytes of Ethereum address
	Address       *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`                           // Ethereum address as hex-encoded string
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumAddress) Reset() {
	*x = EthereumAddress{}
	mi := &file_messages_ethereum_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumAddress) ProtoMessage() {}

func (x *EthereumAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumAddress.ProtoReflect.Descriptor instead.
func (*EthereumAddress) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in messages-ethereum.proto.
func (x *EthereumAddress) GetXOldAddress() []byte {
	if x != nil {
		return x.XOldAddress
	}
	return nil
}

func (x *EthereumAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// *
// Request: Ask device to sign transaction
// gas_price, gas_limit and chain_id must be provided and non-zero.
// All other fields are optional and default to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next EthereumTxRequest
// @next Failure
type EthereumSignTx struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AddressN         []uint32             `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                               // BIP-32 path to derive the key from master node
	Nonce            []byte               `protobuf:"bytes,2,opt,name=nonce,def=" json:"nonce,omitempty"`                                                 // <=256 bit unsigned big endian
	GasPrice         []byte               `protobuf:"bytes,3,req,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`                                // <=256 bit unsigned big endian (in wei)
	GasLimit         []byte               `protobuf:"bytes,4,req,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`                                // <=256 bit unsigned big endian
	To               *string              `protobuf:"bytes,11,opt,name=to,def=" json:"to,omitempty"`                                                      // recipient address
	Value            []byte               `protobuf:"bytes,6,opt,name=value,def=" json:"value,omitempty"`                                                 // <=256 bit unsigned big endian (in wei)
	DataInitialChunk []byte               `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk,def=" json:"data_initial_chunk,omitempty"` // The initial data chunk (<= 1024 bytes)
	DataLength       *uint32              `protobuf:"varint,8,opt,name=data_length,json=dataLength,def=0" json:"data_length,omitempty"`                   // Length of transaction payload
	ChainId          *uint64              `protobuf:"varint,9,req,name=chain_id,json=chainId" json:"chain_id,omitempty"`                                  // Chain Id for EIP 155
	TxType           *uint32              `protobuf:"varint,10,opt,name=tx_type,json=txType" json:"tx_type,omitempty"`                                    // Used for Wanchain
	Definitions      *EthereumDefinitions `protobuf:"bytes,12,opt,name=definitions" json:"definitions,omitempty"`                                         // network and/or token definitions for tx
	Chunkify         *bool                `protobuf:"varint,13,opt,name=chunkify" json:"chunkify,omitempty"`                                              // display the address in chunks of 4 characters
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for EthereumSignTx fields.
const (
	Default_EthereumSignTx_To         = string("")
	Default_EthereumSignTx_DataLength = uint32(0)
)

// Default values for EthereumSignTx fields.
var (
	Default_EthereumSignTx_Nonce            = []byte("")
	Default_EthereumSignTx_Value            = []byte("")
	Default_EthereumSignTx_DataInitialChunk = []byte("")
)

func (x *EthereumSignTx) Reset() {
	*x = EthereumSignTx{}
	mi := &file_messages_ethereum_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumSignTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSignTx) ProtoMessage() {}

func (x *EthereumSignTx) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSignTx.ProtoReflect.Descriptor instead.
func (*EthereumSignTx) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{4}
}

func (x *EthereumSignTx) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *EthereumSignTx) GetNonce() []byte {
	if x != nil && x.Nonce != nil {
		return x.Nonce
	}
	return append([]byte(nil), Default_EthereumSignTx_Nonce...)
}

func (x *EthereumSignTx) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *EthereumSignTx) GetGasLimit() []byte {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *EthereumSignTx) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return Default_EthereumSignTx_To
}

func (x *EthereumSignTx) GetValue() []byte {
	if x != nil && x.Value != nil {
		return x.Value
	}
	return append([]byte(nil), Default_EthereumSignTx_Value...)
}

func (x *EthereumSignTx) GetDataInitialChunk() []byte {
	if x != nil && x.DataInitialChunk != nil {
		return x.DataInitialChunk
	}
	return append([]byte(nil), Default_EthereumSignTx_DataInitialChunk...)
}

func (x *EthereumSignTx) GetDataLength() uint32 {
	if x != nil && x.DataLength != nil {
		return *x.DataLength
	}
	return Default_EthereumSignTx_DataLength
}

func (x *EthereumSignTx) GetChainId() uint64 {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return 0
}

func (x *EthereumSignTx) GetTxType() uint32 {
	if x != nil && x.TxType != nil {
		return *x.TxType
	}
	return 0
}

func (x *EthereumSignTx) GetDefinitions() *EthereumDefinitions {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *EthereumSignTx) GetChunkify() bool {
	if x != nil && x.Chunkify != nil {
		return *x.Chunkify
	}
	return false
}

// *
// Request: Ask device to sign EIP1559 transaction
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next EthereumTxRequest
// @next Failure
type EthereumSignTxEIP1559 struct {
	state            protoimpl.MessageState                      `protogen:"open.v1"`
	AddressN         []uint32                                    `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                               // BIP-32 path to derive the key from master node
	Nonce            []byte                                      `protobuf:"bytes,2,req,name=nonce" json:"nonce,omitempty"`                                                      // <=256 bit unsigned big endian
	MaxGasFee        []byte                                      `protobuf:"bytes,3,req,name=max_gas_fee,json=maxGasFee" json:"max_gas_fee,omitempty"`                           // <=256 bit unsigned big endian (in wei)
	MaxPriorityFee   []byte                                      `protobuf:"bytes,4,req,name=max_priority_fee,json=maxPriorityFee" json:"max_priority_fee,omitempty"`            // <=256 bit unsigned big endian (in wei)
	GasLimit         []byte                                      `protobuf:"bytes,5,req,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`                                // <=256 bit unsigned big endian
	To               *string                                     `protobuf:"bytes,6,opt,name=to,def=" json:"to,omitempty"`                                                       // recipient address
	Value            []byte                                      `protobuf:"bytes,7,req,name=value" json:"value,omitempty"`                                                      // <=256 bit unsigned big endian (in wei)
	DataInitialChunk []byte                                      `protobuf:"bytes,8,opt,name=data_initial_chunk,json=dataInitialChunk,def=" json:"data_initial_chunk,omitempty"` // The initial data chunk (<= 1024 bytes)
	DataLength       *uint32                                     `protobuf:"varint,9,req,name=data_length,json=dataLength" json:"data_length,omitempty"`                         // Length of transaction payload
	ChainId          *uint64                                     `protobuf:"varint,10,req,name=chain_id,json=chainId" json:"chain_id,omitempty"`                                 // Chain Id for EIP 155
	AccessList       []*EthereumSignTxEIP1559_EthereumAccessList `protobuf:"bytes,11,rep,name=access_list,json=accessList" json:"access_list,omitempty"`                         // Access List
	Definitions      *EthereumDefinitions                        `protobuf:"bytes,12,opt,name=definitions" json:"definitions,omitempty"`                                         // network and/or token definitions for tx
	Chunkify         *bool                                       `protobuf:"varint,13,opt,name=chunkify" json:"chunkify,omitempty"`                                              // display the address in chunks of 4 characters
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for EthereumSignTxEIP1559 fields.
const (
	Default_EthereumSignTxEIP1559_To = string("")
)

// Default values for EthereumSignTxEIP1559 fields.
var (
	Default_EthereumSignTxEIP1559_DataInitialChunk = []byte("")
)

func (x *EthereumSignTxEIP1559) Reset() {
	*x = EthereumSignTxEIP1559{}
	mi := &file_messages_ethereum_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumSignTxEIP1559) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSignTxEIP1559) ProtoMessage() {}

func (x *EthereumSignTxEIP1559) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSignTxEIP1559.ProtoReflect.Descriptor instead.
func (*EthereumSignTxEIP1559) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{5}
}

func (x *EthereumSignTxEIP1559) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetMaxGasFee() []byte {
	if x != nil {
		return x.MaxGasFee
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetMaxPriorityFee() []byte {
	if x != nil {
		return x.MaxPriorityFee
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetGasLimit() []byte {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return Default_EthereumSignTxEIP1559_To
}

func (x *EthereumSignTxEIP1559) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetDataInitialChunk() []byte {
	if x != nil && x.DataInitialChunk != nil {
		return x.DataInitialChunk
	}
	return append([]byte(nil), Default_EthereumSignTxEIP1559_DataInitialChunk...)
}

func (x *EthereumSignTxEIP1559) GetDataLength() uint32 {
	if x != nil && x.DataLength != nil {
		return *x.DataLength
	}
	return 0
}

func (x *EthereumSignTxEIP1559) GetChainId() uint64 {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return 0
}

func (x *EthereumSignTxEIP1559) GetAccessList() []*EthereumSignTxEIP1559_EthereumAccessList {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetDefinitions() *EthereumDefinitions {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *EthereumSignTxEIP1559) GetChunkify() bool {
	if x != nil && x.Chunkify != nil {
		return *x.Chunkify
	}
	return false
}

// *
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @end
// @next EthereumTxAck
type EthereumTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataLength    *uint32                `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"` // Number of bytes being requested (<= 1024)
	SignatureV    *uint32                `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"` // Computed signature (recovery parameter, limited to 27 or 28)
	SignatureR    []byte                 `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`  // Computed signature R component (256 bit)
	SignatureS    []byte                 `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`  // Computed signature S component (256 bit)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTxRequest) Reset() {
	*x = EthereumTxRequest{}
	mi := &file_messages_ethereum_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTxRequest) ProtoMessage() {}

func (x *EthereumTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTxRequest.ProtoReflect.Descriptor instead.
func (*EthereumTxRequest) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{6}
}

func (x *EthereumTxRequest) GetDataLength() uint32 {
	if x != nil && x.DataLength != nil {
		return *x.DataLength
	}
	return 0
}

func (x *EthereumTxRequest) GetSignatureV() uint32 {
	if x != nil && x.SignatureV != nil {
		return *x.SignatureV
	}
	return 0
}

func (x *EthereumTxRequest) GetSignatureR() []byte {
	if x != nil {
		return x.SignatureR
	}
	return nil
}

func (x *EthereumTxRequest) GetSignatureS() []byte {
	if x != nil {
		return x.SignatureS
	}
	return nil
}

// *
// Request: Transaction payload data.
// @next EthereumTxRequest
type EthereumTxAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataChunk     []byte                 `protobuf:"bytes,1,req,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"` // Bytes from transaction payload (<= 1024 bytes)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTxAck) Reset() {
	*x = EthereumTxAck{}
	mi := &file_messages_ethereum_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTxAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTxAck) ProtoMessage() {}

func (x *EthereumTxAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTxAck.ProtoReflect.Descriptor instead.
func (*EthereumTxAck) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{7}
}

func (x *EthereumTxAck) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

// *
// Request: Ask device to sign message
// @start
// @next EthereumMessageSignature
// @next Failure
type EthereumSignMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AddressN       []uint32               `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                  // BIP-32 path to derive the key from master node
	Message        []byte                 `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`                                     // message to be signed
	EncodedNetwork []byte                 `protobuf:"bytes,3,opt,name=encoded_network,json=encodedNetwork" json:"encoded_network,omitempty"` // encoded Ethereum network, see external-definitions.md for details
	Chunkify       *bool                  `protobuf:"varint,4,opt,name=chunkify" json:"chunkify,omitempty"`                                  // display the address in chunks of 4 characters
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EthereumSignMessage) Reset() {
	*x = EthereumSignMessage{}
	mi := &file_messages_ethereum_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumSignMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSignMessage) ProtoMessage() {}

func (x *EthereumSignMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSignMessage.ProtoReflect.Descriptor instead.
func (*EthereumSignMessage) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{8}
}

func (x *EthereumSignMessage) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *EthereumSignMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EthereumSignMessage) GetEncodedNetwork() []byte {
	if x != nil {
		return x.EncodedNetwork
	}
	return nil
}

func (x *EthereumSignMessage) GetChunkify() bool {
	if x != nil && x.Chunkify != nil {
		return *x.Chunkify
	}
	return false
}

// *
// Response: Signed message
// @end
type EthereumMessageSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"` // signature of the message
	Address       *string                `protobuf:"bytes,3,req,name=address" json:"address,omitempty"`     // address used to sign the message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumMessageSignature) Reset() {
	*x = EthereumMessageSignature{}
	mi := &file_messages_ethereum_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumMessageSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumMessageSignature) ProtoMessage() {}

func (x *EthereumMessageSignature) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumMessageSignature.ProtoReflect.Descriptor instead.
func (*EthereumMessageSignature) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{9}
}

func (x *EthereumMessageSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *EthereumMessageSignature) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// *
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type EthereumVerifyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"` // signature to verify
	Message       []byte                 `protobuf:"bytes,3,req,name=message" json:"message,omitempty"`     // message to verify
	Address       *string                `protobuf:"bytes,4,req,name=address" json:"address,omitempty"`     // address to verify
	Chunkify      *bool                  `protobuf:"varint,5,opt,name=chunkify" json:"chunkify,omitempty"`  // display the address in chunks of 4 characters
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumVerifyMessage) Reset() {
	*x = EthereumVerifyMessage{}
	mi := &file_messages_ethereum_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumVerifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumVerifyMessage) ProtoMessage() {}

func (x *EthereumVerifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumVerifyMessage.ProtoReflect.Descriptor instead.
func (*EthereumVerifyMessage) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{10}
}

func (x *EthereumVerifyMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *EthereumVerifyMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EthereumVerifyMessage) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *EthereumVerifyMessage) GetChunkify() bool {
	if x != nil && x.Chunkify != nil {
		return *x.Chunkify
	}
	return false
}

// *
// Request: Ask device to sign hash of typed data
// @start
// @next EthereumTypedDataSignature
// @next Failure
type EthereumSignTypedHash struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AddressN            []uint32               `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                   // BIP-32 path to derive the key from master node
	DomainSeparatorHash []byte                 `protobuf:"bytes,2,req,name=domain_separator_hash,json=domainSeparatorHash" json:"domain_separator_hash,omitempty"` // Hash of domainSeparator of typed data to be signed
	MessageHash         []byte                 `protobuf:"bytes,3,opt,name=message_hash,json=messageHash" json:"message_hash,omitempty"`                           // Hash of the data of typed data to be signed (empty if domain-only data)
	EncodedNetwork      []byte                 `protobuf:"bytes,4,opt,name=encoded_network,json=encodedNetwork" json:"encoded_network,omitempty"`                  // encoded Ethereum network, see external-definitions.md for details
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EthereumSignTypedHash) Reset() {
	*x = EthereumSignTypedHash{}
	mi := &file_messages_ethereum_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumSignTypedHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSignTypedHash) ProtoMessage() {}

func (x *EthereumSignTypedHash) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSignTypedHash.ProtoReflect.Descriptor instead.
func (*EthereumSignTypedHash) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{11}
}

func (x *EthereumSignTypedHash) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *EthereumSignTypedHash) GetDomainSeparatorHash() []byte {
	if x != nil {
		return x.DomainSeparatorHash
	}
	return nil
}

func (x *EthereumSignTypedHash) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

func (x *EthereumSignTypedHash) GetEncodedNetwork() []byte {
	if x != nil {
		return x.EncodedNetwork
	}
	return nil
}

// *
// Response: Signed typed data
// @end
type EthereumTypedDataSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"` // signature of the typed data
	Address       *string                `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`     // address used to sign the typed data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTypedDataSignature) Reset() {
	*x = EthereumTypedDataSignature{}
	mi := &file_messages_ethereum_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTypedDataSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTypedDataSignature) ProtoMessage() {}

func (x *EthereumTypedDataSignature) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTypedDataSignature.ProtoReflect.Descriptor instead.
func (*EthereumTypedDataSignature) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{12}
}

func (x *EthereumTypedDataSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *EthereumTypedDataSignature) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// *
// Contains an encoded network and/or token definition. See external-definitions.md for details.
// @embed
type EthereumDefinitions struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EncodedNetwork []byte                 `protobuf:"bytes,1,opt,name=encoded_network,json=encodedNetwork" json:"encoded_network,omitempty"` // encoded ethereum network
	EncodedToken   []byte                 `protobuf:"bytes,2,opt,name=encoded_token,json=encodedToken" json:"encoded_token,omitempty"`       // encoded ethereum token
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EthereumDefinitions) Reset() {
	*x = EthereumDefinitions{}
	mi := &file_messages_ethereum_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumDefinitions) ProtoMessage() {}

func (x *EthereumDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumDefinitions.ProtoReflect.Descriptor instead.
func (*EthereumDefinitions) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{13}
}

func (x *EthereumDefinitions) GetEncodedNetwork() []byte {
	if x != nil {
		return x.EncodedNetwork
	}
	return nil
}

func (x *EthereumDefinitions) GetEncodedToken() []byte {
	if x != nil {
		return x.EncodedToken
	}
	return nil
}

type EthereumSignTxEIP1559_EthereumAccessList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *string                `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	StorageKeys   [][]byte               `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys" json:"storage_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumSignTxEIP1559_EthereumAccessList) Reset() {
	*x = EthereumSignTxEIP1559_EthereumAccessList{}
	mi := &file_messages_ethereum_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumSignTxEIP1559_EthereumAccessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSignTxEIP1559_EthereumAccessList) ProtoMessage() {}

func (x *EthereumSignTxEIP1559_EthereumAccessList) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSignTxEIP1559_EthereumAccessList.ProtoReflect.Descriptor instead.
func (*EthereumSignTxEIP1559_EthereumAccessList) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_proto_rawDescGZIP(), []int{5, 0}
}

func (x *EthereumSignTxEIP1559_EthereumAccessList) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *EthereumSignTxEIP1559_EthereumAccessList) GetStorageKeys() [][]byte {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

var File_messages_ethereum_proto protoreflect.FileDescriptor

const file_messages_ethereum_proto_rawDesc = "" +
	"\n" +
	"\x17messages-ethereum.proto\x12\x1bhw.trezor.messages.ethereum\x1a\x15messages-common.proto\"V\n" +
	"\x14EthereumGetPublicKey\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x12!\n" +
	"\fshow_display\x18\x02 \x01(\bR\vshowDisplay\"b\n" +
	"\x11EthereumPublicKey\x129\n" +
	"\x04node\x18\x01 \x02(\v2%.hw.trezor.messages.common.HDNodeTypeR\x04node\x12\x12\n" +
	"\x04xpub\x18\x02 \x02(\tR\x04xpub\"\x99\x01\n" +
	"\x12EthereumGetAddress\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x12!\n" +
	"\fshow_display\x18\x02 \x01(\bR\vshowDisplay\x12'\n" +
	"\x0fencoded_network\x18\x03 \x01(\fR\x0eencodedNetwork\x12\x1a\n" +
	"\bchunkify\x18\x04 \x01(\bR\bchunkify\"Q\n" +
	"\x0fEthereumAddress\x12$\n" +
	"\f_old_address\x18\x01 \x01(\fB\x02\x18\x01R\n" +
	"OldAddress\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"\xa1\x03\n" +
	"\x0eEthereumSignTx\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x12\x16\n" +
	"\x05nonce\x18\x02 \x01(\f:\x00R\x05nonce\x12\x1b\n" +
	"\tgas_price\x18\x03 \x02(\fR\bgasPrice\x12\x1b\n" +
	"\tgas_limit\x18\x04 \x02(\fR\bgasLimit\x12\x10\n" +
	"\x02to\x18\v \x01(\t:\x00R\x02to\x12\x16\n" +
	"\x05value\x18\x06 \x01(\f:\x00R\x05value\x12.\n" +
	"\x12data_initial_chunk\x18\a \x01(\f:\x00R\x10dataInitialChunk\x12\"\n" +
	"\vdata_length\x18\b \x01(\r:\x010R\n" +
	"dataLength\x12\x19\n" +
	"\bchain_id\x18\t \x02(\x04R\achainId\x12\x17\n" +
	"\atx_type\x18\n" +
	" \x01(\rR\x06txType\x12R\n" +
	"\vdefinitions\x18\f \x01(\v20.hw.trezor.messages.ethereum.EthereumDefinitionsR\vdefinitions\x12\x1a\n" +
	"\bchunkify\x18\r \x01(\bR\bchunkify\"\xf0\x04\n" +
	"\x15EthereumSignTxEIP1559\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x12\x14\n" +
	"\x05nonce\x18\x02 \x02(\fR\x05nonce\x12\x1e\n" +
	"\vmax_gas_fee\x18\x03 \x02(\fR\tmaxGasFee\x12(\n" +
	"\x10max_priority_fee\x18\x04 \x02(\fR\x0emaxPriorityFee\x12\x1b\n" +
	"\tgas_limit\x18\x05 \x02(\fR\bgasLimit\x12\x10\n" +
	"\x02to\x18\x06 \x01(\t:\x00R\x02to\x12\x14\n" +
	"\x05value\x18\a \x02(\fR\x05value\x12.\n" +
	"\x12data_initial_chunk\x18\b \x01(\f:\x00R\x10dataInitialChunk\x12\x1f\n" +
	"\vdata_length\x18\t \x02(\rR\n" +
	"dataLength\x12\x19\n" +
	"\bchain_id\x18\n" +
	" \x02(\x04R\achainId\x12f\n" +
	"\vaccess_list\x18\v \x03(\v2E.hw.trezor.messages.ethereum.EthereumSignTxEIP1559.EthereumAccessListR\n" +
	"accessList\x12R\n" +
	"\vdefinitions\x18\f \x01(\v20.hw.trezor.messages.ethereum.EthereumDefinitionsR\vdefinitions\x12\x1a\n" +
	"\bchunkify\x18\r \x01(\bR\bchunkify\x1aQ\n" +
	"\x12EthereumAccessList\x12\x18\n" +
	"\aaddress\x18\x01 \x02(\tR\aaddress\x12!\n" +
	"\fstorage_keys\x18\x02 \x03(\fR\vstorageKeys\"\x97\x01\n" +
	"\x11EthereumTxRequest\x12\x1f\n" +
	"\vdata_length\x18\x01 \x01(\rR\n" +
	"dataLength\x12\x1f\n" +
	"\vsignature_v\x18\x02 \x01(\rR\n" +
	"signatureV\x12\x1f\n" +
	"\vsignature_r\x18\x03 \x01(\fR\n" +
	"signatureR\x12\x1f\n" +
	"\vsignature_s\x18\x04 \x01(\fR\n" +
	"signatureS\".\n" +
	"\rEthereumTxAck\x12\x1d\n" +
	"\n" +
	"data_chunk\x18\x01 \x02(\fR\tdataChunk\"\x91\x01\n" +
	"\x13EthereumSignMessage\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x12\x18\n" +
	"\amessage\x18\x02 \x02(\fR\amessage\x12'\n" +
	"\x0fencoded_network\x18\x03 \x01(\fR\x0eencodedNetwork\x12\x1a\n" +
	"\bchunkify\x18\x04 \x01(\bR\bchunkify\"R\n" +
	"\x18EthereumMessageSignature\x12\x1c\n" +
	"\tsignature\x18\x02 \x02(\fR\tsignature\x12\x18\n" +
	"\aaddress\x18\x03 \x02(\tR\aaddress\"\x85\x01\n" +
	"\x15EthereumVerifyMessage\x12\x1c\n" +
	"\tsignature\x18\x02 \x02(\fR\tsignature\x12\x18\n" +
	"\amessage\x18\x03 \x02(\fR\amessage\x12\x18\n" +
	"\aaddress\x18\x04 \x02(\tR\aaddress\x12\x1a\n" +
	"\bchunkify\x18\x05 \x01(\bR\bchunkify\"\xb4\x01\n" +
	"\x15EthereumSignTypedHash\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x122\n" +
	"\x15domain_separator_hash\x18\x02 \x02(\fR\x13domainSeparatorHash\x12!\n" +
	"\fmessage_hash\x18\x03 \x01(\fR\vmessageHash\x12'\n" +
	"\x0fencoded_network\x18\x04 \x01(\fR\x0eencodedNetwork\"T\n" +
	"\x1aEthereumTypedDataSignature\x12\x1c\n" +
	"\tsignature\x18\x01 \x02(\fR\tsignature\x12\x18\n" +
	"\aaddress\x18\x02 \x02(\tR\aaddress\"c\n" +
	"\x13EthereumDefinitions\x12'\n" +
	"\x0fencoded_network\x18\x01 \x01(\fR\x0eencodedNetwork\x12#\n" +
	"\rencoded_token\x18\x02 \x01(\fR\fencodedTokenBw\n" +
	"#com.satoshilabs.trezor.lib.protobufB\x15TrezorMessageEthereumZ9github.com/ethereum/go-ethereum/accounts/usbwallet/trezor"

var (
	file_messages_ethereum_proto_rawDescOnce sync.Once
	file_messages_ethereum_proto_rawDescData []byte
)

func file_messages_ethereum_proto_rawDescGZIP() []byte {
	file_messages_ethereum_proto_rawDescOnce.Do(func() {
		file_messages_ethereum_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_ethereum_proto_rawDesc), len(file_messages_ethereum_proto_rawDesc)))
	})
	return file_messages_ethereum_proto_rawDescData
}

var file_messages_ethereum_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_messages_ethereum_proto_goTypes = []any{
	(*EthereumGetPublicKey)(nil),                     // 0: hw.trezor.messages.ethereum.EthereumGetPublicKey
	(*EthereumPublicKey)(nil),                        // 1: hw.trezor.messages.ethereum.EthereumPublicKey
	(*EthereumGetAddress)(nil),                       // 2: hw.trezor.messages.ethereum.EthereumGetAddress
	(*EthereumAddress)(nil),                          // 3: hw.trezor.messages.ethereum.EthereumAddress
	(*EthereumSignTx)(nil),                           // 4: hw.trezor.messages.ethereum.EthereumSignTx
	(*EthereumSignTxEIP1559)(nil),                    // 5: hw.trezor.messages.ethereum.EthereumSignTxEIP1559
	(*EthereumTxRequest)(nil),                        // 6: hw.trezor.messages.ethereum.EthereumTxRequest
	(*EthereumTxAck)(nil),                            // 7: hw.trezor.messages.ethereum.EthereumTxAck
	(*EthereumSignMessage)(nil),                      // 8: hw.trezor.messages.ethereum.EthereumSignMessage
	(*EthereumMessageSignature)(nil),                 // 9: hw.trezor.messages.ethereum.EthereumMessageSignature
	(*EthereumVerifyMessage)(nil),                    // 10: hw.trezor.messages.ethereum.EthereumVerifyMessage
	(*EthereumSignTypedHash)(nil),                    // 11: hw.trezor.messages.ethereum.EthereumSignTypedHash
	(*EthereumTypedDataSignature)(nil),               // 12: hw.trezor.messages.ethereum.EthereumTypedDataSignature
	(*EthereumDefinitions)(nil),                      // 13: hw.trezor.messages.ethereum.EthereumDefinitions
	(*EthereumSignTxEIP1559_EthereumAccessList)(nil), // 14: hw.trezor.messages.ethereum.EthereumSignTxEIP1559.EthereumAccessList
	(*HDNodeType)(nil),                               // 15: hw.trezor.messages.common.HDNodeType
}
var file_messages_ethereum_proto_depIdxs = []int32{
	15, // 0: hw.trezor.messages.ethereum.EthereumPublicKey.node:type_name -> hw.trezor.messages.common.HDNodeType
	13, // 1: hw.trezor.messages.ethereum.EthereumSignTx.definitions:type_name -> hw.trezor.messages.ethereum.EthereumDefinitions
	14, // 2: hw.trezor.messages.ethereum.EthereumSignTxEIP1559.access_list:type_name -> hw.trezor.messages.ethereum.EthereumSignTxEIP1559.EthereumAccessList
	13, // 3: hw.trezor.messages.ethereum.EthereumSignTxEIP1559.definitions:type_name -> hw.trezor.messages.ethereum.EthereumDefinitions
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_messages_ethereum_proto_init() }
func file_messages_ethereum_proto_init() {
	if File_messages_ethereum_proto != nil {
		return
	}
	file_messages_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_ethereum_proto_rawDesc), len(file_messages_ethereum_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_ethereum_proto_goTypes,
		DependencyIndexes: file_messages_ethereum_proto_depIdxs,
		MessageInfos:      file_messages_ethereum_proto_msgTypes,
	}.Build()
	File_messages_ethereum_proto = out.File
	file_messages_ethereum_proto_goTypes = nil
	file_messages_ethereum_proto_depIdxs = nil
}
