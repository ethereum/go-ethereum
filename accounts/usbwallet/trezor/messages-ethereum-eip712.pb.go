// This file originates from the SatoshiLabs Trezor `common` repository at:
//   https://github.com/trezor/trezor-common/blob/master/protob/messages-ethereum-eip712.proto
// dated 30.06.2025, commit 421b45d4677f2499234692b0f54010bc45b3ae5f.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: messages-ethereum-eip712.proto

package trezor

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EthereumTypedDataStructAck_EthereumDataType int32

const (
	EthereumTypedDataStructAck_UINT    EthereumTypedDataStructAck_EthereumDataType = 1
	EthereumTypedDataStructAck_INT     EthereumTypedDataStructAck_EthereumDataType = 2
	EthereumTypedDataStructAck_BYTES   EthereumTypedDataStructAck_EthereumDataType = 3
	EthereumTypedDataStructAck_STRING  EthereumTypedDataStructAck_EthereumDataType = 4
	EthereumTypedDataStructAck_BOOL    EthereumTypedDataStructAck_EthereumDataType = 5
	EthereumTypedDataStructAck_ADDRESS EthereumTypedDataStructAck_EthereumDataType = 6
	EthereumTypedDataStructAck_ARRAY   EthereumTypedDataStructAck_EthereumDataType = 7
	EthereumTypedDataStructAck_STRUCT  EthereumTypedDataStructAck_EthereumDataType = 8
)

// Enum value maps for EthereumTypedDataStructAck_EthereumDataType.
var (
	EthereumTypedDataStructAck_EthereumDataType_name = map[int32]string{
		1: "UINT",
		2: "INT",
		3: "BYTES",
		4: "STRING",
		5: "BOOL",
		6: "ADDRESS",
		7: "ARRAY",
		8: "STRUCT",
	}
	EthereumTypedDataStructAck_EthereumDataType_value = map[string]int32{
		"UINT":    1,
		"INT":     2,
		"BYTES":   3,
		"STRING":  4,
		"BOOL":    5,
		"ADDRESS": 6,
		"ARRAY":   7,
		"STRUCT":  8,
	}
)

func (x EthereumTypedDataStructAck_EthereumDataType) Enum() *EthereumTypedDataStructAck_EthereumDataType {
	p := new(EthereumTypedDataStructAck_EthereumDataType)
	*p = x
	return p
}

func (x EthereumTypedDataStructAck_EthereumDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthereumTypedDataStructAck_EthereumDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_ethereum_eip712_proto_enumTypes[0].Descriptor()
}

func (EthereumTypedDataStructAck_EthereumDataType) Type() protoreflect.EnumType {
	return &file_messages_ethereum_eip712_proto_enumTypes[0]
}

func (x EthereumTypedDataStructAck_EthereumDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EthereumTypedDataStructAck_EthereumDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EthereumTypedDataStructAck_EthereumDataType(num)
	return nil
}

// Deprecated: Use EthereumTypedDataStructAck_EthereumDataType.Descriptor instead.
func (EthereumTypedDataStructAck_EthereumDataType) EnumDescriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{2, 0}
}

// *
// Request: Ask device to sign typed data
// @start
// @next EthereumTypedDataStructRequest
// @next EthereumTypedDataValueRequest
// @next EthereumTypedDataSignature
// @next Failure
type EthereumSignTypedData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AddressN         []uint32               `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                 // BIP-32 path to derive the key from master node
	PrimaryType      *string                `protobuf:"bytes,2,req,name=primary_type,json=primaryType" json:"primary_type,omitempty"`                         // name of the root message struct
	MetamaskV4Compat *bool                  `protobuf:"varint,3,opt,name=metamask_v4_compat,json=metamaskV4Compat,def=1" json:"metamask_v4_compat,omitempty"` // use MetaMask v4 (see https://github.com/MetaMask/eth-sig-util/issues/106)
	Definitions      *EthereumDefinitions   `protobuf:"bytes,4,opt,name=definitions" json:"definitions,omitempty"`                                            // network and/or token definitions
	ShowMessageHash  []byte                 `protobuf:"bytes,5,opt,name=show_message_hash,json=showMessageHash" json:"show_message_hash,omitempty"`           // hash of the typed data to be signed (if set, user will be asked to confirm before signing)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for EthereumSignTypedData fields.
const (
	Default_EthereumSignTypedData_MetamaskV4Compat = bool(true)
)

func (x *EthereumSignTypedData) Reset() {
	*x = EthereumSignTypedData{}
	mi := &file_messages_ethereum_eip712_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumSignTypedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSignTypedData) ProtoMessage() {}

func (x *EthereumSignTypedData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_eip712_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSignTypedData.ProtoReflect.Descriptor instead.
func (*EthereumSignTypedData) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{0}
}

func (x *EthereumSignTypedData) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *EthereumSignTypedData) GetPrimaryType() string {
	if x != nil && x.PrimaryType != nil {
		return *x.PrimaryType
	}
	return ""
}

func (x *EthereumSignTypedData) GetMetamaskV4Compat() bool {
	if x != nil && x.MetamaskV4Compat != nil {
		return *x.MetamaskV4Compat
	}
	return Default_EthereumSignTypedData_MetamaskV4Compat
}

func (x *EthereumSignTypedData) GetDefinitions() *EthereumDefinitions {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *EthereumSignTypedData) GetShowMessageHash() []byte {
	if x != nil {
		return x.ShowMessageHash
	}
	return nil
}

// *
// Response: Device asks for type information about a struct.
// @next EthereumTypedDataStructAck
type EthereumTypedDataStructRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"` // name of the requested struct
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTypedDataStructRequest) Reset() {
	*x = EthereumTypedDataStructRequest{}
	mi := &file_messages_ethereum_eip712_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTypedDataStructRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTypedDataStructRequest) ProtoMessage() {}

func (x *EthereumTypedDataStructRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_eip712_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTypedDataStructRequest.ProtoReflect.Descriptor instead.
func (*EthereumTypedDataStructRequest) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{1}
}

func (x *EthereumTypedDataStructRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// *
// Request: Type information about a struct.
// @next EthereumTypedDataStructRequest
type EthereumTypedDataStructAck struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Members       []*EthereumTypedDataStructAck_EthereumStructMember `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTypedDataStructAck) Reset() {
	*x = EthereumTypedDataStructAck{}
	mi := &file_messages_ethereum_eip712_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTypedDataStructAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTypedDataStructAck) ProtoMessage() {}

func (x *EthereumTypedDataStructAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_eip712_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTypedDataStructAck.ProtoReflect.Descriptor instead.
func (*EthereumTypedDataStructAck) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{2}
}

func (x *EthereumTypedDataStructAck) GetMembers() []*EthereumTypedDataStructAck_EthereumStructMember {
	if x != nil {
		return x.Members
	}
	return nil
}

// *
// Response: Device asks for data at the specific member path.
// @next EthereumTypedDataValueAck
type EthereumTypedDataValueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemberPath    []uint32               `protobuf:"varint,1,rep,name=member_path,json=memberPath" json:"member_path,omitempty"` // member path requested by device
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTypedDataValueRequest) Reset() {
	*x = EthereumTypedDataValueRequest{}
	mi := &file_messages_ethereum_eip712_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTypedDataValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTypedDataValueRequest) ProtoMessage() {}

func (x *EthereumTypedDataValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_eip712_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTypedDataValueRequest.ProtoReflect.Descriptor instead.
func (*EthereumTypedDataValueRequest) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{3}
}

func (x *EthereumTypedDataValueRequest) GetMemberPath() []uint32 {
	if x != nil {
		return x.MemberPath
	}
	return nil
}

// *
// Request: Single value of a specific atomic field.
// @next EthereumTypedDataValueRequest
type EthereumTypedDataValueAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTypedDataValueAck) Reset() {
	*x = EthereumTypedDataValueAck{}
	mi := &file_messages_ethereum_eip712_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTypedDataValueAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTypedDataValueAck) ProtoMessage() {}

func (x *EthereumTypedDataValueAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_eip712_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTypedDataValueAck.ProtoReflect.Descriptor instead.
func (*EthereumTypedDataValueAck) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{4}
}

func (x *EthereumTypedDataValueAck) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type EthereumTypedDataStructAck_EthereumStructMember struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Type          *EthereumTypedDataStructAck_EthereumFieldType `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Name          *string                                       `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTypedDataStructAck_EthereumStructMember) Reset() {
	*x = EthereumTypedDataStructAck_EthereumStructMember{}
	mi := &file_messages_ethereum_eip712_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTypedDataStructAck_EthereumStructMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTypedDataStructAck_EthereumStructMember) ProtoMessage() {}

func (x *EthereumTypedDataStructAck_EthereumStructMember) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_eip712_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTypedDataStructAck_EthereumStructMember.ProtoReflect.Descriptor instead.
func (*EthereumTypedDataStructAck_EthereumStructMember) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{2, 0}
}

func (x *EthereumTypedDataStructAck_EthereumStructMember) GetType() *EthereumTypedDataStructAck_EthereumFieldType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EthereumTypedDataStructAck_EthereumStructMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type EthereumTypedDataStructAck_EthereumFieldType struct {
	state    protoimpl.MessageState                       `protogen:"open.v1"`
	DataType *EthereumTypedDataStructAck_EthereumDataType `protobuf:"varint,1,req,name=data_type,json=dataType,enum=hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck_EthereumDataType" json:"data_type,omitempty"`
	Size     *uint32                                      `protobuf:"varint,2,opt,name=size" json:"size,omitempty"` // for integer types: size in bytes (uint8 has size 1, uint256 has size 32)
	// for bytes types: size in bytes, or unset for dynamic
	// for arrays: size in elements, or unset for dynamic
	// for structs: number of members
	// for string, bool and address: unset
	EntryType     *EthereumTypedDataStructAck_EthereumFieldType `protobuf:"bytes,3,opt,name=entry_type,json=entryType" json:"entry_type,omitempty"`    // for array types, type of single entry
	StructName    *string                                       `protobuf:"bytes,4,opt,name=struct_name,json=structName" json:"struct_name,omitempty"` // for structs: its name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EthereumTypedDataStructAck_EthereumFieldType) Reset() {
	*x = EthereumTypedDataStructAck_EthereumFieldType{}
	mi := &file_messages_ethereum_eip712_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EthereumTypedDataStructAck_EthereumFieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTypedDataStructAck_EthereumFieldType) ProtoMessage() {}

func (x *EthereumTypedDataStructAck_EthereumFieldType) ProtoReflect() protoreflect.Message {
	mi := &file_messages_ethereum_eip712_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTypedDataStructAck_EthereumFieldType.ProtoReflect.Descriptor instead.
func (*EthereumTypedDataStructAck_EthereumFieldType) Descriptor() ([]byte, []int) {
	return file_messages_ethereum_eip712_proto_rawDescGZIP(), []int{2, 1}
}

func (x *EthereumTypedDataStructAck_EthereumFieldType) GetDataType() EthereumTypedDataStructAck_EthereumDataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return EthereumTypedDataStructAck_UINT
}

func (x *EthereumTypedDataStructAck_EthereumFieldType) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *EthereumTypedDataStructAck_EthereumFieldType) GetEntryType() *EthereumTypedDataStructAck_EthereumFieldType {
	if x != nil {
		return x.EntryType
	}
	return nil
}

func (x *EthereumTypedDataStructAck_EthereumFieldType) GetStructName() string {
	if x != nil && x.StructName != nil {
		return *x.StructName
	}
	return ""
}

var File_messages_ethereum_eip712_proto protoreflect.FileDescriptor

const file_messages_ethereum_eip712_proto_rawDesc = "" +
	"\n" +
	"\x1emessages-ethereum-eip712.proto\x12\"hw.trezor.messages.ethereum_eip712\x1a\x17messages-ethereum.proto\"\x8b\x02\n" +
	"\x15EthereumSignTypedData\x12\x1b\n" +
	"\taddress_n\x18\x01 \x03(\rR\baddressN\x12!\n" +
	"\fprimary_type\x18\x02 \x02(\tR\vprimaryType\x122\n" +
	"\x12metamask_v4_compat\x18\x03 \x01(\b:\x04trueR\x10metamaskV4Compat\x12R\n" +
	"\vdefinitions\x18\x04 \x01(\v20.hw.trezor.messages.ethereum.EthereumDefinitionsR\vdefinitions\x12*\n" +
	"\x11show_message_hash\x18\x05 \x01(\fR\x0fshowMessageHash\"4\n" +
	"\x1eEthereumTypedDataStructRequest\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\"\xb4\x05\n" +
	"\x1aEthereumTypedDataStructAck\x12m\n" +
	"\amembers\x18\x01 \x03(\v2S.hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumStructMemberR\amembers\x1a\x90\x01\n" +
	"\x14EthereumStructMember\x12d\n" +
	"\x04type\x18\x01 \x02(\v2P.hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x02(\tR\x04name\x1a\xa7\x02\n" +
	"\x11EthereumFieldType\x12l\n" +
	"\tdata_type\x18\x01 \x02(\x0e2O.hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumDataTypeR\bdataType\x12\x12\n" +
	"\x04size\x18\x02 \x01(\rR\x04size\x12o\n" +
	"\n" +
	"entry_type\x18\x03 \x01(\v2P.hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldTypeR\tentryType\x12\x1f\n" +
	"\vstruct_name\x18\x04 \x01(\tR\n" +
	"structName\"j\n" +
	"\x10EthereumDataType\x12\b\n" +
	"\x04UINT\x10\x01\x12\a\n" +
	"\x03INT\x10\x02\x12\t\n" +
	"\x05BYTES\x10\x03\x12\n" +
	"\n" +
	"\x06STRING\x10\x04\x12\b\n" +
	"\x04BOOL\x10\x05\x12\v\n" +
	"\aADDRESS\x10\x06\x12\t\n" +
	"\x05ARRAY\x10\a\x12\n" +
	"\n" +
	"\x06STRUCT\x10\b\"@\n" +
	"\x1dEthereumTypedDataValueRequest\x12\x1f\n" +
	"\vmember_path\x18\x01 \x03(\rR\n" +
	"memberPath\"1\n" +
	"\x19EthereumTypedDataValueAck\x12\x14\n" +
	"\x05value\x18\x01 \x02(\fR\x05valueB}\n" +
	"#com.satoshilabs.trezor.lib.protobufB\x1bTrezorMessageEthereumEIP712Z9github.com/ethereum/go-ethereum/accounts/usbwallet/trezor"

var (
	file_messages_ethereum_eip712_proto_rawDescOnce sync.Once
	file_messages_ethereum_eip712_proto_rawDescData []byte
)

func file_messages_ethereum_eip712_proto_rawDescGZIP() []byte {
	file_messages_ethereum_eip712_proto_rawDescOnce.Do(func() {
		file_messages_ethereum_eip712_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_ethereum_eip712_proto_rawDesc), len(file_messages_ethereum_eip712_proto_rawDesc)))
	})
	return file_messages_ethereum_eip712_proto_rawDescData
}

var file_messages_ethereum_eip712_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messages_ethereum_eip712_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_messages_ethereum_eip712_proto_goTypes = []any{
	(EthereumTypedDataStructAck_EthereumDataType)(0),        // 0: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumDataType
	(*EthereumSignTypedData)(nil),                           // 1: hw.trezor.messages.ethereum_eip712.EthereumSignTypedData
	(*EthereumTypedDataStructRequest)(nil),                  // 2: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructRequest
	(*EthereumTypedDataStructAck)(nil),                      // 3: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck
	(*EthereumTypedDataValueRequest)(nil),                   // 4: hw.trezor.messages.ethereum_eip712.EthereumTypedDataValueRequest
	(*EthereumTypedDataValueAck)(nil),                       // 5: hw.trezor.messages.ethereum_eip712.EthereumTypedDataValueAck
	(*EthereumTypedDataStructAck_EthereumStructMember)(nil), // 6: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumStructMember
	(*EthereumTypedDataStructAck_EthereumFieldType)(nil),    // 7: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldType
	(*EthereumDefinitions)(nil),                             // 8: hw.trezor.messages.ethereum.EthereumDefinitions
}
var file_messages_ethereum_eip712_proto_depIdxs = []int32{
	8, // 0: hw.trezor.messages.ethereum_eip712.EthereumSignTypedData.definitions:type_name -> hw.trezor.messages.ethereum.EthereumDefinitions
	6, // 1: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.members:type_name -> hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumStructMember
	7, // 2: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumStructMember.type:type_name -> hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldType
	0, // 3: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldType.data_type:type_name -> hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumDataType
	7, // 4: hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldType.entry_type:type_name -> hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_messages_ethereum_eip712_proto_init() }
func file_messages_ethereum_eip712_proto_init() {
	if File_messages_ethereum_eip712_proto != nil {
		return
	}
	file_messages_ethereum_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_ethereum_eip712_proto_rawDesc), len(file_messages_ethereum_eip712_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_ethereum_eip712_proto_goTypes,
		DependencyIndexes: file_messages_ethereum_eip712_proto_depIdxs,
		EnumInfos:         file_messages_ethereum_eip712_proto_enumTypes,
		MessageInfos:      file_messages_ethereum_eip712_proto_msgTypes,
	}.Build()
	File_messages_ethereum_eip712_proto = out.File
	file_messages_ethereum_eip712_proto_goTypes = nil
	file_messages_ethereum_eip712_proto_depIdxs = nil
}
