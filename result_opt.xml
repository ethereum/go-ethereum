<?xml version="1.0" encoding="UTF-8"?>
<testsuite tests="6204" skipped="0" errors="0" failures="0" id="0" name="SolidityTests" time="430.339">
<testcase assertions="5" classname="TemporaryDirectoryTest" name="TemporaryDirectory_should_create_and_delete_a_unique_and_empty_directory" time="0.00165">
</testcase>
<testcase assertions="2" classname="TemporaryDirectoryTest" name="TemporaryDirectory_should_delete_its_directory_even_if_not_empty" time="0.001067">
</testcase>
<testcase assertions="2" classname="TemporaryDirectoryTest" name="TemporaryWorkingDirectory_should_change_and_restore_working_directory" time="0.000594">
</testcase>
<testcase assertions="3" classname="SolidityAuctionRegistrar" name="creation" time="0.248062">
</testcase>
<testcase assertions="18" classname="SolidityAuctionRegistrar" name="reserve" time="0.000769">
</testcase>
<testcase assertions="10" classname="SolidityAuctionRegistrar" name="double_reserve_long" time="0.000409">
</testcase>
<testcase assertions="89" classname="SolidityAuctionRegistrar" name="properties" time="0.003055">
</testcase>
<testcase assertions="10" classname="SolidityAuctionRegistrar" name="transfer" time="0.000454">
</testcase>
<testcase assertions="30" classname="SolidityAuctionRegistrar" name="disown" time="0.001048">
</testcase>
<testcase assertions="10" classname="SolidityAuctionRegistrar" name="auction_simple" time="0.000463">
</testcase>
<testcase assertions="15" classname="SolidityAuctionRegistrar" name="auction_bidding" time="0.000665">
</testcase>
<testcase assertions="5" classname="SolidityWallet" name="creation" time="0.609267">
</testcase>
<testcase assertions="11" classname="SolidityWallet" name="add_owners" time="0.001066">
</testcase>
<testcase assertions="7" classname="SolidityWallet" name="change_owners" time="0.000573">
</testcase>
<testcase assertions="62" classname="SolidityWallet" name="remove_owner" time="0.005005">
</testcase>
<testcase assertions="11" classname="SolidityWallet" name="initial_owners" time="0.000798">
</testcase>
<testcase assertions="10" classname="SolidityWallet" name="multisig_value_transfer" time="0.000939">
</testcase>
<testcase assertions="15" classname="SolidityWallet" name="revoke_addOwner" time="0.001344">
</testcase>
<testcase assertions="12" classname="SolidityWallet" name="revoke_transaction" time="0.001089">
</testcase>
<testcase assertions="16" classname="SolidityWallet" name="daylimit" time="0.00113">
</testcase>
<testcase assertions="5" classname="SolidityWallet" name="daylimit_constructor" time="0.000378">
</testcase>
<testcase assertions="15" classname="Checksum" name="calculate" time="0.000226">
</testcase>
<testcase assertions="4" classname="Checksum" name="regular" time="3.7e-05">
</testcase>
<testcase assertions="4" classname="Checksum" name="regular_negative" time="3.4e-05">
</testcase>
<testcase assertions="8" classname="Checksum" name="regular_invalid_length" time="4.8e-05">
</testcase>
<testcase assertions="4" classname="Checksum" name="homocaps_valid" time="3.3e-05">
</testcase>
<testcase assertions="4" classname="Checksum" name="homocaps_invalid" time="2.2e-05">
</testcase>
<testcase assertions="7" classname="CommonData" name="fromhex_char" time="3.3e-05">
</testcase>
<testcase assertions="12" classname="CommonData" name="fromhex_string" time="4e-05">
</testcase>
<testcase assertions="5" classname="CommonData" name="tohex_uint8" time="2.2e-05">
</testcase>
<testcase assertions="8" classname="CommonData" name="tohex_bytes" time="1.7e-05">
</testcase>
<testcase assertions="17" classname="CommonData" name="test_format_number" time="4.3e-05">
</testcase>
<testcase assertions="1" classname="CommonIOTest" name="readFileAsString_regular_file" time="0.001359">
</testcase>
<testcase assertions="1" classname="CommonIOTest" name="readFileAsString_directory" time="0.000415">
</testcase>
<testcase assertions="1" classname="CommonIOTest" name="readFileAsString_symlink" time="0.001587">
</testcase>
<testcase assertions="8" classname="FixedHashTest" name="default_constructor" time="2.9e-05">
</testcase>
<testcase assertions="8" classname="FixedHashTest" name="bytes_constructor" time="1.7e-05">
</testcase>
<testcase assertions="10" classname="FixedHashTest" name="string_constructor_fromhex" time="1.9e-05">
</testcase>
<testcase assertions="8" classname="FixedHashTest" name="string_constructor_frombytes" time="1.3e-05">
</testcase>
<testcase assertions="8" classname="FixedHashTest" name="converting_constructor" time="1.5e-05">
</testcase>
<testcase assertions="1" classname="FixedHashTest" name="arith_constructor" time="7e-06">
</testcase>
<testcase assertions="1" classname="FixedHashTest" name="to_arith" time="1e-05">
</testcase>
<testcase assertions="13" classname="FixedHashTest" name="comparison" time="2.5e-05">
</testcase>
<testcase assertions="6" classname="FixedHashTest" name="indexing" time="1e-05">
</testcase>
<testcase assertions="5" classname="FixedHashTest" name="misc" time="1.1e-05">
</testcase>
<testcase assertions="1" classname="FixedHashTest" name="tostream" time="3e-05">
</testcase>
<testcase assertions="1" classname="IndentedWriterTest" name="empty" time="8e-06">
</testcase>
<testcase assertions="1" classname="IndentedWriterTest" name="new_lines" time="7e-06">
</testcase>
<testcase assertions="1" classname="IndentedWriterTest" name="text_without_newline" time="6e-06">
</testcase>
<testcase assertions="1" classname="IndentedWriterTest" name="text_with_newline" time="9e-06">
</testcase>
<testcase assertions="1" classname="IndentedWriterTest" name="indent" time="8e-06">
</testcase>
<testcase assertions="7" classname="IpfsHash" name="test_small" time="0.004045">
</testcase>
<testcase assertions="2" classname="IpfsHash" name="test_medium" time="0.002519">
</testcase>
<testcase assertions="2" classname="IpfsHash" name="test_largest_unchunked" time="0.004974">
</testcase>
<testcase assertions="2" classname="IpfsHash" name="test_smallest_chunked" time="0.004951">
</testcase>
<testcase assertions="2" classname="IpfsHash" name="test_large" time="0.024506">
</testcase>
<testcase assertions="2" classname="IpfsHash" name="test_largest_one_level" time="0.835039">
</testcase>
<testcase assertions="2" classname="IpfsHash" name="test_smallest_multi_level" time="0.831537">
</testcase>
<testcase assertions="2" classname="IpfsHash" name="test_multi_level_tree" time="0.773324">
</testcase>
<testcase assertions="1" classname="IterateReplacing" name="no_replacement" time="4e-05">
</testcase>
<testcase assertions="1" classname="IterateReplacing" name="empty_input" time="1.4e-05">
</testcase>
<testcase assertions="1" classname="IterateReplacing" name="delete_some" time="1.3e-05">
</testcase>
<testcase assertions="1" classname="IterateReplacing" name="inject_some_start" time="1.4e-05">
</testcase>
<testcase assertions="1" classname="IterateReplacing" name="inject_some_end" time="1.3e-05">
</testcase>
<testcase assertions="1" classname="JsonTest" name="json_pretty_print" time="6.2e-05">
</testcase>
<testcase assertions="1" classname="JsonTest" name="json_compact_print" time="3.4e-05">
</testcase>
<testcase assertions="17" classname="JsonTest" name="parse_json_strict" time="0.000147">
</testcase>
<testcase assertions="1" classname="Keccak256" name="empty" time="1.7e-05">
</testcase>
<testcase assertions="4" classname="Keccak256" name="zeros" time="2.8e-05">
</testcase>
<testcase assertions="2" classname="Keccak256" name="strings" time="1.5e-05">
</testcase>
<testcase assertions="2" classname="LazyInitTests" name="default_constructed_is_empty" time="1.1e-05">
</testcase>
<testcase assertions="1" classname="LazyInitTests" name="initialized_is_not_empty" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="LazyInitTests" name="init_returns_init_value" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="LazyInitTests" name="moved_from_is_empty" time="1e-05">
</testcase>
<testcase assertions="1" classname="LazyInitTests" name="move_constructed_has_same_value_as_original" time="1e-05">
</testcase>
<testcase assertions="15" classname="LEB128Test" name="encode_unsigned" time="6.6e-05">
</testcase>
<testcase assertions="23" classname="LEB128Test" name="encode_signed" time="5.9e-05">
</testcase>
<testcase assertions="16" classname="StringUtils" name="test_similarity" time="4.3e-05">
</testcase>
<testcase assertions="12" classname="StringUtils" name="test_dldistance" time="4.8e-05">
</testcase>
<testcase assertions="5" classname="StringUtils" name="test_alternatives_list" time="2.1e-05">
</testcase>
<testcase assertions="12" classname="StringUtils" name="test_human_readable_join" time="3.4e-05">
</testcase>
<testcase assertions="20" classname="StringUtils" name="test_format_number_readable" time="8.1e-05">
</testcase>
<testcase assertions="11" classname="SwarmHash" name="test_zeros" time="0.10851">
</testcase>
<testcase assertions="7" classname="SwarmHash" name="bzz_hash_short" time="0.000768">
</testcase>
<testcase assertions="5" classname="SwarmHash" name="bzz_hash_large" time="0.081178">
</testcase>
<testcase assertions="6" classname="SwarmHash" name="bzz_hash_nonzero" time="0.071498">
</testcase>
<testcase assertions="16" classname="UTF8" name="valid" time="4.8e-05">
</testcase>
<testcase assertions="13" classname="UTF8" name="invalid" time="2.5e-05">
</testcase>
<testcase assertions="1" classname="UTF8" name="corpus" time="1.2e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="no_templates" time="2.2e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="basic_replacement" time="3.7e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="tag_unavailable" time="6.9e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="list_unavailable" time="2.8e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="name_type_collision" time="2.2e-05">
</testcase>
<testcase assertions="2" classname="WhiskersTest" name="conditional" time="2.7e-05">
</testcase>
<testcase assertions="2" classname="WhiskersTest" name="conditional_with_else" time="3.2e-05">
</testcase>
<testcase assertions="2" classname="WhiskersTest" name="conditional_plus_params" time="4.6e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="conditional_plus_list" time="6.1e-05">
</testcase>
<testcase assertions="2" classname="WhiskersTest" name="string_as_conditional" time="3.7e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="string_as_conditional_wrong" time="2.4e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="complicated_replacement" time="2.1e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="non_existing_list" time="2.3e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="empty_list" time="1.5e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="list" time="3.7e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="recursive_list" time="2.4e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="list_can_access_upper" time="2.2e-05">
</testcase>
<testcase assertions="2" classname="WhiskersTest" name="parameter_collision" time="3.9e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="invalid_param" time="1.5e-05">
</testcase>
<testcase assertions="1" classname="WhiskersTest" name="invalid_param_rendered" time="9e-06">
</testcase>
<testcase assertions="6" classname="CharStreamTest" name="test_fail" time="3.1e-05">
</testcase>
<testcase assertions="1" classname="ScannerTest" name="test_empty" time="1.4e-05">
</testcase>
<testcase assertions="13" classname="ScannerTest" name="smoke_test" time="2.6e-05">
</testcase>
<testcase assertions="6" classname="ScannerTest" name="assembly_assign" time="1.6e-05">
</testcase>
<testcase assertions="10" classname="ScannerTest" name="assembly_multiple_assign" time="1.5e-05">
</testcase>
<testcase assertions="380" classname="ScannerTest" name="string_printable" time="0.000256">
</testcase>
<testcase assertions="640" classname="ScannerTest" name="string_nonprintable" time="0.00042">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="string_escapes" time="1.2e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="string_escapes_all" time="8e-06">
</testcase>
<testcase assertions="12" classname="ScannerTest" name="string_escapes_legal_before_080" time="1.9e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="string_escapes_with_zero" time="9e-06">
</testcase>
<testcase assertions="8" classname="ScannerTest" name="string_escape_illegal" time="1.4e-05">
</testcase>
<testcase assertions="10" classname="ScannerTest" name="hex_numbers" time="2.3e-05">
</testcase>
<testcase assertions="8" classname="ScannerTest" name="octal_numbers" time="2.1e-05">
</testcase>
<testcase assertions="7" classname="ScannerTest" name="scientific_notation" time="1.2e-05">
</testcase>
<testcase assertions="10" classname="ScannerTest" name="leading_dot_in_identifier" time="2.5e-05">
</testcase>
<testcase assertions="11" classname="ScannerTest" name="middle_dot_in_identifier" time="2.1e-05">
</testcase>
<testcase assertions="9" classname="ScannerTest" name="trailing_dot_in_identifier" time="1.8e-05">
</testcase>
<testcase assertions="11" classname="ScannerTest" name="trailing_dot_in_numbers" time="3.2e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="leading_underscore_decimal_is_identifier" time="1.3e-05">
</testcase>
<testcase assertions="4" classname="ScannerTest" name="leading_underscore_decimal_after_dot_illegal" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="leading_underscore_exp_are_identifier" time="1.4e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="leading_underscore_exp_after_e_illegal" time="1.1e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="leading_underscore_hex_illegal" time="1.6e-05">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="fixed_number_invalid_underscore_front" time="1.1e-05">
</testcase>
<testcase assertions="6" classname="ScannerTest" name="number_literals_with_trailing_underscore_at_eos" time="1.2e-05">
</testcase>
<testcase assertions="22" classname="ScannerTest" name="negative_numbers" time="2.8e-05">
</testcase>
<testcase assertions="17" classname="ScannerTest" name="locations" time="2.2e-05">
</testcase>
<testcase assertions="16" classname="ScannerTest" name="ambiguities" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="documentation_comments_parsed_begin" time="1.4e-05">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="multiline_documentation_comments_parsed_begin" time="1.2e-05">
</testcase>
<testcase assertions="5" classname="ScannerTest" name="documentation_comments_parsed" time="1.2e-05">
</testcase>
<testcase assertions="5" classname="ScannerTest" name="multiline_documentation_comments_parsed" time="1.1e-05">
</testcase>
<testcase assertions="5" classname="ScannerTest" name="multiline_documentation_no_stars" time="1e-05">
</testcase>
<testcase assertions="5" classname="ScannerTest" name="multiline_documentation_whitespace_hell" time="1e-05">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="comment_before_eos" time="7e-06">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="documentation_comment_before_eos" time="8e-06">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="empty_multiline_comment" time="9e-06">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="empty_multiline_documentation_comment_before_eos" time="8e-06">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="comments_mixed_in_sequence" time="1e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="ether_subdenominations" time="9e-06">
</testcase>
<testcase assertions="6" classname="ScannerTest" name="time_subdenominations" time="1.2e-05">
</testcase>
<testcase assertions="4" classname="ScannerTest" name="empty_comment" time="9e-06">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="valid_unicode_string_escape" time="1.5e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="valid_unicode_string_escape_7f" time="1e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="valid_unicode_string_escape_7ff" time="1e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="valid_unicode_string_escape_ffff" time="8e-06">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="invalid_short_unicode_string_escape" time="1.4e-05">
</testcase>
<testcase assertions="6" classname="ScannerTest" name="unicode_prefix_only" time="1.5e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="unicode_invalid_space" time="8e-06">
</testcase>
<testcase assertions="8" classname="ScannerTest" name="unicode_invalid_token" time="1.3e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="valid_unicode_literal" time="9e-06">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="valid_nonprintable_in_unicode_literal" time="9e-06">
</testcase>
<testcase assertions="5" classname="ScannerTest" name="hex_prefix_only" time="1.2e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="hex_invalid_space" time="8e-06">
</testcase>
<testcase assertions="6" classname="ScannerTest" name="hex_invalid_token" time="1.1e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="valid_hex_literal" time="8e-06">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="invalid_short_hex_literal" time="1.1e-05">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="invalid_hex_literal_with_space" time="9e-06">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="invalid_hex_literal_with_wrong_quotes" time="8e-06">
</testcase>
<testcase assertions="3" classname="ScannerTest" name="invalid_hex_literal_nonhex_string" time="8e-06">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="invalid_multiline_comment_close" time="1.4e-05">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="multiline_doc_comment_at_eos" time="8e-06">
</testcase>
<testcase assertions="2" classname="ScannerTest" name="multiline_comment_at_eos" time="7e-06">
</testcase>
<testcase assertions="12" classname="ScannerTest" name="regular_line_break_in_single_line_comment" time="2e-05">
</testcase>
<testcase assertions="24" classname="ScannerTest" name="irregular_line_breaks_in_single_line_comment" time="2.6e-05">
</testcase>
<testcase assertions="12" classname="ScannerTest" name="regular_line_breaks_in_single_line_doc_comment" time="2e-05">
</testcase>
<testcase assertions="15" classname="ScannerTest" name="regular_line_breaks_in_multiline_doc_comment" time="1.8e-05">
</testcase>
<testcase assertions="24" classname="ScannerTest" name="irregular_line_breaks_in_single_line_doc_comment" time="2.7e-05">
</testcase>
<testcase assertions="15" classname="ScannerTest" name="regular_line_breaks_in_strings" time="1.7e-05">
</testcase>
<testcase assertions="28" classname="ScannerTest" name="irregular_line_breaks_in_strings" time="2.6e-05">
</testcase>
<testcase assertions="26" classname="ScannerTest" name="solidity_keywords" time="3.4e-05">
</testcase>
<testcase assertions="6" classname="ScannerTest" name="yul_keyword_like" time="1.5e-05">
</testcase>
<testcase assertions="10" classname="ScannerTest" name="yul_identifier_with_dots" time="1.7e-05">
</testcase>
<testcase assertions="24" classname="ScannerTest" name="yul_function" time="3.1e-05">
</testcase>
<testcase assertions="26" classname="ScannerTest" name="yul_function_with_whitespace" time="3e-05">
</testcase>
<testcase assertions="6" classname="SourceLocationTest" name="test_fail" time="1.6e-05">
</testcase>
<testcase assertions="5" classname="Assembler" name="all_assembly_items" time="0.000367">
</testcase>
<testcase assertions="5" classname="Assembler" name="immutable" time="0.000184">
</testcase>
<testcase assertions="4" classname="Assembler" name="subobject_encode_decode" time="6.6e-05">
</testcase>
<testcase assertions="4" classname="Optimiser" name="cse_push_immutable_same" time="4.1e-05">
</testcase>
<testcase assertions="4" classname="Optimiser" name="cse_push_immutable_different" time="2e-05">
</testcase>
<testcase assertions="7" classname="Optimiser" name="cse_assign_immutable" time="3.1e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="cse_assign_immutable_breaks" time="1e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="cse_intermediate_swap" time="9.4e-05">
</testcase>
<testcase assertions="4" classname="Optimiser" name="cse_negative_stack_access" time="3.1e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_negative_stack_end" time="2.6e-05">
</testcase>
<testcase assertions="5" classname="Optimiser" name="cse_intermediate_negative_stack" time="3.2e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_pop" time="1.8e-05">
</testcase>
<testcase assertions="7" classname="Optimiser" name="cse_unneeded_items" time="4.7e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_constant_addition" time="3.4e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_invariants" time="3.1e-05">
</testcase>
<testcase assertions="4" classname="Optimiser" name="cse_subself" time="2.5e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_subother" time="3.1e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_double_negation" time="4.9e-05">
</testcase>
<testcase assertions="10" classname="Optimiser" name="cse_double_iszero" time="7.6e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_associativity" time="2.6e-05">
</testcase>
<testcase assertions="7" classname="Optimiser" name="cse_associativity2" time="7.7e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_double_shift_right_overflow" time="3e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_double_shift_left_overflow" time="2.6e-05">
</testcase>
<testcase assertions="5" classname="Optimiser" name="cse_byte_ordering_bug" time="2.8e-05">
</testcase>
<testcase assertions="5" classname="Optimiser" name="cse_byte_ordering_fix" time="3.2e-05">
</testcase>
<testcase assertions="9" classname="Optimiser" name="cse_storage" time="5.6e-05">
</testcase>
<testcase assertions="6" classname="Optimiser" name="cse_noninterleaved_storage" time="4.5e-05">
</testcase>
<testcase assertions="10" classname="Optimiser" name="cse_interleaved_storage" time="8.4e-05">
</testcase>
<testcase assertions="7" classname="Optimiser" name="cse_interleaved_storage_same_value" time="5.3e-05">
</testcase>
<testcase assertions="7" classname="Optimiser" name="cse_interleaved_storage_at_known_location" time="5.2e-05">
</testcase>
<testcase assertions="11" classname="Optimiser" name="cse_interleaved_storage_at_known_location_offset" time="0.000107">
</testcase>
<testcase assertions="19" classname="Optimiser" name="cse_deep_stack" time="0.000122">
</testcase>
<testcase assertions="4" classname="Optimiser" name="cse_jumpi_no_jump" time="2.9e-05">
</testcase>
<testcase assertions="6" classname="Optimiser" name="cse_jumpi_jump" time="4.5e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_empty_keccak256" time="2.7e-05">
</testcase>
<testcase assertions="6" classname="Optimiser" name="cse_partial_keccak256" time="4.5e-05">
</testcase>
<testcase assertions="9" classname="Optimiser" name="cse_keccak256_twice_same_location" time="7.5e-05">
</testcase>
<testcase assertions="14" classname="Optimiser" name="cse_keccak256_twice_same_content" time="8.7e-05">
</testcase>
<testcase assertions="21" classname="Optimiser" name="cse_keccak256_twice_same_content_dynamic_store_in_between" time="0.000179">
</testcase>
<testcase assertions="24" classname="Optimiser" name="cse_keccak256_twice_same_content_noninterfering_store_in_between" time="0.000187">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_with_initially_known_stack" time="2.9e-05">
</testcase>
<testcase assertions="6" classname="Optimiser" name="cse_equality_on_initially_known_stack" time="2.9e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="cse_access_previous_sequence" time="6.6e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_optimise_return" time="1.8e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="control_flow_graph_remove_unused" time="3.1e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="control_flow_graph_remove_unused_loop" time="3.4e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="control_flow_graph_reconnect_single_jump_source" time="6.6e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="control_flow_graph_do_not_remove_returned_to" time="4.7e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="block_deduplicator" time="2.8e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="block_deduplicator_assign_immutable_same" time="1.9e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="block_deduplicator_assign_immutable_different_value" time="1.3e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="block_deduplicator_assign_immutable_different_hash" time="1.1e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="block_deduplicator_loops" time="1.8e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="clear_unreachable_code" time="1.5e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="peephole_double_push" time="1.8e-05">
</testcase>
<testcase assertions="4" classname="Optimiser" name="peephole_pop_calldatasize" time="1.8e-05">
</testcase>
<testcase assertions="12" classname="Optimiser" name="peephole_commutative_swap1" time="3.9e-05">
</testcase>
<testcase assertions="12" classname="Optimiser" name="peephole_noncommutative_swap1" time="4e-05">
</testcase>
<testcase assertions="8" classname="Optimiser" name="peephole_swap_comparison" time="2.9e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="peephole_truthy_and" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="peephole_iszero_iszero_jumpi" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="jumpdest_removal" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="Optimiser" name="jumpdest_removal_subassemblies" time="0.000105">
</testcase>
<testcase assertions="9" classname="Optimiser" name="cse_sub_zero" time="5e-05">
</testcase>
<testcase assertions="4" classname="Optimiser" name="cse_simple_verbatim" time="2.4e-05">
</testcase>
<testcase assertions="3" classname="Optimiser" name="cse_mload_pop" time="2.9e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="cse_verbatim_mload" time="3.8e-05">
</testcase>
<testcase assertions="7" classname="Optimiser" name="cse_sload_verbatim_dup" time="4.3e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="cse_verbatim_sload_sideeffect" time="2.4e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="cse_verbatim_eq" time="2.8e-05">
</testcase>
<testcase assertions="26" classname="Optimiser" name="verbatim_knownstate" time="5.2e-05">
</testcase>
<testcase assertions="6111" classname="Optimiser" name="cse_remove_redundant_shift_masking" time="0.02794">
</testcase>
<testcase assertions="74" classname="Optimiser" name="cse_remove_unwanted_masking_of_address" time="0.000337">
</testcase>
<testcase assertions="16" classname="Optimiser" name="cse_replace_too_large_shift" time="7.4e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner" time="3.7e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_no_inline_type" time="1.7e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_no_inline" time="1.1e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_single_jump" time="2.3e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_end_of_bytecode" time="1e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_cse_break" time="1.2e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_stop" time="9e-06">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_stop_jumpi" time="1e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_revert" time="1.2e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_revert_increased_datagas" time="1e-05">
</testcase>
<testcase assertions="1" classname="Optimiser" name="inliner_invalid" time="9e-06">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="smoke_test" time="0.000459">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="simple_function" time="0.000229">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="many_variables_few_uses" time="0.00038">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="many_variables_many_uses" time="0.000373">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="many_return_variables_unused_arguments" time="0.00026">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="many_return_variables_used_arguments" time="0.000282">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="multiple_functions_used_arguments" time="0.000574">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="multiple_functions_unused_arguments" time="0.000538">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="nested_used_arguments" time="0.000596">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="nested_unused_arguments" time="0.000544">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="also_in_outer_block_used_arguments" time="0.000441">
</testcase>
<testcase assertions="2" classname="CompilabilityChecker" name="also_in_outer_block_unused_arguments" time="0.000425">
</testcase>
<testcase assertions="1" classname="YulInlinableFunctionFilter" name="smoke_test" time="0.000245">
</testcase>
<testcase assertions="2" classname="YulInlinableFunctionFilter" name="simple" time="9.4e-05">
</testcase>
<testcase assertions="2" classname="YulInlinableFunctionFilter" name="simple_inside_structures" time="0.000122">
</testcase>
<testcase assertions="7" classname="YulInlinableFunctionFilter" name="negative" time="0.00017">
</testcase>
<testcase assertions="0" classname="KnowledgeBase" name="basic" time="0.000162">
</testcase>
<testcase assertions="2" classname="KnowledgeBase" name="difference" time="0.00028">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="empty_code" time="2.2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="empty_code_custom_weights" time="1.5e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="nested_blocks" time="2.2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="nested_blocks_custom_weights" time="2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="instruction" time="2.3e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="instruction_custom_weights" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="variables_are_free" time="2.8e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="variables_custom_weights" time="2.4e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="constants_cost_one" time="2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="constants_custom_weights" time="1.7e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="functions_are_skipped" time="3.3e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="functions_are_skipped_custom_weights" time="2.8e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="function_with_arguments" time="3.6e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="function_with_arguments_custom_weights" time="2.7e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="function_with_variables_as_arguments" time="3e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="function_with_variables_as_arguments_custom_weights" time="2.9e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="function_with_variables_and_constants_as_arguments" time="4.2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="function_with_variables_and_constants_as_arguments_custom_weights" time="4e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="assignment" time="2.5e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="assignment_custom_weights" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="assignments_between_vars_are_free" time="2.5e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="assignments_between_vars_are_free_custom_weights" time="2.2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="assignment_complex" time="2.7e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="assignment_complex_custom_weights" time="2.6e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="empty_for_loop" time="2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="empty_for_loop_custom_weights" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="break_statement" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="break_statement_custom_weights" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="continue_statement" time="1.8e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="continue_statement_custom_weights" time="1.8e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="regular_for_loop" time="4.2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="regular_for_loop_custom_weights" time="3.6e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="if_statement" time="1.7e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="if_statement_custom_weights" time="1.6e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="switch_statement_tiny" time="2.2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="switch_statement_small" time="2.2e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="switch_statement_small_custom_weights" time="2.4e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="switch_statement_medium" time="2.5e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="switch_statement_large" time="2.7e-05">
</testcase>
<testcase assertions="2" classname="YulCodeSize" name="switch_statement_large_custom_weights" time="2.5e-05">
</testcase>
<testcase assertions="1" classname="YulObjectParser" name="empty_code" time="1.6e-05">
</testcase>
<testcase assertions="4" classname="YulObjectParser" name="recursion_depth" time="0.008552">
</testcase>
<testcase assertions="2" classname="YulObjectParser" name="to_string" time="0.000129">
</testcase>
<testcase assertions="1" classname="YulObjectParser" name="use_src_empty" time="0.000176">
</testcase>
<testcase assertions="3" classname="YulObjectParser" name="use_src_simple" time="6.8e-05">
</testcase>
<testcase assertions="4" classname="YulObjectParser" name="use_src_multiple" time="5.9e-05">
</testcase>
<testcase assertions="4" classname="YulObjectParser" name="use_src_escaped_filenames" time="5.1e-05">
</testcase>
<testcase assertions="2" classname="YulObjectParser" name="use_src_invalid_syntax_malformed_param_1" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="YulObjectParser" name="use_src_invalid_syntax_malformed_param_2" time="1.6e-05">
</testcase>
<testcase assertions="2" classname="YulObjectParser" name="use_src_error_unexpected_trailing_tokens" time="1.8e-05">
</testcase>
<testcase assertions="4" classname="YulObjectParser" name="use_src_multiline" time="6.3e-05">
</testcase>
<testcase assertions="2" classname="YulObjectParser" name="use_src_empty_body" time="2.3e-05">
</testcase>
<testcase assertions="5" classname="YulObjectParser" name="use_src_leading_text" time="7e-05">
</testcase>
<testcase assertions="11" classname="YulParser" name="builtins_analysis" time="7.6e-05">
</testcase>
<testcase assertions="3" classname="YulParser" name="default_types_set" time="6.5e-05">
</testcase>
<testcase assertions="4" classname="YulParser" name="customSourceLocations_empty_block" time="3e-05">
</testcase>
<testcase assertions="14" classname="YulParser" name="customSourceLocations_block_with_children" time="5.9e-05">
</testcase>
<testcase assertions="14" classname="YulParser" name="customSourceLocations_block_different_sources" time="5.8e-05">
</testcase>
<testcase assertions="8" classname="YulParser" name="customSourceLocations_block_nested" time="4.9e-05">
</testcase>
<testcase assertions="17" classname="YulParser" name="customSourceLocations_block_switch_case" time="7.6e-05">
</testcase>
<testcase assertions="19" classname="YulParser" name="customSourceLocations_inherit_into_outer_scope" time="6.4e-05">
</testcase>
<testcase assertions="8" classname="YulParser" name="customSourceLocations_assign_empty" time="4.2e-05">
</testcase>
<testcase assertions="1" classname="YulParser" name="customSourceLocations_invalid_source_index" time="5e-05">
</testcase>
<testcase assertions="9" classname="YulParser" name="customSourceLocations_mixed_locations_1" time="4.3e-05">
</testcase>
<testcase assertions="18" classname="YulParser" name="customSourceLocations_mixed_locations_2" time="5.7e-05">
</testcase>
<testcase assertions="20" classname="YulParser" name="customSourceLocations_mixed_locations_3" time="6.1e-05">
</testcase>
<testcase assertions="9" classname="YulParser" name="customSourceLocations_invalid_comments_after_valid" time="4.6e-05">
</testcase>
<testcase assertions="4" classname="YulParser" name="customSourceLocations_invalid_suffix" time="3.8e-05">
</testcase>
<testcase assertions="4" classname="YulParser" name="customSourceLocations_unspecified" time="2.1e-05">
</testcase>
<testcase assertions="5" classname="YulParser" name="customSourceLocations_ensure_last_match" time="4e-05">
</testcase>
<testcase assertions="5" classname="YulParser" name="customSourceLocations_reference_original_sloc" time="3.2e-05">
</testcase>
<testcase assertions="8" classname="ABIDecoderTest" name="value_types" time="0.053626">
</testcase>
<testcase assertions="16" classname="ABIDecoderTest" name="decode_from_memory_simple" time="0.070197">
</testcase>
<testcase assertions="10" classname="ABIDecoderTest" name="decode_function_type" time="0.089319">
</testcase>
<testcase assertions="14" classname="ABIDecoderTest" name="decode_function_type_array" time="0.411538">
</testcase>
<testcase assertions="11" classname="ABIDecoderTest" name="decode_from_memory_complex" time="0.166116">
</testcase>
<testcase assertions="12" classname="ABIDecoderTest" name="short_input_value_type" time="0.015229">
</testcase>
<testcase assertions="16" classname="ABIDecoderTest" name="short_input_array" time="0.059153">
</testcase>
<testcase assertions="4" classname="ABIDecoderTest" name="short_dynamic_input_array" time="0.077961">
</testcase>
<testcase assertions="11" classname="ABIDecoderTest" name="short_input_bytes" time="0.062226">
</testcase>
<testcase assertions="12" classname="ABIDecoderTest" name="validation_int_inside_arrays" time="0.103653">
</testcase>
<testcase assertions="22" classname="ABIDecoderTest" name="validation_function_type" time="0.082393">
</testcase>
<testcase assertions="6" classname="ABIDecoderTest" name="struct_short" time="0.042641">
</testcase>
<testcase assertions="5" classname="ABIDecoderTest" name="complex_struct" time="0.202264">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="value_types" time="0.036034">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="string_literal" time="0.024346">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="enum_type_cleanup" time="0.016839">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="conversion" time="0.024427">
</testcase>
<testcase assertions="6" classname="ABIEncoderTest" name="memory_array_one_dim" time="0.031697">
</testcase>
<testcase assertions="6" classname="ABIEncoderTest" name="memory_array_two_dim" time="0.068874">
</testcase>
<testcase assertions="6" classname="ABIEncoderTest" name="memory_byte_array" time="0.075415">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="storage_byte_array" time="0.051461">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="storage_array" time="0.033104">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="storage_array_dyn" time="0.031456">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="storage_array_compact" time="0.105805">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="external_function" time="0.024086">
</testcase>
<testcase assertions="12" classname="ABIEncoderTest" name="external_function_cleanup" time="0.028593">
</testcase>
<testcase assertions="18" classname="ABIEncoderTest" name="calldata" time="0.028413">
</testcase>
<testcase assertions="10" classname="ABIEncoderTest" name="function_name_collision" time="0.013585">
</testcase>
<testcase assertions="8" classname="ABIEncoderTest" name="structs" time="0.172657">
</testcase>
<testcase assertions="4" classname="ABIEncoderTest" name="structs2" time="0.219429">
</testcase>
<testcase assertions="14" classname="ABIEncoderTest" name="bool_arrays" time="0.588094">
</testcase>
<testcase assertions="16" classname="ABIEncoderTest" name="bool_arrays_split" time="0.612175">
</testcase>
<testcase assertions="2240" classname="ABIEncoderTest" name="bytesNN_arrays" time="29.7144">
</testcase>
<testcase assertions="2400" classname="ABIEncoderTest" name="bytesNN_arrays_dyn" time="42.5594">
</testcase>
<testcase assertions="8" classname="ABIEncoderTest" name="packed_structs" time="0.055164">
</testcase>
<testcase assertions="4" classname="ABIEncoderTest" name="struct_in_constructor" time="0.104443">
</testcase>
<testcase assertions="4" classname="ABIEncoderTest" name="struct_in_constructor_indirect" time="0.194904">
</testcase>
<testcase assertions="2" classname="ABIEncoderTest" name="struct_in_constructor_data_short" time="0.103837">
</testcase>
<testcase assertions="8" classname="Assembly" name="location_test" time="0.001874">
</testcase>
<testcase assertions="8" classname="Assembly" name="jump_type" time="0.001734">
</testcase>
<testcase assertions="6" classname="GasCostTests" name="string_storage" time="0.011875">
</testcase>
<testcase assertions="4" classname="GasCostTests" name="single_callvaluecheck" time="0.056029">
</testcase>
<testcase assertions="3" classname="GasMeterTests" name="simple_contract" time="0.01456">
</testcase>
<testcase assertions="3" classname="GasMeterTests" name="store_keccak256" time="0.014801">
</testcase>
<testcase assertions="3" classname="GasMeterTests" name="updating_store" time="0.001488">
</testcase>
<testcase assertions="5" classname="GasMeterTests" name="branches" time="0.007647">
</testcase>
<testcase assertions="5" classname="GasMeterTests" name="function_calls" time="0.008703">
</testcase>
<testcase assertions="6" classname="GasMeterTests" name="multiple_external_functions" time="0.011615">
</testcase>
<testcase assertions="6" classname="GasMeterTests" name="exponent_size" time="0.012033">
</testcase>
<testcase assertions="5" classname="GasMeterTests" name="balance_gas" time="0.01209">
</testcase>
<testcase assertions="4" classname="GasMeterTests" name="extcodesize_gas" time="0.005101">
</testcase>
<testcase assertions="4" classname="GasMeterTests" name="regular_functions_exclude_fallback" time="0.00519">
</testcase>
<testcase assertions="7" classname="GasMeterTests" name="complex_control_flow" time="0.03241">
</testcase>
<testcase assertions="1" classname="SolidityImports" name="remappings" time="0.001839">
</testcase>
<testcase assertions="1" classname="SolidityImports" name="context_dependent_remappings" time="0.001638">
</testcase>
<testcase assertions="1" classname="SolidityImports" name="context_dependent_remappings_ensure_default_and_module_preserved" time="0.001734">
</testcase>
<testcase assertions="1" classname="SolidityImports" name="context_dependent_remappings_order_independent_1" time="0.001672">
</testcase>
<testcase assertions="1" classname="SolidityImports" name="context_dependent_remappings_order_independent_2" time="0.001643">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_smoke" time="4.3e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_instructions" time="3.3e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_subblock" time="2.5e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_functional" time="4.2e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_assignments" time="4.6e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_multi_assignments" time="4.2e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_string_literals" time="3.4e-05">
</testcase>
<testcase assertions="6" classname="SolidityInlineAssembly.Printing" name="print_string_literal_unicode" time="4.9e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_if" time="2.8e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_switch" time="3.7e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="print_for" time="6.3e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="function_definitions_multiple_args" time="5.8e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Printing" name="function_calls" time="7.6e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="string_literals" time="6.1e-05">
</testcase>
<testcase assertions="4" classname="SolidityInlineAssembly.Analysis" name="oversize_string_literals" time="3.1e-05">
</testcase>
<testcase assertions="9" classname="SolidityInlineAssembly.Analysis" name="magic_variables" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="stack_variables" time="5.3e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="designated_invalid_instruction" time="2.7e-05">
</testcase>
<testcase assertions="4" classname="SolidityInlineAssembly.Analysis" name="inline_assembly_shadowed_instruction_declaration" time="7.1e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="revert" time="3.7e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="large_constant" time="6.3e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="keccak256" time="3.8e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="returndatasize" time="3.3e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="returndatacopy" time="3.7e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="staticcall" time="5.8e-05">
</testcase>
<testcase assertions="1" classname="SolidityInlineAssembly.Analysis" name="create2" time="4.5e-05">
</testcase>
<testcase assertions="3" classname="SolidityInlineAssembly.Analysis" name="shift" time="9.5e-05">
</testcase>
<testcase assertions="0" classname="SolidityInlineAssembly.Analysis" name="shift_constantinople_warning" time="6e-06">
</testcase>
<testcase assertions="1" classname="LibSolc" name="read_version" time="1.3e-05">
</testcase>
<testcase assertions="1" classname="LibSolc" name="read_license" time="8.7e-05">
</testcase>
<testcase assertions="4" classname="LibSolc" name="standard_compilation" time="0.042874">
</testcase>
<testcase assertions="9" classname="LibSolc" name="missing_callback" time="0.00017">
</testcase>
<testcase assertions="30" classname="LibSolc" name="with_callback" time="0.000263">
</testcase>
<testcase assertions="246" classname="SemVerMatcher" name="positive_range" time="0.00064">
</testcase>
<testcase assertions="174" classname="SemVerMatcher" name="negative_range" time="0.000455">
</testcase>
<testcase assertions="6" classname="SolidityCompiler" name="does_not_include_creation_time_only_internal_functions" time="0.001447">
</testcase>
<testcase assertions="19" classname="SolidityEndToEndTest" name="exp_operator" time="0.044789">
</testcase>
<testcase assertions="19" classname="SolidityEndToEndTest" name="exp_zero" time="0.045574">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="recursive_calls" time="0.080318">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="while_loop" time="0.085926">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="do_while_loop" time="0.090962">
</testcase>
<testcase assertions="30" classname="SolidityEndToEndTest" name="do_while_loop_multiple_local_vars" time="0.125352">
</testcase>
<testcase assertions="30" classname="SolidityEndToEndTest" name="nested_loops" time="0.108425">
</testcase>
<testcase assertions="30" classname="SolidityEndToEndTest" name="nested_loops_multiple_local_vars" time="0.122286">
</testcase>
<testcase assertions="30" classname="SolidityEndToEndTest" name="for_loop_multiple_local_vars" time="0.132668">
</testcase>
<testcase assertions="30" classname="SolidityEndToEndTest" name="nested_for_loop_multiple_local_vars" time="0.142762">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="for_loop" time="0.087222">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="for_loop_simple_init_expr" time="0.087382">
</testcase>
<testcase assertions="26" classname="SolidityEndToEndTest" name="for_loop_break_continue" time="0.154047">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="short_circuiting" time="0.047693">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="high_bits_cleaning" time="0.005728">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="sign_extension" time="0.005544">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="small_unsigned_types" time="0.006786">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="mapping_state_inc_dec" time="0.142381">
</testcase>
<testcase assertions="22" classname="SolidityEndToEndTest" name="multi_level_mapping" time="0.09299">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="constructor" time="0.069756">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="send_ether" time="0.080862">
</testcase>
<testcase assertions="28" classname="SolidityEndToEndTest" name="transfer_ether" time="0.325055">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="selfdestruct" time="0.045464">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="keccak256" time="0.064386">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="sha256" time="0.127026">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="ripemd" time="0.144286">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="packed_keccak256" time="0.109679">
</testcase>
<testcase assertions="8" classname="SolidityEndToEndTest" name="packed_keccak256_complex_types" time="0.408242">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="packed_sha256" time="0.181305">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="packed_ripemd160" time="0.177834">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="inter_contract_calls" time="0.105208">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="inter_contract_calls_with_complex_parameters" time="0.130678">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="inter_contract_calls_accessing_this" time="0.051107">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="calls_to_this" time="0.161641">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="inter_contract_calls_with_local_vars" time="0.114908">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="fixed_bytes_in_calls" time="0.109844">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="constructor_with_long_arguments" time="0.072745">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="contracts_as_addresses" time="0.008941">
</testcase>
<testcase assertions="258" classname="SolidityEndToEndTest" name="blockhash" time="0.042912">
</testcase>
<testcase assertions="2" classname="SolidityEndToEndTest" name="internal_constructor" time="0.000467">
</testcase>
<testcase assertions="8" classname="SolidityEndToEndTest" name="default_fallback_throws" time="0.021165">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="empty_name_input_parameter_with_named_one" time="0.057083">
</testcase>
<testcase assertions="8" classname="SolidityEndToEndTest" name="generic_call" time="0.114591">
</testcase>
<testcase assertions="36" classname="SolidityEndToEndTest" name="generic_delegatecall" time="0.141353">
</testcase>
<testcase assertions="11" classname="SolidityEndToEndTest" name="generic_staticcall" time="0.168296">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="library_call_in_homestead" time="0.292394">
</testcase>
<testcase assertions="28" classname="SolidityEndToEndTest" name="library_call_protection" time="0.498598">
</testcase>
<testcase assertions="7" classname="SolidityEndToEndTest" name="library_staticcall_delegatecall" time="0.037545">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="bytes_from_calldata_to_memory" time="0.084432">
</testcase>
<testcase assertions="22" classname="SolidityEndToEndTest" name="call_forward_bytes" time="0.639113">
</testcase>
<testcase assertions="18" classname="SolidityEndToEndTest" name="call_forward_bytes_length" time="0.595884">
</testcase>
<testcase assertions="22" classname="SolidityEndToEndTest" name="copying_bytes_multiassign" time="0.843444">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="copy_from_calldata_removes_bytes_data" time="0.271502">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="storing_invalid_boolean" time="0.011125">
</testcase>
<testcase assertions="30" classname="SolidityEndToEndTest" name="struct_referencing" time="1.12108">
</testcase>
<testcase assertions="26" classname="SolidityEndToEndTest" name="enum_referencing" time="0.439768">
</testcase>
<testcase assertions="8" classname="SolidityEndToEndTest" name="bytes_in_arguments" time="0.301493">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="array_copy_storage_abi" time="2.95477">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="packed_storage_structs_delete" time="0.011579">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="invalid_enum_logged" time="0.013007">
</testcase>
<testcase assertions="3" classname="SolidityEndToEndTest" name="evm_exceptions_in_constructor_out_of_baund" time="0.01068">
</testcase>
<testcase assertions="7" classname="SolidityEndToEndTest" name="failing_send" time="0.034995">
</testcase>
<testcase assertions="7" classname="SolidityEndToEndTest" name="return_string" time="0.043316">
</testcase>
<testcase assertions="259" classname="SolidityEndToEndTest" name="return_multiple_strings_of_various_sizes" time="0.078021">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="accessor_involving_strings" time="0.090428">
</testcase>
<testcase assertions="99" classname="SolidityEndToEndTest" name="bytes_in_function_calls" time="0.135528">
</testcase>
<testcase assertions="7" classname="SolidityEndToEndTest" name="return_bytes_internal" time="0.079941">
</testcase>
<testcase assertions="7" classname="SolidityEndToEndTest" name="memory_types_initialisation" time="0.074032">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="calldata_struct_short" time="0.010701">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="calldata_struct_function_type" time="0.04645">
</testcase>
<testcase assertions="287" classname="SolidityEndToEndTest" name="calldata_array_dynamic_three_dimensional" time="1.18777">
</testcase>
<testcase assertions="8" classname="SolidityEndToEndTest" name="literal_strings" time="0.036503">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="initialise_string_constant" time="0.037129">
</testcase>
<testcase assertions="22" classname="SolidityEndToEndTest" name="string_as_mapping_key" time="0.248661">
</testcase>
<testcase assertions="11" classname="SolidityEndToEndTest" name="string_as_public_mapping_key" time="0.061977">
</testcase>
<testcase assertions="11" classname="SolidityEndToEndTest" name="nested_string_as_public_mapping_key" time="0.072304">
</testcase>
<testcase assertions="11" classname="SolidityEndToEndTest" name="nested_mixed_string_as_public_mapping_key" time="0.109357">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="constant_string_literal" time="0.026402">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="library_call" time="0.341914">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="library_function_external" time="0.562768">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="library_stray_values" time="0.242678">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="internal_types_in_library" time="0.734271">
</testcase>
<testcase assertions="40" classname="SolidityEndToEndTest" name="mapping_arguments_in_library" time="0.20085">
</testcase>
<testcase assertions="100" classname="SolidityEndToEndTest" name="mapping_returns_in_library" time="0.327529">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="mapping_returns_in_library_named" time="0.358916">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="using_library_mappings_public" time="0.699013">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="using_library_mappings_external" time="0.094602">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="using_library_mappings_return" time="0.770935">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="using_library_structs" time="0.518268">
</testcase>
<testcase assertions="20" classname="SolidityEndToEndTest" name="short_strings" time="2.75783">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="calldata_offset" time="0.074964">
</testcase>
<testcase assertions="28" classname="SolidityEndToEndTest" name="reject_ether_sent_to_library" time="0.135893">
</testcase>
<testcase assertions="0" classname="SolidityEndToEndTest" name="create_memory_array_allocation_size" time="5.9e-05">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="using_for_function_on_struct" time="0.409251">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="using_for_overload" time="0.490145">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="using_for_by_name" time="0.415692">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="bound_function_in_function" time="0.120273">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="bound_function_in_var" time="0.414067">
</testcase>
<testcase assertions="16" classname="SolidityEndToEndTest" name="bound_function_to_string" time="0.813111">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="inline_long_string_return" time="0.021771">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="index_access_with_type_conversion" time="0.024064">
</testcase>
<testcase assertions="0" classname="SolidityEndToEndTest" name="correctly_initialize_memory_array_in_constructor" time="7.7e-05">
</testcase>
<testcase assertions="13" classname="SolidityEndToEndTest" name="mutex" time="0.130012">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="payable_function" time="0.010115">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="payable_function_calls_library" time="0.220064">
</testcase>
<testcase assertions="24" classname="SolidityEndToEndTest" name="non_payable_throw" time="0.078926">
</testcase>
<testcase assertions="7" classname="SolidityEndToEndTest" name="mem_resize_is_not_paid_at_call" time="0.145438">
</testcase>
<testcase assertions="8" classname="SolidityEndToEndTest" name="receive_external_function_type" time="0.142923">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="return_external_function_type" time="0.010263">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="shift_bytes" time="0.017427">
</testcase>
<testcase assertions="12" classname="SolidityEndToEndTest" name="contracts_separated_with_comment" time="0.041203">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="include_creation_bytecode_only_once" time="0.034964">
</testcase>
<testcase assertions="8" classname="SolidityEndToEndTest" name="revert_with_cause" time="0.104699">
</testcase>
<testcase assertions="10" classname="SolidityEndToEndTest" name="require_with_message" time="0.1247">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="bubble_up_error_messages" time="0.039254">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="bubble_up_error_messages_through_transfer" time="0.037337">
</testcase>
<testcase assertions="4" classname="SolidityEndToEndTest" name="bubble_up_error_messages_through_create" time="0.038109">
</testcase>
<testcase assertions="7" classname="SolidityEndToEndTest" name="interface_contract" time="0.051425">
</testcase>
<testcase assertions="9" classname="SolidityEndToEndTest" name="bare_call_invalid_address" time="0.036043">
</testcase>
<testcase assertions="114" classname="SolidityEndToEndTest" name="bare_call_return_data" time="4.0183">
</testcase>
<testcase assertions="40" classname="SolidityEndToEndTest" name="abi_encodePacked" time="0.893701">
</testcase>
<testcase assertions="40" classname="SolidityEndToEndTest" name="abi_encodePacked_from_storage" time="4.47868">
</testcase>
<testcase assertions="32" classname="SolidityEndToEndTest" name="abi_encodePacked_from_memory" time="1.68621">
</testcase>
<testcase assertions="24" classname="SolidityEndToEndTest" name="abi_encodePacked_functionPtr" time="1.09705">
</testcase>
<testcase assertions="22" classname="SolidityEndToEndTest" name="abi_encodePackedV2_structs" time="1.77438">
</testcase>
<testcase assertions="14" classname="SolidityEndToEndTest" name="abi_encodePackedV2_nestedArray" time="0.557945">
</testcase>
<testcase assertions="22" classname="SolidityEndToEndTest" name="abi_encodePackedV2_arrayOfStrings" time="0.6303">
</testcase>
<testcase assertions="5" classname="SolidityEndToEndTest" name="code_access" time="0.04366">
</testcase>
<testcase assertions="17" classname="SolidityEndToEndTest" name="contract_name" time="0.325175">
</testcase>
<testcase assertions="20" classname="SolidityEndToEndTest" name="event_wrong_abi_name" time="0.217744">
</testcase>
<testcase assertions="6" classname="SolidityEndToEndTest" name="dirty_scratch_space_prior_to_constant_optimiser" time="0.009659">
</testcase>
<testcase assertions="30" classname="SolidityEndToEndTest" name="strip_reason_strings" time="0.399196">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="literal_true" time="0.000293">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="literal_false" time="0.000157">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="int_literal" time="0.000161">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="int_with_wei_ether_subdenomination" time="0.000166">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="int_with_gwei_ether_subdenomination" time="0.000152">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="int_with_ether_ether_subdenomination" time="0.000142">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="comparison" time="0.000205">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="short_circuiting" time="0.000202">
</testcase>
<testcase assertions="17" classname="SolidityExpressionCompiler" name="arithmetic" time="0.00049">
</testcase>
<testcase assertions="17" classname="SolidityExpressionCompiler" name="unary_operators" time="0.000256">
</testcase>
<testcase assertions="24" classname="SolidityExpressionCompiler" name="unary_inc_dec" time="0.000241">
</testcase>
<testcase assertions="24" classname="SolidityExpressionCompiler" name="assignment" time="0.000235">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="negative_literals_8bits" time="0.000163">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="negative_literals_16bits" time="0.000154">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="intermediately_overflowing_literals" time="0.000207">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="blockhash" time="0.000153">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="gas_left" time="0.000153">
</testcase>
<testcase assertions="10" classname="SolidityExpressionCompiler" name="selfbalance" time="0.000206">
</testcase>
<testcase assertions="5" classname="SolidityNameAndTypeResolution" name="function_no_implementation" time="0.000479">
</testcase>
<testcase assertions="8" classname="SolidityNameAndTypeResolution" name="abstract_contract" time="0.000351">
</testcase>
<testcase assertions="6" classname="SolidityNameAndTypeResolution" name="abstract_contract_with_overload" time="0.00035">
</testcase>
<testcase assertions="5" classname="SolidityNameAndTypeResolution" name="implement_abstract_via_constructor" time="0.000326">
</testcase>
<testcase assertions="3" classname="SolidityNameAndTypeResolution" name="function_canonical_signature" time="0.000375">
</testcase>
<testcase assertions="3" classname="SolidityNameAndTypeResolution" name="function_canonical_signature_type_aliases" time="0.000319">
</testcase>
<testcase assertions="3" classname="SolidityNameAndTypeResolution" name="function_external_types" time="0.000487">
</testcase>
<testcase assertions="3" classname="SolidityNameAndTypeResolution" name="enum_external_type" time="0.00037">
</testcase>
<testcase assertions="5" classname="SolidityNameAndTypeResolution" name="external_struct_signatures" time="0.000852">
</testcase>
<testcase assertions="5" classname="SolidityNameAndTypeResolution" name="external_struct_signatures_in_libraries" time="0.000459">
</testcase>
<testcase assertions="4" classname="SolidityNameAndTypeResolution" name="struct_with_mapping_in_library" time="0.000391">
</testcase>
<testcase assertions="15" classname="SolidityNameAndTypeResolution" name="state_variable_accessors" time="0.000408">
</testcase>
<testcase assertions="5" classname="SolidityNameAndTypeResolution" name="private_state_variable" time="0.000294">
</testcase>
<testcase assertions="3" classname="SolidityNameAndTypeResolution" name="string" time="0.000299">
</testcase>
<testcase assertions="1" classname="SolidityNameAndTypeResolution" name="dynamic_return_types_not_possible" time="0.000361">
</testcase>
<testcase assertions="3" classname="SolidityNameAndTypeResolution" name="warn_nonpresent_pragma" time="0.000199">
</testcase>
<testcase assertions="4" classname="SolidityNameAndTypeResolution" name="getter_is_memory_type" time="0.000378">
</testcase>
<testcase assertions="1" classname="SolidityNameAndTypeResolution" name="address_staticcall" time="0.000347">
</testcase>
<testcase assertions="3" classname="SolidityNameAndTypeResolution" name="address_staticcall_value" time="0.00036">
</testcase>
<testcase assertions="1" classname="SolidityNameAndTypeResolution" name="address_call_full_return_type" time="0.000344">
</testcase>
<testcase assertions="1" classname="SolidityNameAndTypeResolution" name="address_delegatecall_full_return_type" time="0.000332">
</testcase>
<testcase assertions="1" classname="SolidityNameAndTypeResolution" name="address_staticcall_full_return_type" time="0.000371">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_empty_natspec_test" time="0.000291">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_newline_break" time="0.000284">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_multiline_empty_lines" time="0.000305">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_basic_test" time="0.000359">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_and_user_basic_test" time="0.000678">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_multiline_comment" time="0.000372">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_multiple_functions" time="0.000581">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_empty_contract" time="0.000231">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_and_user_no_doc" time="0.000814">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="public_state_variable" time="0.000545">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="public_state_variable_struct" time="0.000675">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="public_state_variable_struct_repeated" time="0.00024">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="private_state_variable" time="0.000482">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="event" time="0.000581">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_desc_after_nl" time="0.000421">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_multiple_params" time="0.000376">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_multiple_params_mixed_whitespace" time="0.00038">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_mutiline_param_description" time="0.000397">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_multiple_functions" time="0.000636">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_return_no_params" time="0.00039">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_return" time="0.000407">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_return_desc_after_nl" time="0.000409">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_return_desc_multiple_unamed_mixed" time="0.000456">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_return_desc_multiple_unamed_mixed_2" time="0.0005">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_return_desc_multiple_unamed" time="0.000448">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_return_desc_multiple" time="0.000447">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_multiline_return" time="0.000401">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_multiline_comment" time="0.000392">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_documenting_no_return_paramname" time="0.000261">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_contract_no_doc" time="0.000359">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_contract_doc" time="0.000353">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_author_at_function" time="0.00025">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="natspec_notice_without_tag" time="0.000319">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="natspec_multiline_notice_without_tag" time="0.00032">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="empty_comment" time="0.000225">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_title_at_function_error" time="0.000224">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_documenting_nonexistent_param" time="0.000227">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_documenting_no_paramname" time="0.000214">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_documenting_no_paramname_end" time="0.000197">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_documenting_no_param_description" time="0.000232">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_constructor" time="0.000274">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="user_constructor_and_function" time="0.000632">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_constructor" time="0.000353">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_constructor_return" time="0.000183">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_constructor_and_function" time="0.000485">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="slash4" time="0.000248">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="star3" time="0.000235">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="slash3_slash3" time="0.00024">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="slash3_slash4" time="0.000247">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_default_inherit_variable" time="0.000775">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="user_default_inherit_variable" time="0.000747">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_explicit_inherit_variable" time="0.001007">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="user_explicit_inherit_variable" time="0.000983">
</testcase>
<testcase assertions="6" classname="SolidityNatspecJSON" name="dev_default_inherit" time="0.001958">
</testcase>
<testcase assertions="6" classname="SolidityNatspecJSON" name="user_default_inherit" time="0.001912">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_explicit_inherit" time="0.001306">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="user_explicit_inherit" time="0.001241">
</testcase>
<testcase assertions="6" classname="SolidityNatspecJSON" name="dev_explicit_inherit2" time="0.001857">
</testcase>
<testcase assertions="6" classname="SolidityNatspecJSON" name="user_explicit_inherit2" time="0.001882">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_explicit_inherit_partial2" time="0.001329">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="user_explicit_inherit_partial2" time="0.001273">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_explicit_inherit_partial" time="0.001256">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="user_explicit_inherit_partial" time="0.001227">
</testcase>
<testcase assertions="6" classname="SolidityNatspecJSON" name="dev_inherit_parameter_mismatch" time="0.001899">
</testcase>
<testcase assertions="6" classname="SolidityNatspecJSON" name="user_inherit_parameter_mismatch" time="0.001855">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="dev_explicit_inehrit_complex" time="0.000687">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_different_return_name" time="0.000929">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_different_return_name_multiple" time="0.001018">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_different_return_name_multiple_partly_unnamed" time="0.000999">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_different_return_name_multiple_unnamed" time="0.000995">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_return_name_no_description" time="0.00092">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="error" time="0.000548">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="error_multiple" time="0.001063">
</testcase>
<testcase assertions="2" classname="SolidityNatspecJSON" name="custom" time="0.000412">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="custom_inheritance" time="0.000764">
</testcase>
<testcase assertions="4" classname="SolidityNatspecJSON" name="dev_different_amount_return_parameters" time="0.000819">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="smoke_test" time="0.011674">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="identities" time="0.033931">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="unused_expressions" time="0.007249">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="constant_folding_both_sides" time="0.018857">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="storage_access" time="0.034675">
</testcase>
<testcase assertions="18" classname="SolidityOptimizer" name="array_copy" time="0.034977">
</testcase>
<testcase assertions="18" classname="SolidityOptimizer" name="function_calls" time="0.021814">
</testcase>
<testcase assertions="18" classname="SolidityOptimizer" name="storage_write_in_loops" time="0.027418">
</testcase>
<testcase assertions="21" classname="SolidityOptimizer" name="retain_information_in_branches" time="0.04888">
</testcase>
<testcase assertions="15" classname="SolidityOptimizer" name="store_tags_as_unions" time="0.064417">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="incorrect_storage_access_bug" time="0.013312">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="sequence_number_for_calls" time="0.071426">
</testcase>
<testcase assertions="23" classname="SolidityOptimizer" name="computing_constants" time="0.032005">
</testcase>
<testcase assertions="13" classname="SolidityOptimizer" name="constant_optimization_early_exit" time="0.121605">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="inconsistency" time="0.023234">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="dead_code_elimination_across_assemblies" time="0.009174">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="invalid_state_at_control_flow_join" time="0.020264">
</testcase>
<testcase assertions="14" classname="SolidityOptimizer" name="init_empty_dynamic_arrays" time="0.016231">
</testcase>
<testcase assertions="16" classname="SolidityOptimizer" name="optimise_multi_stores" time="0.050431">
</testcase>
<testcase assertions="25" classname="SolidityOptimizer" name="optimise_constant_to_codecopy" time="0.008797">
</testcase>
<testcase assertions="12" classname="SolidityOptimizer" name="byte_access" time="0.012739">
</testcase>
<testcase assertions="15" classname="SolidityOptimizer" name="shift_optimizer_bug" time="0.01275">
</testcase>
<testcase assertions="11" classname="SolidityOptimizer" name="avoid_double_cleanup" time="0.007923">
</testcase>
<testcase assertions="6" classname="SolidityParser" name="reserved_keywords" time="4.4e-05">
</testcase>
<testcase assertions="5" classname="SolidityParser" name="function_natspec_documentation" time="8.3e-05">
</testcase>
<testcase assertions="4" classname="SolidityParser" name="function_normal_comments" time="4.9e-05">
</testcase>
<testcase assertions="13" classname="SolidityParser" name="multiple_functions_natspec_documentation" time="0.000103">
</testcase>
<testcase assertions="5" classname="SolidityParser" name="multiline_function_documentation" time="4.6e-05">
</testcase>
<testcase assertions="8" classname="SolidityParser" name="natspec_comment_in_function_body" time="9.2e-05">
</testcase>
<testcase assertions="4" classname="SolidityParser" name="natspec_docstring_between_keyword_and_signature" time="6.5e-05">
</testcase>
<testcase assertions="4" classname="SolidityParser" name="natspec_docstring_after_signature" time="6.5e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="variable_definition" time="3.9e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="variable_definition_with_initialization" time="3.7e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="operator_expression" time="3.2e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="complex_expression" time="3.1e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="statement_starting_with_type_conversion" time="3.6e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="type_conversion_to_dynamic_array" time="3.3e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="import_directive" time="3.4e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="multiple_contracts" time="2.9e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="multiple_contracts_and_imports" time="3.5e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="contract_inheritance" time="3.3e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="contract_multiple_inheritance" time="3e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="contract_multiple_inheritance_with_arguments" time="3.9e-05">
</testcase>
<testcase assertions="63" classname="SolidityParser" name="keyword_is_reserved" time="0.000746">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="member_access_parser_ambiguity" time="7.4e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="using_for" time="3.9e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="complex_import" time="2.9e-05">
</testcase>
<testcase assertions="2" classname="SolidityParser" name="inline_asm_end_location" time="5.1e-05">
</testcase>
<testcase assertions="33" classname="SolidityTypes" name="int_types" time="7.3e-05">
</testcase>
<testcase assertions="33" classname="SolidityTypes" name="uint_types" time="6.7e-05">
</testcase>
<testcase assertions="32" classname="SolidityTypes" name="byte_types" time="5.8e-05">
</testcase>
<testcase assertions="65" classname="SolidityTypes" name="fixed_types" time="0.000142">
</testcase>
<testcase assertions="65" classname="SolidityTypes" name="ufixed_types" time="0.000136">
</testcase>
<testcase assertions="7" classname="SolidityTypes" name="storage_layout_simple" time="3.4e-05">
</testcase>
<testcase assertions="9" classname="SolidityTypes" name="storage_layout_mapping" time="2.9e-05">
</testcase>
<testcase assertions="7" classname="SolidityTypes" name="storage_layout_arrays" time="3.3e-05">
</testcase>
<testcase assertions="9" classname="SolidityTypes" name="type_identifier_escaping" time="3.8e-05">
</testcase>
<testcase assertions="39" classname="SolidityTypes" name="type_identifiers" time="0.000197">
</testcase>
<testcase assertions="10" classname="SolidityTypes" name="encoded_sizes" time="1.8e-05">
</testcase>
<testcase assertions="6" classname="SolidityTypes" name="helper_bool_result" time="1e-05">
</testcase>
<testcase assertions="4" classname="SolidityTypes" name="helper_string_result" time="1e-05">
</testcase>
<testcase assertions="35" classname="StandardCompiler" name="assume_object_input" time="0.054164">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="invalid_language" time="7.2e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="valid_language" time="4.8e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="no_sources" time="4.5e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="no_sources_empty_object" time="4.1e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="no_sources_empty_array" time="4.3e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="sources_is_array" time="4.4e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="unexpected_trailing_test" time="4.4e-05">
</testcase>
<testcase assertions="6" classname="StandardCompiler" name="smoke_test" time="0.000389">
</testcase>
<testcase assertions="11" classname="StandardCompiler" name="error_recovery_field" time="0.000299">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="optimizer_enabled_not_boolean" time="6e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="optimizer_runs_not_a_number" time="5.1e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="optimizer_runs_not_an_unsigned_number" time="5.8e-05">
</testcase>
<testcase assertions="36" classname="StandardCompiler" name="basic_compilation" time="0.002046">
</testcase>
<testcase assertions="6" classname="StandardCompiler" name="compilation_error" time="0.000267">
</testcase>
<testcase assertions="9" classname="StandardCompiler" name="output_selection_explicit" time="0.000391">
</testcase>
<testcase assertions="9" classname="StandardCompiler" name="output_selection_all_contracts" time="0.000325">
</testcase>
<testcase assertions="9" classname="StandardCompiler" name="output_selection_all_files_single_contract" time="0.000303">
</testcase>
<testcase assertions="9" classname="StandardCompiler" name="output_selection_all_files_all_contracts" time="0.000297">
</testcase>
<testcase assertions="9" classname="StandardCompiler" name="output_selection_dependent_contract" time="0.000463">
</testcase>
<testcase assertions="13" classname="StandardCompiler" name="output_selection_dependent_contract_with_import" time="0.000532">
</testcase>
<testcase assertions="9" classname="StandardCompiler" name="filename_with_colon" time="0.000328">
</testcase>
<testcase assertions="27" classname="StandardCompiler" name="library_filename_with_colon" time="0.003093">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="libraries_invalid_top_level" time="0.000103">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="libraries_invalid_entry" time="5.2e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="libraries_invalid_hex" time="0.000105">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="libraries_invalid_length" time="5.2e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="libraries_missing_hex_prefix" time="5e-05">
</testcase>
<testcase assertions="30" classname="StandardCompiler" name="library_linking" time="0.003519">
</testcase>
<testcase assertions="8" classname="StandardCompiler" name="linking_yul" time="0.000535">
</testcase>
<testcase assertions="18" classname="StandardCompiler" name="linking_yul_empty_link_reference" time="0.000511">
</testcase>
<testcase assertions="18" classname="StandardCompiler" name="linking_yul_no_filename_in_link_reference" time="0.000495">
</testcase>
<testcase assertions="18" classname="StandardCompiler" name="linking_yul_same_library_name_different_files" time="0.000522">
</testcase>
<testcase assertions="22" classname="StandardCompiler" name="evm_version" time="0.005217">
</testcase>
<testcase assertions="13" classname="StandardCompiler" name="optimizer_settings_default_disabled" time="0.00055">
</testcase>
<testcase assertions="13" classname="StandardCompiler" name="optimizer_settings_default_enabled" time="0.000544">
</testcase>
<testcase assertions="13" classname="StandardCompiler" name="optimizer_settings_details_exactly_as_default_disabled" time="0.000571">
</testcase>
<testcase assertions="24" classname="StandardCompiler" name="optimizer_settings_details_different" time="0.000628">
</testcase>
<testcase assertions="9" classname="StandardCompiler" name="metadata_without_compilation" time="0.001475">
</testcase>
<testcase assertions="23" classname="StandardCompiler" name="license_in_metadata" time="0.001842">
</testcase>
<testcase assertions="11" classname="StandardCompiler" name="common_pattern" time="0.001182">
</testcase>
<testcase assertions="14" classname="StandardCompiler" name="use_stack_optimization" time="0.035798">
</testcase>
<testcase assertions="11" classname="StandardCompiler" name="standard_output_selection_wildcard" time="0.001331">
</testcase>
<testcase assertions="11" classname="StandardCompiler" name="standard_output_selection_wildcard_colon_source" time="0.001036">
</testcase>
<testcase assertions="11" classname="StandardCompiler" name="standard_output_selection_wildcard_empty_source" time="0.001028">
</testcase>
<testcase assertions="12" classname="StandardCompiler" name="standard_output_selection_wildcard_multiple_sources" time="0.001135">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="stopAfter_invalid_value" time="0.000103">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="stopAfter_invalid_type" time="6.5e-05">
</testcase>
<testcase assertions="5" classname="StandardCompiler" name="stopAfter_bin_conflict" time="5.9e-05">
</testcase>
<testcase assertions="4" classname="StandardCompiler" name="stopAfter_ast_output" time="0.000371">
</testcase>
<testcase assertions="11" classname="StandardCompiler" name="dependency_tracking_of_abstract_contract" time="0.007379">
</testcase>
<testcase assertions="13" classname="StandardCompiler" name="dependency_tracking_of_abstract_contract_yul" time="0.005257">
</testcase>
<testcase assertions="2" classname="StandardCompiler" name="source_location_of_bare_block" time="0.001204">
</testcase>
<testcase assertions="66" classname="ViewPureChecker" name="environment_access" time="0.004222">
</testcase>
<testcase assertions="1" classname="ViewPureChecker" name="address_staticcall" time="0.0003">
</testcase>
<testcase assertions="1" classname="ViewPureChecker" name="assembly_staticcall" time="0.000247">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="only_definitions" time="0.000481">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="ordinary_calls" time="0.00071">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="call_chains_through_externals" time="0.000719">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="calls_from_constructors" time="0.000638">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="calls_to_constructors" time="0.000577">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="inherited_constructors" time="0.001663">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="inheritance_specifiers" time="0.00115">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="inherited_functions_virtual_and_super" time="0.001345">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="overloaded_functions" time="0.001145">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="modifiers" time="0.00125">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="events" time="0.000948">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="cycles" time="0.001094">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="interfaces_and_abstract_contracts" time="0.001168">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="indirect_calls" time="0.001261">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="calls_via_pointers" time="0.001889">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="pointer_to_overridden_function" time="0.000571">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="pointer_to_nonexistent_function" time="0.000815">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="function_self_reference" time="0.000272">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="pointer_cycle" time="0.00032">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="using_for" time="0.000508">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="getters" time="0.000407">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="fallback_and_receive" time="0.000709">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="virtual_fallback_and_receive" time="0.000551">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="builtins" time="0.001078">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="conversions_and_struct_array_constructors" time="0.000748">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="immutable_initialization" time="0.000701">
</testcase>
<testcase assertions="6" classname="FunctionCallGraphTest" name="function_selector_access" time="0.001146">
</testcase>
<testcase assertions="10" classname="BytesUtilsTest" name="format_fixed" time="5e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="smoke_test" time="2.4e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_success" time="3.4e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="non_existent_call_revert_single_line" time="2.5e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_success" time="3.2e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="call_arguments_comments_success" time="5.5e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="simple_single_line_call_comment_success" time="4e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="multiple_single_line" time="3.9e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="multiple_single_line_swapped" time="3.6e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="non_existent_call_revert" time="1.9e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_revert_message" time="4e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_expectations_empty_single_line" time="2.2e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_expectations_empty_multiline" time="1.8e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="call_comments" time="4.1e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments" time="2.9e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_ether" time="2.8e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_bool" time="2.3e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="scanner_hex_values" time="3.2e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="scanner_hex_values_invalid1" time="8.2e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="scanner_hex_values_invalid2" time="2.3e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="scanner_hex_values_invalid3" time="3.5e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="scanner_hex_values_invalid4" time="2.8e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_hex_string" time="2.3e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_hex_string_lowercase" time="2.3e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_string" time="3.4e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_hex_number" time="3.9e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_return_string" time="4.5e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="call_arguments_tuple" time="3.7e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="call_arguments_left_aligned" time="5.1e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_tuple_of_tuples" time="2.5e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="call_arguments_recursive_tuples" time="3.8e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_arguments_mismatch" time="2.8e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_multiple_arguments" time="2.9e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_multiple_arguments_mixed_format" time="3.6e-05">
</testcase>
<testcase assertions="34" classname="TestFileParserTest" name="call_signature_array" time="4.5e-05">
</testcase>
<testcase assertions="45" classname="TestFileParserTest" name="call_signature_struct_array" time="5.7e-05">
</testcase>
<testcase assertions="23" classname="TestFileParserTest" name="call_signature_valid" time="3.3e-05">
</testcase>
<testcase assertions="16" classname="TestFileParserTest" name="call_raw_arguments" time="3.3e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_builtin_left_decimal" time="3.9e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="call_builtin_right_decimal" time="3.1e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_hex_string_left_align" time="5.6e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_hex_string_right_align" time="3e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_newline_invalid" time="1.9e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_invalid" time="2.9e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_signature_invalid" time="3.1e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_tuple_invalid" time="2.8e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_tuple_invalid_empty" time="2.7e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_tuple_invalid_parantheses" time="2.7e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_ether_value_expectations_missing" time="4.3e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_invalid" time="2.5e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_invalid_decimal" time="2.9e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_ether_value_invalid" time="3.3e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_ether_value_invalid_decimal" time="2.8e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_ether_type_invalid" time="3.1e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_signed_bool_invalid" time="2.6e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_signed_failure_invalid" time="2.5e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_signed_hex_number_invalid" time="2.5e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_colon" time="2.5e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arguments_newline_colon" time="2.6e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_arrow_missing" time="2.6e-05">
</testcase>
<testcase assertions="1" classname="TestFileParserTest" name="call_unexpected_character" time="2.5e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="constructor" time="1.9e-05">
</testcase>
<testcase assertions="12" classname="TestFileParserTest" name="library" time="1.7e-05">
</testcase>
<testcase assertions="35" classname="TestFileParserTest" name="call_effects" time="0.000161">
</testcase>
<testcase assertions="2" classname="TestFunctionCallTest" name="format_unsigned_singleline" time="7.5e-05">
</testcase>
<testcase assertions="2" classname="TestFunctionCallTest" name="format_unsigned_singleline_signed_encoding" time="5.1e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_unsigned_multiline" time="2e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_multiple_unsigned_singleline" time="2.5e-05">
</testcase>
<testcase assertions="2" classname="TestFunctionCallTest" name="format_signed_singleline" time="6.3e-05">
</testcase>
<testcase assertions="2" classname="TestFunctionCallTest" name="format_hex_singleline" time="5.6e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_hex_string_singleline" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="TestFunctionCallTest" name="format_bool_true_singleline" time="5.2e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_bool_false_singleline" time="1.6e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_bool_left_singleline" time="1.4e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_hex_number_right_singleline" time="2.2e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_empty_byte_range" time="1e-05">
</testcase>
<testcase assertions="1" classname="TestFunctionCallTest" name="format_failure_singleline" time="1.4e-05">
</testcase>
<testcase assertions="60" classname="CommandLineInterfaceTest" name="multiple_input_modes" time="0.005217">
</testcase>
<testcase assertions="7" classname="CommandLineInterfaceTest" name="cli_input" time="0.003004">
</testcase>
<testcase assertions="6" classname="CommandLineInterfaceTest" name="cli_ignore_missing_some_files_exist" time="0.001857">
</testcase>
<testcase assertions="2" classname="CommandLineInterfaceTest" name="cli_ignore_missing_no_files_exist" time="0.000603">
</testcase>
<testcase assertions="2" classname="CommandLineInterfaceTest" name="cli_not_a_file" time="0.000564">
</testcase>
<testcase assertions="8" classname="CommandLineInterfaceTest" name="standard_json_base_path" time="0.000578">
</testcase>
<testcase assertions="7" classname="CommandLineInterfaceTest" name="standard_json_no_input_file" time="0.00021">
</testcase>
<testcase assertions="6" classname="CommandLineInterfaceTest" name="standard_json_dash" time="0.000185">
</testcase>
<testcase assertions="6" classname="CommandLineInterfaceTest" name="standard_json_one_input_file" time="0.001217">
</testcase>
<testcase assertions="2" classname="CommandLineInterfaceTest" name="standard_json_two_input_files" time="0.000219">
</testcase>
<testcase assertions="2" classname="CommandLineInterfaceTest" name="standard_json_one_input_file_and_stdin" time="0.000184">
</testcase>
<testcase assertions="2" classname="CommandLineInterfaceTest" name="standard_json_ignore_missing" time="0.000587">
</testcase>
<testcase assertions="2" classname="CommandLineInterfaceTest" name="standard_json_remapping" time="0.000189">
</testcase>
<testcase assertions="4" classname="CommandLineParserTest" name="no_options" time="0.000186">
</testcase>
<testcase assertions="4" classname="CommandLineParserTest" name="help" time="0.000762">
</testcase>
<testcase assertions="8" classname="CommandLineParserTest" name="cli_mode_options" time="0.002479">
</testcase>
<testcase assertions="64" classname="CommandLineParserTest" name="assembly_mode_options" time="0.016853">
</testcase>
<testcase assertions="4" classname="CommandLineParserTest" name="standard_json_mode_options" time="0.000999">
</testcase>
<testcase assertions="3" classname="Phaser.TestHelpersTest" name="ChromosomeLengthMetric_evaluate_should_return_chromosome_length" time="2.3e-05">
</testcase>
<testcase assertions="1" classname="Phaser.TestHelpersTest" name="wholeChromosomeReplacement_should_replace_whole_chromosome_with_another" time="1.2e-05">
</testcase>
<testcase assertions="2" classname="Phaser.TestHelpersTest" name="geneSubstitution_should_change_a_single_gene_at_a_given_index" time="8.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.TestHelpersTest" name="chromosomeLengths_should_return_lengths_of_all_chromosomes_in_a_population" time="2.4e-05">
</testcase>
<testcase assertions="3" classname="Phaser.TestHelpersTest" name="countDifferences_should_return_zero_for_identical_chromosomes" time="2.1e-05">
</testcase>
<testcase assertions="5" classname="Phaser.TestHelpersTest" name="countDifferences_should_count_mismatched_positions_in_chromosomes_of_the_same_length" time="2.5e-05">
</testcase>
<testcase assertions="7" classname="Phaser.TestHelpersTest" name="countDifferences_should_count_missing_characters_as_differences" time="2.2e-05">
</testcase>
<testcase assertions="125" classname="Phaser.TestHelpersTest" name="enumerateOptimisationSteps_should_assing_indices_to_all_available_optimisation_steps" time="0.00022">
</testcase>
<testcase assertions="9" classname="Phaser.TestHelpersTest" name="stripWhitespace_should_remove_all_whitespace_characters_from_a_string" time="8e-05">
</testcase>
<testcase assertions="13" classname="Phaser.TestHelpersTest" name="countSubstringOccurrences_should_count_non_overlapping_substring_occurrences_in_a_string" time="3e-05">
</testcase>
<testcase assertions="6" classname="Phaser.TestHelpersTest" name="mean_should_calculate_statistical_mean" time="1.8e-05">
</testcase>
<testcase assertions="9" classname="Phaser.TestHelpersTest" name="meanSquaredError_should_calculate_average_squared_difference_between_samples_and_expected_value" time="2.3e-05">
</testcase>
<testcase assertions="10" classname="Phaser.ChromosomeTest" name="makeRandom_should_return_different_chromosome_each_time" time="0.008844">
</testcase>
<testcase assertions="2" classname="Phaser.ChromosomeTest" name="makeRandom_should_use_every_possible_step_with_the_same_probability" time="0.072057">
</testcase>
<testcase assertions="1" classname="Phaser.ChromosomeTest" name="constructor_should_store_genes" time="1.6e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ChromosomeTest" name="constructor_should_store_optimisation_steps" time="3e-05">
</testcase>
<testcase assertions="2" classname="Phaser.ChromosomeTest" name="constructor_should_allow_duplicate_steps" time="3.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.ChromosomeTest" name="constructor_should_allow_genes_that_do_not_correspond_to_any_step" time="1e-05">
</testcase>
<testcase assertions="3" classname="Phaser.ChromosomeTest" name="output_operator_should_create_concise_and_unambiguous_string_representation" time="0.000175">
</testcase>
<testcase assertions="1" classname="Phaser.ChromosomeTest" name="optimisationSteps_should_translate_chromosomes_genes_to_optimisation_step_names" time="1.2e-05">
</testcase>
<testcase assertions="2" classname="Phaser.ChromosomeTest" name="randomOptimisationStep_should_return_each_step_with_same_probability" time="0.001735">
</testcase>
<testcase assertions="2" classname="Phaser.ChromosomeTest" name="stepsToGenes_should_translate_optimisation_step_names_to_abbreviations" time="6.1e-05">
</testcase>
<testcase assertions="2" classname="Phaser.ChromosomeTest" name="genesToSteps_should_translate_optimisation_step_abbreviations_to_names" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.ProgramBasedMetricTest" name="optimisedProgram_should_return_optimised_program_even_if_cache_not_available" time="0.000435">
</testcase>
<testcase assertions="3" classname="Phaser.FitnessMetricsTest.ProgramBasedMetricTest" name="optimisedProgram_should_use_cache_if_available" time="0.000179">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.ProgramBasedMetricTest" name="optimisedProgramNoCache_should_return_optimised_program_even_if_cache_not_available" time="0.000154">
</testcase>
<testcase assertions="3" classname="Phaser.FitnessMetricsTest.ProgramBasedMetricTest" name="optimisedProgramNoCache_should_not_use_cache_even_if_available" time="0.000145">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.ProgramSizeTest" name="evaluate_should_compute_size_of_the_optimised_program" time="0.00013">
</testcase>
<testcase assertions="3" classname="Phaser.FitnessMetricsTest.ProgramSizeTest" name="evaluate_should_be_able_to_use_program_cache_if_available" time="0.000134">
</testcase>
<testcase assertions="3" classname="Phaser.FitnessMetricsTest.ProgramSizeTest" name="evaluate_should_repeat_the_optimisation_specified_number_of_times" time="0.00017">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.ProgramSizeTest" name="evaluate_should_not_optimise_if_number_of_repetitions_is_zero" time="0.000104">
</testcase>
<testcase assertions="1" classname="Phaser.FitnessMetricsTest.RelativeProgramSizeTest" name="evaluate_should_compute_the_size_ratio_between_optimised_program_and_original_program" time="0.000153">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.RelativeProgramSizeTest" name="evaluate_should_be_able_to_use_program_cache_if_available" time="0.000134">
</testcase>
<testcase assertions="3" classname="Phaser.FitnessMetricsTest.RelativeProgramSizeTest" name="evaluate_should_repeat_the_optimisation_specified_number_of_times" time="0.000186">
</testcase>
<testcase assertions="1" classname="Phaser.FitnessMetricsTest.RelativeProgramSizeTest" name="evaluate_should_return_one_if_number_of_repetitions_is_zero" time="0.000109">
</testcase>
<testcase assertions="3" classname="Phaser.FitnessMetricsTest.RelativeProgramSizeTest" name="evaluate_should_return_one_if_the_original_program_size_is_zero" time="0.000111">
</testcase>
<testcase assertions="5" classname="Phaser.FitnessMetricsTest.RelativeProgramSizeTest" name="evaluate_should_multiply_the_result_by_scaling_factor" time="0.000239">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.FitnessMetricCombinationTest" name="FitnessMetricAverage_evaluate_should_compute_average_of_values_returned_by_metrics_passed_to_it" time="0.000301">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.FitnessMetricCombinationTest" name="FitnessMetricSum_evaluate_should_compute_sum_of_values_returned_by_metrics_passed_to_it" time="0.000294">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.FitnessMetricCombinationTest" name="FitnessMetricMaximum_evaluate_should_compute_maximum_of_values_returned_by_metrics_passed_to_it" time="0.000298">
</testcase>
<testcase assertions="2" classname="Phaser.FitnessMetricsTest.FitnessMetricCombinationTest" name="FitnessMetricMinimum_evaluate_should_compute_minimum_of_values_returned_by_metrics_passed_to_it" time="0.000291">
</testcase>
<testcase assertions="3" classname="Phaser.AlgorithmRunnerTest" name="run_should_call_runNextRound_once_per_round" time="0.000454">
</testcase>
<testcase assertions="13" classname="Phaser.AlgorithmRunnerTest" name="run_should_print_round_summary_after_each_round" time="0.000973">
</testcase>
<testcase assertions="7" classname="Phaser.AlgorithmRunnerTest" name="run_should_not_print_round_summary_if_not_requested" time="0.000564">
</testcase>
<testcase assertions="2" classname="Phaser.AlgorithmRunnerTest" name="run_should_not_print_population_if_its_empty" time="0.000263">
</testcase>
<testcase assertions="2" classname="Phaser.AlgorithmRunnerTest" name="run_should_print_only_top_chromosome_if_requested" time="0.000596">
</testcase>
<testcase assertions="2" classname="Phaser.AlgorithmRunnerTest" name="run_should_not_print_round_number_for_top_chromosome_if_round_info_not_requested" time="0.000599">
</testcase>
<testcase assertions="1" classname="Phaser.AlgorithmRunnerTest" name="run_should_not_print_population_if_its_empty_and_only_top_chromosome_requested" time="0.000147">
</testcase>
<testcase assertions="7" classname="Phaser.AlgorithmRunnerTest" name="run_should_print_initial_population_if_requested" time="0.000371">
</testcase>
<testcase assertions="1" classname="Phaser.AlgorithmRunnerTest" name="run_should_not_print_initial_population_if_not_requested" time="0.000159">
</testcase>
<testcase assertions="7" classname="Phaser.AlgorithmRunnerTest" name="run_should_print_whole_initial_population_even_if_only_top_chromosome_requested" time="0.000317">
</testcase>
<testcase assertions="33" classname="Phaser.AlgorithmRunnerTest" name="run_should_print_cache_stats_if_requested" time="0.004202">
</testcase>
<testcase assertions="4" classname="Phaser.AlgorithmRunnerTest" name="run_should_print_message_if_cache_stats_requested_but_cache_disabled" time="0.000701">
</testcase>
<testcase assertions="8" classname="Phaser.AlgorithmRunnerTest" name="run_should_print_partial_stats_and_message_if_some_caches_disabled" time="0.00082">
</testcase>
<testcase assertions="2" classname="Phaser.AlgorithmRunnerTest" name="run_should_save_initial_population_to_file_if_autosave_file_specified" time="0.001757">
</testcase>
<testcase assertions="2" classname="Phaser.AlgorithmRunnerTest" name="run_should_save_population_to_file_if_autosave_file_specified" time="0.002154">
</testcase>
<testcase assertions="2" classname="Phaser.AlgorithmRunnerTest" name="run_should_overwrite_existing_file_if_autosave_file_specified" time="0.004848">
</testcase>
<testcase assertions="1" classname="Phaser.AlgorithmRunnerTest" name="run_should_not_save_population_to_file_if_autosave_file_not_specified" time="0.002351">
</testcase>
<testcase assertions="8" classname="Phaser.AlgorithmRunnerTest" name="run_should_randomise_duplicate_chromosomes_if_requested" time="0.000661">
</testcase>
<testcase assertions="4" classname="Phaser.AlgorithmRunnerTest" name="run_should_not_randomise_duplicate_chromosomes_if_not_requested" time="0.000296">
</testcase>
<testcase assertions="9" classname="Phaser.AlgorithmRunnerTest" name="run_should_clear_cache_at_the_beginning_and_update_it_before_each_round" time="0.00048">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.RandomAlgorithmTest" name="runNextRound_should_preserve_elite_and_randomise_rest_of_population" time="0.000199">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.RandomAlgorithmTest" name="runNextRound_should_not_replace_elite_with_worse_individuals" time="0.000329">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.RandomAlgorithmTest" name="runNextRound_should_replace_all_chromosomes_if_zero_size_elite" time="0.000197">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.RandomAlgorithmTest" name="runNextRound_should_not_replace_any_chromosomes_if_whole_population_is_the_elite" time="0.000166">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.GenerationalElitistWithExclusivePoolsTest" name="runNextRound_should_preserve_elite_and_regenerate_rest_of_population" time="0.0002">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.GenerationalElitistWithExclusivePoolsTest" name="runNextRound_should_not_replace_elite_with_worse_individuals" time="0.000225">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.GenerationalElitistWithExclusivePoolsTest" name="runNextRound_should_generate_individuals_in_the_crossover_pool_by_mutating_the_elite" time="0.000754">
</testcase>
<testcase assertions="12" classname="Phaser.GeneticAlgorithmsTest.GenerationalElitistWithExclusivePoolsTest" name="runNextRound_should_generate_individuals_in_the_crossover_pool_by_crossing_over_the_elite" time="0.00026">
</testcase>
<testcase assertions="3" classname="Phaser.GeneticAlgorithmsTest.ClassicGeneticAlgorithmTest" name="runNextRound_should_select_individuals_with_probability_proportional_to_fitness" time="0.008488">
</testcase>
<testcase assertions="1000" classname="Phaser.GeneticAlgorithmsTest.ClassicGeneticAlgorithmTest" name="runNextRound_should_select_only_individuals_existing_in_the_original_population" time="0.028819">
</testcase>
<testcase assertions="2" classname="Phaser.GeneticAlgorithmsTest.ClassicGeneticAlgorithmTest" name="runNextRound_should_do_crossover" time="6.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.GeneticAlgorithmsTest.ClassicGeneticAlgorithmTest" name="runNextRound_should_do_mutation" time="0.028433">
</testcase>
<testcase assertions="2" classname="Phaser.GeneticAlgorithmsTest.ClassicGeneticAlgorithmTest" name="runNextRound_should_do_deletion" time="0.002116">
</testcase>
<testcase assertions="11002" classname="Phaser.GeneticAlgorithmsTest.ClassicGeneticAlgorithmTest" name="runNextRound_should_do_addition" time="0.048297">
</testcase>
<testcase assertions="1" classname="Phaser.GeneticAlgorithmsTest.ClassicGeneticAlgorithmTest" name="runNextRound_should_preserve_elite" time="0.000267">
</testcase>
<testcase assertions="15" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneRandomisation_should_iterate_over_genes_and_replace_them_with_random_ones_with_given_probability" time="0.01383">
</testcase>
<testcase assertions="1" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneRandomisation_should_return_identical_chromosome_if_probability_is_zero" time="1.7e-05">
</testcase>
<testcase assertions="16" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneDeletion_should_iterate_over_genes_and_delete_them_with_given_probability" time="0.000126">
</testcase>
<testcase assertions="1" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneDeletion_should_return_identical_chromosome_if_probability_is_zero" time="9e-06">
</testcase>
<testcase assertions="1" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneDeletion_should_delete_all_genes_if_probability_is_one" time="1.1e-05">
</testcase>
<testcase assertions="20" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneAddition_should_iterate_over_gene_positions_and_insert_new_genes_with_given_probability" time="0.009186">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneAddition_should_be_able_to_insert_before_first_position" time="2.8e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneAddition_should_be_able_to_insert_after_last_position" time="2e-05">
</testcase>
<testcase assertions="1" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneAddition_should_return_identical_chromosome_if_probability_is_zero" time="9e-06">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="geneAddition_should_insert_genes_at_all_positions_if_probability_is_one" time="0.000185">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="alternativeMutations_should_choose_between_mutations_with_given_probability" time="1.9e-05">
</testcase>
<testcase assertions="10" classname="Phaser.MutationsTest.GeneRandomisationTest" name="alternativeMutations_should_always_choose_first_mutation_if_probability_is_one" time="2.4e-05">
</testcase>
<testcase assertions="10" classname="Phaser.MutationsTest.GeneRandomisationTest" name="alternativeMutations_should_always_choose_second_mutation_if_probability_is_zero" time="2.2e-05">
</testcase>
<testcase assertions="1" classname="Phaser.MutationsTest.GeneRandomisationTest" name="mutationSequence_should_apply_all_mutations" time="0.000104">
</testcase>
<testcase assertions="1" classname="Phaser.MutationsTest.GeneRandomisationTest" name="mutationSequence_apply_mutations_in_the_order_they_are_given" time="4.9e-05">
</testcase>
<testcase assertions="1" classname="Phaser.MutationsTest.GeneRandomisationTest" name="mutationSequence_should_return_unmodified_chromosome_if_given_no_mutations" time="8e-06">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomPointCrossover_should_swap_chromosome_parts_at_random_point" time="2e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="symmetricRandomPointCrossover_should_swap_chromosome_parts_at_random_point" time="1.8e-05">
</testcase>
<testcase assertions="60" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomPointCrossover_should_only_consider_points_available_on_both_chromosomes" time="0.000151">
</testcase>
<testcase assertions="60" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomPointCrossover_should_never_split_at_position_zero_if_chromosomes_are_splittable" time="0.000114">
</testcase>
<testcase assertions="60" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomPointCrossover_should_never_split_at_position_zero_if_chromosomes_are_not_empty" time="0.000115">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomPointCrossover_should_work_even_if_one_chromosome_is_unsplittable" time="1.5e-05">
</testcase>
<testcase assertions="5" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomPointCrossover_should_split_at_position_zero_only_if_at_least_one_chromosome_is_empty" time="1.7e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="fixedPointCrossover_should_swap_chromosome_parts_at_given_point" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="fixedPointCrossover_should_determine_crossover_point_based_on_length_of_shorter_chromosome" time="1.4e-05">
</testcase>
<testcase assertions="6" classname="Phaser.MutationsTest.GeneRandomisationTest" name="fixedPointCrossover_should_round_split_point" time="1.9e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="fixedPointCrossover_should_split_at_position_zero_if_explicitly_requested" time="1.2e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="fixedPointCrossover_should_split_at_end_of_shorter_chromosome_if_crossover_point_is_after_last_position" time="1e-05">
</testcase>
<testcase assertions="6" classname="Phaser.MutationsTest.GeneRandomisationTest" name="fixedPointCrossover_should_select_correct_split_point_for_unsplittable_chromosomes" time="1.9e-05">
</testcase>
<testcase assertions="10" classname="Phaser.MutationsTest.GeneRandomisationTest" name="fixedPointCrossover_should_always_use_position_zero_as_split_point_when_chromosome_empty" time="2.5e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomTwoPointCrossover_should_swap_chromosome_parts_between_two_random_points" time="1.7e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="symmetricRandomTwoPointCrossover_should_swap_chromosome_parts_at_random_point" time="1.3e-05">
</testcase>
<testcase assertions="60" classname="Phaser.MutationsTest.GeneRandomisationTest" name="randomTwoPointCrossover_should_only_consider_points_available_on_both_chromosomes" time="0.000161">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="uniformCrossover_should_swap_randomly_selected_genes" time="2.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="symmetricUniformCrossover_should_swap_randomly_selected_genes" time="1.3e-05">
</testcase>
<testcase assertions="60" classname="Phaser.MutationsTest.GeneRandomisationTest" name="uniformCrossover_should_only_consider_points_available_on_both_chromosomes" time="0.000195">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="uniformCrossover_should_not_swap_anything_if_chance_is_zero" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="uniformCrossover_should_swap_whole_chromosomes_if_chance_is_one" time="1.1e-05">
</testcase>
<testcase assertions="2" classname="Phaser.MutationsTest.GeneRandomisationTest" name="uniformCrossover_should_swap_genes_with_uniform_probability" time="0.00096">
</testcase>
<testcase assertions="1002" classname="Phaser.MutationsTest.GeneRandomisationTest" name="uniformCrossover_should_swap_tail_with_uniform_probability" time="0.002316">
</testcase>
<testcase assertions="2" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_return_random_values_with_equal_probabilities" time="9.1e-05">
</testcase>
<testcase assertions="3" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_return_only_values_that_can_be_used_as_collection_indices" time="2.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_never_return_a_pair_of_identical_indices" time="2.1e-05">
</testcase>
<testcase assertions="5" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_return_number_of_pairs_thats_a_fraction_of_collection_size" time="2.2e-05">
</testcase>
<testcase assertions="3" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_support_number_of_pairs_bigger_than_collection_size" time="2.5e-05">
</testcase>
<testcase assertions="6" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_round_the_number_of_pairs_to_the_nearest_integer" time="2e-05">
</testcase>
<testcase assertions="4" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_return_no_pairs_if_collection_is_empty" time="1.5e-05">
</testcase>
<testcase assertions="4" classname="Phaser.PairSelectionsTest.RandomPairSelectionTest" name="materialise_should_return_no_pairs_if_collection_has_one_element" time="1.7e-05">
</testcase>
<testcase assertions="702" classname="Phaser.PairSelectionsTest.PairsFromRandomSubsetTest" name="materialise_should_return_random_values_with_equal_probabilities" time="0.001069">
</testcase>
<testcase assertions="2" classname="Phaser.PairSelectionsTest.PairsFromRandomSubsetTest" name="materialise_should_return_only_values_that_can_be_used_as_collection_indices" time="2.5e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PairSelectionsTest.PairsFromRandomSubsetTest" name="materialise_should_use_unique_indices" time="4.7e-05">
</testcase>
<testcase assertions="3" classname="Phaser.PairSelectionsTest.PairsFromRandomSubsetTest" name="materialise_should_return_no_indices_if_collection_is_empty" time="1.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.PairSelectionsTest.PairsFromRandomSubsetTest" name="materialise_should_return_no_pairs_if_selection_chance_is_zero" time="1e-05">
</testcase>
<testcase assertions="2" classname="Phaser.PairSelectionsTest.PairsFromRandomSubsetTest" name="materialise_should_return_all_pairs_if_selection_chance_is_one" time="1.9e-05">
</testcase>
<testcase assertions="12" classname="Phaser.PairSelectionsTest.PairMosaicSelectionTest" name="materialise" time="4.6e-05">
</testcase>
<testcase assertions="3" classname="Phaser.PairSelectionsTest.PairMosaicSelectionTest" name="materialise_should_round_indices" time="1.3e-05">
</testcase>
<testcase assertions="3" classname="Phaser.PairSelectionsTest.PairMosaicSelectionTest" name="materialise_should_return_no_pairs_if_collection_is_empty" time="1.2e-05">
</testcase>
<testcase assertions="4" classname="Phaser.PairSelectionsTest.PairMosaicSelectionTest" name="materialise_should_return_no_pairs_if_collection_has_one_element" time="1.3e-05">
</testcase>
<testcase assertions="2" classname="Phaser.PairSelectionsTest.PairMosaicSelectionTest" name="materialise_should_clamp_indices_at_collection_size" time="1.1e-05">
</testcase>
<testcase assertions="25" classname="Phaser.PhaserTest.GeneticAlgorithmFactoryTest" name="build_should_select_the_right_algorithm_and_pass_the_options_to_it" time="6.6e-05">
</testcase>
<testcase assertions="3" classname="Phaser.PhaserTest.GeneticAlgorithmFactoryTest" name="build_should_set_random_algorithm_elite_pool_size_based_on_population_size_if_not_specified" time="1.4e-05">
</testcase>
<testcase assertions="4" classname="Phaser.PhaserTest.GeneticAlgorithmFactoryTest" name="build_should_set_gewep_mutation_percentages_based_on_maximum_chromosome_length_if_not_specified" time="1.3e-05">
</testcase>
<testcase assertions="6" classname="Phaser.PhaserTest.FitnessMetricFactoryTest" name="build_should_create_metric_of_the_right_type" time="0.000103">
</testcase>
<testcase assertions="6" classname="Phaser.PhaserTest.FitnessMetricFactoryTest" name="build_should_respect_chromosome_repetitions_option" time="5.8e-05">
</testcase>
<testcase assertions="6" classname="Phaser.PhaserTest.FitnessMetricFactoryTest" name="build_should_set_relative_metric_scale" time="6.5e-05">
</testcase>
<testcase assertions="3" classname="Phaser.PhaserTest.FitnessMetricFactoryTest" name="build_should_create_metric_for_each_input_program" time="4.7e-05">
</testcase>
<testcase assertions="9" classname="Phaser.PhaserTest.FitnessMetricFactoryTest" name="build_should_pass_program_caches_to_metrics" time="5.2e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PhaserTest.PopulationFactoryTest" name="build_should_create_an_empty_population_if_no_specific_options_given" time="1.7e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PhaserTest.PopulationFactoryTest" name="build_should_respect_population_option" time="1.6e-05">
</testcase>
<testcase assertions="2" classname="Phaser.PhaserTest.PopulationFactoryTest" name="build_should_respect_random_population_option" time="0.000336">
</testcase>
<testcase assertions="1" classname="Phaser.PhaserTest.PopulationFactoryTest" name="build_should_respect_population_from_file_option" time="0.00291">
</testcase>
<testcase assertions="1" classname="Phaser.PhaserTest.PopulationFactoryTest" name="build_should_throw_FileOpenError_if_population_file_does_not_exist" time="0.000151">
</testcase>
<testcase assertions="4" classname="Phaser.PhaserTest.PopulationFactoryTest" name="build_should_combine_populations_from_all_sources" time="0.001143">
</testcase>
<testcase assertions="7" classname="Phaser.PhaserTest.ProgramCacheFactoryTest" name="build_should_create_cache_for_each_input_program_if_cache_enabled" time="0.00013">
</testcase>
<testcase assertions="4" classname="Phaser.PhaserTest.ProgramCacheFactoryTest" name="build_should_return_nullptr_for_each_input_program_if_cache_disabled" time="5.6e-05">
</testcase>
<testcase assertions="4" classname="Phaser.PhaserTest.ProgramFactoryTest" name="build_should_load_programs_from_files" time="0.002347">
</testcase>
<testcase assertions="2" classname="Phaser.PhaserTest.ProgramFactoryTest" name="build_should_apply_prefix" time="0.001227">
</testcase>
<testcase assertions="6" classname="Phaser.PopulationTest" name="isFitter_should_use_fitness_as_the_main_criterion" time="3.6e-05">
</testcase>
<testcase assertions="6" classname="Phaser.PopulationTest" name="isFitter_should_use_alphabetical_order_when_fitness_is_the_same" time="2e-05">
</testcase>
<testcase assertions="2" classname="Phaser.PopulationTest" name="isFitter_should_return_false_for_identical_individuals" time="1.4e-05">
</testcase>
<testcase assertions="7" classname="Phaser.PopulationTest" name="constructor_should_copy_chromosomes_compute_fitness_and_sort_chromosomes" time="0.000208">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="constructor_should_accept_individuals_without_recalculating_fitness" time="1.3e-05">
</testcase>
<testcase assertions="5" classname="Phaser.PopulationTest" name="makeRandom_should_get_chromosome_lengths_from_specified_generator" time="0.000326">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="makeRandom_should_get_chromosome_lengths_from_specified_range" time="0.00368">
</testcase>
<testcase assertions="2" classname="Phaser.PopulationTest" name="makeRandom_should_use_random_chromosome_length" time="0.00714">
</testcase>
<testcase assertions="2" classname="Phaser.PopulationTest" name="makeRandom_should_return_population_with_random_chromosomes" time="0.014465">
</testcase>
<testcase assertions="3" classname="Phaser.PopulationTest" name="makeRandom_should_compute_fitness" time="0.000119">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="plus_operator_should_add_two_populations" time="3.3e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="select_should_return_population_containing_individuals_indicated_by_selection" time="2.6e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="select_should_include_duplicates_if_selection_contains_duplicates" time="2e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="select_should_return_empty_population_if_selection_is_empty" time="1.4e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="mutate_should_return_population_containing_individuals_indicated_by_selection_with_mutation_applied" time="4.7e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="mutate_should_include_duplicates_if_selection_contains_duplicates" time="3e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="mutate_should_return_empty_population_if_selection_is_empty" time="9e-06">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="crossover_should_return_population_containing_individuals_indicated_by_selection_with_crossover_applied" time="2.2e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="crossover_should_include_duplicates_if_selection_contains_duplicates" time="1.3e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="crossover_should_return_empty_population_if_selection_is_empty" time="9e-06">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="symmetricCrossoverWithRemainder_should_return_crossed_population_and_remainder" time="4e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="symmetricCrossoverWithRemainder_should_allow_crossing_the_same_individual_multiple_times" time="0.000117">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="symmetricCrossoverWithRemainder_should_return_empty_population_if_selection_is_empty" time="1.2e-05">
</testcase>
<testcase assertions="1" classname="Phaser.PopulationTest" name="combine_should_add_two_populations_from_a_pair" time="1.2e-05">
</testcase>
<testcase assertions="2" classname="Phaser.ProgramTest" name="copy_constructor_should_make_deep_copy_of_ast" time="0.000258">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_rewind_the_stream" time="5.4e-05">
</testcase>
<testcase assertions="3" classname="Phaser.ProgramTest" name="load_should_disambiguate" time="5.6e-05">
</testcase>
<testcase assertions="4" classname="Phaser.ProgramTest" name="load_should_do_function_grouping_and_hoisting" time="9.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.ProgramTest" name="load_should_do_loop_init_rewriting" time="5.6e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_throw_InvalidProgram_if_program_cant_be_parsed" time="5.7e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_throw_InvalidProgram_if_program_cant_be_analyzed" time="2.4e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_accept_yul_objects_as_input" time="5.7e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_return_errors_if_analysis_of_object_code_fails" time="3.1e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_return_errors_if_parsing_of_nested_object_fails" time="3.5e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_extract_nested_object_with_deployed_suffix_if_present" time="5.2e-05">
</testcase>
<testcase assertions="3" classname="Phaser.ProgramTest" name="load_should_fall_back_to_parsing_the_whole_object_if_there_is_no_subobject_with_the_right_name" time="5.8e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="load_should_ignore_data_in_objects" time="2.7e-05">
</testcase>
<testcase assertions="2" classname="Phaser.ProgramTest" name="optimise" time="4.6e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="output_operator" time="0.00039">
</testcase>
<testcase assertions="2" classname="Phaser.ProgramTest" name="toJson" time="0.000247">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramTest" name="codeSize" time="5.3e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramCacheTest" name="CacheStats_operator_plus_should_add_stats_together" time="1.5e-05">
</testcase>
<testcase assertions="1" classname="Phaser.ProgramCacheTest" name="optimiseProgram_should_apply_optimisation_steps_to_program" time="0.000195">
</testcase>
<testcase assertions="6" classname="Phaser.ProgramCacheTest" name="optimiseProgram_should_store_programs_for_all_prefixes" time="0.00035">
</testcase>
<testcase assertions="19" classname="Phaser.ProgramCacheTest" name="optimiseProgram_should_repeat_the_chromosome_requested_number_of_times" time="0.000451">
</testcase>
<testcase assertions="12" classname="Phaser.ProgramCacheTest" name="optimiseProgram_should_reuse_the_longest_prefix_and_move_it_to_the_next_round" time="0.000214">
</testcase>
<testcase assertions="28" classname="Phaser.ProgramCacheTest" name="startRound_should_remove_entries_older_than_two_rounds" time="0.000306">
</testcase>
<testcase assertions="12" classname="Phaser.ProgramCacheTest" name="gatherStats_should_return_cache_statistics" time="0.000417">
</testcase>
<testcase assertions="11" classname="Phaser.SelectionsTest.RangeSelectionTest" name="materialise" time="4.4e-05">
</testcase>
<testcase assertions="4" classname="Phaser.SelectionsTest.RangeSelectionTest" name="materialise_should_round_indices" time="2.2e-05">
</testcase>
<testcase assertions="5" classname="Phaser.SelectionsTest.RangeSelectionTest" name="materialise_should_handle_empty_collections" time="1.9e-05">
</testcase>
<testcase assertions="8" classname="Phaser.SelectionsTest.RangeSelectionTest" name="materialise_should_handle_empty_selection_ranges" time="2.3e-05">
</testcase>
<testcase assertions="12" classname="Phaser.SelectionsTest.MosaicSelectionTest" name="materialise" time="3.7e-05">
</testcase>
<testcase assertions="3" classname="Phaser.SelectionsTest.MosaicSelectionTest" name="materialise_should_round_indices" time="1.5e-05">
</testcase>
<testcase assertions="3" classname="Phaser.SelectionsTest.MosaicSelectionTest" name="materialise_should_handle_empty_collections" time="1.7e-05">
</testcase>
<testcase assertions="3" classname="Phaser.SelectionsTest.MosaicSelectionTest" name="materialise_should_handle_empty_selections" time="1.2e-05">
</testcase>
<testcase assertions="4" classname="Phaser.SelectionsTest.MosaicSelectionTest" name="materialise_should_clamp_indices_at_collection_size" time="1.6e-05">
</testcase>
<testcase assertions="2" classname="Phaser.SelectionsTest.RandomSelectionTest" name="materialise_should_return_random_values_with_equal_probabilities" time="6.9e-05">
</testcase>
<testcase assertions="2" classname="Phaser.SelectionsTest.RandomSelectionTest" name="materialise_should_return_only_values_that_can_be_used_as_collection_indices" time="2.4e-05">
</testcase>
<testcase assertions="5" classname="Phaser.SelectionsTest.RandomSelectionTest" name="materialise_should_return_number_of_indices_thats_a_fraction_of_collection_size" time="3e-05">
</testcase>
<testcase assertions="3" classname="Phaser.SelectionsTest.RandomSelectionTest" name="materialise_should_support_number_of_indices_bigger_than_collection_size" time="2.8e-05">
</testcase>
<testcase assertions="6" classname="Phaser.SelectionsTest.RandomSelectionTest" name="materialise_should_round_the_number_of_indices_to_the_nearest_integer" time="2.5e-05">
</testcase>
<testcase assertions="4" classname="Phaser.SelectionsTest.RandomSelectionTest" name="materialise_should_return_no_indices_if_collection_is_empty" time="2.4e-05">
</testcase>
<testcase assertions="2" classname="Phaser.SelectionsTest.RandomSubsetTest" name="materialise_should_return_random_values_with_equal_probabilities" time="0.000185">
</testcase>
<testcase assertions="1" classname="Phaser.SelectionsTest.RandomSubsetTest" name="materialise_should_return_only_values_that_can_be_used_as_collection_indices" time="1.3e-05">
</testcase>
<testcase assertions="94" classname="Phaser.SelectionsTest.RandomSubsetTest" name="materialise_should_return_indices_in_the_same_order_they_are_in_the_container" time="0.000164">
</testcase>
<testcase assertions="1" classname="Phaser.SelectionsTest.RandomSubsetTest" name="materialise_should_return_no_indices_if_collection_is_empty" time="8e-06">
</testcase>
<testcase assertions="1" classname="Phaser.SelectionsTest.RandomSubsetTest" name="materialise_should_return_no_indices_if_selection_chance_is_zero" time="8e-06">
</testcase>
<testcase assertions="1" classname="Phaser.SelectionsTest.RandomSubsetTest" name="materialise_should_return_all_indices_if_selection_chance_is_one" time="8e-06">
</testcase>
<testcase assertions="2" classname="Phaser.RandomTest" name="bernoulliTrial_should_produce_samples_with_right_expected_value_and_variance" time="0.000171">
</testcase>
<testcase assertions="6" classname="Phaser.RandomTest" name="bernoulliTrial_can_be_reset" time="2.8e-05">
</testcase>
<testcase assertions="2" classname="Phaser.RandomTest" name="uniformInt_returns_different_values_when_called_multiple_times" time="3.7e-05">
</testcase>
<testcase assertions="6" classname="Phaser.RandomTest" name="uniformInt_can_be_reset" time="2.9e-05">
</testcase>
<testcase assertions="2" classname="Phaser.RandomTest" name="binomialInt_should_produce_samples_with_right_expected_value_and_variance" time="0.000124">
</testcase>
<testcase assertions="6" classname="Phaser.RandomTest" name="binomialInt_can_be_reset" time="4.3e-05">
</testcase>
<testcase assertions="1" classname="Phaser.CommonTest" name="readLinesFromFile_should_return_all_lines_from_a_text_file_as_strings_without_newlines" time="0.001491">
</testcase>
<testcase assertions="6" classname="Phaser.CommonTest" name="deserializeChoice_should_convert_string_to_enum" time="3.5e-05">
</testcase>
<testcase assertions="1" classname="Phaser.CommonTest" name="deserializeChoice_should_set_failbit_if_there_is_no_enum_corresponding_to_string" time="1e-05">
</testcase>
<testcase assertions="3" classname="Phaser.CommonTest" name="deserializeChoice_does_not_have_to_support_strings_with_spaces" time="1.3e-05">
</testcase>
<testcase assertions="4" classname="Phaser.CommonTest" name="serializeChoice_should_convert_enum_to_string" time="1.6e-05">
</testcase>
<testcase assertions="1" classname="Phaser.CommonTest" name="serializeChoice_should_set_failbit_if_there_is_no_string_corresponding_to_enum" time="1e-05">
</testcase>
<testcase assertions="69" classname="Metadata" name="metadata_stamp" time="0.131957">
</testcase>
<testcase assertions="81" classname="Metadata" name="metadata_stamp_experimental" time="0.133719">
</testcase>
<testcase assertions="5" classname="Metadata" name="metadata_relevant_sources" time="0.029147">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_relevant_sources_imports" time="0.04403">
</testcase>
<testcase assertions="12" classname="Metadata" name="metadata_useLiteralContent" time="0.002351">
</testcase>
<testcase assertions="8" classname="Metadata" name="metadata_viair" time="0.014136">
</testcase>
<testcase assertions="4" classname="Metadata" name="metadata_revert_strings" time="0.000666">
</testcase>
<testcase assertions="6" classname="Metadata" name="metadata_license_missing" time="0.000683">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_gpl3" time="0.000634">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_whitespace_before_spdx" time="0.000619">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_whitespace_after_colon" time="0.00064">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_gpl3_or_apache2" time="0.000619">
</testcase>
<testcase assertions="6" classname="Metadata" name="metadata_license_ignored_unicode" time="0.000627">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_ignored_stray_unicode" time="0.000614">
</testcase>
<testcase assertions="6" classname="Metadata" name="metadata_license_bidi_marks" time="0.000633">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_bottom" time="0.000633">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_cr_endings" time="0.000606">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_crlf_endings" time="0.000644">
</testcase>
<testcase assertions="6" classname="Metadata" name="metadata_license_in_string" time="0.001076">
</testcase>
<testcase assertions="6" classname="Metadata" name="metadata_license_in_contract" time="0.000656">
</testcase>
<testcase assertions="6" classname="Metadata" name="metadata_license_missing_colon" time="0.000615">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_multiline" time="0.000807">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_natspec" time="0.000646">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_natspec_multiline" time="0.000636">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_no_whitespace" time="0.000608">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_no_whitespace_multiline" time="0.000615">
</testcase>
<testcase assertions="7" classname="Metadata" name="metadata_license_nonempty_line" time="0.00064">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="address" time="0.010628">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_add" time="0.01843">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_addmod" time="0.170409">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_div" time="0.250014">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_exp" time="0.324885">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_mod" time="0.213957">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_mul" time="0.025628">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_mulmod" time="0.323938">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_sdiv" time="0.183446">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_smod" time="0.144649">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="arithmetic_sub" time="0.016333">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="balance" time="0.009857">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="bitwise_and" time="0.012525">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="bitwise_not" time="0.012804">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="bitwise_or" time="0.012793">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="bitwise_xor" time="0.012772">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="blockhash" time="0.009394">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="calldatacopy" time="0.009414">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="calldataload" time="0.009328">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="calldatasize" time="0.008975">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="caller" time="0.009052">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="callvalue" time="0.00888">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="chainid" time="0.008738">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="codecopy" time="0.00932">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="codesize" time="0.00933">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="coinbase" time="0.009261">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="comparison_eq" time="0.013703">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="comparison_gt" time="0.017085">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="comparison_lt" time="0.01728">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="comparison_sgt" time="0.019397">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="comparison_slt" time="0.019141">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="datacopy" time="0.014565">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="dataoffset" time="0.013324">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="datasize" time="0.013453">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="difficulty" time="0.008987">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="extcodecopy" time="0.01041">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="extcodehash" time="0.008819">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="extcodesize" time="0.009208">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="gas" time="0.009264">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="gaslimit" time="0.009374">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="gasprice" time="0.009">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="invalid" time="0.009314">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="iszero" time="0.010298">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="keccak256" time="0.008631">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="log0" time="0.008572">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="log1" time="0.008357">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="log2" time="0.008631">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="log3" time="0.008835">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="log4" time="0.008795">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="loop_break" time="0.009346">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="loop_continue" time="0.013997">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="memoryguard" time="0.009404">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="msize" time="0.008958">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="mstore8" time="0.009842">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="mstore_mload" time="0.009972">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="number" time="0.00882">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="origin" time="0.009182">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="return" time="0.008855">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="returndatacopy" time="0.009371">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="returndatasize" time="0.008969">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="revert" time="0.008905">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="selfbalance" time="0.008608">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="selfdestruct" time="0.008575">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="shifts" time="0.011745">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="signextend" time="0.01113">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="simple_mstore" time="0.008777">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="simple_sload" time="0.011199">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="simple_sstore" time="0.009507">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="smoke" time="0.008387">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="smoke_call" time="0.009572">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="smoke_callcode" time="0.009616">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="smoke_create" time="0.009317">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="smoke_create2" time="0.008676">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="smoke_delegatecall" time="0.009208">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="smoke_staticcall" time="0.009467">
</testcase>
<testcase assertions="1" classname="ewasmTranslationTests" name="timestamp" time="0.008944">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.blockFlattener" name="basic" time="0.000385">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.blockFlattener" name="for_stmt" time="0.000219">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.blockFlattener" name="if_stmt" time="0.000221">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.blockFlattener" name="many_nested_blocks" time="0.000249">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.blockFlattener" name="switch_stmt" time="0.000214">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.circularReferencesPruner" name="called_from_non_function" time="0.00028">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.circularReferencesPruner" name="nested_different_names" time="0.000214">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.circularReferencesPruner" name="nested_same_name" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.circularReferencesPruner" name="trivial" time="0.000167">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="branches_for" time="0.0003">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="branches_if" time="0.000177">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="case2" time="0.000556">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="clear_not_needed" time="0.000268">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="function_scopes" time="0.000563">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="loop" time="0.000782">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="movable_functions" time="0.000431">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="non_movable_instr" time="0.000192">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="non_movable_instr2" time="0.000165">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="object_access" time="0.000274">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="replace_return_nonzero" time="0.000219">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="scopes" time="0.000272">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="smoke" time="0.000119">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="trivial" time="0.000169">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="unassigned_return" time="0.000236">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="unassigned_variables" time="0.000184">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.commonSubexpressionEliminator" name="variable_for_variable" time="0.000311">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="add_correct_type" time="0.000182">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="add_correct_type_wasm" time="0.000163">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="clear_after_if_break" time="0.000182">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="clear_after_if_continue" time="0.000176">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="clear_before_for_condition" time="0.000249">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="clear_before_for_post" time="0.000217">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="no_opt_if_break_is_not_last" time="0.000257">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="no_opt_inside_if" time="0.000163">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="opt_after_terminating_if" time="0.000177">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="opt_switch" time="0.000189">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalSimplifier" name="smoke" time="0.000106">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="clear_after_if_break" time="0.000182">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="clear_after_if_continue" time="0.000189">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="clear_before_for_condition" time="0.000248">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="clear_before_for_post" time="0.000209">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="no_opt_if_break_is_not_last" time="0.000308">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="no_opt_inside_if" time="0.000174">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="opt_after_terminating_if" time="0.000185">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="opt_switch" time="0.000192">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.conditionalUnsimplifier" name="smoke" time="0.000112">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.constantOptimiser" name="difficult" time="0.019258">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.constantOptimiser" name="gaps" time="0.000547">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.constantOptimiser" name="smallNumbers" time="0.000215">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="empty_if_movable_condition" time="0.000191">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="empty_if_non_movable_condition" time="0.000142">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="remove_leave" time="0.000219">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="switch_only_default" time="0.000159">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="switch_remove_empty_all" time="0.000198">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="switch_remove_empty_case" time="0.000184">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="switch_remove_empty_cases" time="0.000178">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="switch_remove_empty_default_case" time="0.000193">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="switch_to_if" time="0.000156">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="terminating_for" time="0.000174">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="terminating_for_nested" time="0.000213">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="terminating_for_nested_reversed" time="0.000195">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="terminating_for_revert" time="0.000174">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="terminating_for_revert_plus_break" time="0.0002">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.controlFlowSimplifier" name="terminating_for_with_continue" time="0.000189">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="conditional_break" time="0.00022">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="early_break" time="0.0002">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="early_continue" time="0.000194">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="early_leave" time="0.000258">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="early_revert" time="0.000198">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="early_stop" time="0.000182">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="for_loop_init_decl" time="0.000154">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="function_after_revert" time="0.000176">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="nested_revert" time="0.000199">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="normal_break" time="0.00018">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="normal_continue" time="0.000209">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="normal_stop" time="0.000237">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.deadCodeEliminator" name="no_removal" time="0.00014">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="for_statement" time="0.000218">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="funtion_call" time="0.000199">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="if_statement" time="0.000191">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="long_names" time="0.00014">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="smoke" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="smoke_yul" time="9.4e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="switch_statement" time="0.000176">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="variables" time="0.000122">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="variables_clash" time="0.000125">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.disambiguator" name="variables_inside_functions" time="0.00024">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.equivalentFunctionCombiner" name="multiple_complex" time="0.000626">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.equivalentFunctionCombiner" name="simple" time="0.000234">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.equivalentFunctionCombiner" name="simple_different_vars" time="0.000302">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.equivalentFunctionCombiner" name="switch_case_order" time="0.000348">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="argument_duplication_heuristic" time="0.000643">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="complex_with_evm" time="0.000215">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="double_calls" time="0.00027">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="double_recursive_calls" time="0.000347">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="no_inline_mload" time="0.000207">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="no_move_with_sideeffects" time="0.000292">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="simple" time="0.000178">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionInliner" name="with_args" time="0.0002">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="if_condition" time="0.000265">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="muli_wrong_order3" time="0.0002">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="multi" time="0.000169">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="multi_reference" time="0.000147">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="multi_wrong_order" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="multi_wrong_order2" time="0.000186">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="no_replacement_across_blocks" time="0.000179">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="no_replacement_in_loop_condition1" time="0.000153">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="no_replacement_in_loop_condition2" time="0.000144">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="only_assignment" time="0.000204">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="reassignment" time="0.000177">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="simple" time="0.000148">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="single_wrong_order" time="0.000206">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="smoke" time="0.000105">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="switch_expression" time="0.000274">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionJoiner" name="triple" time="0.000217">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="assigned_vars_multi" time="0.000411">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="byte_after_shr_non_mul_of_8" time="0.000335">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="combine_shift_and_and" time="0.001144">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="combine_shift_and_and_2" time="0.002872">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="combine_shift_and_and_3" time="0.001744">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="constants" time="0.000256">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="constant_propagation" time="0.000329">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="create2_and_mask" time="0.000584">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="create_and_mask" time="0.000569">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="exp_simplifications" time="0.000919">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="idempotency" time="0.000773">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="identity_rules_complex" time="0.000253">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="identity_rules_negative" time="0.000315">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="identity_rules_simple" time="0.000226">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="including_function_calls" time="0.000369">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="inside_for" time="0.000318">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="invariant" time="0.000267">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="iszero_sub_to_eq" time="0.00041">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="large_byte_access" time="0.000592">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="mod_and_1" time="0.000413">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="mod_and_2" time="0.000665">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="not_applied_function_call_different_arguments" time="0.000418">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="not_applied_function_call_different_names" time="0.000407">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="not_applied_function_call_equality_not_movable" time="0.000383">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="not_applied_removes_non_constant_and_not_movable" time="0.000353">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="pop_byte_shr_call" time="0.000393">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="pop_byte_shr_func" time="0.00037">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="pop_byte_shr_func_trivial" time="0.00031">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="reassign" time="0.00028">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="remove_redundant_shift_masking" time="0.00113">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="replace_too_large_shift" time="0.000618">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="return_vars_zero" time="0.000337">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="reversed" time="0.000246">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="selfbalance_not_supported" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="selfbalance_split" time="0.00023">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="selfbalance_supported" time="0.000208">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="side_effects_in_for_condition" time="0.000279">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="smoke" time="0.000128">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="unassigend_vars_multi" time="0.000245">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSimplifier" name="unassigned_vars" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSplitter" name="control_flow" time="0.000386">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSplitter" name="inside_function" time="0.000358">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSplitter" name="object_access" time="0.000281">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSplitter" name="smoke" time="0.000112">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSplitter" name="switch" time="0.000356">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSplitter" name="trivial" time="0.000195">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.expressionSplitter" name="typed" time="0.000366">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="connected" time="0.000743">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="function_arg" time="0.000283">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="multi_variable_declaration_without_value" time="0.000256">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="outer_block" time="0.00018">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="return_leave" time="0.000437">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="return_one" time="0.00029">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="return_one_with_args" time="0.00035">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="same_variable_in_lhs_and_rhs" time="0.000249">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fakeStackLimitEvader" name="stub" time="0.000845">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopConditionIntoBody" name="cond_types" time="0.000257">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopConditionIntoBody" name="empty_body" time="0.000203">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopConditionIntoBody" name="nested" time="0.000353">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopConditionIntoBody" name="simple" time="0.000211">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopInitRewriter" name="complex_pre" time="0.000228">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopInitRewriter" name="empty_pre" time="0.000192">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopInitRewriter" name="nested" time="0.000313">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.forLoopInitRewriter" name="simple" time="0.000194">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="double_inline" time="0.000399">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="inside_condition" time="0.000376">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="large_function_multi_use" time="0.000595">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="large_function_single_use" time="0.000471">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="long_names" time="0.000319">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="move_up_rightwards_argument" time="0.000449">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="multi_fun" time="0.000461">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="multi_fun_callback" time="0.0004">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="multi_return" time="0.000343">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="multi_return_typed" time="0.000624">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="not_inside_for" time="0.000409">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="no_inline_into_big_function" time="0.000822">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="no_inline_into_big_global_context" time="0.000806">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="no_inline_leave" time="0.000278">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="no_return" time="0.000215">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="pop_result" time="0.00031">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="recursion" time="0.000202">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullInliner" name="simple" time="0.000325">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="constants" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="constant_propagation" time="0.000289">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="identity_rules_complex" time="0.000315">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="identity_rules_negative" time="0.000284">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="identity_rules_simple" time="0.000232">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="including_function_calls" time="0.000322">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="inside_for" time="0.000317">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="invariant" time="0.000321">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="mod_and_1" time="0.000322">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="mod_and_2" time="0.000575">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="not_applied_function_call_different_arguments" time="0.000369">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="not_applied_function_call_different_names" time="0.00032">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="not_applied_function_call_equality_not_movable" time="0.000317">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="not_applied_removes_non_constant_and_not_movable" time="0.000359">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="operations" time="0.001508">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="reversed" time="0.000267">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="signextend" time="0.000319">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSimplify" name="smoke" time="0.000136">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="abi2" time="0.103478">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="abi_example1" time="0.121198">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="ackermann_function" time="0.007876">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="ackermann_function_if" time="0.00729">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="and_or_combination" time="0.004966">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="aztec" time="0.25539">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="clear_after_if_continue" time="0.003128">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="combine_shift_and_and" time="0.004527">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="combine_shift_and_and_2" time="0.012035">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="combine_shift_and_and_3" time="0.011133">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="combine_shift_and_and_unsplit" time="0.004547">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="create2_and_mask" time="0.003161">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="create_and_mask" time="0.002893">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="devcon_example" time="0.015074">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="fibonacci" time="0.010997">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="loopInvariantCodeMotion" time="0.016961">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="medium" time="0.010079">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="name_cleaner_reserved" time="0.004765">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="no_move_loop_orig" time="0.004584">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="remove_redundant_assignments_in_switch" time="0.002363">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="reserved_identifiers" time="0.005883">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="reuse_vars_bug_in_simplifier" time="0.002076">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="shift_signextend" time="0.002027">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="ssaReverse" time="0.010943">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="ssaReverseComplex" time="0.003087">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="stack_compressor_msize" time="0.036179">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="static_array_slot_computation" time="0.008602">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="storage" time="0.00203">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="switch_inline" time="0.002267">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="switch_inline_match_default" time="0.00248">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="unusedFunctionParameterPruner" time="0.00714">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="unusedFunctionParameterPruner_loop" time="0.014601">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="unusedFunctionParameterPruner_recursion" time="0.006151">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="unusedFunctionParameterPruner_return" time="0.007675">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.fullSuite" name="unusedFunctionParameterPruner_simple" time="0.004232">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionGrouper" name="already_grouped" time="0.000259">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionGrouper" name="empty_block" time="0.00021">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionGrouper" name="grouped_but_not_ordered" time="0.000174">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionGrouper" name="multi_fun_mixed" time="0.000191">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionGrouper" name="nested_fun" time="0.000188">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionGrouper" name="single_fun" time="0.000163">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionGrouper" name="smoke" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionHoister" name="empty_block" time="0.000177">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionHoister" name="multi_mixed" time="0.00017">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionHoister" name="nested" time="0.000163">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionHoister" name="single" time="0.000142">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionHoister" name="smoke" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionSpecializer" name="multiple" time="0.000313">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionSpecializer" name="partial" time="0.000311">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionSpecializer" name="recursion" time="0.000283">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionSpecializer" name="simple" time="0.000269">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.functionSpecializer" name="smoke" time="0.000118">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="double_mload" time="0.000253">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="double_mload_with_other_reassignment" time="0.000361">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="double_mload_with_reassignment" time="0.000285">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="keccak" time="0.000314">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="keccak_fail1" time="0.000413">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="keccak_fail2" time="0.000333">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="keccak_short" time="0.000663">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="keccak_string_literal" time="0.000445">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="keccak_symbolic_memory" time="0.000408">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="keccak_with_msize" time="0.000353">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="loop" time="0.000398">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="memory_with_different_kinds_of_invalidation" time="0.000884">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="memory_with_msize" time="0.000376">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="merge_known_write" time="0.000469">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="merge_known_write_with_distance" time="0.000584">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="merge_mload_without_rewrite" time="0.000408">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="merge_mload_with_known_distance" time="0.000584">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="merge_mload_with_rewrite" time="0.000412">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="merge_unknown_write" time="0.00046">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="merge_with_rewrite" time="0.000407">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="mload_in_function" time="0.000466">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="mload_self" time="0.000285">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="mstore_in_function_loop_body" time="0.000497">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="mstore_in_function_loop_init" time="0.000494">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="multi_sload_loop" time="0.000744">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="reassign" time="0.000327">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="reassign_value_expression" time="0.000537">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="re_store_memory" time="0.000371">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="re_store_storage" time="0.000342">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="second_mstore_with_delta" time="0.000508">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="second_store" time="0.000397">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="second_store_same_value" time="0.000369">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="second_store_with_delta" time="0.000511">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="side_effects_of_user_functions" time="0.0005">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="simple" time="0.000352">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="simple_memory" time="0.000372">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="staticcall" time="0.000622">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="verbatim_mload" time="0.000316">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loadResolver" name="verbatim_sload" time="0.000386">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="complex_move" time="0.000359">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="create_sload" time="0.000366">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="dependOnVarInLoop" time="0.000303">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="move_memory_function" time="0.000351">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="move_state_function" time="0.000353">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="move_storage_function" time="0.000322">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="multi" time="0.000323">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="non-ssavar" time="0.000287">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="nonMovable" time="0.000257">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="not_first" time="0.000312">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_immovables" time="0.000361">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_loop" time="0.000317">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_memory" time="0.000479">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_memory_loop" time="0.000383">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_memory_msize" time="0.000465">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_recursive_function" time="0.000393">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_state" time="0.000726">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_state_function" time="0.00038">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_state_loop" time="0.000339">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_state_recursive_function" time="0.000359">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_staticall_returndatasize" time="0.000378">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_storage" time="0.000658">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_storage_function" time="0.000358">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="no_move_storage_loop" time="0.000318">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="recursive" time="0.000339">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="simple" time="0.000265">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="simple_memory" time="0.000351">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="simple_state" time="0.000298">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.loopInvariantCodeMotion" name="simple_storage" time="0.00029">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.mainFunction" name="empty_block" time="0.000266">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.mainFunction" name="multi_fun_mixed" time="0.000211">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.mainFunction" name="nested_fun" time="0.000177">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.mainFunction" name="single_fun" time="0.000135">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.mainFunction" name="smoke" time="0.000111">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.nameDisplacer" name="funtion_call" time="0.000333">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.nameDisplacer" name="variables" time="0.000191">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.nameDisplacer" name="variables_inside_functions" time="0.000196">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="arith" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="arith_movable" time="6.9e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="arith_non_movable" time="6.7e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="mulcheck" time="7.6e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="mulmod" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="negative_rounding" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="nested" time="7.1e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="signed_division" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="smod" time="0.000108">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="smoke" time="5.6e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.reasoningBasedSimplifier" name="wrapping" time="6.2e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for" time="0.000198">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_branch" time="0.000218">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_break" time="0.000257">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_continue" time="0.000243">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_continue_2" time="0.00022">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_continue_3" time="0.000211">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_decl_inside_break_continue" time="0.000324">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_deep_noremove" time="0.000583">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_deep_simple" time="0.000419">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_multi_break" time="0.000459">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_nested" time="0.000483">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_rerun" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="for_stmnts_after_break_continue" time="0.000389">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="function" time="0.000282">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="if" time="0.00022">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="if_overwrite_all_branches" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="if_used_in_one_branch" time="0.000202">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="leave" time="0.00035">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="multivar" time="0.00019">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="multi_assign" time="0.000199">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="non_movable" time="0.000145">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="remove_break" time="0.000267">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="remove_continue" time="0.00026">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="scopes" time="0.000161">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="simple" time="0.000125">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="switch_overwrite_in_all" time="0.00021">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="switch_overwrite_in_one" time="0.000222">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="switch_overwrite_use_combination" time="0.000266">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.redundantAssignEliminator" name="switch_unused" time="0.000177">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="branches_for1" time="0.000239">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="branches_for2" time="0.000266">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="branches_if" time="0.000227">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="branches_switch" time="0.000267">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="cheap_caller" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="do_not_move_out_of_scope" time="0.00022">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="do_remat_large_amounts_of_code_if_used_once" time="0.000252">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="for_break" time="0.000343">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="for_continue" time="0.00034">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="for_continue_2" time="0.000396">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="for_continue_with_assignment_in_post" time="0.000422">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="large_constant" time="0.000171">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="large_constant_used_once" time="0.000167">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="many_refs_small_cost_loop" time="0.000315">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="medium_sized_constant" time="0.000263">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="non_movable_function" time="0.00025">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="non_movable_instruction" time="0.000215">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="no_remat_in_loop" time="0.000387">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="reassign" time="0.000266">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="reassignment" time="0.000201">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="smoke" time="0.000112">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="some_refs_small_cost_loop" time="0.000191">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="some_refs_small_cost_nested_loop" time="0.000316">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="trivial" time="0.000162">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.rematerialiser" name="update_asignment_remat" time="0.000174">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.splitJoin" name="control_flow" time="0.000333">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.splitJoin" name="functions" time="0.000388">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.splitJoin" name="smoke" time="0.000116">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="for_loop" time="0.000449">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="multi_assign" time="0.000275">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="multi_assign_if" time="0.000267">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="multi_assign_multi_var_if" time="0.000351">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="multi_assign_multi_var_switch" time="0.000525">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="multi_assign_switch" time="0.000355">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="simple" time="0.000206">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="single_assign_if" time="0.000242">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="single_assign_switch" time="0.000274">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="ssaReverse" time="0.000585">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaAndBack" name="two_vars" time="0.000373">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaPlusCleanup" name="control_structures" time="0.00047">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaPlusCleanup" name="multi_reassign" time="0.00023">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaPlusCleanup" name="multi_reassign_with_use" time="0.00023">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaReverser" name="abi_example" time="0.00039">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaReverser" name="self_assign" time="0.000141">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaReverser" name="simple" time="0.000193">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="branches" time="0.000257">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="for_def_in_init" time="0.000258">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="for_reassign_body" time="0.000254">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="for_reassign_init" time="0.000248">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="for_reassign_post" time="0.000249">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="for_simple" time="0.000394">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="function" time="0.000308">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="multi_assign" time="0.000296">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="multi_decl" time="0.000299">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="nested" time="0.000281">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="nested_reassign" time="0.000233">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="notransform" time="0.000208">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="simple" time="0.000174">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="switch" time="0.000253">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="switch_reassign" time="0.000235">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="typed" time="0.000352">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="typed_for" time="0.000235">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="typed_switch" time="0.000231">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.ssaTransform" name="used" time="0.000353">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackCompressor" name="inlineInBlock" time="0.000958">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackCompressor" name="inlineInFunction" time="0.000936">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackCompressor" name="noInline" time="0.000376">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackCompressor" name="unusedPrunerWithMSize" time="0.001498">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="cycle" time="0.001566">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="cycle_after" time="0.001514">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="cycle_after_2" time="0.001542">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="cycle_before" time="0.00157">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="cycle_before_2" time="0.00164">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="cycle_before_after" time="0.001616">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="function_arg" time="0.001378">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="stub" time="0.001734">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="too_many_args_14" time="0.001223">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="too_many_args_15" time="0.001204">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="too_many_args_16" time="0.001227">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="too_many_returns_15" time="0.001238">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="too_many_returns_16" time="0.001229">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="tree" time="0.00499">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="verbatim_many_arguments" time="0.000986">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="verbatim_many_arguments_and_returns" time="0.001644">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.stackLimitEvader" name="verbatim_many_returns" time="0.00094">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="bugfix_visit_after_change" time="0.000212">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="for_false_condition" time="0.000166">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="if_false_condition" time="0.000135">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="if_multi_unassigned_condition" time="0.000176">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="if_true_condition" time="0.000129">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="if_unassigned_condition" time="0.000133">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="nested" time="0.000156">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="switch_inline" time="0.000162">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="switch_inline_match_default" time="0.000185">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="switch_inline_no_match" time="0.000149">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="switch_inline_no_match_mixed" time="0.000155">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.structuralSimplifier" name="switch_no_remove_empty_case" time="0.000198">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="LiteralRematerialiser" time="0.000342">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="multiple_param" time="0.000353">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="multiple_return" time="0.000304">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="nested_function" time="0.000474">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="nested_function_name_collision" time="0.000451">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="no_return" time="0.000235">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="no_unused" time="0.000228">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="recursion" time="0.000327">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="simple" time="0.000254">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="smoke" time="0.000118">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedFunctionParameterPruner" name="too_many_arguments" time="0.000513">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="functions" time="0.000168">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="intermediate_assignment" time="0.000145">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="intermediate_multi_assignment" time="0.000172">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="keccak" time="0.000171">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="movable_user_defined_function" time="0.000211">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="msize" time="0.00018">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="multi_assign" time="0.000177">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="multi_assignments" time="0.000144">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="multi_declarations" time="0.000111">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="multi_declare" time="0.000135">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="multi_partial_assignments" time="0.000129">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="no_msize" time="0.000172">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="pop" time="0.000122">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="smoke" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="trivial" time="0.000127">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.unusedPruner" name="verbatim" time="0.000207">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varDeclInitializer" name="ambiguous" time="0.000227">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varDeclInitializer" name="inside_func" time="0.000203">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varDeclInitializer" name="multi" time="0.00014">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varDeclInitializer" name="multi_assign" time="0.000172">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varDeclInitializer" name="simple" time="0.000124">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varDeclInitializer" name="typed" time="0.000219">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="builtins" time="0.000147">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="function_names" time="0.000174">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="function_parameters" time="0.000227">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="function_scopes" time="0.000173">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="instructions" time="0.000129">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="name_stripping" time="0.000181">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="reshuffling-inverse" time="0.000183">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.varNameCleaner" name="reshuffling" time="0.000155">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="constant_assignment" time="0.000178">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="functional_instruction" time="0.000187">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="function_call" time="0.000388">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="if" time="0.000358">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="or_bool_renamed" time="0.000214">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="switch_1" time="0.000437">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="switch_2" time="0.00048">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="switch_3" time="0.000506">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="switch_4" time="0.000638">
</testcase>
<testcase assertions="1" classname="yulOptimizerTests.wordSizeTransform" name="switch_5" time="0.000254">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="access_large_memory_offsets" time="0.000237">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="ambiguous_vars" time="0.000154">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="and_create" time="0.000169">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="and_create2" time="0.000167">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="bounded_recursion" time="0.00114">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="datacopy" time="0.000257">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="dataoffset" time="0.00014">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="datasize" time="0.000126">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="exp" time="0.000162">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="expr_nesting_depth_exceeded" time="0.000305">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="expr_nesting_depth_not_exceeded" time="0.00028">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="external_call" time="0.00014">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="function_calls" time="0.000162">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="function_scopes" time="0.000175">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="hex_literals" time="0.000121">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="infinite_recursion" time="0.001704">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="infinite_recursion_tracelimit" time="0.000364">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="leave" time="0.000223">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="leave_for_init" time="0.000147">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="long_obect_name" time="0.000151">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="loop" time="0.000226">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="pop_byte_shr_call" time="0.000138">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="pop_byte_shr_func" time="0.000139">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="recursion" time="0.000371">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="recursive_function_for_loop" time="0.000247">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="self_balance" time="0.000206">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="shadowed_symbol" time="0.000119">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="side_effect_free" time="0.000205">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="simple_mstore" time="0.000124">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="smoke" time="7.6e-05">
</testcase>
<testcase assertions="1" classname="yulInterpreterTests" name="switch_statement" time="0.00012">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="data" time="0.000128">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="datacopy" time="0.000299">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="dataoffset_code" time="0.000213">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="dataoffset_data" time="0.000157">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="dataoffset_self" time="0.000138">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="datasize_code" time="0.000186">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="datasize_data" time="0.000134">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="datasize_self" time="0.000131">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="function_series" time="0.000165">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="immutable_long_name_does_not_end_up_in_bytecode" time="0.000171">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="jump_tags" time="0.000279">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="linkersymbol" time="0.000254">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="long_object_name" time="0.001597">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="metadata" time="0.00038">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="namedObject" time="0.000104">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="namedObjectCode" time="0.000122">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="nested_optimizer" time="0.003198">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="simple" time="0.000157">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="simple_optimizer" time="0.001642">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="smoke" time="0.000126">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="sourceLocations" time="0.000348">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="subObject" time="0.000219">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="subObjectAccess" time="0.001148">
</testcase>
<testcase assertions="1" classname="objectCompiler" name="subSubObject" time="0.000313">
</testcase>
<testcase assertions="1" classname="objectCompiler.wasm" name="no_main_function" time="0.000223">
</testcase>
<testcase assertions="1" classname="objectCompiler.wasm" name="simple" time="0.000159">
</testcase>
<testcase assertions="1" classname="objectCompiler.wasm" name="subObject" time="0.000244">
</testcase>
<testcase assertions="1" classname="objectCompiler.wasm" name="subObjectAccess" time="0.000615">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="ambiguous_names" time="0.000287">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="break" time="0.00032">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="complex" time="0.000551">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="for" time="0.000202">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="function" time="0.000282">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="if" time="0.00016">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="leave" time="0.000193">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="nested_loop_complex" time="0.000514">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="stub" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="switch" time="0.000209">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="variables" time="0.000178">
</testcase>
<testcase assertions="1" classname="yulControlFlowGraph" name="verbatim" time="0.000194">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="cyclic_graph" time="0.000142">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="doubly_recursive_function" time="0.000108">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="empty" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="empty_with_sstore" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="memory" time="0.000153">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="mload_in_function" time="0.00016">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="multi_calls" time="0.00017">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="otherImmovables" time="0.00013">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="recursive_function" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="simple_functions" time="0.000154">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="state" time="0.000147">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="storage" time="0.000142">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="structures" time="0.000248">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="verbatim" time="0.000138">
</testcase>
<testcase assertions="1" classname="functionSideEffects" name="with_loop" time="0.000124">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="are_we_perl_yet" time="0.000132">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="assignment" time="0.000103">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="assignment_duplicate_vars" time="0.000131">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="assignment_fail" time="0.000105">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="assignment_of_function" time="0.00012">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="assign_from_stack" time="0.000113">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="blocks" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="break_outside_of_for_loop" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_function_literal" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_identifier_1" time="9.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_identifier_2" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_identifier_3" time="0.000128">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_identifier_4" time="8.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_identifier_5" time="9.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_identifier_6" time="0.000103">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_identifier_7" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="builtin_types" time="0.000141">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="byte_of_string_literal" time="8.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="call_literal" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="constants" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="continue_outside_of_for_loop" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="datacopy_shadowing" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dataoffset_shadowing" time="0.000103">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="datasize_shadowing" time="9.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="declaration_duplicate_vars" time="0.000116">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_consecutive_function" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_consecutive_function_arg" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_consecutive_function_ret" time="7.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_consecutive_variabledeclaration" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_ellipse_function" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_ellipse_function_arg" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_ellipse_function_ret" time="8.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_ellipse_variabledeclaration" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_leading_function" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_leading_function_arg" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_leading_function_ret" time="0.000115">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_leading_variabledeclaration" time="0.000129">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_middle_function" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_middle_function_arg" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_middle_function_ret" time="7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_middle_variabledeclaration" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_trailing_function" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_trailing_function_arg" time="0.000102">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_trailing_function_ret" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="dot_trailing_variabledeclaration" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="empty_call" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_expr_invalid_1" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_expr_invalid_2" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_expr_invalid_3" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_expr_invalid_4" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_expr_invalid_5" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_expr_invalid_6" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_loop_condition" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_loop_condition_fail" time="9.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_loop_condition_fail_ewasm" time="9.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement" time="9.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_2" time="0.000149">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_break" time="9.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_break_init" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_break_nested_body_in_init" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_break_nested_body_in_post" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_break_post" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_continue" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_continue_fail_init" time="0.000101">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_continue_fail_post" time="9.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_continue_nested_body_in_init" time="9.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_continue_nested_body_in_post" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_continue_nested_init_in_body" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_nested_break" time="8.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_statement_nested_continue" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_1" time="0.000104">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_2" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_3" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_4" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_5" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_6" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_7" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_8" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_9" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_A" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_B" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_C" time="7.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_D" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="for_visibility_E" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functional" time="9.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functional_assignment" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functional_assign_complex" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functional_partial" time="0.000105">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functional_partial_success" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functional_returndatacopy" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functions_in_parallel_scopes" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="functions_multiple_args" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_calls" time="0.000114">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_calls_2" time="0.000365">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_defined_in_init_block_1" time="0.000132">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_defined_in_init_block_2" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_defined_in_init_block_3" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_defined_in_init_nested_1" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_defined_in_init_nested_2" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_defined_in_init_nested_3" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_definition" time="9.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_definitions" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_definition_whitespace" time="0.000133">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_def_multiple_args" time="0.000128">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_embedded" time="0.000114">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_literal" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_literal_valid" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_shadowing_outside_vars_1" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="function_shadowing_outside_vars_2" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="hex_assignment" time="7.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="hex_assignment_long" time="7.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="hex_expression" time="7.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="hex_string_literal_non_printable_characters" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="hex_string_literal_odd" time="0.000117">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="hex_switch_case" time="0.000117">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="hex_switch_case_long" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement" time="0.000135">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_1" time="7.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_2" time="9.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_3" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_fail_1" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_fail_2" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_fail_3" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_invalid_1" time="0.000112">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_invalid_2" time="0.000105">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_invalid_3" time="9.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_invalid_4" time="9.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_scope_1" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="if_statement_scope_2" time="0.000107">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="instructions" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="instructions_too_few_args_1" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="instructions_too_few_args_2" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="instructions_too_many_args" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="dup_disallowed" time="0.000238">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="invalid_octal_number" time="0.000119">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="jumpdest_disallowed" time="8.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="jumpi_disallowed" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="jump_disallowed" time="7.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="label_disallowed" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="leave_items_on_stack" time="7.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="literals_on_stack_disallowed" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="pc_disallowed" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="push_disallowed" time="0.000334">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="swap_disallowed" time="0.000197">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="unicode_comment_direction_override" time="9.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="unicode_string_direction_override" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="verbatim_empty_string" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="verbatim_leading_zero" time="9.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="verbatim_reserved" time="0.000106">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.invalid" name="verbatim_reserved2" time="0.000136">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="invalid_tuple_assignment" time="0.000121">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="invalid_type" time="8.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="invalid_type2" time="8.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="invalid_type3" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="invalid_type4" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="keywords" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="linkersymbol_bad_literal" time="0.000101">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="linkersymbol_evm" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="linkersymbol_evmtyped" time="0.000106">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="linkersymbol_ewasm" time="0.000125">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="linkersymbol_non_literal_args" time="0.000107">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="linkersymbol_shadowing" time="0.000102">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="literal_invalid_type" time="0.0001">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="loadimmutable" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="loadimmutable_bad_literal" time="0.000104">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="loadimmutable_shadowing" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="metadata_access" time="0.000181">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="metadata_access_2" time="0.000116">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="metadata_access_subobject" time="0.000125">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="multiple_assignment_1" time="0.000114">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="multiple_assignment_2" time="0.000101">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="multiple_assignment_3" time="0.000121">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="name_clashes" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="name_clash_function_var_subscope" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="name_clash_function_var_subscope_reverse" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="name_clash_sub_scope" time="7.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="name_clash_sub_scope_reverse" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literals_1" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literals_2" time="0.000133">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literals_3" time="9.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literals_4" time="8.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literals_5" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literal_1" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literal_2" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literal_3" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literal_4" time="8.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="number_literal_5" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="basic_subobject" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="code" time="0.000182">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="code_without_object" time="9.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="complex_subobject" time="0.000142">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="conflict_data_data" time="7.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="conflict_data_parent" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="conflict_object_data" time="7.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="conflict_object_object" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="conflict_object_parent" time="6.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="data" time="9.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="datacopy" time="0.000126">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="dataoffset_nonliteral" time="0.000128">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="dataoffset_nonstring" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="dataoffset_notfound" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="datasize_nonliteral" time="8.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="datasize_nonstring" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="datasize_notfound" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="data_access" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="data_first" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="data_hex_name" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="data_invalid_hex1" time="0.000129">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="data_invalid_hex2" time="0.0001">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="empty_code" time="7.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="empty_data" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="empty_object" time="7.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="empty_object_name" time="7.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="incomplete1" time="7.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="incomplete2" time="0.000122">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="multiple_code" time="0.000106">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="multiple_data" time="7.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="multiple_root_object" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="nested_object" time="0.000115">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="object_hex_name" time="9.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="subobject_access" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="subobject_first" time="8.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests.objects" name="subobject_hex_name" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="opcode_for_functions" time="0.000114">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="opcode_for_function_args_1" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="opcode_for_function_args_2" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="optional_types" time="0.000104">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="passing_builtin_with_literal_argument_into_literal_argument" time="0.000121">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="period_in_identifier" time="7.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="period_in_identifier_spaced_1" time="0.000105">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="period_in_identifier_spaced_2" time="0.0001">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="period_in_identifier_spaced_3" time="9.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="period_in_identifier_start" time="0.00014">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="period_in_identifier_start_with_comment" time="0.000105">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="period_not_as_identifier_start" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="push" time="8.4e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="recursion_depth" time="0.001707">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="selfdestruct" time="0.000116">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="setimmutable" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="setimmutable_bad_literal" time="0.000117">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="setimmutable_shadowing" time="9.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="simple_functions" time="0.000134">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="simple_instructions" time="0.000107">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="smoke" time="7.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="smoke_test" time="7.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="solidity_keywords" time="0.000591">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="string_literal_switch_case" time="0.000124">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="string_literal_too_long" time="0.000107">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="string_literal_too_long_byte" time="0.000102">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="string_literal_too_long_immutable" time="0.000124">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="string_literal_too_long_linkersymbol" time="0.000103">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="surplus_input" time="0.00012">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_case" time="0.000125">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_case_different_literal" time="0.000135">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_case_string_literal_too_long" time="0.000126">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_case_string_literal_very_long" time="0.000114">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_default_before_case" time="0.000128">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_duplicate_case" time="0.000138">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_duplicate_case_different_literal" time="0.000144">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_duplicate_default" time="0.000135">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_invalid_body" time="9.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_invalid_case" time="8.6e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_invalid_expr_1" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_invalid_expr_2" time="9.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_invalid_expr_3" time="9.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_statement_1" time="0.000109">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_statement_2" time="0.000196">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_statement_duplicate_case" time="0.0001">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="switch_statement_no_access" time="8.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="token_as_identifier" time="9.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="tuple_assignment" time="0.0001">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="type_check_cases" time="8.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="type_check_cases_fail" time="9.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="type_check_cases_fail_evmtyped" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="type_check_if_condition" time="0.000113">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="type_check_if_condition_fail" time="9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="user_defined_functions_fail" time="0.000148">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="user_defined_functions_fine" time="0.000126">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="vardecl" time="8.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="vardecl_bool" time="8.5e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="vardecl_complex" time="9.3e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="vardecl_empty" time="6.8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="vardecl_multi" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="vardecl_multi_conflict" time="0.000132">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="vardecl_name_clashes" time="0.000121">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="variable_access_cross_funcs" time="0.000102">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="variable_declaration" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="variable_declaration_bool" time="8.2e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="variable_declaration_complex" time="9.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="variable_declaration_empty" time="6.9e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="variable_use_before_decl_1" time="8e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="variable_use_before_decl_2" time="8.1e-05">
</testcase>
<testcase assertions="1" classname="yulSyntaxTests" name="verbatim_leading_zero" time="9e-05">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="for_1" time="0.000238">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="for_2" time="0.000214">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="functions_multi_return" time="0.000306">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_argument_reuse" time="0.000268">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_argument_reuse_without_retparams" time="0.000267">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_call" time="0.000204">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_many_arguments" time="0.000661">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_params" time="0.000159">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_params_and_retparams" time="0.000165">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_params_and_retparams_partly_used" time="0.000221">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam" time="0.000164">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_block" time="0.000224">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_declaration" time="0.000163">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_for" time="0.000185">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_if" time="0.000162">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_leave" time="0.000147">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_read" time="0.000255">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_unassigned" time="0.00017">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_retparam_unassigned_multiple" time="0.00017">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_trivial" time="0.000109">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="function_with_body_embedded" time="0.000196">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="if" time="0.000201">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="last_use_in_nested_block" time="0.000142">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="multi_reuse_same_variable_name" time="0.000176">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="multi_reuse_single_slot" time="0.000128">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="multi_reuse_single_slot_nested" time="0.000124">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_on_decl_assign_not_same_scope" time="0.000132">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_on_decl_assign_to_last_used" time="0.000134">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_on_decl_assign_to_last_used_expr" time="0.0002">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_on_decl_assign_to_not_last_used" time="0.000149">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_slots" time="0.000174">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_slots_function" time="0.000235">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_slots_function_with_gaps" time="0.000298">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="reuse_too_deep_slot" time="0.000559">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="single_var" time="0.000118">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="single_var_assigned" time="0.000109">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="single_var_assigned_plus_code" time="0.000138">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="single_var_assigned_plus_code_and_reused" time="0.000187">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="smoke" time="8.8e-05">
</testcase>
<testcase assertions="1" classname="evmCodeTransform.stackReuse" name="switch" time="0.000183">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="conflicting_settings" time="0.000273">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="conflicting_settings_reverse" time="0.000192">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="conflicting_settings_reverse_experimental" time="0.000253">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="external_functions_taking_internal_types_nested_struct_with_mapping" time="0.000477">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="external_functions_taking_internal_types_struct_array_with_function_type" time="0.000388">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="external_functions_taking_internal_types_struct_with_array_of_function_types" time="0.000399">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="external_functions_taking_internal_types_struct_with_function_type" time="0.000329">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="external_functions_taking_internal_types_struct_with_mapping" time="0.000408">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="invalid_pragma_value" time="0.0002">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="overloaded_external_functions_taking_different_structs" time="0.030706">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="overloaded_external_functions_taking_identical_structs" time="0.00065">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="same_setting_twice" time="0.000257">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="selected_twice" time="0.000206">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="selected_twice_v2" time="0.000245">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="select_v1" time="0.000232">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="select_v1_quoted_string" time="0.000224">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="select_v2_quoted_string" time="0.000243">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_accessing_public_state_variable_via_v1_type" time="0.011839">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_accessing_public_state_variable_via_v2_type" time="0.000698">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v1_library_function_accepting_storage_struct" time="0.009441">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_constructor_accepting_struct" time="0.000689">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_contract_function_accepting_struct_via_named_argument" time="0.000612">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_contract_function_pointer_accepting_struct" time="0.000578">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_contract_function_returning_dynamic_string_array" time="0.000446">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_contract_function_returning_struct" time="0.000468">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_contract_function_returning_struct_with_dynamic_array" time="0.000525">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_event_accepting_struct" time="0.000487">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_library_bound_function_returning_struct" time="0.000518">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_library_function_accepting_storage_struct" time="0.016064">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_library_function_returning_struct" time="0.000633">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_call_to_v2_modifier" time="0.029515">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_constructor_with_v2_modifier" time="0.080641">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_inheritance_from_contract_calling_v2_function" time="0.096778">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_inheritance_from_contract_defining_v2_event" time="0.002443">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_inheritance_from_contract_defining_v2_function_accepting_struct" time="0.000672">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_inheritance_from_contract_defining_v2_function_returning_struct" time="0.000509">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_inheritance_from_contract_emitting_v2_event" time="0.01445">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_modifier_overriding_v2_modifier" time="0.009813">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v1_v2_v1_modifier_mix" time="0.033146">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_accessing_returned_dynamic_array_without_returndata_support" time="0.000255">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_accessing_returned_dynamic_array_with_returndata_support" time="0.176222">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_constructor_accepting_struct" time="0.026948">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_contract_function_pointer_accepting_struct" time="0.028957">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_contract_function_returning_dynamic_string_array" time="0.177625">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_contract_function_returning_struct" time="0.026994">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_contract_function_returning_struct_with_dynamic_array" time="0.090317">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_event_accepting_struct" time="0.007899">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_library_function_pointer_accepting_struct" time="0.000737">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_call_to_v2_library_function_returning_struct" time="0.026422">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_v1_v1_modifier_sandwich" time="0.00077">
</testcase>
<testcase assertions="1" classname="syntaxTests.abiEncoder" name="v2_v1_v2_modifier_sandwich" time="0.000587">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="abstract_contract_because_of_interface" time="0.000372">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="abstract_contract_instantiation" time="0.000383">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="abstract_only" time="0.000172">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="abstract_without_contract" time="0.000117">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="contract" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="interface" time="0.00024">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="library" time="0.000205">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="unimplemented_functions" time="0.000232">
</testcase>
<testcase assertions="1" classname="syntaxTests.abstract" name="unimplemented_functions_inherited" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="array_pop" time="0.003723">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="array_pop_arg" time="0.000412">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="bytes_pop" time="0.009937">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="bytes_to_fixed_bytes" time="0.112357">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="calldata" time="0.007535">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="calldata_assign" time="0.000492">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="calldata_dynamic" time="0.013575">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="calldata_multi" time="0.007436">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="calldata_multi_dynamic" time="0.013634">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="calldata_multi_dynamic_V1" time="0.000564">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="calldata_resize" time="0.000376">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_empty_invalid" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_on_type_info" time="0.000358">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_on_variable" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_valid_type_literal" time="0.013215">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_wrong_type_bytes_and_strings" time="0.000713">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_wrong_type_empty_array_literal" time="0.000367">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_wrong_type_empty_string_literal" time="0.005025">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_wrong_type_misc" time="0.00082">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_wrong_type_misc_literals_and_expressions" time="0.000761">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.concat" name="bytes_concat_wrong_type_zero_literal" time="0.000449">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="contract_array" time="0.010971">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="contract_index_access" time="0.001887">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="dynamic_memory_array_pop" time="0.000459">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="function_mapping" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="function_mapping_library" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalid" name="bytes_to_fixed_bytes" time="0.000533">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalid" name="library_array" time="0.000292">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalid" name="library_index_access" time="0.000272">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalidCopy" name="calldata_to_memory_different_base" time="0.000451">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalidCopy" name="storage_to_memory_different_base" time="0.000504">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalidCopy" name="storage_to_storage_different_base" time="0.000368">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalidCopy" name="storage_to_storage_different_base_2" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalidCopy" name="storage_to_storage_different_sign" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalidCopy" name="storage_to_storage_dynamic_to_static" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.invalidCopy" name="storage_to_storage_static_longer_to_shorter" time="0.000334">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="abi_decode_length_too_large" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="array_length_cannot_be_constant_function_parameter" time="0.000294">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="bytes32_too_large" time="0.000238">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="bytes32_too_large_multidim" time="0.000232">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="cannot_be_assigned" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="cannot_be_assigned_mapping" time="0.000301">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="cannot_be_assigned_struct" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="cannot_be_function" time="0.000243">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="cannot_be_function_call" time="0.000259">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="can_be_constant_in_function" time="0.001942">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="can_be_constant_in_struct" time="0.001083">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="can_be_recursive_constant" time="0.001113">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="complex_cyclic_constant" time="0.000456">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="constant_var" time="0.001037">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="const_cannot_be_fractional" time="0.000305">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="cyclic_constant" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="fixed_size_multidim_zero_length" time="0.00044">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="fixed_size_zero_length" time="0.000304">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="inline_array" time="0.00022">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="invalid_expression_1" time="0.00021">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="invalid_expression_2" time="0.000207">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="invalid_expression_3" time="0.000221">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="invalid_expression_4" time="0.000207">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="invalid_expression_5" time="0.000235">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="local_memory_too_large" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="non_integer_constant_var" time="0.000244">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="not_convertible_to_integer" time="0.000212">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="parameter_too_large" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="parameter_too_large_multidim" time="0.00057">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="parameter_too_large_multidim_ABIv2" time="0.00043">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="parentheses" time="0.001808">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="pure_functions" time="0.0003">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="too_large" time="0.000247">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="tuples" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.length" name="uint_too_large_multidim" time="0.000307">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="library_array" time="0.000278">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="nested_calldata_memory" time="0.064709">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="nested_calldata_memory2" time="0.088707">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="nested_calldata_memory3" time="0.072702">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="nested_calldata_storage" time="0.001765">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="nested_calldata_storage2" time="0.001624">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="new_no_parentheses" time="0.00038">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="no_array_pop" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.pop" name="calldata_pop" time="0.000365">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.pop" name="memory_pop" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.pop" name="storage_with_mapping_pop" time="0.00343">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.push" name="calldata_push" time="0.000414">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.push" name="memory_push" time="0.000368">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.push" name="storage_with_mapping_push" time="0.000362">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="assign_to_storage" time="0.031603">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="bytes_calldata" time="0.017043">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="bytes_memory" time="0.000501">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="bytes_storage" time="0.000324">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="calldata_dynamic" time="0.01749">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="calldata_dynamic_access" time="0.021032">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="calldata_dynamic_convert_to_memory" time="0.034737">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="calldata_dynamic_encode" time="0.03133">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="calldata_dynamic_forward" time="0.030034">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="calldata_static" time="0.000545">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="member_access" time="0.000402">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="memory_dynamic" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="memory_static" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="slice_literal" time="0.000297">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="slice_memory_bytes" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="slice_memory_string" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="slice_string" time="0.000286">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="storage_dynamic" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.array.slice" name="storage_static" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="static_storage_array_pop" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="string_pop" time="0.000307">
</testcase>
<testcase assertions="1" classname="syntaxTests.array" name="uninitialized_storage_var" time="0.000377">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="bound_all" time="0.00736">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="bound_call" time="0.01319">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="bound_calldata" time="0.000601">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="bound_no_call" time="0.021934">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="bound_to_calldata_struct" time="0.009157">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="bound_to_struct" time="0.000517">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="interface_using_for" time="0.00041">
</testcase>
<testcase assertions="1" classname="syntaxTests.bound" name="using_for_library" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_complex" time="0.003232">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_complex1" time="0.000487">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_free_function" time="0.000351">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_function_parameters" time="0.032535">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_internal_function" time="0.003594">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_internal_functions" time="0.00173">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_libraries" time="0.002273">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_mention_only" time="0.002918">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_new_in_ctor" time="0.000386">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_report_first_in_cycle" time="0.000588">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="circular_reference_type_mention_only" time="0.002734">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="cyclic_dep_exhaustion" time="0.014996">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="library_called" time="0.000615">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="library_function_circular_reference" time="0.000472">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="library_non_called" time="0.003978">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="library_public_called" time="0.005212">
</testcase>
<testcase assertions="1" classname="syntaxTests.bytecodeReferences" name="library_public_without_contract" time="0.000493">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="bytecode_too_large" time="0.020138">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="multiline_unicode_direction_override_1" time="0.000341">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="multiline_unicode_direction_override_2" time="0.000183">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="multiline_unicode_direction_override_3" time="0.000182">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="multiline_unicode_direction_override_4" time="0.000156">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="multiline_unicode_direction_override_5" time="0.001772">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="multiline_unicode_direction_override_6" time="0.000267">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="multiline_unicode_direction_override_7" time="0.000173">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="singleline_unicode_direction_override_1" time="0.00016">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="singleline_unicode_direction_override_2" time="0.000149">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="singleline_unicode_direction_override_3" time="0.000154">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="singleline_unicode_direction_override_4" time="0.00015">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="singleline_unicode_direction_override_5" time="0.001694">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="singleline_unicode_direction_override_6" time="0.000242">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="unicode_direction_in_source_1" time="0.000162">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="unicode_direction_in_source_2" time="0.000157">
</testcase>
<testcase assertions="1" classname="syntaxTests.comments" name="unicode_direction_override_1" time="0.000154">
</testcase>
<testcase assertions="1" classname="syntaxTests.constantEvaluator" name="overflow" time="0.000335">
</testcase>
<testcase assertions="1" classname="syntaxTests.constantEvaluator" name="type_reference" time="0.000254">
</testcase>
<testcase assertions="1" classname="syntaxTests.constantEvaluator" name="type_reference_in_contract" time="0.000243">
</testcase>
<testcase assertions="1" classname="syntaxTests.constantEvaluator" name="unary_fine" time="0.004102">
</testcase>
<testcase assertions="1" classname="syntaxTests.constantEvaluator" name="underflow" time="0.000385">
</testcase>
<testcase assertions="1" classname="syntaxTests.constantEvaluator" name="underflow_unary" time="0.000341">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="abi_encoding_constant" time="0.001276">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="addmod_mulmod_rational" time="0.000354">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="addmod_zero" time="0.000409">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="assign_constant_function_value" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="constant_natspec" time="0.000256">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="constant_natspec_user" time="0.000213">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="constant_override" time="0.000134">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="constant_unassigned" time="0.000184">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="constant_virtual" time="0.000114">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="constant_with_visibility" time="0.000108">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="constant_with_visibility_inverted" time="0.000102">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="cross_file_cyclic" time="0.000353">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="cross_file_cyclic_modules" time="0.000369">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="cyclic_dependency_1" time="0.000237">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="cyclic_dependency_2" time="0.000363">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="cyclic_dependency_3" time="0.000317">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="cyclic_dependency_4" time="0.001196">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="cyclic_dependency_5" time="0.000378">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="division_by_zero" time="0.000354">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="file_level_memory" time="0.000145">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="file_level_memory_inverted" time="0.000116">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="immutable_at_file_level" time="0.000194">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="mapping_constant" time="0.000223">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="mod_div_rational" time="0.000841">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="mod_zero" time="0.000389">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="mulmod_zero" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="name_clash_via_import" time="0.000243">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="non_constant" time="0.000197">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="pure_non_rational" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="redefinition_cross_file" time="0.000229">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="redefinition_public_constant" time="0.000202">
</testcase>
<testcase assertions="1" classname="syntaxTests.constants" name="struct_constant" time="0.000258">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="abstract_creation_forward_reference" time="0.000408">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="calldata_constructor_args" time="0.000241">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructer_internal_function_abstract" time="0.000354">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructible_abstract_base" time="0.001161">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructible_internal_constructor" time="0.001161">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor" time="0.00102">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_function_parameter_disallowed_conversion" time="0.001091">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_internal_function" time="0.000485">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_mapping_memory" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_mapping_memory_abstract" time="0.000378">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_old" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_override" time="0.000238">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_payable" time="0.010579">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_state_mutability" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_storage" time="0.000279">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_storage_abstract" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_virtual" time="0.000247">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_visibility" time="0.000424">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="constructor_without_implementation" time="0.000247">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="external_constructor" time="0.000227">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="function_named_constructor" time="0.000126">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="inconstructible_abstract_contract" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="inconstructible_abstract_contract_inverted" time="0.000382">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="inconstructible_internal_constructor" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="inconstructible_internal_constructor_inverted" time="0.000356">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="interface_constructor" time="0.000239">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="internal_constructor_non_abstract" time="0.00022">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="library_constructor" time="0.000212">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="msg_value_non_payable" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="nonabiv2_type" time="0.000276">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="nonabiv2_type_abstract" time="0.00034">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="nonpayable_new" time="0.000522">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="not_a_contract" time="0.000352">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="overriding_constructor" time="0.000414">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="payable_new" time="0.005195">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="public_constructor_abstract" time="0.000317">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="public_constructor_non_abstract" time="0.001044">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="returns_in_constructor" time="0.00028">
</testcase>
<testcase assertions="1" classname="syntaxTests.constructor" name="two_constructors" time="0.000256">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="constructor_this" time="0.004731">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow" name="free_function_crash" time="0.016644">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow" name="leave_inside_function" time="0.002271">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow" name="leave_outside_function" time="0.000225">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localCalldataVariables" name="if_declaration_err" time="0.000504">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localCalldataVariables" name="if_declaration_fine" time="0.015992">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localCalldataVariables" name="smoke_declaration" time="0.001571">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="for_declaration_err" time="0.000847">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="for_declaration_fine" time="0.001384">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="if_declaration_err" time="0.00048">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="returning_function_declaration" time="0.001218">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="reverting_function_declaration" time="0.000508">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="stub_declaration" time="0.001165">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="switch_declaration_err" time="0.000722">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables.assembly" name="switch_declaration_fine" time="0.001367">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="dowhile_declaration_err" time="0.000878">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="dowhile_declaration_fine" time="0.00161">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="for_declaration_err" time="0.000526">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="for_declaration_fine" time="0.001253">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="if_declaration_err" time="0.000582">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="if_declaration_fine" time="0.001611">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="modifier_declaration_fine" time="0.001362">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="revert_declaration_fine" time="0.001205">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="short_circuit_declaration_err" time="0.000613">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="short_circuit_declaration_fine" time="0.001253">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="smoke_declaration" time="0.001286">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="ternary_assignment_err" time="0.000465">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="ternary_assignment_fine" time="0.00388">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="ternary_declaration_err" time="0.000642">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="ternary_declaration_fine" time="0.001411">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="try_declaration_err" time="0.000883">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="try_declaration_fine" time="0.002087">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="tuple_declaration_fine" time="0.001324">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="while_declaration_err" time="0.000443">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.localStorageVariables" name="while_declaration_fine" time="0.001302">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.mappingReturn" name="named_err" time="0.000326">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.mappingReturn" name="named_fine" time="0.001064">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.mappingReturn" name="unnamed_err" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.mappingReturn" name="unnamed_fine" time="0.001055">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.modifiers" name="implemented_without_placeholder" time="0.000373">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.modifiers" name="non_implemented_modifer" time="0.000434">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="for_err" time="0.000666">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="for_fine" time="0.001259">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="if_err" time="0.000441">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="returning_function" time="0.001151">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="reverting_function" time="0.000434">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="stub" time="0.001128">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="switch_err" time="0.00063">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="switch_fine" time="0.001278">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn.assembly" name="switch_only_default_warn" time="0.001158">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="assembly_err" time="0.000379">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="default_location" time="0.001372">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="dowhile_err" time="0.000833">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="dowhile_fine" time="0.001557">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="for_err" time="0.000497">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="for_fine" time="0.001236">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="if_err" time="0.000562">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="if_fine" time="0.001563">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="modifier_err" time="0.000618">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="modifier_fine" time="0.001401">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="revert_fine" time="0.001246">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="short_circuit_err" time="0.000589">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="short_circuit_fine" time="0.001215">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="smoke" time="0.001323">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="ternary_err" time="0.000556">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="ternary_fine" time="0.001361">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="try_err" time="0.000852">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="try_fine" time="0.002061">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="tuple_fine" time="0.001338">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="unimplemented_internal" time="0.00043">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="unimplemented_library" time="0.000429">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="while_err" time="0.000395">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.storageReturn" name="while_fine" time="0.001296">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="always_revert" time="0.0011">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="assembly" time="0.000417">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="bug10821-for" time="0.00038">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="bug10821-if" time="0.000411">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="bug10821-modifier" time="0.000546">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="bug10821-require" time="0.000375">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="bug10821-while" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="functionType" time="0.001107">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="modifier_order_fail" time="0.000495">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="modifier_order_fine" time="0.001228">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="modifier_post_access" time="0.000477">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="modifier_pre_access" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call" time="0.011933">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_free_function" time="0.011705">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_library" time="0.014437">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_nested" time="0.01265">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_nested1" time="0.013281">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_recursive" time="0.013696">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_static" time="0.012789">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_super" time="0.012141">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_virtual" time="0.012962">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_virtual1" time="0.012303">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_virtual2" time="0.012314">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_virtual3" time="0.010841">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="reverting_call_virtual4" time="0.015717">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="smoke" time="0.000547">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="struct" time="0.000416">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.uninitializedAccess" name="unreachable" time="0.001179">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode.assembly" name="double_revert" time="0.002835">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode.assembly" name="for_break" time="0.002314">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode.assembly" name="for_continue" time="0.003442">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode.assembly" name="return" time="0.010455">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode.assembly" name="revert" time="0.010622">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="comment_fine" time="0.001829">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="constant_condition" time="0.001888">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="double_return" time="0.004734">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="double_revert" time="0.001639">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="do_while_continue" time="0.001947">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="for_break" time="0.006058">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="if_both_return" time="0.008137">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="library_function_import_bug" time="0.01343">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="library_function_nonimport_bug" time="0.005574">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="revert" time="0.001779">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="revert_empty" time="0.006228">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="while_break" time="0.008307">
</testcase>
<testcase assertions="1" classname="syntaxTests.controlFlow.unreachableCode" name="while_continue" time="0.001764">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="allowed_conversion_to_bytes_array" time="0.011337">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="allowed_conversion_to_string" time="0.011479">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="conversion_to_bytes" time="0.019103">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="convert_to_super_empty" time="0.000506">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="convert_to_super_nonempty" time="0.000329">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="explicit_conversion_address_to_payable" time="0.000409">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="explicit_conversion_from_storage_array_ref" time="0.00041">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="explicit_conversion_sender_to_payable" time="0.00182">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="explicit_conversion_this_to_payable" time="0.000355">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_cast_value_set" time="0.000308">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_array_to_memory" time="0.00104">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_nonpayable_payable" time="0.000377">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_nonpayable_pure" time="0.000449">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_nonpayable_view" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_payable_nonpayable" time="0.005684">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_payable_pure" time="0.000443">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_payable_view" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_pure_nonpayable" time="0.005626">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_pure_payable" time="0.000422">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_pure_view" time="0.005701">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_same" time="0.003945">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_view_nonpayable" time="0.005795">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_view_payable" time="0.000498">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="function_type_view_pure" time="0.000372">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="implicit_conversion_from_array_of_string_literals_to_calldata_string" time="0.000404">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="implicit_conversion_from_storage_array_ref" time="0.003299">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="implicit_conversion_from_string_literal_to_calldata_string" time="0.000577">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="implicit_conversion_from_string_literal_to_calldata_string_in_function_parameter" time="0.000472">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="implicit_conversion_of_super_in_comparison" time="0.000422">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="implicit_conversion_of_super_in_operators" time="0.000533">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="not_allowed_conversion_from_super" time="0.000429">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="not_allowed_conversion_to_int_array_pointer1" time="0.001917">
</testcase>
<testcase assertions="1" classname="syntaxTests.conversion" name="not_allowed_conversion_to_int_array_pointer2" time="0.00331">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="cycle_checker_function_type" time="0.000422">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="data_location_in_function_type" time="0.00748">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="data_location_in_function_type_fail" time="0.000453">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.externalFunction" name="external_function_return_parameters_no_data_location" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.externalFunction" name="function_argument_location_specifier_test_external_calldata" time="0.012775">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.externalFunction" name="function_argument_location_specifier_test_external_memory" time="0.000492">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.externalFunction" name="function_argument_location_specifier_test_external_storage" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="function_argument_location_specifier_test_non_reference_type" time="0.000252">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="function_parameters_with_data_location_fine" time="0.067339">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="function_return_parameters_with_data_location_fine" time="0.023192">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="function_type_array_as_reference_type" time="0.05598">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.internalFunction" name="function_argument_location_specifier_test_internal_calldata" time="0.000484">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.internalFunction" name="function_argument_location_specifier_test_internal_memory" time="0.001205">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.internalFunction" name="function_argument_location_specifier_test_internal_storage" time="0.0011">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.internalFunction" name="internal_function_parameters_no_data_location" time="0.000294">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.internalFunction" name="internal_function_return_parameters_no_data_location" time="0.000299">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraries" name="library_external_function_params_no_data_location" time="0.000421">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraries" name="library_external_function_return_no_data_location" time="0.000383">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraries" name="library_function_with_data_location_fine" time="0.000878">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraries" name="library_internal_function_no_data_location" time="0.000519">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraries" name="library_private_function_no_data_location" time="0.000505">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraries" name="library_public_function_no_data_location" time="0.000489">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraryExternalFunction" name="function_argument_location_specifier_test_external_calldata" time="0.013258">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraryExternalFunction" name="function_argument_location_specifier_test_external_memory" time="0.027451">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraryExternalFunction" name="function_argument_location_specifier_test_external_storage" time="0.007554">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraryInternalFunction" name="function_argument_location_specifier_test_internal_calldata" time="0.001618">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraryInternalFunction" name="function_argument_location_specifier_test_internal_memory" time="0.001518">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.libraryInternalFunction" name="function_argument_location_specifier_test_internal_storage" time="0.00138">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="memory_storage_data_location" time="0.000429">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.privateFunction" name="private_function_parameters_no_data_location" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.privateFunction" name="private_function_return_parameters_no_data_location" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.publicFunction" name="function_argument_location_specifier_test_public_calldata" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.publicFunction" name="function_argument_location_specifier_test_public_memory" time="0.026662">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.publicFunction" name="function_argument_location_specifier_test_public_storage" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.publicFunction" name="public_function_parameters_no_data_location" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations.publicFunction" name="public_function_return_parameters_no_data_location" time="0.00026">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="unspecified_constructor" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="variable_declaration_location_specifier_test_non_reference_type" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.dataLocations" name="variable_declaration_location_specifier_test_reference_type" time="0.008093">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="combining_hex_and_denomination" time="0.00042">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="denominations" time="0.001211">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="deprecated_year" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="finney_invalid" time="0.000184">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="fixed_point_division" time="0.000712">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="gwei_as_identifier" time="0.000159">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="szabo_finney_identifiers" time="0.009599">
</testcase>
<testcase assertions="1" classname="syntaxTests.denominations" name="szabo_invalid" time="0.000294">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="deprecated_functions" time="0.000412">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="double_stateVariable_declaration" time="0.000262">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="double_variable_declaration" time="0.001987">
</testcase>
<testcase assertions="1" classname="syntaxTests.duplicateFunctions" name="fallback_function_twice" time="0.000365">
</testcase>
<testcase assertions="1" classname="syntaxTests.duplicateFunctions" name="illegal_names_exception" time="0.002063">
</testcase>
<testcase assertions="1" classname="syntaxTests.duplicateFunctions" name="illegal_names_functions" time="0.000374">
</testcase>
<testcase assertions="1" classname="syntaxTests.duplicateFunctions" name="receive_function_thrice" time="0.00029">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="duplicate_contract" time="0.000233">
</testcase>
<testcase assertions="1" classname="syntaxTests.emit" name="emit_empty" time="0.000183">
</testcase>
<testcase assertions="1" classname="syntaxTests.emit" name="emit_non_event" time="0.000281">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="empty_struct" time="0.000253">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="enum_member_shadowing" time="0.001681">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="enum_with_too_many_members" time="0.000934">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="global_enum" time="0.001798">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="global_enum_contract_name_clash" time="0.000273">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="global_enum_name_clash" time="0.00021">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="global_enum_shadowing" time="0.001827">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="illegal_names" time="0.000434">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="literal_conversion" time="0.004043">
</testcase>
<testcase assertions="1" classname="syntaxTests.enums" name="literal_conversion_error" time="0.000463">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="abi_decode_error" time="0.000384">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="abi_encode_error" time="0.000324">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="abi_encode_error_instance" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="all_ones_signature" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="anonymous" time="0.000145">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="assert_with_cond_and_error" time="0.000256">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="assert_with_error" time="0.000269">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="basic" time="0.001211">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="clash_function_error" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="clash_function_error_inheritance" time="0.000335">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="clash_function_error_inheritance_2" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="duplicate" time="0.00314">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_address_payable" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_as_function_param" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_in_interface" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_in_library" time="0.001345">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_location_memory" time="0.000168">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_location_specifier" time="0.000135">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_param_type_shadowed_by_builtin_type_used_as_param_name" time="0.00014">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_param_type_shadowed_by_param_name" time="0.00128">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="error_reserved_name" time="0.000243">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="file_level" time="0.001081">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="hash_collision" time="0.000292">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="hash_collision_external" time="0.000408">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="indexed_error" time="0.000144">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="internal_type" time="0.000277">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="no_mappings" time="0.00028">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="no_overloading" time="0.000248">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="no_overloading_inheritance" time="0.000283">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="no_structs_in_abiv1" time="0.000265">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="panic_reserved_name" time="0.000208">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="require_custom" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="revert_parentheses" time="0.000373">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="selector" time="0.001363">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="selector_on_instance" time="0.000323">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="struct_named_error" time="0.001023">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="unreachable" time="0.001785">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="using" time="0.000427">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="using_2" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="using_structs" time="0.001179">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="weird1" time="0.000294">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="weird3" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="weird4" time="0.000277">
</testcase>
<testcase assertions="1" classname="syntaxTests.errors" name="zero_signature" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="anonymous_event_four_indexed" time="0.001087">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="anonymous_event_too_many_indexed" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="double_event_declaration" time="0.000275">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="double_event_declaration_ignores_anonymous" time="0.000276">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="double_event_declaration_ignores_indexed" time="0.000308">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event" time="0.001722">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="events_with_same_name" time="0.001212">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="events_with_same_name_different_types" time="0.001137">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="events_with_same_name_unnamed_arguments" time="0.001151">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_array_indexed_v2" time="0.001101">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_array_v2" time="0.001053">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_call" time="0.006768">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_emit_complex" time="0.014486">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_emit_foreign_class" time="0.015606">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_emit_simple" time="0.001782">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_function_inheritance_clash" time="0.000488">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_function_type_indexed" time="0.001737">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_inheritance" time="0.0072">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_library_function" time="0.00067">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_named_arguments_in_any_order" time="0.01461">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_nested_array" time="0.000458">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_nested_array_2" time="0.001169">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_nested_array_indexed_v2" time="0.001098">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_nested_array_in_struct" time="0.000337">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_nested_array_v2" time="0.001072">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_overload_named_arguments_ambiguous" time="0.000468">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_overload_named_arguments_ambiguous_implicit_conversion" time="0.00041">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_overload_named_arguments_in_any_order" time="0.015763">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_overload_named_arguments_wrong_types" time="0.000669">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_param_type_outside_storage" time="0.000385">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_param_type_shadowed_by_param_name" time="0.001562">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_struct" time="0.000362">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_struct_indexed" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_struct_indexed_v2" time="0.001175">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_struct_v2" time="0.001156">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_too_many_indexed" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="event_without_emit_deprecated" time="0.000297">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="function_event_inheritance_clash" time="0.000414">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="function_event_in_contract_clash" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="illegal_names_exception" time="0.001114">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="inheritance_adds_anonymous" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="inheritance_adds_indexed" time="0.000326">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="inheritance_adds_parameter" time="0.001637">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="inheritance_event_repeated" time="0.000355">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="inheritance_multi_parent" time="0.000354">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="inheritance_removes_indexed" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="internal_type" time="0.000335">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="multiple_events_argument_clash" time="0.001185">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="multiple_event_without_emit" time="0.000438">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="multiple_inheritance" time="0.002791">
</testcase>
<testcase assertions="1" classname="syntaxTests.events" name="overloading_in_contract" time="0.001102">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="arguments" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="default_visibility" time="0.000259">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="fallback_as_function_name" time="0.001682">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="fallback_duplicate_returns" time="0.000356">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="fallback_duplicate_returns_inheritance" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="fallback_duplicate_returns_override" time="0.002014">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="fallback_wrong_data_location" time="0.000459">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="inheritance_multi_base" time="0.000637">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="no_input_no_output" time="0.000357">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="old_syntax" time="0.00017">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="payable_fallback_without_receive_empty" time="0.001027">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="payable_fallback_without_receive_nonempty" time="0.001613">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="payable_fallback_without_receive_nonempty_by_inheritance" time="0.002916">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="payable_fallback_without_receive_only_internal" time="0.001106">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="payable_fallback_with_inherited_receive" time="0.001783">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="pure_modifier" time="0.000347">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="returns" time="0.001287">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="return_value_number" time="0.000308">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="return_value_type" time="0.000271">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="return_value_unsupported" time="0.000253">
</testcase>
<testcase assertions="1" classname="syntaxTests.fallback" name="view_modifier" time="0.000301">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="circular_reference1functions_first" time="0.000454">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="circular_referencecontracts_first" time="0.000449">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_call_via_contract_type" time="0.000316">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_constructor" time="0.000146">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_different_integer_types" time="0.00046">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_fallback" time="0.000154">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_functions" time="0.000473">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_function_modifier" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_function_namesake_different_parameter_types" time="0.000516">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_function_qualified_modifier" time="0.0003">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_function_shadowing" time="0.002647">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_function_visibility" time="0.000278">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_function_without_body" time="0.000212">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_identical" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_identical_multiple" time="0.000298">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_mutability" time="0.000372">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_namesake_contract_function" time="0.005384">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_overload" time="0.000555">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_override" time="0.000268">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_payable" time="0.00021">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_receive" time="0.000119">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_redefinition" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_storage" time="0.000371">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="free_virtual" time="0.000225">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="function_same_name_as_contract" time="0.000265">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="function_using_struct_after_contract" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="gas_value" time="0.00027">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="illegal_names" time="0.000357">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="qualified_struct_access" time="0.000403">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="struct_after_function" time="0.000428">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="super_in_free_function" time="0.000265">
</testcase>
<testcase assertions="1" classname="syntaxTests.freeFunctions" name="this_in_free_function" time="0.00028">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="arbitrary_parameters_but_restricted_first_type" time="0.000421">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="calloptions_duplicated" time="0.000459">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="calloptions_on_delegatecall" time="0.00037">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="calloptions_on_internal_function" time="0.000368">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="calloptions_on_staticcall" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="calloptions_repeated" time="0.000481">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="call_unimplemented_base" time="0.000502">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="call_unimplemented_base_via_super" time="0.00051">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="int_not_callable" time="0.000324">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="invalid_expressions_with_calloptions1" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="invalid_expressions_with_calloptions2" time="0.000353">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="invalid_expressions_with_calloptions3" time="0.000359">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="invalid_named_arguments_conditional" time="0.000527">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="lowlevel_call_options" time="0.00127">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="msg_value_non_payable" time="0.000369">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_duplicate_parameter" time="0.000429">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_empty" time="0.000407">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_for_functions_that_take_arbitrary_parameters" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_invalid_name" time="0.000489">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_in_any_order" time="0.006778">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload" time="0.001575">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_failing1" time="0.000584">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_failing2" time="0.000517">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_failing3" time="0.000499">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_failing_ambiguous" time="0.000554">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_failing_ambiguous_implicit_conversion" time="0.000443">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_failing_right_names_wrong_order" time="0.000467">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_failing_wrong_names" time="0.000453">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_overload_in_any_order" time="0.006961">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="named_arguments_wrong_count" time="0.000603">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="new_library" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="new_with_calloptions" time="0.001702">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="new_with_calloptions_unsupported" time="0.000121">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="new_with_invalid_calloptions" time="0.000478">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="staticcall_on_homestead" time="9.7e-05">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionCalls" name="this_not_callable" time="0.00038">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="assign_bound" time="0.000471">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="assign_builtin" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="call_gas_on_function" time="0.014826">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="call_value_library_function" time="0.005736">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="call_value_on_non_constructor" time="0.000596">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="call_value_on_non_payable_function_type" time="0.000402">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="call_value_on_payable_function_type" time="0.014447">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="call_value_options_on_non_payable_function_type" time="0.00056">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="comparison_of_function_types_eq" time="0.006604">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="comparison_of_function_types_gt_1" time="0.000504">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="comparison_of_function_types_gt_2" time="0.000372">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="comparison_of_function_types_lt_1" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="comparison_of_function_types_lt_2" time="0.000288">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="conversion_to_address" time="0.000334">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="delete_external_function_type_invalid" time="0.000308">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="delete_function_type" time="0.003842">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="delete_function_type_invalid" time="0.000357">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="error_deprecate_gas_function" time="0.000379">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="error_deprecate_value_constructor" time="0.000408">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="error_deprecate_value_constructor_nonpayable" time="0.00047">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="error_deprecate_value_function" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_function_to_function_type_calldata_parameter" time="0.033992">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_function_type_public_variable" time="0.031092">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_function_type_returning_internal" time="0.000523">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_function_type_taking_internal" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_function_type_to_address" time="0.006003">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_function_type_to_address_payable" time="0.000403">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_function_type_to_uint" time="0.000321">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="external_library_function_to_external_function_type" time="0.000486">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_parameter_allowed_conversions" time="0.147561">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type" time="0.003392">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_types_internal_visibility_error" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_types_variable_visibility" time="0.009956">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_arrays" time="0.02146">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_constructor" time="0.000462">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_constructor_local" time="0.000231">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_internal_public_variable" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_named_call" time="0.000336">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_parameter" time="0.022169">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_returned" time="0.009934">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_return_parameters_with_names" time="0.000448">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_struct" time="0.014065">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_struct_undefined_member" time="0.000461">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="function_type_variable_external_internal" time="0.000385">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="inline_array_with_bound_function" time="0.000459">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="inline_array_with_bound_function_mixed" time="0.000429">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="inline_array_with_payable_function" time="0.00046">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_array_memory_as_external_parameter_in_library_external" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_array_storage_as_external_parameter_in_library_external" time="0.000299">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_as_external_parameter" time="0.00027">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_as_external_parameter_in_library_external" time="0.000267">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_as_external_parameter_in_library_internal" time="0.001422">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_returned_from_public_function" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_struct_as_external_parameter_in_library_external" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="internal_function_type_to_address" time="0.000288">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="payable_internal_function_type" time="0.000256">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="payable_internal_function_type_is_not_fatal" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="private_function_type" time="0.000279">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="public_function_type" time="0.000265">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="selectors" time="0.004836">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="ternary_with_bound_functions" time="0.000578">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="valid_function_type_variables" time="0.011571">
</testcase>
<testcase assertions="1" classname="syntaxTests.functionTypes" name="warn_function_type_parameters_with_names" time="0.001233">
</testcase>
<testcase assertions="1" classname="syntaxTests.getter" name="complex_struct" time="0.011077">
</testcase>
<testcase assertions="1" classname="syntaxTests.getter" name="nested_structs" time="0.000511">
</testcase>
<testcase assertions="1" classname="syntaxTests.getter" name="recursive_struct" time="0.000309">
</testcase>
<testcase assertions="1" classname="syntaxTests.getter" name="simple_struct" time="0.009978">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="callcode_with_wrong_arg_count" time="0.000629">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="call_with_wrong_arg_count" time="0.000514">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="delegatecall_with_wrong_arg_count" time="0.000458">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="keccak256_with_wrong_arg_count" time="0.000365">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="log_deprecate" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="now_deprecate" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="now_override" time="0.001716">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="ripemd160_with_wrong_arg_count" time="0.000408">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="sha256_with_wrong_arg_count" time="0.000355">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="sha3_no_call" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="sha3_override" time="0.006123">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="sha3_var" time="0.00534">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="suicide_no_call" time="0.000413">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="suicide_override" time="0.006056">
</testcase>
<testcase assertions="1" classname="syntaxTests.globalFunctions" name="suicide_var" time="0.005247">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="calling_external_function_via_local_variable_with_invalid_type" time="0.000464">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="calling_external_function_via_parameter_with_invalid_type" time="0.000362">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="const_struct_with_mapping" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests.declarationUnaryTuple" name="declaration_bitnot_tuple" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests.declarationUnaryTuple" name="declaration_dec_tuple" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests.declarationUnaryTuple" name="declaration_delete_tuple" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests.declarationUnaryTuple" name="declaration_inc_tuple" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests.declarationUnaryTuple" name="declaration_unary_tuple" time="0.000421">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="identifier_collision_return_declare" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="large_array_in_memory_struct" time="0.000544">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="large_array_in_memory_struct_2" time="0.000472">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="large_struct_array" time="0.000375">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="memory_mapping_array" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="oversized_var" time="0.00384">
</testcase>
<testcase assertions="1" classname="syntaxTests.iceRegressionTests" name="recursive_struct_memory" time="0.000477">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="assembly" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="as_function_param" time="0.000253">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="complex" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="conditionally_initialized" time="0.000335">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="conditional_return_uninitialized" time="0.000319">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="creationCode" time="0.025166">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="ctor_indirect_initialization" time="0.000575">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="ctor_initialization_indirect_reading" time="0.000436">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="ctor_initialization_reading" time="0.000359">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="ctor_initialization_tuple" time="0.002138">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="ctor_modifier_args" time="0.000462">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="ctor_modifier_initialization" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="ctor_modifier_reading" time="0.000396">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="decrement" time="0.000297">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="delete" time="0.000283">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="delete_and_initialize" time="0.000298">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="double_specifier" time="0.000137">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="external_function_pointer" time="0.000223">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="function_initialization" time="0.005473">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="function_initialization_reading" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="function_pointer_initializing" time="0.000487">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="function_pointer_reading" time="0.000458">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="illegal_names" time="0.000293">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="immutable_basic" time="0.001145">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="increment" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="increment_decrement" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="indirect_reading_during_statevar_init" time="0.000351">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_ctor" time="0.002007">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_ctor_argument" time="0.000453">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_ctor_inherit_specifier_argument_init" time="0.000453">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_ctor_inherit_specifier_argument_reading" time="0.000449">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_virtual_functions" time="0.000498">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_virtual_functions_direct_call" time="0.000474">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_virtual_functions_super" time="0.000497">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_virtual_modifiers" time="0.000531">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="inheritance_wrong_ctor" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="initialized_after_ctor" time="0.00121">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="long_name" time="0.001177">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="loop_initialized" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="multiple_inheritance_virtual_functions" time="0.000743">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="multiple_inheritance_virtual_functions_with_super" time="0.000756">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="multiple_initializations" time="0.000326">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="non-value_type" time="0.000239">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="no_assignments" time="0.005013">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="private_state_var" time="0.000691">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="reading_after_initialization" time="0.001296">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="reading_after_initialization_modifier" time="0.001344">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="reading_during_statevar_init" time="0.000312">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="return_uninitialized" time="0.000341">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="runtimeCode" time="0.000381">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="runtimeCodeInheritance" time="0.000433">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="selector" time="0.005042">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="selector_function_name" time="0.00505">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="selector_function_pointer" time="0.013173">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="unary" time="0.000508">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="uninitialized" time="0.00028">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="uninitialized_private_state_var" time="0.000572">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="unrelated_reading" time="0.001258">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="variable_declaration_already" time="0.000347">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="variable_declaration_value" time="0.000265">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="writing_after_initialization" time="0.000312">
</testcase>
<testcase assertions="1" classname="syntaxTests.immutable" name="writing_after_initialization_modifier" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="boost_filesystem_bug" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="circular_import" time="0.001755">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="complex_import" time="0.002882">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="declaration_not_found" time="0.000299">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="filename_with_period" time="0.000152">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="importing_free_functions" time="0.008779">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="import_access_struct" time="0.002029">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="import_does_not_clutter_importee" time="0.000368">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="import_is_transitive" time="0.001859">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="inheritance_abi_encoder_match" time="0.085747">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="inheritance_abi_encoder_mismatch_1" time="0.000846">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="inheritance_abi_encoder_mismatch_2" time="0.000628">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="library_name_clash" time="0.000305">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="library_name_clash_with_contract" time="0.002017">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="multiple_non_existent_file_names" time="0.000197">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_1" time="0.000251">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_2" time="0.000272">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_3" time="0.000233">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_4" time="0.000222">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_5" time="0.001645">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_contract_struct_1" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_contract_struct_2" time="0.000265">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_contract_struct_3" time="0.000251">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_contract_struct_4" time="0.00023">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_contract_struct_5" time="0.00099">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_enum" time="0.000265">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_enum_contract" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_enum_struct" time="0.000249">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_1" time="0.000224">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_2" time="0.000234">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_3" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_4" time="0.000238">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_5" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_contract_1" time="0.000234">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_contract_2" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_contract_3" time="0.000239">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_contract_4" time="0.000224">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="name_clash_in_import_struct_contract_5" time="0.001164">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="regular_import" time="0.001664">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="relative_import" time="0.002381">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="relative_import_multiplex" time="0.001676">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="shadowing_builtins_with_alias" time="0.001028">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="shadowing_builtins_with_imports" time="0.001637">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="shadowing_builtins_with_multiple_imports" time="0.002127">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="shadowing_via_import" time="0.000309">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="simple_alias" time="0.001942">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="smoke_test" time="0.000954">
</testcase>
<testcase assertions="1" classname="syntaxTests.imports" name="transitive" time="0.10822">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="array_multidim_rational" time="0.00067">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="array_multim_overflow_index" time="0.000446">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="array_negative_index" time="0.000332">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="array_noninteger_index" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="array_out_of_bounds_index" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="array_without_index" time="0.000283">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="fixedbytes_negative_index" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="fixedbytes_noninteger_index" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="fixedbytes_out_of_bounds_index" time="0.000454">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="fixedbytes_without_index" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="function_type" time="0.000321">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="function_type_without_index" time="0.0003">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="index_range_access_assert" time="0.000258">
</testcase>
<testcase assertions="1" classname="syntaxTests.indexing" name="struct_array_noninteger_index" time="0.000433">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="allow_empty_duplicated_super_constructor_call" time="0.001769">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="base_arguments_empty_parentheses" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="base_arguments_multiple_inheritance" time="0.000377">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="base_arguments_no_parentheses" time="0.007944">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="base_not_contract" time="0.000403">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="disallow_modifier_style_without_parentheses" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.duplicated_constructor_call" name="ancestor" time="0.000373">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.duplicated_constructor_call" name="base" time="0.000332">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.duplicated_constructor_call" name="base_multi" time="0.000385">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.duplicated_constructor_call" name="base_multi_no_constructor" time="0.000369">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.duplicated_constructor_call" name="base_multi_no_constructor_modifier_style" time="0.00047">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="fallback_overrides_receive" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="fallback_without_override" time="0.000316">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="fallback_without_override_intermediate" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="fallback_with_override" time="0.001903">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="fallback_with_override_intermediate" time="0.002444">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_overrides_fallback" time="0.000463">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_parameter" time="0.000398">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_return_parameter" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_unimplemented" time="0.000326">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_without_override" time="0.000302">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_without_override_intermediate" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_with_override" time="0.001768">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.fallback_receive" name="receive_with_override_intermediate" time="0.002385">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface" name="contract_base" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.diamond" name="diamond_no_relist" time="0.00502">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.diamond" name="diamond_with_relist" time="0.005293">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.implementation" name="complete" time="0.006194">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.implementation" name="partial" time="0.000739">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.linearization.invalid" name="lists_a" time="0.000371">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.linearization.invalid" name="lists_b" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.linearization.invalid" name="lists_both" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface.linearization" name="valid" time="0.002087">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface" name="multiple_parents" time="0.000527">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface" name="overrides_multiple" time="0.000938">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface" name="overrides_single" time="0.000534">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.interface" name="single_parent" time="0.00041">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="interface_virtual_warning" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="modifiers_in_constructor_context" time="0.001791">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="add_view" time="0.00288">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="ambiguous_base_and_unique_implementation" time="0.000714">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="ambiguous_base_and_unique_mention" time="0.000597">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="ambiguous_base_functions_overridden_in_intermediate_base" time="0.005011">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="ambiguous_base_functions_overridden_in_intermediate_base_unimplemented" time="0.000612">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="calldata_memory" time="0.068009">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="calldata_memory_conflict" time="0.001322">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="calldata_memory_interface" time="0.053635">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="calldata_memory_interface_instantiate" time="0.077359">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="calldata_memory_interface_struct" time="0.021412">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="calldata_memory_struct" time="0.029607">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="change_return_types_in_interface" time="0.000599">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="common_base_and_unique_implementation" time="0.000629">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="common_base_and_unique_mention" time="0.002265">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="detect_double_override" time="0.000189">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="diamond_interface_empty_intermediate_public_state_variable_and_function" time="0.000473">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="diamond_interface_intermediate_public_state_variable" time="0.000584">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="diamond_interface_intermediate_public_state_variable_and_function" time="0.00055">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="diamond_interface_intermediate_public_state_variable_and_function_implemented" time="0.000551">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="diamond_top_implemented_intermediate_empty_bottom_public_state_variable" time="0.017403">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="diamond_top_implemented_intermediate_implemented_public_state_variable" time="0.000762">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="diamond_top_implemented_intermediate_public_state_variable" time="0.000623">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="external_turns_public_no_params" time="0.00285">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="function_pointer" time="0.000228">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="function_state_variable" time="0.004909">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="implement_interface_by_public_variable" time="0.006343">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="implement_internal_function_by_public_variable" time="0.000527">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="implement_private_function_by_public_variable" time="0.000458">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="implement_public_function_by_public_variable" time="0.006249">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="internal_external" time="0.000496">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="internal_external_inheritance" time="0.00046">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="modifier_ambiguous" time="0.002163">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="modifier_ambiguous_fail" time="0.000438">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="modifier_inherited_different_signature" time="0.000405">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="modifier_inherited_different_signature_override" time="0.000421">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="nonintermediate_common_base_and_unique_implementation" time="0.002482">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="nonintermediate_common_base_and_unique_implementation_modifier" time="0.000629">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="nonintermediate_common_base_and_unique_implementation_unimplemented" time="0.000874">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="no_common_base_and_unique_implementation" time="0.000471">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="no_matching_resolution" time="0.002398">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override" time="0.001276">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_ambiguous" time="0.000478">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_base_base" time="0.00139">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_empty_list" time="0.000215">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_implemented_and_unimplemented_with_implemented_call_via_contract" time="0.00046">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_implemented_and_unimplemented_with_implemented_call_via_super" time="0.003262">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_implemented_and_unimplemented_with_implemented_no_call" time="0.002943">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_implemented_and_unimplemented_with_implemented_virtual_call_into_base_contract" time="0.000548">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_implemented_with_unimplemented_then_implemented" time="0.000408">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_interface" time="0.005596">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_interface_multiple" time="0.006119">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_less_strict_mutability" time="0.001048">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_library" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_missing_virtual" time="0.000484">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_modifier_no_override" time="0.000302">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple" time="0.001615">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple2" time="0.000711">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_duplicated" time="0.000725">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_fail1" time="0.000195">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_fail2" time="0.000151">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_fail3" time="0.000136">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_fail4" time="0.000143">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_missing" time="0.000673">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_no_virtual" time="0.000394">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_no_virtual2" time="0.000348">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_multiple_unresolved" time="0.000301">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_public_vars" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_return_mismatch" time="0.000423">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_shared_base" time="0.007218">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_shared_base_partial" time="0.005191">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_shared_base_simple" time="0.004939">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability" time="0.003502">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability1" time="0.000474">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability2" time="0.001611">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability3" time="0.001642">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability4" time="0.000409">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability5" time="0.000379">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability6" time="0.000368">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_stricter_mutability7" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_type_mismatch" time="0.000698">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_type_mismatch2" time="0.000391">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_unimplemented_and_implemented_with_unimplemented" time="0.000488">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="override_unimplemented_and_unimplemented_with_unimplemented" time="0.000472">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="private_state_variable" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_constant_var_overrides_pure" time="0.004836">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_immutable_var_overrides_pure" time="0.000482">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple" time="0.000455">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple1" time="0.00046">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple2" time="0.043176">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple3" time="0.000781">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple4" time="0.033229">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple5" time="0.000747">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple_diamond" time="0.000628">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple_diamond1" time="0.000575">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple_diamond2" time="0.000577">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_multiple_explicit_override" time="0.013647">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_vars_wrong_override" time="0.000445">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_implements_parallel_interface" time="0.00093">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_missing_override" time="0.000447">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_no_override_but_function" time="0.000397">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_overrides_public_var" time="0.000332">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_overrides_pure" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_override_mapping_to_dynamic_struct" time="0.033554">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_override_struct_with_memory_element" time="0.027372">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_overriding_multiple" time="0.005483">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_overriding_multiple_derived" time="0.009589">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_parallel_funciton" time="0.000571">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_same_name_but_different_args" time="0.005474">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="public_var_surplus_override" time="0.000541">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="remove_view" time="0.000352">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="restrict_mutability_for_override_only" time="0.013205">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="state_variable_function" time="0.000541">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="triangle_impl" time="0.000497">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="triangle_no_impl" time="0.004113">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.override" name="virtual_private" time="0.000443">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="reference_non_base_ctor" time="0.000297">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="shadowing_base_state_vars" time="0.000292">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="shadowing_private_base_state_vars" time="0.001551">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="super_on_external" time="0.000483">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="too_few_base_arguments" time="0.000393">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="unimplemented_without_virtual" time="0.000247">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.virtual" name="duplicate" time="0.000154">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.virtual" name="library_err" time="0.000257">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.virtual" name="modifier_virtual_err" time="0.000258">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance.virtual" name="simple" time="0.001877">
</testcase>
<testcase assertions="1" classname="syntaxTests.inheritance" name="wrong_type_base_arguments" time="0.00043">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_from_contract" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_from_functiontype" time="0.000267">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_from_functiontype2" time="0.000269">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_from_functiontype3" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_from_library" time="0.002472">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_from_opcode_like" time="0.000241">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_from_super" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_location" time="0.000312">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_to_opcode_like" time="0.000193">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="assignment_to_special" time="0.000309">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="basefee_reserved_london" time="0.000232">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="circular_constant_access_err" time="0.000329">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="circular_constant_access_module_err" time="0.000421">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="circular_module_access_err" time="0.000383">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="constant_access" time="0.001788">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="constant_access_non_initialized" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="constant_array" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="constant_bytes_ref" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="constant_computation" time="0.001665">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="constant_ref" time="0.001697">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="const_forward_reference" time="0.001716">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="const_from_non_const" time="0.000347">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="const_from_this" time="0.000311">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="create2_as_variable_post_istanbul" time="0.002292">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="create2_as_variable_pre_istanbul" time="0.000118">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="evm_byzantium" time="0.006249">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="evm_byzantium_on_homestead" time="0.000153">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="evm_constantinople" time="0.010618">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="evm_constantinople_on_byzantium" time="0.000196">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="evm_istanbul" time="0.008703">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="evm_istanbul_on_petersburg" time="0.000204">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="extcodehash_as_variable_post_constantinople" time="0.002453">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="extcodehash_as_variable_pre_constantinople" time="0.000187">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="external_identifier_access_shadowing" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="function_call_invalid_argument_count" time="0.000367">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="function_call_not_found" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="function_call_to_variable" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="function_definition" time="0.002352">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="function_definition_whitespace" time="0.000293">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="function_without_call" time="0.000175">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="hex_assignment" time="0.002426">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="hex_expression" time="0.002136">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="hex_switch_case" time="0.002354">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="immutables" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="assignment_to_function" time="0.000329">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="assign_to_instruction" time="0.000222">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="bare_instructions_disallowed" time="0.000207">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="calldata_array" time="0.000416">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="calldata_array_offset" time="0.015565">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="calldata_slot" time="0.000561">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="calldata_variables" time="0.000368">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="constant_access" time="0.001907">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="constant_assignment" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="constant_variable_via_offset" time="0.000356">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="const_forward_reference" time="0.000383">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="dot_in_fundecl" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="dot_in_fun_param" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="dot_in_multi_vardecl" time="0.000262">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="dot_in_vardecl" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="dup_disallowed" time="0.000484">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="empty_function_name" time="0.000247">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="empty_fun_arg_beginning" time="0.000203">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="empty_fun_arg_end" time="0.000167">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="empty_fun_arg_middle" time="0.000187">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="identifier_starting_with_dot" time="0.000164">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="illegal_names" time="0.000443">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="invalid_number" time="0.000196">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="jumpdest_disallowed" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="jumpi_disallowed" time="0.000293">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="jump_disallowed" time="0.000277">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="label_disallowed" time="0.000203">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="leave_items_on_tack" time="0.000281">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="literals_on_stack_disallowed" time="0.000218">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="local_variable_access_out_of_functions" time="0.000312">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="local_variable_access_out_of_functions_storage_ptr" time="0.000332">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="missing_variable" time="0.000292">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="missing_variable_in_assign" time="0.000208">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="multiple_assign_to_instruction" time="0.000186">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="nested_function_local_access" time="0.000281">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="pc_disallowed" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="push_disallowed" time="0.000555">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="storage_assignment" time="0.000337">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="storage_assignment_in_modifier" time="0.000371">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="storage_nonslot" time="0.000415">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="storage_variable_access_out_of_functions" time="0.002158">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="swap_disallowed" time="0.000466">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="unbalanced_negative_stack" time="0.000221">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="unbalanced_positive_stack" time="0.000164">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="unbalanced_two_stack_load" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="variable_declaration_suffix_offset" time="0.000315">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="whitespace_in_assignment" time="0.0002">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.invalid" name="whitespace_in_multiple_assignment" time="0.000187">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="in_modifier" time="0.001929">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="leave" time="0.002262">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="leave_invalid" time="0.000196">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="linkersymbol_builtin" time="0.000307">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="linkersymbol_function" time="0.000322">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="no_unused_variable_warning" time="0.001855">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="overloaded_reference" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="period_in_identifer" time="0.002046">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="reserved_identifiers" time="0.000369">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="reserved_identifiers_byzantium" time="0.000123">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="reserved_identifiers_constantinople" time="0.000229">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="returndatasize_as_variable_call_post_byzantium.sol" time="0.002389">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="returndatasize_as_variable_post_byzantium" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="returndatasize_as_variable_pre_byzantium" time="0.000101">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="returndatasize_as_variable_read_post_byzantium.sol" time="0.000185">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="argument" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="constant" time="0.000274">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="contract" time="0.000264">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="function" time="0.000236">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="global_function_by_opcode" time="0.00219">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="local_function_by_opcode" time="0.01963">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="local_variable" time="0.000465">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="name_clash_in_import" time="0.0004">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="no_name_clash_in_import" time="0.003008">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="qualified_names" time="0.000413">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="state_variable_by_opcode" time="0.002099">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly.shadowing" name="variable_by_opcode" time="0.002454">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="solidity_keywords" time="0.005177">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference" time="0.000456">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_assignment" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_assignment_statevar" time="0.000317">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_empty_offset" time="0.000216">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_empty_slot" time="0.000169">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_fine" time="0.001369">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_old" time="0.000341">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_old_shadow" time="0.003421">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_on_function" time="0.000377">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_reference_on_memory" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="storage_slot_assign" time="0.000322">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="string_literal_switch_case" time="0.00237">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="two_stack_slots" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="two_stack_slot_access" time="0.000297">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="use_msize_without_optimizer" time="0.000841">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="use_msize_with_optimizer" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.inlineAssembly" name="verbatim_disallowed" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="dynamic_inline_array" time="0.006402">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_declaration_and_passing_implicit_conversion" time="0.008441">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_declaration_and_passing_implicit_conversion_strings" time="0.024731">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_declaration_const_int_conversion" time="0.008794">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_declaration_const_string_conversion" time="0.02524">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_declaration_no_type" time="0.008236">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_declaration_no_type_strings" time="0.02665">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_fixed_types" time="0.0013">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_of_mapping_type" time="0.000438">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="inline_array_rationals" time="0.001017">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="invalid_types_in_inline_array" time="0.000379">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="lvalues_as_inline_array" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="unnamed_types_in_inline_array_1" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.inline_arrays" name="unnamed_types_in_inline_array_2" time="0.000278">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="large_storage_arrays_combined" time="0.001128">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="large_storage_arrays_struct" time="0.001161">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="large_storage_array_fine" time="0.001047">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="large_storage_array_mapping" time="0.001044">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="large_storage_array_simple" time="0.001043">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="large_storage_structs" time="0.002162">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="oversized_array" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="oversized_contract" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="oversized_contract_inheritance" time="0.000354">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="oversized_struct" time="0.000389">
</testcase>
<testcase assertions="1" classname="syntaxTests.largeTypes" name="storage_parameter" time="0.00116">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_bidi_marks" time="0.000992">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_bottom" time="0.000957">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_crlf_endings" time="0.000957">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_cr_endings" time="0.000979">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_double" time="0.000152">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_hidden_unicode" time="0.000935">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_in_contract" time="0.000954">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_in_import" time="0.000155">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_in_string" time="0.009561">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_missing" time="0.001238">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_missing_colon" time="0.001071">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_multiline" time="0.001024">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_natspec" time="0.001021">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_natspec_multiline" time="0.001008">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_nonempty_line" time="0.000998">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_no_whitespace" time="0.001009">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_no_whitespace_multiline" time="0.001012">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_unicode" time="0.001001">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_whitespace_after_colon" time="0.000987">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_whitespace_before_spdx" time="0.00098">
</testcase>
<testcase assertions="1" classname="syntaxTests.license" name="license_whitespace_trailing" time="0.00099">
</testcase>
<testcase assertions="1" classname="syntaxTests.literalOperations" name="division_by_zero" time="0.000316">
</testcase>
<testcase assertions="1" classname="syntaxTests.literalOperations" name="division_by_zero_complex" time="0.000281">
</testcase>
<testcase assertions="1" classname="syntaxTests.literalOperations" name="exponent" time="0.000682">
</testcase>
<testcase assertions="1" classname="syntaxTests.literalOperations" name="exponent_fine" time="0.035993">
</testcase>
<testcase assertions="1" classname="syntaxTests.literalOperations" name="mod_zero" time="0.000456">
</testcase>
<testcase assertions="1" classname="syntaxTests.literalOperations" name="mod_zero_complex" time="0.000304">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="hex_string_duplicate_underscore" time="0.000212">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="hex_string_duplicate_underscore_yul" time="0.000181">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="hex_string_invalid_characters_yul" time="0.000171">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="hex_string_leading_underscore" time="0.00015">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="hex_string_misaligned_underscore" time="0.00014">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="hex_string_trailing_underscore" time="0.000145">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="hex_string_underscores_valid" time="0.001114">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="unicode_string_direction_override_1" time="0.000226">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="unicode_string_direction_override_2" time="0.000178">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="unicode_string_direction_override_3" time="0.000173">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="unicode_string_direction_override_4" time="0.000147">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="unicode_string_direction_override_5" time="0.00289">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="unicode_string_direction_override_6" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.literals" name="unicode_string_direction_override_7" time="0.002969">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="literal_comparisons" time="0.008857">
</testcase>
<testcase assertions="1" classname="syntaxTests.lvalues" name="calldata_index_access" time="0.000489">
</testcase>
<testcase assertions="1" classname="syntaxTests.lvalues" name="calldata_member_access" time="0.000397">
</testcase>
<testcase assertions="1" classname="syntaxTests.lvalues" name="external_reference_argument" time="0.018372">
</testcase>
<testcase assertions="1" classname="syntaxTests.lvalues" name="functions" time="0.000581">
</testcase>
<testcase assertions="1" classname="syntaxTests.lvalues" name="library_mapping" time="0.000386">
</testcase>
<testcase assertions="1" classname="syntaxTests.lvalues" name="lvalue_not_set" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.lvalues" name="valid_lvalues" time="0.038436">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="constructor_as_potential_library_member" time="0.000602">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="contract_not_payable_send" time="0.000438">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="contract_not_payable_transfer" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="failed_function_lookup" time="0.000455">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="failed_function_lookup_in_library" time="0.000491">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="internal_function_type" time="0.005911">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="member_not_unique" time="0.000702">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="member_value_not_unique" time="0.000554">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="memory_structs_with_mappings" time="0.000449">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="memory_structs_with_mapping_array_struct_array" time="0.000505">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="msg_sender_non_payable_send" time="0.000377">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="msg_sender_non_payable_transfer" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="msg_value_modifier_payable" time="0.001906">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="msg_value_modifier_pure" time="0.000492">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="msg_value_modifier_view" time="0.000461">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="push_on_memory_types" time="0.000391">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="tx_origin_non_payable_send" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="tx_origin_non_payable_transfer" time="0.000357">
</testcase>
<testcase assertions="1" classname="syntaxTests.memberLookup" name="unused_module_member_reference" time="0.002719">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccess" time="0.031076">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccessAbstractCreation" time="0.000637">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccessAbstractRuntime" time="0.000427">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccessBase" time="0.000777">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccessCyclic" time="0.000388">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccessIsConstant" time="0.002339">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccessLibrary" time="0.029522">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeAccess_super" time="0.000717">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="codeIsNoLValue" time="0.000409">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="contract_min" time="0.000332">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="integer" time="0.002004">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="integer_err" time="0.000471">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="integer_pure" time="0.002379">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="interfaceid_super" time="0.000688">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="int_name" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="name" time="0.019709">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="name_constant" time="0.018271">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="name_other_contract" time="0.022091">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="noArgForType" time="0.000545">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="runtimeCodeWarningAssembly" time="0.016106">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="super_name" time="0.001285">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="tooManyArgsForType" time="0.000433">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="typeNotRegularIdentifierContractName" time="0.000163">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="typeNotRegularIdentifierFunction" time="0.000131">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="typeNotRegularIdentifierParameter" time="0.000125">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="typeNotRegularIdentifierStateVariable" time="0.000123">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="typeNotRegularIdentifierVariable" time="0.000129">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="typeOfContract" time="0.019703">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="typeRecursive" time="0.000532">
</testcase>
<testcase assertions="1" classname="syntaxTests.metaTypes" name="unsupportedArgForType" time="0.000382">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="missing_functions_duplicate_bug" time="0.025825">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="missing_state_variable" time="0.000579">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="access_in_library" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="base_constructor_double_invocation" time="0.000379">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="constructor_as_modifier" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="constructor_call_invalid_arg_count" time="0.000299">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="cross_contract_access" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="cross_contract_base" time="0.002326">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="cross_contract_super" time="0.000358">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="cross_contract_unrelated" time="0.000407">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="empty_modifier_body" time="0.002406">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="empty_modifier_err" time="0.000417">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="function_modifier_double_invocation" time="0.00805">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="function_modifier_invocation" time="0.002321">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="function_modifier_invocation_local_variables" time="0.000364">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="function_modifier_invocation_parameters" time="0.012982">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="function_overrides_modifier" time="0.00059">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="illegal_modifier_override" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="illegal_name" time="0.000322">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="invalid_function_modifier_type" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="legal_modifier_override" time="0.001639">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="library_via_using" time="0.000356">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="modifiers_on_abstract_functions_no_parser_error" time="0.000359">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="modifier_abstract_override" time="0.000386">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="modifier_overrides_function" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="modifier_overrides_variable" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="modifier_returns_value" time="0.000355">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="modifier_without_underscore" time="0.000238">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="multiple_inheritance_unimplemented_override" time="0.002353">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="non-virtual_modifier_override" time="0.000389">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="unimplemented_function_and_modifier" time="0.000979">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="unimplemented_override_unimplemented" time="0.000518">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="use_in_invalid_context" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="use_unimplemented_from_base" time="0.001844">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="use_unimplemented_on_overridden_func" time="0.000527">
</testcase>
<testcase assertions="1" classname="syntaxTests.modifiers" name="use_unimplemented_static" time="0.000461">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="more_than_256_declarationerrors" time="0.003769">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="more_than_256_importerrors" time="0.002149">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="more_than_256_syntaxerrors" time="0.001346">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="multiline_comments" time="0.001174">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="alias_shadows_another_alias" time="0.000521">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="alias_shadows_function" time="0.000491">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="circular_import" time="0.000402">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="circular_import_2" time="0.000523">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="circular_import_3" time="0.000429">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="circular_import_4" time="0.00051">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="circular_import_5" time="0.000499">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="duplicate_import_statement" time="0.005696">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="error_in_first" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="free_different_interger_types" time="0.008309">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="free_function_alias_different_parameter_types" time="0.000629">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="free_function_control_flow_analysis" time="0.006548">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="free_function_redefinition_base_derived" time="0.000541">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="free_function_redefinition_transitive" time="0.000459">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="free_function_resolution_override_virtual" time="0.000527">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="import" time="0.019598">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="imported_free_function" time="0.006031">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="import_alias" time="0.005219">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="import_alias_mismatch" time="0.000581">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="import_contract_function_error" time="0.00021">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="import_not_found" time="0.000133">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="libraries_control_flow_analysis" time="0.018802">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="multiple_imports_same_function" time="0.005973">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="no_import" time="0.000513">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="one_source" time="0.000407">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="reimport_imported_function" time="0.005856">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="split_contract_hierarchy_control_flow_analysis" time="0.01197">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="split_contract_hierarchy_control_flow_analysis_complex" time="0.027247">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="two_imports_same_function" time="0.005979">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiSource" name="warning_in_both" time="0.019385">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="differentNumberOfComponents" time="0.000845">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="differentNumberOfComponentsFromReturn" time="0.000883">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="disallowWildcards" time="0.000644">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="disallowWildcardsFromReturn" time="0.000905">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiSingleVariableDeclaration" time="0.001217">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiVariableDeclarationComplex" time="0.001983">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiVariableDeclarationEmpty" time="0.000411">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiVariableDeclarationInvalidType" time="0.000391">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiVariableDeclarationScoping" time="0.000286">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiVariableDeclarationScoping2" time="0.000384">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiVariableDeclarationSimple" time="0.001374">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="multiVariableDeclarationThatIsExpression" time="0.000499">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="oneElementTuple" time="0.000354">
</testcase>
<testcase assertions="1" classname="syntaxTests.multiVariableDeclaration" name="sameNumberOfComponents" time="0.001974">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="001_name_references" time="0.00993">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="002_undeclared_name" time="0.000452">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="003_undeclared_name_is_not_fatal" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="004_reference_to_later_declaration" time="0.002567">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="010_type_conversion_for_comparison" time="0.001887">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="011_type_conversion_for_comparison_invalid" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="013_large_string_literal" time="0.00162">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="014_balance" time="0.001716">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="015_balance_invalid" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="017_assignment_to_struct" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="018_forward_function_reference" time="0.044106">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="019_comparison_bitop_precedence" time="0.005815">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="025_comparison_of_mapping_types" time="0.00051">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="029_create_abstract_contract" time="0.000369">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="030_redeclare_implemented_abstract_function_as_abstract" time="0.000454">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="044_returning_multi_dimensional_arrays_new_abi" time="0.1241">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="045_returning_multi_dimensional_arrays" time="0.000507">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="046_returning_multi_dimensional_static_arrays" time="0.000351">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="047_returning_arrays_in_structs_new_abi" time="0.075068">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="048_returning_arrays_in_structs_arrays" time="0.000556">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="049_function_external_call_allowed_conversion" time="0.01743">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="050_function_external_call_not_allowed_conversion" time="0.000593">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="051_function_internal_allowed_conversion" time="0.011074">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="052_function_internal_not_allowed_conversion" time="0.000599">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="053_hash_collision_in_interface" time="0.000365">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="054_inheritance_basic" time="0.002346">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="055_inheritance_diamond_basic" time="0.006669">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="056_cyclic_inheritance" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="057_legal_override_direct" time="0.008757">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="058_legal_override_indirect" time="0.015283">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="059_illegal_override_visibility" time="0.000518">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="060_complex_inheritance" time="0.028502">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="061_missing_base_constructor_arguments" time="0.000508">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="062_base_constructor_arguments_override" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="063_implicit_derived_to_base_conversion" time="0.002336">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="064_implicit_base_to_derived_conversion" time="0.000418">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="065_super_excludes_current_contract" time="0.000409">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="067_function_clash_with_state_variable_accessor" time="0.000336">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="069_base_class_state_variable_accessor" time="0.009735">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="070_struct_accessor_one_array_only" time="0.000492">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="071_base_class_state_variable_internal_member" time="0.005547">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="072_state_variable_member_of_wrong_class1" time="0.000597">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="073_state_variable_member_of_wrong_class2" time="0.000475">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="074_fallback_function" time="0.001294">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="075_fallback_function_with_arguments" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="076_fallback_function_in_library" time="0.000246">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="076_receive_function_in_library" time="0.000232">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="077_fallback_function_with_return_parameters" time="0.000251">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="079_fallback_function_inheritance" time="0.001982">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="096_access_to_default_function_visibility" time="0.003334">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="097_access_to_internal_function" time="0.00044">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="098_access_to_default_state_variable_visibility" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="099_access_to_internal_state_variable" time="0.01262">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="104_empty_name_input_parameter" time="0.007084">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="105_constant_input_parameter" time="0.000447">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="106_empty_name_return_parameter" time="0.005076">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="107_empty_name_input_parameter_with_named_one" time="0.012428">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="108_empty_name_return_parameter_with_named_one" time="0.000486">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="110_no_overflow_with_large_literal" time="0.001327">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="111_overflow_caused_by_ether_units" time="0.000372">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="112_exp_operator_exponent_too_big" time="0.000304">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="113_exp_warn_literal_base_1" time="0.040042">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="114_exp_warn_literal_base_2" time="0.041918">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="115_exp_warn_literal_base_3" time="0.005087">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="116_shift_warn_literal_base_1" time="0.005023">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="117_shift_warn_literal_base_2" time="0.004905">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="118_shift_warn_literal_base_3" time="0.004863">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="119_shift_warn_literal_base_4" time="0.007608">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="124_enum_member_access" time="0.003317">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="125_enum_member_access_accross_contracts" time="0.010068">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="126_enum_invalid_member_access" time="0.000548">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="127_enum_invalid_direct_member_access" time="0.000363">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="128_enum_explicit_conversion_is_okay" time="0.003477">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="129_int_to_enum_explicit_conversion_is_okay" time="0.004026">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="130_enum_implicit_conversion_is_not_okay_256" time="0.000426">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="131_enum_implicit_conversion_is_not_okay_64" time="0.000384">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="132_enum_to_enum_conversion_is_not_okay" time="0.00034">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="133_enum_duplicate_values" time="0.000298">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="134_enum_name_resolution_under_current_contract_name" time="0.001776">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="135_private_visibility" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="136_private_visibility_via_explicit_base_access" time="0.000381">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="137_external_visibility" time="0.000276">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="138_similar_name_suggestions_expected" time="0.000267">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="139_no_name_suggestion" time="0.000228">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="140_multiple_similar_suggestions" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="141_multiple_scopes_suggestions" time="0.00028">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="142_inheritence_suggestions" time="0.000284">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="143_no_spurious_identifier_suggestions_with_submatch" time="0.000256">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="144_no_spurious_identifier_suggestions" time="0.000249">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="145_external_base_visibility" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="146_external_argument_assign" time="0.006957">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="147_external_argument_increment" time="0.010316">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="148_external_argument_delete" time="0.00705">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="149_test_for_bug_override_function_with_bytearray_type" time="0.033731">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="150_array_with_nonconstant_length" time="0.000455">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="151_array_with_negative_length" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="152_array_copy_with_different_types1" time="0.000348">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="153_array_copy_with_different_types2" time="0.000316">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="154_array_copy_with_different_types_conversion_possible" time="0.005479">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="155_array_copy_with_different_types_static_dynamic" time="0.005905">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="156_array_copy_with_different_types_dynamic_static" time="0.000592">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="157_array_of_undeclared_type" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="158_storage_variable_initialization_with_incorrect_type_int" time="0.000337">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="159_storage_variable_initialization_with_incorrect_type_string" time="0.00025">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="160_test_byte_is_alias_of_byte1" time="0.00959">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="164_assigning_value_to_const_variable" time="0.000511">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="165_assigning_state_to_const_variable" time="0.000317">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="167_constant_string_literal_disallows_assignment" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="168_assignment_to_const_var_involving_conversion" time="0.001157">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="169_assignment_to_const_var_involving_expression" time="0.0011">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="170_assignment_to_const_var_involving_keccak" time="0.001071">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="171_assignment_to_const_array_vars" time="0.000355">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="172_assignment_to_const_string_bytes" time="0.001079">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="173_constant_struct" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="174_address_is_constant" time="0.001013">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="175_uninitialized_const_variable" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="176_overloaded_function_cannot_resolve" time="0.00047">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="177_ambiguous_overloaded_function" time="0.000472">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="178_assignment_of_nonoverloaded_function" time="0.018802">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="179_assignment_of_overloaded_function" time="0.00078">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="180_external_types_clash" time="0.000501">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="181_override_changes_return_types" time="0.000464">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="182_equal_overload" time="0.00041">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="188_string_index" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="189_string_length" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="190_negative_integers_to_signed_out_of_bound" time="0.000319">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="191_negative_integers_to_signed_min" time="0.005891">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="192_positive_integers_to_signed_out_of_bound" time="0.000424">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="193_positive_integers_to_signed_out_of_bound_max" time="0.005885">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="194_negative_integers_to_unsigned" time="0.000457">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="195_positive_integers_to_unsigned_out_of_bound" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="196_integer_boolean_or" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="197_integer_boolean_and" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="198_integer_boolean_not" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="199_integer_unsigned_exp_signed" time="0.000307">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="200_integer_signed_exp_unsigned" time="0.0744">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="201_integer_signed_exp_signed" time="0.000737">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="202_bytes_reference_compare_operators" time="0.00039">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="203_struct_reference_compare_operators" time="0.0004">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="204_overwrite_memory_location_external" time="0.054175">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="205_overwrite_storage_location_external" time="0.000479">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="206_storage_location_local_variables" time="0.002134">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="207_no_mappings_in_memory_array" time="0.000454">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="208_assignment_mem_to_local_storage_variable" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="209_storage_assign_to_different_local_variable" time="0.000434">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="210_uninitialized_mapping_variable" time="0.000336">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="211_uninitialized_mapping_array_variable" time="0.000364">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="213_no_delete_on_storage_pointers" time="0.000382">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="214_assignment_mem_storage_variable_directly" time="0.055994">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="215_function_argument_mem_to_storage" time="0.00062">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="216_function_argument_storage_to_mem" time="0.054115">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="217_mem_array_assignment_changes_base_type" time="0.000548">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="219_memory_arrays_not_resizeable" time="0.000406">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="220_struct_constructor" time="0.002219">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="221_struct_constructor_nested" time="0.002929">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="222_struct_named_constructor" time="0.002229">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="223_literal_strings" time="0.002187">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="224_string_bytes_conversion" time="0.020552">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="225_inheriting_from_library" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="226_inheriting_library" time="0.000302">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="227_library_having_variables" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="228_valid_library" time="0.001527">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="229_call_to_library_function" time="0.000499">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="230_creating_contract_within_the_contract" time="0.000386">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="231_array_out_of_bound_access" time="0.000389">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="232_literal_string_to_storage_pointer" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="233_non_initialized_references" time="0.000414">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="235_abi_encode_with_large_integer_constant" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="236_cyclic_binary_dependency" time="0.000452">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="237_cyclic_binary_dependency_via_inheritance" time="0.000371">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="244_tuples" time="0.007087">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="245_tuples_empty_components" time="0.000493">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="250_member_access_parser_ambiguity" time="0.010635">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="251_using_for_library" time="0.002097">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="252_using_for_not_library" time="0.0004">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="253_using_for_function_exists" time="0.023559">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="254_using_for_function_on_int" time="0.034153">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="255_using_for_function_on_struct" time="0.039316">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="256_using_for_overload" time="0.05257">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="257_using_for_by_name" time="0.038836">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="258_using_for_mismatch" time="0.000707">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="259_using_for_not_used" time="0.000512">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="260_library_memory_struct" time="0.007229">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="261_using_for_arbitrary_mismatch" time="0.000633">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="262_bound_function_in_var" time="0.000627">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="263_create_memory_arrays" time="0.014272">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="264_mapping_in_memory_array" time="0.000572">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="265_new_for_non_array" time="0.000357">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="268_function_overload_array_type" time="0.000439">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="275_inline_struct_declaration_arrays" time="0.00381">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="279_break_not_in_loop" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="280_continue_not_in_loop" time="0.000262">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="281_continue_not_in_loop_2" time="0.000267">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="282_invalid_different_types_for_conditional_expression" time="0.000276">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="283_left_value_in_conditional_expression_not_supported_yet" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="284_conditional_expression_with_different_struct" time="0.000385">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="285_conditional_expression_with_different_function_type" time="0.000372">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="286_conditional_expression_with_different_enum" time="0.000405">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="287_conditional_expression_with_different_mapping" time="0.00037">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="288_conditional_with_all_types" time="0.026691">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="289_uint7_and_uintM_as_identifier" time="0.010813">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="290_varM_disqualified_as_keyword_1" time="0.000497">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="290_varM_disqualified_as_keyword_2" time="0.000305">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="290_varM_disqualified_as_keyword_3" time="0.00027">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="291_modifier_is_not_a_valid_typename" time="0.000308">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="292_modifier_is_not_a_valid_typename_is_not_fatal" time="0.000312">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="293_function_is_not_a_valid_typename" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="294_long_uint_variable_fails" time="0.000267">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="295_bytes10abc_is_identifier" time="0.001813">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="296_int10abc_is_identifier" time="0.001797">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="297_library_functions_do_not_have_value" time="0.000428">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="298_invalid_fixed_types_0x7_mxn" time="0.000263">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="299_invalid_fixed_types_long_invalid_identifier" time="0.000244">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="300_invalid_fixed_types_7x8_mxn" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="301_library_instances_cannot_be_used" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="302_invalid_fixed_type_long" time="0.000262">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="303_fixed_type_int_conversion" time="0.000924">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="304_fixed_type_rational_int_conversion" time="0.00088">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="305_fixed_type_rational_fraction_conversion" time="0.000869">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="306_invalid_int_implicit_conversion_from_fixed" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="307_rational_unary_minus_operation" time="0.000854">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="308_rational_unary_plus_operation" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="312_leading_zero_rationals_convert" time="0.000937">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="313_fixed_type_size_capabilities" time="0.001938">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="314_fixed_type_zero_handling" time="0.000854">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="315_fixed_type_invalid_implicit_conversion_size" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="316_fixed_type_invalid_implicit_conversion_lost_data" time="0.000665">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="317_fixed_type_valid_explicit_conversions" time="0.00139">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="318_invalid_array_declaration_with_rational" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="319_invalid_array_declaration_with_signed_fixed_type" time="0.000281">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="320_invalid_array_declaration_with_unsigned_fixed_type" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="321_rational_to_bytes_implicit_conversion" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="322_fixed_to_bytes_implicit_conversion" time="0.000322">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="323_mapping_with_fixed_literal" time="0.00087">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="324_fixed_points_inside_structs" time="0.000797">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="327_rational_index_access" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="328_rational_to_fixed_literal_expression" time="0.001249">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="329_rational_as_exponent_value_signed" time="0.000485">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="330_rational_as_exponent_value_unsigned" time="0.000419">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="331_rational_as_exponent_half" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="332_rational_as_exponent_value_neg_quarter" time="0.000309">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="333_fixed_point_casting_exponents_15" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="334_fixed_point_casting_exponents_neg" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="338_rational_bitnot_unary_operation" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="339_rational_bitor_binary_operation" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="340_rational_bitxor_binary_operation" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="341_rational_bitand_binary_operation" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="342_missing_bool_conversion" time="0.007577">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="343_integer_and_fixed_interaction" time="0.001074">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="344_one_divided_by_three_integer_conversion" time="0.000755">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="345_unused_return_value" time="0.005768">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="346_unused_return_value_send" time="0.001905">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="347_unused_return_value_call" time="0.007651">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="348_unused_return_value_call_value" time="0.007913">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="350_unused_return_value_delegatecall" time="0.00779">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="351_callcode_deprecated" time="0.000557">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="353_callcode_not_deprecated_as_function" time="0.001629">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="354_payable_in_library" time="0.000374">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="355_payable_external" time="0.001754">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="356_payable_internal" time="0.000323">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="357_payable_private" time="0.000289">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="358_illegal_override_payable" time="0.00037">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="359_illegal_override_payable_nonpayable" time="0.000375">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="360_function_variable_mixin" time="0.000471">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="361_calling_payable" time="0.007535">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="362_calling_nonpayable" time="0.000617">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="363_non_payable_constructor" time="0.000431">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="366_invalid_array_as_statement" time="0.00037">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="367_using_directive_for_missing_selftype" time="0.000477">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="368_shift_constant_left_negative_rvalue" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="369_shift_constant_right_negative_rvalue" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="370_shift_constant_left_excessive_rvalue" time="0.000281">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="371_shift_constant_right_excessive_rvalue" time="0.000294">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="372_shift_constant_right_fractional" time="0.000304">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="396_invalid_mobile_type" time="0.000373">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="397_warns_msg_value_in_non_payable_public_function" time="0.000394">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="398_does_not_warn_msg_value_in_payable_function" time="0.001731">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="399_does_not_warn_msg_value_in_internal_function" time="0.001132">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="400_does_not_warn_msg_value_in_library" time="0.001915">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="401_does_not_warn_msg_value_in_modifier_following_non_payable_public_function" time="0.001806">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="402_assignment_to_constant" time="0.000373">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="403_return_structs" time="0.090827">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="404_read_returned_struct" time="0.033521">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="405_address_checksum_type_deduction" time="0.002356">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="406_invalid_address_checksum" time="0.000485">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="407_invalid_address_no_checksum" time="0.000356">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="408_invalid_address_length_short" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="409_invalid_address_length_long" time="0.000294">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="410_string_literal_not_convertible_to_address_as_assignment" time="0.00029">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="411_string_literal_not_convertible_to_address_as_return_value" time="0.000322">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="412_early_exit_on_fatal_errors" time="0.000316">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="413_address_methods" time="0.00958">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="414_interface" time="0.000503">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="415_interface_functions" time="0.000417">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="416_interface_function_bodies" time="0.000311">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="417_interface_events" time="0.000318">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="418_interface_inheritance" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="419_interface_structs" time="0.000334">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="420_interface_variables" time="0.00025">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="421_interface_function_parameters" time="0.000367">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="422_interface_enums" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="423_using_interface" time="0.001864">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="424_using_interface_complex" time="0.000579">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="425_interface_implement_public_contract" time="0.001843">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="426_throw_is_deprecated" time="0.000326">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="428_bare_revert" time="0.000411">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="429_revert_with_reason" time="0.014486">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="430_bare_selfdestruct" time="0.001957">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="431_bare_assert" time="0.001801">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="432_bare_require" time="0.000386">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="433_pure_statement_in_for_loop" time="0.006539">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="434_pure_statement_check_for_regular_for_loop" time="0.006325">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="438_unused_unnamed_function_parameter" time="0.007567">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="441_unused_unnamed_return_parameter" time="0.005156">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="442_named_return_parameter" time="0.00513">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="443_named_return_parameter_with_explicit_return" time="0.00511">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="444_unnamed_return_parameter_with_explicit_return" time="0.00506">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="445_no_unused_warning_interface_arguments" time="0.000551">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="446_no_unused_warning_abstract_arguments" time="0.000418">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="447_no_unused_warnings" time="0.014394">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="459_function_overload_is_not_shadowing" time="0.008031">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="460_function_override_is_not_shadowing" time="0.009233">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="461_event_parameter_cannot_shadow_state_variable" time="0.001278">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="462_callable_crash" time="0.000514">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="466_does_not_error_transfer_payable_fallback" time="0.002758">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="467_does_not_error_transfer_regular_function" time="0.003953">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="470_specified_storage_no_warn" time="0.002045">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="471_unspecified_storage_fail" time="0.000429">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="473_storage_location_non_array_or_struct_disallowed" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="474_storage_location_non_array_or_struct_disallowed_is_not_fatal" time="0.000257">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="475_implicit_conversion_disallowed" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="476_too_large_arrays_for_calldata_external" time="0.000504">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="477_too_large_arrays_for_calldata_internal" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="478_too_large_arrays_for_calldata_public" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="479_explicit_literal_to_memory_string_assignment" time="0.002055">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="480_explicit_literal_to_storage_string_assignment" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="481_explicit_literal_to_unspecified_string_assignment" time="0.000289">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="482_explicit_literal_to_unspecified_string" time="0.001878">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="483_modifiers_access_storage_pointer" time="0.001126">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="484_function_types_selector_1" time="0.000362">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="485_function_types_selector_2" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="486_function_types_selector_3" time="0.000319">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="487_function_types_selector_4" time="0.005338">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="488_function_types_selector_5" time="0.005808">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="489_function_types_selector_6" time="0.005819">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="490_function_types_selector_7" time="0.005841">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="491_using_this_in_constructor" time="0.002926">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="492_do_not_crash_on_not_lvalue" time="0.000503">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="493_builtin_keccak256_reject_gas" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="494_builtin_sha256_reject_gas" time="0.000298">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="495_builtin_ripemd160_reject_gas" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="496_builtin_ecrecover_reject_gas" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="497_gasleft" time="0.005155">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="498_msg_gas_deprecated" time="0.000469">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="500_gasleft_shadowing_1" time="0.005803">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="501_gasleft_shadowing_2" time="0.001808">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="502_builtin_keccak256_reject_value" time="0.000441">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="503_builtin_sha256_reject_value" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="504_builtin_ripemd160_reject_value" time="0.000325">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="505_builtin_ecrecover_reject_value" time="0.000302">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="511_library_function_without_implementation_public" time="0.000268">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="512_library_function_without_implementation_internal" time="0.000244">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="513_library_function_without_implementation_private" time="0.000224">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="514_using_for_with_non_library" time="0.000307">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="523_reject_interface_creation" time="0.000318">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="525_reject_interface_constructors" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="526_fallback_marked_external" time="0.001223">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="527_fallback_marked_internal" time="0.000279">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="528_fallback_marked_private" time="0.000246">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="529_fallback_marked_public" time="0.000223">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="530_tuple_invalid_literal_too_large_for_uint" time="0.000317">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="531_tuple_invalid_literal_too_large_unassigned" time="0.000348">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="532_tuple_invalid_literal_too_large_for_uint_multi" time="0.000336">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="533_tuple_invalid_literal_too_large_exp" time="0.000315">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="534_tuple_invalid_literal_too_large_expression" time="0.001794">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="535_address_overload_resolution" time="0.028717">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="536_array_length_invalid_expression_negative_bool" time="0.000411">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="537_array_length_invalid_expression_int_divides_bool" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="538_array_length_invalid_expression_bool_divides_int" time="0.000283">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="539_array_length_invalid_expression_scientific_literal" time="0.000281">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="540_array_length_invalid_expression_division_by_zero" time="0.000271">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="541_warn_about_address_members_on_contract_balance" time="0.000357">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="542_warn_about_address_members_on_contract_transfer" time="0.000312">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="543_warn_about_address_members_on_contract_send" time="0.000316">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="544_warn_about_address_members_on_contract_call" time="0.000311">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="545_warn_about_address_members_on_contract_callcode" time="0.000301">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="546_warn_about_address_members_on_contract_delegatecall" time="0.000291">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="547_warn_about_address_members_on_non_this_contract_balance" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="548_warn_about_address_members_on_non_this_contract_transfer" time="0.000331">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="549_warn_about_address_members_on_non_this_contract_send" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="550_warn_about_address_members_on_non_this_contract_call" time="0.000326">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="551_warn_about_address_members_on_non_this_contract_callcode" time="0.000379">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="552_warn_about_address_members_on_non_this_contract_delegatecall" time="0.000319">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="559_no_warning_for_using_members_that_look_like_address_members" time="0.000468">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="568_blockhash" time="0.00501">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="569_block_blockhash_deprecated" time="0.00048">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="570_function_type_undeclared_type" time="0.000309">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="571_function_type_undeclared_type_external" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="572_function_type_undeclared_type_multi_nested" time="0.000331">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="573_similar_name_longer_than_80_not_suggested" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="574_similar_name_shorter_than_80_suggested" time="0.00039">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="575_member_member_getter_call_without_parentheses" time="0.00052">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="576_member_getter_call_without_parentheses" time="0.00045">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="577_member_getter_call_without_parentheses_missing_function" time="0.00041">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="578_private_member_getter_call_without_parentheses" time="0.000478">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="579_member_getter_call_without_parentheses_private_function" time="0.000421">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="580_improve_name_suggestion_one_and_two_letters" time="0.000319">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="581_improve_name_suggestion_three_letters" time="0.000302">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="582_improve_name_suggestion_four_letters" time="0.000324">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="583_abi_encode_packed_with_rational_number_constant" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="584_abi_decode_with_tuple_of_other_than_types" time="0.000286">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="585_abi_decode_with_unsupported_types" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="588_interface_function_modifier" time="0.000298">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="array_length_fractional_computed" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="call_option_value_on_library_function" time="0.000365">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.compoundAssignment" name="incomp_types" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.compoundAssignment" name="tuple" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.compoundAssignment" name="tuple_invalid_inline_array_type" time="0.000331">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="constant_mapping" time="0.000249">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="constant_nested_mapping" time="0.000279">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="free_and_constant" time="0.000239">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="hash_collision_in_abstract_contract" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.invalidArgs" name="creating_memory_array" time="0.000334">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.invalidArgs" name="creating_struct" time="0.000338">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.invalidArgs" name="creating_struct_members_skipped" time="0.000332">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.invalidArgs" name="explicit_conversions" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.invalidTypes" name="conditional_expression" time="0.000511">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.invalidTypes" name="constructor_call" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="no_effect_statements" time="0.006053">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="events" time="0.001131">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="functions" time="0.001646">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="global_scope" time="0.000995">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="ignores_constructor" time="0.001086">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="ignores_struct" time="0.000991">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="illegal_names_assembly_functions" time="0.000305">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="illegal_names_assembly_identifier" time="0.000273">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="illegal_names_function_parameters" time="0.000578">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="illegal_names_library_using_for" time="0.000412">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="illegal_names_using_for" time="0.000404">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="parameters" time="0.007027">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="return_parameters" time="0.004811">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="storage_variables" time="0.001095">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="this_super" time="0.00038">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.shadowsBuiltin" name="variables" time="0.001688">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution" name="shift_warn_literal_large_shift_amount" time="0.00481">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.typeChecking" name="function_call" time="0.018357">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.typeChecking" name="library_instances" time="0.000517">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.typeChecking" name="return" time="0.005549">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.typeChecking" name="return_tuple_not_convertible" time="0.000526">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.typeChecking" name="return_wrong_number" time="0.000354">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.typeChecking" name="return_wrong_type" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.warnUnused" name="function_parameter" time="0.007166">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.warnUnused" name="local" time="0.001834">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.warnUnused" name="local_assignment" time="0.001757">
</testcase>
<testcase assertions="1" classname="syntaxTests.nameAndTypeResolution.warnUnused" name="return_parameter" time="0.004736">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_author_function" time="0.000344">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_author_title_state_variable" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_double_empty" time="0.006862">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_empty_description" time="0.000385">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_empty_tag" time="0.000278">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_named_return_parameter" time="0.000334">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_non_public_state_variable_with_return" time="0.00026">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_parameter" time="0.001106">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_private_state_variable" time="0.001022">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_state_variable" time="0.0047">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_state_variable_too_many_return_tags" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_too_many_return_tags" time="0.000298">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec" name="docstring_variable" time="0.004693">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inheritdoc" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inheritdoc2" time="0.000317">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inheritdoc3" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inheritdoc_emptys" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inheritdoc_twice" time="0.000229">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inheritdoc_wrong_type" time="0.000233">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inherit_modifier_no_return" time="0.000315">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_inherit_modifier_no_return2" time="0.000427">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_named_return_param_mismatch" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_parameter" time="0.000283">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="docstring_return_size_mismatch" time="0.000341">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="inherit_doc_events" time="0.000329">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="invalid_tag" time="0.000381">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="return_param_amount_differs" time="0.007115">
</testcase>
<testcase assertions="1" classname="syntaxTests.natspec.invalid" name="return_param_amount_differs2" time="0.012669">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="negation" time="0.000478">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_constant_payable" time="0.000192">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_function_arguments_and_returns" time="0.018497">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_invalid_state_mutability" time="0.000609">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_in_struct" time="0.001085">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_nonpayable" time="0.012503">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable" time="0.012309">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_constant" time="0.001218">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_conversion" time="0.000235">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_function_type" time="0.021698">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_library" time="0.005085">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_local" time="0.002376">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_state_variable" time="0.013508">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_struct" time="0.001375">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_payable_type_expression" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="address_public_payable_error" time="0.000141">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="arrays_in_events" time="0.001293">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="arrays_in_expressions" time="0.000437">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="arrays_in_storage" time="0.001204">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="array_range_and_ternary" time="0.029939">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="array_range_conversion" time="0.000598">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="array_range_nested" time="0.030825">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="array_range_nested_invalid" time="0.00059">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="array_range_no_start" time="0.018589">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="array_type_range" time="0.000317">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="assembly_evmasm_type" time="0.002298">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="assembly_invalid_type" time="0.000254">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="calling_function" time="0.003834">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="comment_end_with_double_star" time="0.001673">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="conditional_multiple" time="0.002508">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="conditional_true_false_literal" time="0.002409">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="conditional_with_assignment" time="0.002424">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="conditional_with_constants" time="0.00246">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="conditional_with_variables" time="0.003151">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constant_is_keyword" time="0.00022">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constant_state_modifier" time="0.000152">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constructor_allowed_this" time="0.075349">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constructor_internal_internal" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constructor_internal_public" time="0.000133">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constructor_payable_payable" time="0.00014">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constructor_public_internal" time="0.000124">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constructor_public_public" time="0.000106">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="constructor_super" time="0.002048">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="declaring_fixed_and_ufixed_variables" time="0.001328">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="declaring_fixed_literal_variables" time="0.000382">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="elemantary_non_address_payable_state_variable" time="0.000222">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="elementary_non_address_payable_argument" time="0.000283">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="elementary_non_address_payable_local" time="0.000204">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="elementary_non_address_payable_return" time="0.000256">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="else_if_statement" time="0.011232">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="emit_without_event" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="empty_comment" time="0.001118">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="empty_enum" time="0.000157">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="empty_function" time="0.016665">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="enum_from_interface" time="0.009835">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="enum_from_interface_in_library" time="0.009998">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="enum_from_library" time="0.010606">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="enum_inheritance_contract" time="0.0103">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="enum_inheritance_interface" time="0.00981">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="enum_valid_declaration" time="0.003504">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="event" time="0.00116">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="event_arguments" time="0.001179">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="event_arguments_indexed" time="0.001122">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="event_with_no_argument_list" time="0.000214">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="exp_expression" time="0.041983">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="external_function" time="0.001922">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="external_variable" time="0.000232">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="fallback_function" time="0.001244">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="fixed_literal_with_double_radix" time="0.00019">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="for_loop_simple_initexpr" time="0.011959">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="for_loop_simple_noexpr" time="0.007816">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="for_loop_single_stmt_body" time="0.011063">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="for_loop_vardef_initexpr" time="0.012043">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="from_is_not_keyword" time="0.001189">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_normal_comments" time="0.010138">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_no_body" time="0.000499">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_as_parameter" time="0.001169">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_as_storage_variable" time="0.001038">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_as_storage_variable_with_assignment" time="0.012853">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_as_storage_variable_with_modifiers" time="0.000286">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_in_expression" time="0.014264">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_in_struct" time="0.00127">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_multiple_mutability" time="0.000185">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_multiple_visibility" time="0.00014">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="function_type_state_variable" time="0.004471">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="if_statement" time="0.010006">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="import_complex" time="0.000201">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="import_complex_invalid_from" time="0.000164">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="import_complex_without_from" time="0.000165">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="import_empty" time="0.000119">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="import_invalid_token" time="0.000101">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="import_simple" time="0.000104">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="inline_array_declaration" time="0.012762">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="inline_array_empty_cells_check_lvalue" time="0.000271">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="inline_array_empty_cells_check_without_lvalue" time="0.000155">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="interface_basic" time="0.000369">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="invalid_fixed_conversion_leading_zeroes_check" time="0.000215">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="lexer_numbers_with_underscores_decimal" time="0.001944">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="lexer_numbers_with_underscores_decimal_fail" time="0.0004">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="lexer_numbers_with_underscores_fixed" time="0.000879">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="lexer_numbers_with_underscores_fixed_fail" time="0.000417">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="lexer_numbers_with_underscores_hex" time="0.001843">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="lexer_numbers_with_underscores_hex_fail" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="library_simple" time="0.001908">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="literal_constants_with_ether_subdenominations" time="0.001906">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="literal_constants_with_ether_subdenominations_in_expressions" time="0.001211">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="local_const_variable" time="0.000203">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="location_specifiers_for_locals" time="0.001731">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="location_specifiers_for_locals_multi" time="0.000188">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="location_specifiers_for_params" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="location_specifiers_for_params_multi" time="0.000141">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="location_specifiers_for_state_variables" time="0.000136">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="location_specifiers_for_state_variables_multi" time="0.000148">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="location_specifiers_with_var" time="0.000175">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="malformed_enum_declaration" time="0.000158">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping" time="0.001035">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_and_array_of_functions" time="0.001102">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_from_address_payable" time="0.000172">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_in_struct" time="0.001003">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_nonelementary_key_1" time="0.000169">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_nonelementary_key_2" time="0.000278">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_nonelementary_key_3" time="0.000263">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_nonelementary_key_4" time="0.000137">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="mapping_to_mapping_in_struct" time="0.000979">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="max_depth_reached_1" time="0.001651">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="max_depth_reached_2" time="0.017415">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="max_depth_reached_3" time="0.001648">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="max_depth_reached_4" time="0.001799">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="missing_argument_in_named_args" time="0.000231">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="missing_parameter_name_in_named_args" time="0.000184">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="missing_variable_name_in_declaration" time="0.000123">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="modifier" time="0.001215">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="modifier_arguments" time="0.001127">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="modifier_invocation" time="0.00252">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="modifier_without_semicolon" time="0.000213">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_event_arg_trailing_comma" time="0.00014">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_functions_natspec_documentation" time="0.011097">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_function_param_trailing_comma" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_modifier_arg_trailing_comma" time="0.000144">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_modifier_overrides" time="0.000147">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_return_param_trailing_comma" time="0.000133">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_statemutability_specifiers" time="0.0002">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multiple_visibility_specifiers" time="0.000131">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multi_arrays" time="0.001199">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="multi_variable_declarations" time="0.00921">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="new_address_payable" time="0.02691">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="new_invalid_type_name" time="0.000337">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="no_function_params" time="0.001829">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="overloaded_functions" time="0.021908">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="payable_accessor" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="payable_without_arguments" time="0.000221">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="placeholder_in_function_context" time="0.00046">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="pragma_illegal" time="0.000156">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="scientific_notation" time="0.001746">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="single_event_arg_trailing_comma" time="0.000194">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="single_function_param" time="0.009938">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="single_function_param_trailing_comma" time="0.000263">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="single_modifier_arg_trailing_comma" time="0.000151">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="single_return_param_trailing_comma" time="0.000135">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="smoke_test" time="0.001079">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="struct_definition" time="0.001063">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="trailing_comma_in_named_args" time="0.000221">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="trailing_dot1" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="trailing_dot2" time="0.000197">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="trailing_dot3" time="0.000135">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="tuples" time="0.006579">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="tuples_decl_without_rhs" time="0.000259">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="tuples_without_commas" time="0.000171">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="two_exact_functions" time="0.000398">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="unary_plus_expression" time="0.000374">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="variable_definition_in_mapping" time="0.000206">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="var_array" time="0.00016">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="var_storage_var" time="0.000116">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="visibility_specifiers" time="0.005138">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="while_loop" time="0.002087">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="wrong_compiler_1" time="0.00018">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="wrong_compiler_2" time="0.000126">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="wrong_compiler_3" time="0.000113">
</testcase>
<testcase assertions="1" classname="syntaxTests.parsing" name="wrong_compiler_4" time="0.000104">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="broken_version_1" time="0.000114">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="broken_version_2" time="0.000122">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="broken_version_3" time="0.000106">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="broken_version_4" time="0.000103">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="broken_version_5" time="0.000107">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="empty_version" time="0.000101">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_empty_string_literal" time="0.000189">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_multiple_same_line" time="0.000171">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_pragma_duplicate" time="0.000176">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_pragma_empty" time="0.000162">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_pragma_unknown_string_literal" time="0.000169">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_test_warning" time="0.000227">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_unknown_number_literal" time="0.000197">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="experimental_unknown_quoted_string_literal" time="0.000171">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="invalid_pragma" time="0.000161">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="unknown_pragma" time="0.00016">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="unterminated_pragma" time="0.000128">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="unterminated_version" time="0.000117">
</testcase>
<testcase assertions="1" classname="syntaxTests.pragma" name="version_check" time="0.000992">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="arguments" time="0.000292">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="default_visibility" time="0.000253">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="msg_data_in_receive" time="0.0003">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="old_syntax" time="0.000152">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="pure_modifier" time="0.000274">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="receive_as_function_name" time="0.001597">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="return_value" time="0.000298">
</testcase>
<testcase assertions="1" classname="syntaxTests.receiveEther" name="view_modifier" time="0.000277">
</testcase>
<testcase assertions="1" classname="syntaxTests.returnExpressions" name="single_return_mismatching_number" time="0.000441">
</testcase>
<testcase assertions="1" classname="syntaxTests.returnExpressions" name="single_return_mismatching_number_named" time="0.000368">
</testcase>
<testcase assertions="1" classname="syntaxTests.returnExpressions" name="single_return_mismatching_type" time="0.000279">
</testcase>
<testcase assertions="1" classname="syntaxTests.returnExpressions" name="tuple_return_mismatching_number" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.returnExpressions" name="tuple_return_mismatching_number_named" time="0.000398">
</testcase>
<testcase assertions="1" classname="syntaxTests.returnExpressions" name="valid_returns" time="0.008862">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="at_file_level" time="0.000271">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="error_used_elsewhere" time="0.000319">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="in_global_function" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="non_called" time="0.000405">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="non_error" time="0.000243">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="regular" time="0.001895">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="revert_event" time="0.000336">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="revert_revert" time="0.001766">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="scoped" time="0.002381">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="using_function" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.revertStatement" name="using_struct" time="0.000323">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="access_in_assignment_dynamic_array" time="0.0003">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="access_in_assignment_struct" time="0.00031">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="double_function_declaration" time="0.000286">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="double_variable_declaration_disjoint_scope" time="0.00174">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="double_variable_declaration_disjoint_scope_activation" time="0.001781">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="double_variable_declaration_same_and_disjoint_scope" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="double_variable_declaration_same_scope" time="0.000279">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="function_state_variable_conflict" time="0.000302">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="library_inherited" time="0.000475">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="library_inherited2" time="0.016129">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_pseudo_shadowing" time="0.002225">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_pseudo_shadowing2" time="0.008072">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_function_parameters_parameter_vs_struct_enum" time="0.029198">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_function_parameter_name_vs_contract" time="0.013824">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_function_parameter_vs_its_function" time="0.007038">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_function_parameter_vs_struct_enum" time="0.00062">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_function_return_parameter_vs_struct_enum" time="0.000477">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_function_type_parameter" time="0.001267">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_function_type_return_parameter" time="0.000448">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_local_variable_vs_free_function" time="0.001739">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_local_variable_vs_functions" time="0.002381">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="name_shadowing_local_variable_vs_state_variable" time="0.001701">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="poly_variable_declaration_same_scope" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping" time="0.000267">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_activation" time="0.000248">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_activation_old" time="0.000237">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_for" time="0.005961">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_for2" time="0.006109">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_for3" time="0.000418">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_for_decl_in_body" time="0.000284">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_old" time="0.000249">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="scoping_self_use" time="0.000232">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="state_variable_function_conflict" time="0.00032">
</testcase>
<testcase assertions="1" classname="syntaxTests.scoping" name="state_variable_function_conflict_former_crash" time="0.0004">
</testcase>
<testcase assertions="1" classname="syntaxTests.shifts" name="shift_singed_rvalue" time="0.00042">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="signed_rational_modulus" time="0.000386">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="smoke_test" time="0.006922">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_calldata" time="0.000304">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_empty" time="0.004679">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_invalid_arg_count" time="0.000442">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_invalid_arg_type" time="0.000318">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_memory" time="0.000223">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_memory_v2" time="0.177441">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_nested_dynamic_array" time="0.000588">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_nested_dynamic_array_v2" time="0.101436">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_nontuple" time="0.000542">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_simple" time="0.025083">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_singletontuple" time="0.010475">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_single_return" time="0.011203">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_storage" time="0.000333">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_struct" time="0.000413">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="abi_decode_struct_v2" time="0.019424">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions.abidecode" name="contract_array" time="0.07623">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_encodePacked_nested_dynamic_array" time="0.000592">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_encodePacked_nested_dynamic_array_v2" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_encodePacked_structs_v2" time="0.000428">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_encode_nested_dynamic_array" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_encode_nested_dynamic_array_v2" time="0.052167">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_encode_structs" time="0.000656">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_encode_structs_abiv2" time="0.00056">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="abi_functions_member_access" time="0.001817">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="encodePacked_array_of_structs" time="0.000389">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="encodePacked_dynamic_string_array_v2" time="0.000388">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="encode_array_of_struct" time="0.021906">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="functionCallOptions_err" time="0.000563">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="single_non_bytes_arg" time="0.000437">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="types_without_encoding_problems" time="0.049286">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="types_with_unspecified_encoding_internal_functions" time="0.000571">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="types_with_unspecified_encoding_special_types" time="0.000467">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="types_with_unspecified_encoding_structs" time="0.000423">
</testcase>
<testcase assertions="1" classname="syntaxTests.specialFunctions" name="types_with_unspecified_encoding_types" time="0.000473">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="hex_as_identifier" time="0.000211">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="invalid_legacy_escape" time="0.000212">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="invalid_utf8_explicit_string" time="0.000289">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="invalid_utf8_hex_string" time="0.000248">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="invalid_utf8_implicit_string" time="0.000282">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="invalid_utf8_in_bytes" time="0.009928">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="invalid_utf8_sequence" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="large_utf8_codepoint" time="0.009268">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_ascii" time="0.019822">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_escapes" time="0.005079">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_hex_valid_parts" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_newline_without_hex_prefix" time="0.000175">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_newline_with_hex_prefix" time="0.00498">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_only_hex" time="0.000293">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_only_regular" time="0.000166">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_single_line" time="0.004772">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_unicode" time="0.004857">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_multipart_unicode_mixed" time="0.000272">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_new_line" time="0.000185">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_terminated_by_backslash" time="0.000162">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_unicode" time="0.022359">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_unicode_without_prefix" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_unterminated" time="0.000177">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="string_unterminated_no_new_line" time="0.000148">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="unicode_escape_literals" time="0.006526">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="unicode_escape_literals_invalid_codepoint" time="0.000449">
</testcase>
<testcase assertions="1" classname="syntaxTests.string" name="unicode_escape_literals_invalid_format" time="0.000227">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="address_member_access" time="0.000423">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="address_member_declaration" time="0.000158">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="array_calldata" time="0.019011">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="calldata" time="0.007413">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="calldata_array_assign" time="0.000607">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="calldata_assign" time="0.000374">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="calldata_dynamic" time="0.0085">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="calldata_struct_function_type" time="0.033808">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="calldata_struct_mapping_function" time="0.00058">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="contract_global_struct_name_clash" time="0.000296">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="global_struct" time="0.001924">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="global_structs_name_clash" time="0.000273">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="global_struct_contract_name_clash" time="0.000234">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="global_struct_shadowing" time="0.001887">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="illegal_names" time="0.00041">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="member_type_eq_name" time="0.000427">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="member_type_eq_name_2" time="0.001123">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="member_type_eq_name_3" time="0.001227">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="member_type_func" time="0.000352">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs" name="memory_to_calldata" time="0.000468">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="multi_struct_composition" time="0.03392">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="parallel_structs" time="0.029182">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_as_contract_function_parameter" time="0.000559">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_as_library_function_parameter" time="0.007509">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_as_memory_library_function_parameter" time="0.000564">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_forward_reference" time="0.00037">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_function_pointer" time="0.011337">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_nested_mapping_memory" time="0.000587">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_nested_mapping_storage" time="0.007535">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="recursive_struct_with_internal_function_as_library_function_parameter" time="0.000498">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="return_recursive_structs" time="0.000352">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="return_recursive_structs2" time="0.000377">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="return_recursive_structs3" time="0.00052">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="static_array_of_recursive_structs" time="0.001363">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_directly_recursive" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_directly_recursive_dynamic_array" time="0.00108">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_directly_recursive_fixed_array" time="0.000323">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_complex" time="0.000347">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_dynamic_array1" time="0.001046">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_dynamic_array2" time="0.001053">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_dynamic_array3" time="0.001061">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_dynamic_multi_array" time="0.001155">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_fixed_array1" time="0.000366">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_fixed_array2" time="0.000309">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_fixed_array3" time="0.0003">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_indirectly_recursive_fixed_multi_array" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_not_really_recursive" time="0.001045">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_not_really_recursive_array" time="0.001135">
</testcase>
<testcase assertions="1" classname="syntaxTests.structs.recursion" name="struct_definition_recursion_via_mapping" time="0.001038">
</testcase>
<testcase assertions="1" classname="syntaxTests.super" name="super_in_function" time="0.000285">
</testcase>
<testcase assertions="1" classname="syntaxTests.super" name="super_in_library" time="0.000251">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="tight_packing_literals" time="0.000335">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="tight_packing_literals_fine" time="0.027969">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="almost_call_options" time="0.041755">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="catch_error" time="0.041912">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="catch_error_named" time="0.040377">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="catch_low_level" time="0.01771">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="creation" time="0.004317">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="data_location_error_message" time="0.000438">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="double_panic" time="0.000356">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="double_panic_correct" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="empty_catch" time="0.000221">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="empty_returns" time="0.000162">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="error_and_panic" time="0.023825">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="error_with_wrong_type" time="0.000512">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="invalid_error_name" time="0.000451">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="invalid_returns" time="0.000367">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="library_call" time="0.092421">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="low_level_pre-byzantium" time="0.000207">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="low_level_with_wrong_type" time="0.000431">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="no_catch" time="0.000222">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="no_external_call" time="0.000335">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="no_returns" time="0.015825">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="no_special" time="0.00059">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="returns" time="0.01741">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="returns_memory" time="0.08371">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="returns_memory_anonymous" time="0.082125">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="returns_mismatch" time="0.000628">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="scoping" time="0.014673">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="simple_catch" time="0.003655">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="structured_pre_byzantium" time="0.000173">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="two_catch_clauses" time="0.043484">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="two_error_catch_clauses" time="0.000641">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="two_low_level_catch_clauses" time="0.000421">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="wrong_panic" time="0.000307">
</testcase>
<testcase assertions="1" classname="syntaxTests.tryCatch" name="wrong_panic_2" time="0.000377">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="double_storage_crash" time="0.000446">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="empty_tuples_lhs" time="0.000776">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="error_fill" time="0.000391">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="err_fill_assignment" time="0.000407">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="large_component_count" time="0.029269">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="nowarn_swap_memory" time="0.003825">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="nowarn_swap_storage_pointers" time="0.002525">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="tuple_in_tuple_long" time="0.000472">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="tuple_in_tuple_short" time="0.001827">
</testcase>
<testcase assertions="1" classname="syntaxTests.tupleAssignments" name="warn_multiple_storage_storage_copies" time="0.002077">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_abi_decode" time="0.037875">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_binary_operators" time="0.000636">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_constant" time="0.007545">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_constant_assignment" time="0.000515">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_in_struct_fail" time="0.00037">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_in_struct_fine" time="0.003676">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_literal_to_payable" time="0.001926">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_literal_to_payable_err" time="0.000389">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_members" time="0.028443">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_members_in_contract" time="0.000615">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_nonpayable_selfdestruct" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_external_overload" time="0.000327">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_internal_overload_nonpayable" time="0.001296">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_internal_overload_payable" time="0.000445">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_memory_array_conversion" time="0.00037">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_public_overload" time="0.000324">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_selfdestruct" time="0.008699">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_storage_array_conversion" time="0.000534">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_payable_storage_array_conversion_fail" time="0.000395">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_to_contract" time="0.008256">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_to_contract_implicitly" time="0.000476">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_to_contract_payable_fallback" time="0.008316">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_to_contract_receive" time="0.008477">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_to_payable_address" time="0.000462">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_to_payable_address_double" time="0.000324">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_tuple_fail" time="0.000395">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_tuple_fine" time="0.007954">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_uint_bytes20_this" time="0.002349">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_uint_bytes20_this_to_payable_err" time="0.000446">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="address_zero_to_payable_err" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="bytes_long_to_payable_address" time="0.000305">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="bytes_short_to_payable_address" time="0.0003">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="bytes_to_payable_address" time="0.012459">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="codehash" time="0.00518">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="codehash_before_constantinople" time="0.000173">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_non_payable_fallback_to_payable_address" time="0.00042">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_no_fallback_to_payable_address" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_payable_fallback_to_payable_address" time="0.001738">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_payable_fallback_to_payable_address_implicitly" time="0.000373">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_receive_to_payable_address" time="0.001876">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_receive_to_payable_address_implicitly" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_to_address" time="0.001674">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_to_address_implicitly" time="0.000376">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="contract_type_to_address" time="0.000406">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="conversion" time="0.006535">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="conversion_error" time="0.000539">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="literal_to_address" time="0.001929">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="literal_to_address_call" time="0.008847">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="literal_to_address_oversized" time="0.000397">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="literal_to_payable_address" time="0.00184">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="literal_to_payable_address_err" time="0.000337">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="nonpayable_address_to_contract_payable_fallback" time="0.000399">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="nonpayable_address_to_contract_receive" time="0.000348">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="payable_address_to_address" time="0.008597">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="payable_conversion" time="0.004961">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="payable_conversions_literals" time="0.001917">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="payable_conversion_err" time="0.00043">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="payable_conversion_strict" time="0.001996">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="payable_conversion_strict_err" time="0.000481">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="payable_to_contract_receive" time="0.008432">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="super_to_address" time="0.000398">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="type_type_to_address" time="0.000615">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.address" name="uint_to_payable_address" time="0.011463">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="array_index_too_large" time="0.000557">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bool_ops" time="0.000679">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="byte" time="0.00021">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytes0" time="0.000272">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytes1_to_uint256" time="0.000331">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytes256" time="0.000257">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytes32_to_uint32" time="0.000332">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytes33" time="0.000277">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytesNN_bitnot" time="0.001869">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytesNN_index_assign" time="0.000361">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytesNN_to_contract" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytesNN_to_uint_same_size" time="0.019445">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytesNN_upcasting" time="0.033157">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="bytesNN_with_oversized_hex_string" time="0.000547">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="call_unimplemented_internal_function" time="0.000478">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="constant_of_invalid_function_type" time="0.000322">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="assign_function_via_base_name_to_var" time="0.000481">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="assign_function_via_contract_name_to_var" time="0.000511">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="base_contract" time="0.010334">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="base_contract_invalid" time="0.000636">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="call_function_via_contract_name" time="0.00048">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="call_unimplemented_base" time="0.000392">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="function_selector_via_contract_name" time="0.006872">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="function_selector_via_interface_name" time="0.005658">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="function_via_contract_name_internal" time="0.000479">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="function_via_contract_name_overloaded" time="0.000427">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="function_via_contract_name_private" time="0.000423">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="function_via_contract_name_public" time="0.006787">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="modifier" time="0.000531">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="modifier_base" time="0.000407">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.contractTypeType.members" name="struct_enum" time="0.002344">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="contract_to_base" time="0.003159">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="contract_to_base_base" time="0.003661">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="contract_to_derived" time="0.000444">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="contract_to_unrelated_contract" time="0.000374">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="cyclic_dependency_check_on_consts_exhausted" time="0.005099">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="cyclic_dependency_check_on_consts_good" time="0.009868">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="cyclic_dependency_check_on_struct_exhausted" time="0.024574">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="cyclic_dependency_check_on_struct_good" time="0.009085">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="decimal_literal_to_bytesNN_explicit" time="0.000726">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="decimal_literal_to_bytesNN_implicit" time="0.000502">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="empty_tuple_event" time="0.000224">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="empty_tuple_function" time="0.000427">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="empty_tuple_lvalue" time="0.000389">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="empty_tuple_lvalue_array" time="0.000412">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="encoding_fractional" time="0.000357">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="encoding_fractional_abiencoderv2" time="0.000326">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="encoding_packed_fractional" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="encoding_packed_fractional_abiencoderv2" time="0.000394">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="event_with_rational_size_array" time="0.001273">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="function_call_fail" time="0.000385">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="function_call_fail2" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types" name="function_definition_expression" time="0.001901">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types" name="function_parameter_return_types_fail" time="0.001435">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types" name="function_parameter_return_types_success" time="0.002632">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types" name="function_state_mutability_fail" time="0.001414">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types" name="function_state_mutability_success" time="0.019257">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types.selector" name="function_selector_pure" time="0.003969">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types.selector" name="local_variable_selector_not_pure" time="0.005914">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types.selector" name="state_variable_selector_contract_name" time="0.000549">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types.selector" name="state_variable_selector_not_pure" time="0.000607">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.function_types.selector" name="state_variable_selector_super" time="0.000439">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="global_struct_recursive" time="0.000343">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_literal_bitnot" time="0.000295">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_literal_to_bytesNN_different_size_explicit" time="0.000659">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_literal_to_bytesNN_different_size_implicit" time="0.000585">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_literal_to_bytesNN_same_size_explicit" time="0.002239">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_literal_to_bytesNN_same_size_implicit" time="0.002129">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_string_to_bytesNN_different_size_explicit" time="0.000559">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_string_to_bytesNN_same_size_explicit" time="0.002172">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="hex_string_to_bytesNN_same_size_implicit" time="0.002101">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="index_access_for_bytes" time="0.011273">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="integer_implicit_err" time="0.000642">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_function_selector" time="0.072384">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_function_selector_internal" time="0.000661">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_function_selector_private_inside" time="0.000454">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_function_selector_private_outside" time="0.000428">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_function_selector_view_pure" time="0.01457">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_internal_call" time="0.002932">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_to_address" time="0.008743">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="library_to_address_payable" time="0.000474">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="magic_block" time="0.000114">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="magic_block_basefee_error" time="7.4e-05">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="magic_block_istanbul" time="0.009681">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="magic_block_london" time="0.005423">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="abstract_contructor_param" time="0.000523">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="access_index_omitted" time="0.000346">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="argument_external" time="0.000272">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="argument_internal" time="0.001088">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="argument_private" time="0.001066">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="argument_public" time="0.000283">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="array_argument_external" time="0.000248">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="array_argument_internal" time="0.001027">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="array_argument_private" time="0.001061">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="array_argument_public" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="assignment_local" time="0.001899">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="assignment_local_err" time="0.000418">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="assignment_map" time="0.000652">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="assignment_state_variable" time="0.00036">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="assignment_struct" time="0.000393">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="assignment_type_mismatch" time="0.000321">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="constructor_parameter" time="0.000294">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="contract_mapping" time="0.018754">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="contract_mapping_invalid" time="0.000645">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="contract_storage_parameter_with_mapping" time="0.000405">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="enum_mapping" time="0.017694">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="enum_mapping_invalid" time="0.0006">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="error_parameter" time="0.000286">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="event_parameter" time="0.000314">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="function_type_argument_array" time="0.000315">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="function_type_argument_external" time="0.000266">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="function_type_argument_internal" time="0.001164">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="function_type_return_external" time="0.000309">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="function_type_return_internal" time="0.001088">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_argument_external" time="0.007275">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_argument_internal" time="0.001511">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_argument_private" time="0.001397">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_argument_public" time="0.007171">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_argument_storage" time="0.015281">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_array_argument_external" time="0.007705">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_array_argument_internal" time="0.001609">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_array_argument_private" time="0.00146">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_array_argument_public" time="0.007417">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_mapping" time="0.000422">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_nested_mapping" time="0.00045">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_nested_storage" time="0.007567">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_return_external" time="0.01838">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_return_internal" time="0.001695">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_return_private" time="0.001572">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_return_public" time="0.018183">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_storage_parameter_with_mapping" time="0.007699">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="library_storage_parameter_with_nested_mapping" time="0.007606">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_array_data_location_function_param_external" time="0.000488">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_array_return_external" time="0.000278">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_array_return_internal" time="0.001457">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_array_return_public" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_data_location_calldata" time="0.000345">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_data_location_default" time="0.000287">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_data_location_function_param_external" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_data_location_function_param_internal" time="0.000328">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_data_location_function_param_public" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_data_location_memory" time="0.000316">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_dynamic_key" time="0.001051">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_dynamic_key_public" time="0.032261">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_function_calldata" time="0.000556">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_return_external" time="0.000284">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_return_internal" time="0.001406">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_return_public" time="0.000303">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_return_public_memory" time="0.000311">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_struct_data_location_memory" time="0.00035">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="mapping_struct_recusrive_data_location_memory" time="0.000393">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="memory_structs_with_mappings" time="0.000379">
</testcase>
<testcase assertions="1" classname="syntaxTests.types.mapping" name="memory_struct_recursive" time="0.000409">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="no_singleton_tuple" time="0.000339">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_negative_numerator_negative_exp" time="0.00484">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_array_index_limit" time="0.001175">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_bitshift_limit" time="0.001083">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_div_limit" time="0.002007">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_exp_limit_fail" time="0.008322">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_exp_limit_fine" time="0.002474">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_huge" time="0.007166">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_huge_fail" time="0.000467">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_literal_limit_1" time="0.000724">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_literal_limit_2" time="0.000692">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_literal_limit_3" time="0.000811">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_literal_to_fixed_implicit" time="0.001093">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_mul_limit" time="0.000914">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_signed_to_unsigned" time="0.00033">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="rational_number_too_large" time="0.000373">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="strict_explicit" time="0.00072">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="strict_explicit_err" time="0.000794">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="struct_mapping_recursion" time="0.000315">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="too_small_negative_numbers" time="0.0009">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="uint256_to_bytes1" time="0.000313">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="uint32_to_bytes32" time="0.000293">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="unnamed_tuple_decl" time="0.00021">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="var_decl_val_mismatch" time="0.000347">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="var_empty_decl_1" time="0.000209">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="var_empty_decl_2" time="0.000154">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="var_empty_decl_3" time="0.000138">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="var_type_invalid_rational" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="weird_sized_types" time="0.008058">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="zero_literal_to_bytesNN_explicit" time="0.003558">
</testcase>
<testcase assertions="1" classname="syntaxTests.types" name="zero_literal_to_bytesNN_implicit" time="0.003353">
</testcase>
<testcase assertions="1" classname="syntaxTests.unchecked" name="unchecked_for_header" time="0.000273">
</testcase>
<testcase assertions="1" classname="syntaxTests.unchecked" name="unchecked_function_body" time="0.000142">
</testcase>
<testcase assertions="1" classname="syntaxTests.unchecked" name="unchecked_modifier" time="0.000261">
</testcase>
<testcase assertions="1" classname="syntaxTests.unchecked" name="unchecked_nested" time="0.000312">
</testcase>
<testcase assertions="1" classname="syntaxTests.unchecked" name="unchecked_post_for" time="0.000196">
</testcase>
<testcase assertions="1" classname="syntaxTests.unchecked" name="unchecked_vardecl" time="0.000133">
</testcase>
<testcase assertions="1" classname="syntaxTests.unchecked" name="unchecked_while_body" time="0.000122">
</testcase>
<testcase assertions="1" classname="syntaxTests.underscore" name="as_function" time="0.002763">
</testcase>
<testcase assertions="1" classname="syntaxTests.underscore" name="in_function" time="0.000375">
</testcase>
<testcase assertions="1" classname="syntaxTests.underscore" name="in_modifier" time="0.000397">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="unexpected" time="0.000145">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="unimplemented_super_function" time="0.000363">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="unimplemented_super_function_derived" time="0.000459">
</testcase>
<testcase assertions="1" classname="syntaxTests.unterminatedBlocks" name="one_dot" time="0.000186">
</testcase>
<testcase assertions="1" classname="syntaxTests.unterminatedBlocks" name="one_dot_x" time="0.000307">
</testcase>
<testcase assertions="1" classname="syntaxTests.unterminatedBlocks" name="zero_dot" time="0.000166">
</testcase>
<testcase assertions="1" classname="syntaxTests.unterminatedBlocks" name="zero_dot_x" time="0.00028">
</testcase>
<testcase assertions="1" classname="syntaxTests.unusedVariables" name="try_catch" time="0.032246">
</testcase>
<testcase assertions="1" classname="syntaxTests" name="upper_case_hex_literals" time="0.009492">
</testcase>
<testcase assertions="1" classname="syntaxTests.variableDeclaration" name="do_while" time="0.000496">
</testcase>
<testcase assertions="1" classname="syntaxTests.variableDeclaration" name="else" time="0.000342">
</testcase>
<testcase assertions="1" classname="syntaxTests.variableDeclaration" name="for" time="0.000349">
</testcase>
<testcase assertions="1" classname="syntaxTests.variableDeclaration" name="if" time="0.000306">
</testcase>
<testcase assertions="1" classname="syntaxTests.variableDeclaration" name="illegal_names" time="0.000476">
</testcase>
<testcase assertions="1" classname="syntaxTests.variableDeclaration" name="while" time="0.000323">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="access_to_base_members" time="0.000469">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="access_to_base_member_constant" time="0.005338">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="access_to_base_member_function" time="0.00048">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="access_to_base_member_struct" time="0.000599">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="address" time="0.005267">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="address_constantinople" time="0.00528">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker.array" name="access_to_array_push" time="0.005228">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker.array" name="access_to_array_push_view" time="0.000445">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker.array" name="access_to_base_member_array" time="0.000505">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="assembly" time="0.008419">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="assembly_chainid_not_pure" time="0.000519">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="assembly_constantinople" time="0.001998">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="assembly_istanbul" time="0.005252">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="basefee_not_pure" time="0.000473">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="builtin_functions" time="0.031025">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="builtin_functions_restrict_warning" time="0.024489">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="builtin_functions_view_fail" time="0.00092">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="callvalue_nonpayable_assembly_fallback" time="0.001303">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="callvalue_nonpayable_assembly_function" time="0.006973">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="callvalue_nonpayable_assembly_function_internal" time="0.00572">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="callvalue_nonpayable_assembly_function_modifier" time="0.001863">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="callvalue_payable_assembly_fallback" time="0.001253">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="callvalue_payable_assembly_function" time="0.006709">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="callvalue_payable_assembly_function_modifier" time="0.001639">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="call_internal_functions_fail" time="0.000542">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="call_internal_functions_success" time="0.007594">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="constant" time="0.004865">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="constant_restrict_warning" time="0.005419">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="creation_no_restrict_warning" time="0.002531">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="creation_view_fail" time="0.000411">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="function_types" time="0.005288">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="function_types_fail" time="0.00053">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="gas_value_without_call" time="0.010022">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="gas_with_call_nonpayable" time="0.000674">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="immutable" time="0.00489">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="interface" time="0.001771">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="local_storage_variables" time="0.002905">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="local_storage_variables_fail" time="0.000565">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="mappings" time="0.002688">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="modifiers" time="0.005688">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="modifiers_fail" time="0.00068">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="msg_value_modifier" time="0.000472">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="msg_value_modifier_view" time="0.000422">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="overriding_fail" time="0.000517">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="overriding_no_restrict_warning" time="0.002766">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="read_storage_pure_fail" time="0.000387">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="returning_structs_fail" time="0.000441">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="returning_structs_no_restrict_warning" time="0.003149">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="selector" time="0.008895">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="selector_complex" time="0.000613">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="selector_complex2" time="0.012262">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="smoke_test" time="0.007077">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="staticcall_gas_view" time="0.019622">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="suggest_pure" time="0.001949">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="suggest_view" time="0.005221">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="value_with_call_nonpayable" time="0.000699">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="view_pure_abi_encode" time="0.047301">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="view_pure_abi_encode_arguments" time="0.040266">
</testcase>
<testcase assertions="1" classname="syntaxTests.viewPureChecker" name="write_storage_fail" time="0.000613">
</testcase>
<testcase assertions="1" classname="syntaxTests.virtualLookup" name="modifiers_in_libraries" time="0.009102">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility" name="external_library_function" time="0.019026">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility" name="function_no_visibility" time="0.000437">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility.interface" name="function_default" time="0.000273">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility.interface" name="function_external" time="0.000315">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility.interface" name="function_internal" time="0.000245">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility.interface" name="function_private" time="0.000222">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility.interface" name="function_public" time="0.000219">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility.interface" name="interface_contract_function_default" time="0.000302">
</testcase>
<testcase assertions="1" classname="syntaxTests.visibility" name="library_self_delegatecall" time="0.000639">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="constructor_recovers" time="0.000256">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="contract_recovery" time="0.000158">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="do_not_delete_at_error" time="0.000144">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="error_to_eos" time="0.000208">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="missing_rhs" time="0.000159">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="multiple_errors" time="0.000215">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="recovery_failed_eos" time="0.000173">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="wrong_compiler_recovers_1" time="0.000212">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="wrong_compiler_recovers_2" time="0.000133">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="wrong_compiler_recovers_3" time="0.000114">
</testcase>
<testcase assertions="1" classname="errorRecoveryTests" name="wrong_compiler_recovers_4" time="0.000265">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="abi_decode_calldata" time="0.226184">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="abi_decode_simple" time="0.230549">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="abi_decode_simple_storage" time="0.426314">
</testcase>
<testcase assertions="1" classname="semanticTests.abiencodedecode" name="abi_encode_empty_string_v1" time="0.00027">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="abi_encode_with_selector" time="0.198075">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="abi_encode_with_selectorv2" time="0.378449">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="abi_encode_with_signature" time="0.586803">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="abi_encode_with_signaturev2" time="0.768777">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="contract_array" time="0.527261">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="contract_array_v2" time="0.515432">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="offset_overflow_in_array_decoding" time="0.461252">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="offset_overflow_in_array_decoding_2" time="0.480967">
</testcase>
<testcase assertions="3" classname="semanticTests.abiencodedecode" name="offset_overflow_in_array_decoding_3" time="0.459036">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_dynamic_array" time="0.265915">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_fixed_arrays" time="0.43042">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_static_array" time="0.516723">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_static_array_v2" time="0.515654">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_trivial" time="0.140009">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_v2" time="0.433234">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_v2_calldata" time="0.368294">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_decode_v2_storage" time="0.665081">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_encode" time="0.36999">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_encode_call" time="0.480272">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_encode_calldata_slice" time="1.56372">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_encode_decode_simple" time="0.311612">
</testcase>
<testcase assertions="1" classname="semanticTests.abiEncoderV1" name="abi_encode_empty_string" time="0.000386">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="abi_encode_rational" time="0.129076">
</testcase>
<testcase assertions="1" classname="semanticTests.abiEncoderV1" name="bool_out_of_bounds" time="0.000273">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="byte_arrays" time="0.285343">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="calldata_arrays_too_large" time="0.094635">
</testcase>
<testcase assertions="1" classname="semanticTests.abiEncoderV1.cleanup" name="cleanup" time="0.000441">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="decode_slice" time="0.114773">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="dynamic_arrays" time="0.250737">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="dynamic_memory_copy" time="0.246984">
</testcase>
<testcase assertions="1" classname="semanticTests.abiEncoderV1" name="enums" time="0.000293">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="memory_params_in_external_function" time="0.673022">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="return_dynamic_types_cross_call_advanced" time="0.64882">
</testcase>
<testcase assertions="1" classname="semanticTests.abiEncoderV1" name="return_dynamic_types_cross_call_out_of_range_1" time="0.00034">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="return_dynamic_types_cross_call_out_of_range_2" time="0.264525">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV1" name="return_dynamic_types_cross_call_simple" time="0.268">
</testcase>
<testcase assertions="5" classname="semanticTests.abiEncoderV1.struct" name="struct_storage_ptr" time="0.988531">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="abi_encode_calldata_slice" time="1.54789">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="abi_encode_empty_string_v2" time="0.186513">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="abi_encode_rational_v2" time="0.13027">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="abi_encode_v2" time="0.588273">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="abi_encode_v2_in_function_inherited_in_v1_contract" time="0.825253">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="abi_encode_v2_in_modifier_used_in_v1_contract" time="0.328842">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="bool_out_of_bounds" time="0.047394">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="byte_arrays" time="0.276902">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array" time="0.57278">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_dynamic" time="0.669166">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_dynamic_index_access" time="0.838017">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_dynamic_static_dynamic" time="2.55124">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_dynamic_static_short_decode" time="0.108934">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_dynamic_static_short_reencode" time="0.506842">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_function_types" time="0.801322">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_multi_dynamic" time="1.01171">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_static" time="0.458762">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_static_dynamic_static" time="2.04507">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_static_index_access" time="0.490256">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_struct_dynamic" time="0.671117">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_two_dynamic" time="0.420746">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_array_two_static" time="0.335789">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_struct_dynamic" time="0.421511">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_struct_member_offset" time="0.371517">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="calldata_struct_simple" time="0.332273">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="address" time="0.177011">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="bool" time="0.171306">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="bytesx" time="0.444194">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="cleanup" time="0.12695">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="dynamic_array" time="0.491611">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="function" time="0.343675">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="intx" time="0.479014">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="simple_struct" time="0.35995">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="static_array" time="0.392578">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.cleanup" name="uintx" time="0.433015">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="dynamic_arrays" time="0.242097">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="dynamic_nested_arrays" time="2.05312">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="enums" time="0.044679">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="memory_params_in_external_function" time="0.651427">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2" name="storage_array_encoding" time="0.59192">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.struct" name="mediocre2_struct" time="0.551066">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.struct" name="mediocre_struct" time="0.245575">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.struct" name="struct_function" time="0.323212">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.struct" name="struct_short" time="0.169118">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.struct" name="struct_simple" time="0.183132">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.struct" name="struct_validation" time="0.157379">
</testcase>
<testcase assertions="3" classname="semanticTests.abiEncoderV2.struct" name="validation_function_type_inside_struct" time="0.153725">
</testcase>
<testcase assertions="3" classname="semanticTests.accessor" name="accessor_for_const_state_variable" time="0.034921">
</testcase>
<testcase assertions="3" classname="semanticTests.accessor" name="accessor_for_state_variable" time="0.040522">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="addmod_mulmod" time="0.045595">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="addmod_mulmod_zero" time="0.090365">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="block_inside_unchecked" time="0.035599">
</testcase>
<testcase assertions="1" classname="semanticTests.arithmetics" name="checked_add_v1" time="0.000292">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="checked_add_v2" time="0.078825">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="checked_called_by_unchecked" time="0.141831">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="checked_modifier_called_by_unchecked" time="0.096372">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="check_var_init" time="0.228261">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="divisiod_by_zero" time="0.094166">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="exp_associativity" time="0.547005">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="signed_mod" time="0.114908">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="unchecked_called_by_checked" time="0.117229">
</testcase>
<testcase assertions="3" classname="semanticTests.arithmetics" name="unchecked_div_by_zero" time="0.089866">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="arrays_complex_from_and_to_storage" time="0.899653">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="bytes_length_member" time="0.239997">
</testcase>
<testcase assertions="2" classname="semanticTests.array" name="bytes_to_fixed_bytes_cleanup" time="0.306324">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="bytes_to_fixed_bytes_simple" time="0.51584">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="bytes_to_fixed_bytes_too_long" time="0.397694">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="byte_array_storage_layout" time="0.382664">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="byte_array_transitional_2" time="0.467796">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_array" time="0.062168">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_array_as_argument_internal_function" time="0.168367">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_array_dynamic_invalid" time="0.13863">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_array_dynamic_invalid_static_middle" time="0.199376">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_array_of_struct" time="0.154444">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_array_two_dimensional" time="0.430091">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_array_two_dimensional_1" time="0.466285">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_bytes_array_bounds" time="0.153868">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="calldata_slice_access" time="0.226605">
</testcase>
<testcase assertions="3" classname="semanticTests.array.concat" name="bytes_concat_2_args" time="0.18052">
</testcase>
<testcase assertions="3" classname="semanticTests.array.concat" name="bytes_concat_3_args" time="0.239924">
</testcase>
<testcase assertions="3" classname="semanticTests.array.concat" name="bytes_concat_as_argument" time="0.236355">
</testcase>
<testcase assertions="3" classname="semanticTests.array.concat" name="bytes_concat_different_types" time="1.52677">
</testcase>
<testcase assertions="3" classname="semanticTests.array.concat" name="bytes_concat_empty_argument_list" time="0.092736">
</testcase>
<testcase assertions="3" classname="semanticTests.array.concat" name="bytes_concat_empty_strings" time="0.349294">
</testcase>
<testcase assertions="3" classname="semanticTests.array.concat" name="bytes_concat_nested" time="0.189736">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="constant_var_as_array_length" time="0.242126">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="arrays_from_and_to_storage" time="0.777855">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_calldata_storage" time="0.611528">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_cleanup_uint128" time="0.437511">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_cleanup_uint40" time="0.840852">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_clear_storage" time="0.28397">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_clear_storage_packed" time="1.0467">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_different_packing" time="0.654404">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_including_array" time="0.75907">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_memory_to_storage" time="0.696741">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_nested_array" time="0.626179">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_abi_signed" time="0.680022">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_different_base" time="0.423926">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_different_base_nested" time="0.588263">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_dynamic_dynamic" time="0.302927">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_dyn_dyn" time="0.324108">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_static_dynamic" time="0.157045">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_static_simple" time="0.296108">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_static_static" time="0.192843">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_storage_struct" time="0.272111">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_to_memory" time="0.182024">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_storage_to_memory_nested" time="0.493691">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_target_leftover" time="0.544051">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_target_leftover2" time="0.487175">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_target_simple" time="0.31649">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_copy_target_simple_2" time="0.290962">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_nested_calldata_to_memory" time="0.954069">
</testcase>
<testcase assertions="2" classname="semanticTests.array.copying" name="array_nested_calldata_to_storage" time="0.983073">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_nested_memory_to_storage" time="1.35">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_of_structs_containing_arrays_calldata_to_memory" time="0.544182">
</testcase>
<testcase assertions="2" classname="semanticTests.array.copying" name="array_of_structs_containing_arrays_calldata_to_storage" time="0.489402">
</testcase>
<testcase assertions="2" classname="semanticTests.array.copying" name="array_of_structs_containing_arrays_memory_to_storage" time="0.814001">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_of_struct_calldata_to_memory" time="0.390626">
</testcase>
<testcase assertions="2" classname="semanticTests.array.copying" name="array_of_struct_calldata_to_storage" time="0.280217">
</testcase>
<testcase assertions="2" classname="semanticTests.array.copying" name="array_of_struct_memory_to_storage" time="0.385883">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="array_storage_multi_items_per_slot" time="0.241286">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="bytes_calldata_to_string_calldata" time="0.095426">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="bytes_inside_mappings" time="0.322318">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="bytes_memory_to_storage" time="0.20963">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="bytes_storage_to_memory" time="0.236989">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="bytes_storage_to_storage" time="0.670178">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_2d_bytes_to_memory" time="0.283661">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_2d_bytes_to_memory_2" time="0.389645">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_array_dynamic_to_storage" time="0.185202">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_array_of_struct_to_memory" time="0.276192">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_array_static_to_memory" time="0.115779">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_bytes_array_to_memory" time="0.241181">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_bytes_to_storage" time="0.263702">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_dynamic_array_to_memory" time="0.244203">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_dyn_2d_bytes_to_memory" time="0.39691">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_nested_array_copy_to_memory" time="0.531215">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="calldata_to_storage_different_base" time="0.323093">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="copy_byte_array_in_struct_to_storage" time="0.972687">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="copy_byte_array_to_storage" time="0.408448">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="copy_function_storage_array" time="0.539237">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="copy_internal_function_array_to_storage" time="0.240159">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="copy_removes_bytes_data" time="0.356207">
</testcase>
<testcase assertions="2" classname="semanticTests.array.copying" name="dirty_memory_bytes_to_storage_copy" time="0.01553">
</testcase>
<testcase assertions="2" classname="semanticTests.array.copying" name="dirty_memory_bytes_to_storage_copy_ir" time="0.150546">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="empty_bytes_copy" time="0.901091">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="memory_dyn_2d_bytes_to_storage" time="0.722128">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="memory_to_storage_different_base" time="0.362849">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="storage_memory_nested" time="0.636657">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="storage_memory_nested_bytes" time="0.512894">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="storage_memory_nested_from_pointer" time="0.625326">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="storage_memory_nested_struct" time="0.817509">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="storage_memory_packed" time="0.61299">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="storage_memory_packed_dyn" time="1.1305">
</testcase>
<testcase assertions="3" classname="semanticTests.array.copying" name="string_calldata_to_bytes_calldata" time="0.09678">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="create_dynamic_array_with_zero_length" time="0.071382">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="create_memory_array" time="0.359556">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="create_memory_array_too_large" time="0.223822">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="create_memory_byte_array" time="0.112851">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="create_multiple_dynamic_arrays" time="0.39166">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="bytes_delete_element" time="0.530845">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="delete_bytes_array" time="0.630817">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="delete_memory_array" time="0.100355">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="delete_on_array_of_structs" time="0.271982">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="delete_removes_bytes_data" time="0.255484">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="delete_storage_array" time="0.258248">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="delete_storage_array_packed" time="0.288338">
</testcase>
<testcase assertions="3" classname="semanticTests.array.delete" name="memory_arrays_delete" time="0.384226">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="dynamic_arrays_in_storage" time="0.288884">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="dynamic_array_cleanup" time="0.193711">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="dynamic_multi_array_cleanup" time="0.481882">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="dynamic_out_of_bounds_array_access" time="0.175944">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="evm_exceptions_out_of_band_access" time="0.188468">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="external_array_args" time="0.175487">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="fixed_arrays_as_return_type" time="0.601678">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="fixed_arrays_in_constructors" time="0.265845">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="fixed_arrays_in_storage" time="0.21908">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="fixed_array_cleanup" time="0.111366">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="fixed_bytes_length_access" time="0.07081">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="fixed_out_of_bounds_array_access" time="0.142096">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="function_array_cross_calls" time="1.40924">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="function_memory_array" time="0.308409">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="arrays_complex_memory_index_access" time="0.385241">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="bytes_index_access" time="0.724854">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="bytes_index_access_memory" time="0.315247">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="bytes_memory_index_access" time="0.167532">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="fixed_bytes_index_access" time="0.36869">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="index_access" time="0.270682">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="inline_array_index_access_ints" time="0.0926">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="inline_array_index_access_strings" time="0.439381">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="memory_arrays_dynamic_index_access_write" time="0.511631">
</testcase>
<testcase assertions="3" classname="semanticTests.array.indexAccess" name="memory_arrays_index_access_write" time="0.542936">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="inline_array_return" time="0.434805">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="inline_array_singleton" time="0.064363">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="inline_array_storage_to_memory_conversion_ints" time="0.073222">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="inline_array_storage_to_memory_conversion_strings" time="0.368203">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="inline_array_strings_from_document" time="0.216029">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="invalid_encoding_for_storage_byte_array" time="1.31207">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="memory" time="0.363067">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="memory_arrays_of_various_sizes" time="0.278233">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="array_pop" time="0.154593">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="array_pop_array_transition" time="0.820083">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="array_pop_empty_exception" time="0.081315">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="array_pop_isolated" time="0.034943">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="array_pop_storage_empty" time="0.102456">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="array_pop_uint16_transition" time="0.355274">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="array_pop_uint24_transition" time="0.319456">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop" time="0.384047">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop_copy_long" time="0.434482">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop_empty_exception" time="0.138851">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop_isolated" time="0.035694">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop_long_storage_empty" time="0.513565">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop_long_storage_empty_garbage_ref" time="0.309347">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop_masking_long" time="0.435831">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="byte_array_pop_storage_empty" time="0.349177">
</testcase>
<testcase assertions="3" classname="semanticTests.array.pop" name="parenthesized" time="0.115791">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="array_push" time="0.164131">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="array_push_nested" time="0.176423">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="array_push_nested_from_calldata" time="0.35003">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="array_push_nested_from_memory" time="0.445399">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="array_push_packed_array" time="0.3341">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="array_push_struct" time="0.572513">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="array_push_struct_from_calldata" time="0.693398">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="byte_array_push" time="0.385333">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="byte_array_push_transition" time="0.43552">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="nested_bytes_push" time="0.399926">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="push_no_args_1d" time="0.150325">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="push_no_args_2d" time="0.26144">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="push_no_args_bytes" time="0.293243">
</testcase>
<testcase assertions="3" classname="semanticTests.array.push" name="push_no_args_struct" time="0.172743">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="reusing_memory" time="0.341094">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="short_fixed_array_cleanup" time="0.109433">
</testcase>
<testcase assertions="3" classname="semanticTests.array.slices" name="array_calldata_assignment" time="0.102033">
</testcase>
<testcase assertions="3" classname="semanticTests.array.slices" name="array_slice_calldata_as_argument_of_external_calls" time="0.568289">
</testcase>
<testcase assertions="3" classname="semanticTests.array.slices" name="array_slice_calldata_to_calldata" time="0.637068">
</testcase>
<testcase assertions="3" classname="semanticTests.array.slices" name="array_slice_calldata_to_memory" time="0.425571">
</testcase>
<testcase assertions="3" classname="semanticTests.array.slices" name="array_slice_calldata_to_storage" time="0.30601">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="storage_array_ref" time="0.244038">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="strings_in_struct" time="0.577694">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="string_allocation_bug" time="0.65807">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="string_bytes_conversion" time="0.493976">
</testcase>
<testcase assertions="3" classname="semanticTests.array" name="string_literal_assign_to_storage_bytes" time="0.418048">
</testcase>
<testcase assertions="3" classname="semanticTests.asmForLoop" name="for_loop_break" time="0.060256">
</testcase>
<testcase assertions="3" classname="semanticTests.asmForLoop" name="for_loop_continue" time="0.063563">
</testcase>
<testcase assertions="3" classname="semanticTests.asmForLoop" name="for_loop_nested" time="0.091956">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="assignment_to_const_var_involving_keccak" time="0.033502">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="blockhash" time="0.065772">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="blockhash_shadow_resolution" time="0.063189">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="function_types_sig" time="0.102314">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="iterated_keccak256_with_bytes" time="0.332618">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="keccak256_empty" time="0.033559">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="keccak256_multiple_arguments" time="0.092633">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="keccak256_multiple_arguments_with_numeric_literals" time="0.124036">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="keccak256_multiple_arguments_with_string_literals" time="0.143958">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="keccak256_with_bytes" time="0.345271">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="msg_sig" time="0.043936">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="msg_sig_after_internal_call_is_same" time="0.070567">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="ripemd160_empty" time="0.052929">
</testcase>
<testcase assertions="3" classname="semanticTests.builtinFunctions" name="sha256_empty" time="0.061292">
</testcase>
<testcase assertions="3" classname="semanticTests" name="c99_scoping_activation" time="0.103803">
</testcase>
<testcase assertions="2" classname="semanticTests.calldata" name="calldata_array_dynamic_bytes" time="0.106474">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bound_bytes" time="0.14435">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bound_dynamic_array_or_slice" time="0.188025">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bound_static_array" time="0.090233">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bound_struct" time="0.080658">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bytes_external" time="0.323379">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bytes_internal" time="0.116151">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bytes_to_memory" time="0.121664">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_bytes_to_memory_encode" time="0.177304">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_internal_function_pointer" time="0.323335">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_internal_library" time="0.2974">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_internal_multi_array" time="0.584153">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_internal_multi_fixed_array" time="0.426621">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_memory_mixed" time="0.555828">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_string_array" time="0.264557">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_struct" time="0.084693">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_struct_cleaning" time="0.084691">
</testcase>
<testcase assertions="3" classname="semanticTests.calldata" name="calldata_struct_internal" time="0.070935">
</testcase>
<testcase assertions="1" classname="semanticTests.cleanup" name="bool_conversion_v1" time="0.000362">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="bool_conversion_v2" time="0.074162">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="cleanup_address_types_shortening" time="0.078094">
</testcase>
<testcase assertions="1" classname="semanticTests.cleanup" name="cleanup_address_types_v1" time="0.000413">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="cleanup_address_types_v2" time="0.098023">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="cleanup_bytes_types_shortening" time="0.046804">
</testcase>
<testcase assertions="1" classname="semanticTests.cleanup" name="cleanup_bytes_types_v1" time="0.000264">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="cleanup_bytes_types_v2" time="0.101584">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="cleanup_in_compound_assign" time="0.057019">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="exp_cleanup" time="0.044702">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="exp_cleanup_direct" time="0.043931">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="exp_cleanup_nonzero_base" time="0.045486">
</testcase>
<testcase assertions="3" classname="semanticTests.cleanup" name="exp_cleanup_smaller_base" time="0.044176">
</testcase>
<testcase assertions="3" classname="semanticTests.constantEvaluator" name="negative_fractional_mod" time="0.087557">
</testcase>
<testcase assertions="3" classname="semanticTests.constantEvaluator" name="rounding" time="0.142409">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="asm_address_constant_regression" time="0.0334">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="asm_constant_file_level" time="0.035158">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="constants_at_file_level_referencing" time="0.200451">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="constant_string" time="0.150869">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="constant_string_at_file_level" time="0.207994">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="constant_variables" time="0.013422">
</testcase>
<testcase assertions="2" classname="semanticTests.constants" name="consteval_array_length" time="0.08867">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="function_unreferenced" time="0.060928">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="same_constants_different_files" time="0.053495">
</testcase>
<testcase assertions="3" classname="semanticTests.constants" name="simple_constant_variables_test" time="0.034975">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="arrays_in_constructors" time="1.5622">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="base_constructor_arguments" time="0.1365">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="bytes_in_constructors_packer" time="1.51144">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="bytes_in_constructors_unpacker" time="0.504182">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="callvalue_check" time="0.319865">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="constructor_arguments_external" time="0.155877">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="constructor_arguments_internal" time="0.493561">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="constructor_function_argument" time="0.071662">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="constructor_function_complex" time="0.394909">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="constructor_static_array_argument" time="0.2691">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="evm_exceptions_in_constructor_call_fail" time="0.227858">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="functions_called_by_constructor" time="0.055309">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="functions_called_by_constructor_through_dispatch" time="0.184405">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="function_usage_in_constructor_arguments" time="0.144917">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="inline_member_init_inheritence_without_constructor" time="0.09543">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="no_callvalue_check" time="0.160903">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="order_of_evaluation" time="0.414878">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="payable_constructor" time="0.011831">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="store_function_in_constructor" time="0.166032">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="store_function_in_constructor_packed" time="0.235068">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="store_internal_unused_function_in_constructor" time="0.065434">
</testcase>
<testcase assertions="3" classname="semanticTests.constructor" name="store_internal_unused_library_function_in_constructor" time="0.076312">
</testcase>
<testcase assertions="3" classname="semanticTests" name="constructor_ihneritance_init_order_2" time="0.10705">
</testcase>
<testcase assertions="2" classname="semanticTests" name="constructor_inheritance_init_order" time="0.097245">
</testcase>
<testcase assertions="3" classname="semanticTests" name="constructor_with_params" time="0.109165">
</testcase>
<testcase assertions="3" classname="semanticTests" name="constructor_with_params_diamond_inheritance" time="0.293398">
</testcase>
<testcase assertions="3" classname="semanticTests" name="constructor_with_params_inheritance" time="0.198861">
</testcase>
<testcase assertions="3" classname="semanticTests" name="constructor_with_params_inheritance_2" time="0.147278">
</testcase>
<testcase assertions="3" classname="semanticTests.conversions" name="function_type_array_to_storage" time="0.89686">
</testcase>
<testcase assertions="3" classname="semanticTests.conversions" name="string_to_bytes" time="0.180208">
</testcase>
<testcase assertions="3" classname="semanticTests" name="dirty_calldata_bytes" time="0.098897">
</testcase>
<testcase assertions="3" classname="semanticTests" name="dirty_calldata_dynamic_array" time="0.113291">
</testcase>
<testcase assertions="3" classname="semanticTests.ecrecover" name="ecrecover" time="0.125605">
</testcase>
<testcase assertions="3" classname="semanticTests.ecrecover" name="ecrecover_abiV2" time="0.124945">
</testcase>
<testcase assertions="3" classname="semanticTests.ecrecover" name="failing_ecrecover_invalid_input" time="0.087515">
</testcase>
<testcase assertions="3" classname="semanticTests.ecrecover" name="failing_ecrecover_invalid_input_asm" time="0.106928">
</testcase>
<testcase assertions="3" classname="semanticTests.ecrecover" name="failing_ecrecover_invalid_input_proper" time="0.277957">
</testcase>
<testcase assertions="3" classname="semanticTests" name="empty_contract" time="0.013472">
</testcase>
<testcase assertions="3" classname="semanticTests" name="empty_for_loop" time="0.062975">
</testcase>
<testcase assertions="3" classname="semanticTests.enums" name="constructing_enums_from_ints" time="0.046904">
</testcase>
<testcase assertions="3" classname="semanticTests.enums" name="enum_explicit_overflow" time="0.140063">
</testcase>
<testcase assertions="1" classname="semanticTests.enums" name="enum_explicit_overflow_homestead" time="0.000316">
</testcase>
<testcase assertions="3" classname="semanticTests.enums" name="enum_with_256_members" time="0.274377">
</testcase>
<testcase assertions="3" classname="semanticTests.enums" name="using_contract_enums_with_explicit_contract_name" time="0.042025">
</testcase>
<testcase assertions="3" classname="semanticTests.enums" name="using_enums" time="0.067013">
</testcase>
<testcase assertions="3" classname="semanticTests.enums" name="using_inherited_enum" time="0.049461">
</testcase>
<testcase assertions="3" classname="semanticTests.enums" name="using_inherited_enum_excplicitly" time="0.049242">
</testcase>
<testcase assertions="3" classname="semanticTests.error" name="selector" time="0.075631">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="error_in_library_and_interface" time="0.109104">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="named_error_args" time="0.05116">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="named_parameters_shadowing_types" time="0.109437">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="panic_via_import" time="0.054662">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="revert_conversion" time="0.178894">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="simple" time="0.051424">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="using_structs" time="0.444262">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="via_contract_type" time="0.101998">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="via_import" time="0.080929">
</testcase>
<testcase assertions="3" classname="semanticTests.errors" name="weird_name" time="0.042697">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event" time="0.069544">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="events_with_same_name" time="0.191884">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="events_with_same_name_inherited_emit" time="0.15331">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_access_through_base_name_emit" time="0.045955">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_anonymous" time="0.027532">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_anonymous_with_signature_collision" time="0.047064">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_anonymous_with_signature_collision2" time="0.046013">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_anonymous_with_topics" time="0.046957">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_constructor" time="0.029504">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_dynamic_array_memory" time="0.212399">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_dynamic_array_memory_v2" time="0.213518">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_dynamic_array_storage" time="0.233957">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_dynamic_array_storage_v2" time="0.226107">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_dynamic_nested_array_memory_v2" time="0.433653">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_dynamic_nested_array_storage_v2" time="0.559812">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_emit" time="0.046617">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_emit_from_other_contract" time="0.198405">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_indexed_function" time="0.037602">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_indexed_function2" time="0.073077">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_indexed_mixed" time="0.068175">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_indexed_string" time="0.455516">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_lots_of_data" time="0.064172">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_no_arguments" time="0.029349">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_really_lots_of_data" time="0.079025">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_really_lots_of_data_from_storage" time="0.388372">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_really_really_lots_of_data_from_storage" time="0.496043">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_signature_in_library" time="0.116302">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_string" time="0.050297">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_struct_memory_v2" time="0.064857">
</testcase>
<testcase assertions="3" classname="semanticTests.events" name="event_struct_storage_v2" time="0.061314">
</testcase>
<testcase assertions="3" classname="semanticTests.exponentiation" name="literal_base" time="0.057467">
</testcase>
<testcase assertions="3" classname="semanticTests.exponentiation" name="signed_base" time="0.201902">
</testcase>
<testcase assertions="3" classname="semanticTests.exponentiation" name="small_exp" time="0.039539">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="bit_operators" time="0.050264">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="bytes_comparison" time="0.043656">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_different_types" time="0.069319">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_false_literal" time="0.03926">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_functions" time="0.10801">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_multiple" time="0.08591">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_storage_memory_1" time="0.252044">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_storage_memory_2" time="0.219382">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_true_literal" time="0.036366">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_tuples" time="0.080432">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="conditional_expression_with_return_values" time="0.072703">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="exp_operator_const" time="0.033828">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="exp_operator_const_signed" time="0.033807">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="exp_zero_literal" time="0.034595">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="inc_dec_operators" time="0.132793">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="unary_too_long_literal" time="0.03645">
</testcase>
<testcase assertions="3" classname="semanticTests.expressions" name="uncalled_address_transfer_send" time="0.027727">
</testcase>
<testcase assertions="3" classname="semanticTests.externalContracts" name="deposit_contract" time="1.81548">
</testcase>
<testcase assertions="3" classname="semanticTests.externalContracts" name="FixedFeeRegistrar" time="0.730996">
</testcase>
<testcase assertions="3" classname="semanticTests.externalContracts" name="prbmath_signed" time="3.10846">
</testcase>
<testcase assertions="3" classname="semanticTests.externalContracts" name="prbmath_unsigned" time="3.12184">
</testcase>
<testcase assertions="3" classname="semanticTests.externalContracts" name="ramanujan_pi" time="2.50799">
</testcase>
<testcase assertions="5" classname="semanticTests.externalContracts" name="snark" time="4.16135">
</testcase>
<testcase assertions="3" classname="semanticTests.externalContracts" name="strings" time="1.36802">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="multiple_equals_signs" time="0.021952">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="multiple_external_source" time="0.030325">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="multisource" time="0.030765">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="non_normalized_paths" time="0.039717">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="relative_imports" time="0.07398">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="source" time="0.021622">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="source_import" time="0.030374">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="source_import_subdir" time="0.022109">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="source_name_starting_with_dots" time="0.048272">
</testcase>
<testcase assertions="3" classname="semanticTests.externalSource" name="source_remapping" time="0.030507">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="falback_return" time="0.057165">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="fallback_argument" time="0.218395">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="fallback_argument_to_storage" time="0.442136">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="fallback_or_receive" time="0.067054">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="fallback_override" time="0.193254">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="fallback_override2" time="0.198979">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="fallback_override_multi" time="0.22812">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="fallback_return_data" time="0.183215">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="inherited" time="0.072184">
</testcase>
<testcase assertions="3" classname="semanticTests.fallback" name="short_data_calls_fallback" time="0.061756">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="easy" time="0.061865">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="free_namesake_contract_function" time="0.03666">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="free_runtimecode" time="0.140634">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="import" time="0.079275">
</testcase>
<testcase assertions="5" classname="semanticTests.freeFunctions" name="libraries_from_free" time="0.239916">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="new_operator" time="0.181148">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="overloads" time="0.068992">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="recursion" time="0.095227">
</testcase>
<testcase assertions="3" classname="semanticTests.freeFunctions" name="storage_calldata_refs" time="0.170199">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="array_multiple_local_vars" time="0.162328">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="bare_call_no_returndatacopy" time="0.096692">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="calling_nonexisting_contract_throws" time="0.185003">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="calling_other_functions" time="0.149876">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="calling_uninitialized_function" time="0.133694">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="calling_uninitialized_function_in_detail" time="0.056631">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="calling_uninitialized_function_through_array" time="0.105503">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="call_function_returning_function" time="0.078352">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="call_function_returning_nothing_via_pointer" time="0.10147">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="call_internal_function_via_expression" time="0.060228">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="call_internal_function_with_multislot_arguments_via_pointer" time="0.150883">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="call_options_overload" time="0.301411">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="conditional_with_arguments" time="0.124255">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="creation_function_call_no_args" time="0.178612">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="creation_function_call_with_args" time="0.300797">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="creation_function_call_with_salt" time="0.303322">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="delegatecall_return_value" time="0.299642">
</testcase>
<testcase assertions="1" classname="semanticTests.functionCall" name="delegatecall_return_value_pre_byzantium" time="0.000392">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="disordered_named_args" time="0.142549">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="external_call" time="0.161335">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="external_call_dynamic_returndata" time="0.466122">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="external_call_value" time="0.162559">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="external_function" time="0.10246">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="external_public_override" time="0.074448">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="failed_create" time="0.320658">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="file_level_call_via_module" time="0.070736">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="gas_and_value_basic" time="0.37663">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="gas_and_value_brace_syntax" time="0.385146">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="base_base_overload" time="0.31917">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="base_overload" time="0.195297">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="call_base" time="0.132472">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="call_base_base" time="0.248549">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="call_base_base_explicit" time="0.246075">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="call_base_explicit" time="0.129172">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="call_unimplemented_base" time="0.036332">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="super_skip_unimplemented_in_abstract_contract" time="0.058037">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall.inheritance" name="super_skip_unimplemented_in_interface" time="0.057743">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="mapping_array_internal_argument" time="0.275173">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="mapping_internal_argument" time="0.171523">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="mapping_internal_return" time="0.248082">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="member_accessors" time="0.150167">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="multiple_functions" time="0.079904">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="multiple_return_values" time="0.067759">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="named_args" time="0.165461">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="named_args_overload" time="0.191002">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="send_zero_ether" time="0.098346">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="transaction_status" time="0.046831">
</testcase>
<testcase assertions="3" classname="semanticTests.functionCall" name="value_test" time="0.03087">
</testcase>
<testcase assertions="3" classname="semanticTests.functionSelector" name="function_selector_via_contract_name" time="0.180548">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="address_member" time="0.093026">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="function_delete_stack" time="0.066873">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="function_delete_storage" time="0.119368">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="function_external_delete_storage" time="0.234476">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="function_type_library_internal" time="0.271017">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="inline_array_with_value_call_option" time="0.200263">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="mapping_of_functions" time="0.157285">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="pass_function_types_externally" time="0.268475">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="pass_function_types_internally" time="0.093847">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="same_function_in_construction_and_runtime" time="0.120072">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="same_function_in_construction_and_runtime_equality_check" time="0.117576">
</testcase>
<testcase assertions="2" classname="semanticTests.functionTypes" name="selector_1" time="0.074842">
</testcase>
<testcase assertions="2" classname="semanticTests.functionTypes" name="selector_2" time="0.048581">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="store_function" time="0.393632">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="struct_with_external_function" time="0.307226">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="struct_with_functions" time="0.178428">
</testcase>
<testcase assertions="3" classname="semanticTests.functionTypes" name="uninitialized_internal_storage_function_call" time="0.042859">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="arrays" time="0.188405">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="array_mapping_struct" time="0.303226">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="bytes" time="0.256301">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="mapping" time="0.085614">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="mapping_array_struct" time="0.450418">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="mapping_of_string" time="0.327633">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="mapping_to_struct" time="0.195861">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="string_and_bytes" time="0.555802">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="struct_with_bytes" time="0.335355">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="struct_with_bytes_simple" time="0.28992">
</testcase>
<testcase assertions="3" classname="semanticTests.getters" name="value_types" time="0.338433">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="assign_at_declaration" time="0.041209">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="getter" time="0.036897">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="getter_call_in_constructor" time="0.268254">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="inheritance" time="0.126838">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="internal_function_pointer" time="0.072441">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="multi_creation" time="0.501669">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="stub" time="0.066398">
</testcase>
<testcase assertions="3" classname="semanticTests.immutable" name="use_scratch" time="0.203211">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="access_base_storage" time="0.135836">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="address_overload_resolution" time="0.299386">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="base_access_to_function_type_variables" time="0.086019">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="derived_overload_base_function_direct" time="0.118785">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="derived_overload_base_function_indirect" time="0.185272">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="explicit_base_class" time="0.10451">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="inherited_constant_state_var" time="0.046207">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="inherited_function" time="0.047259">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="inherited_function_calldata_calldata_interface" time="0.499525">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="inherited_function_calldata_memory" time="0.4478">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="inherited_function_calldata_memory_interface" time="0.66728">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="inherited_function_from_a_library" time="0.047213">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="inherited_function_through_dispatch" time="0.054219">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="member_notation_ctor" time="0.313866">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="overloaded_function_call_resolve_to_first" time="0.104605">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="overloaded_function_call_resolve_to_second" time="0.106801">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="overloaded_function_call_with_if_else" time="0.128301">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="pass_dynamic_arguments_to_the_base" time="0.166933">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="pass_dynamic_arguments_to_the_base_base" time="0.213738">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="pass_dynamic_arguments_to_the_base_base_with_gap" time="0.160748">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="super_in_constructor" time="0.123877">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="super_in_constructor_assignment" time="0.169777">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="super_overload" time="0.20539">
</testcase>
<testcase assertions="3" classname="semanticTests.inheritance" name="value_for_constructor" time="0.483518">
</testcase>
<testcase assertions="1" classname="semanticTests.inlineAssembly" name="basefee_berlin_function" time="0.000312">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="calldata_array_assign" time="0.331259">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="calldata_array_read" time="0.107965">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="calldata_assign" time="0.151865">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="calldata_assign_from_nowhere" time="0.048977">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="calldata_length_read" time="0.102432">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="calldata_offset_read" time="0.124006">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="calldata_offset_read_write" time="0.093508">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="chainid" time="0.03323">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="constant_access" time="0.060393">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="constant_access_referencing" time="0.06108">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="external_identifier_access_shadowing" time="0.034047">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inlineasm_empty_let" time="0.036494">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_embedded_function_call" time="0.04403">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_for" time="0.06807">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_for2" time="0.097362">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_function_call" time="0.04154">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_function_call2" time="0.043909">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_function_call_assignment" time="0.041341">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_if" time="0.047737">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_in_modifiers" time="0.061277">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_memory_access" time="0.207557">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_read_and_write_stack" time="0.068306">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_recursion" time="0.0542">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_storage_access" time="0.107957">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_storage_access_inside_function" time="0.107516">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_storage_access_local_var" time="0.094024">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_storage_access_via_pointer" time="0.094078">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_switch" time="0.054328">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="inline_assembly_write_to_stack" time="0.037521">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="keccak256_assembly" time="0.034225">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="keccak256_optimization" time="0.043217">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="keccak256_optimizer_bug_different_memory_location" time="0.043739">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="keccak256_optimizer_cache_bug" time="0.096399">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="keccak_optimization_bug_string" time="0.137132">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="keccak_yul_optimization" time="0.08053">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="leave" time="0.035882">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="selfbalance" time="0.03233">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="shadowing_local_function_opcode" time="0.089451">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="slot_access" time="0.14972">
</testcase>
<testcase assertions="3" classname="semanticTests.inlineAssembly" name="truefalse" time="0.035654">
</testcase>
<testcase assertions="3" classname="semanticTests.integer" name="basic" time="0.049438">
</testcase>
<testcase assertions="3" classname="semanticTests.integer" name="int" time="0.273287">
</testcase>
<testcase assertions="3" classname="semanticTests.integer" name="many_local_variables" time="0.11344">
</testcase>
<testcase assertions="3" classname="semanticTests.integer" name="small_signed_types" time="0.079309">
</testcase>
<testcase assertions="3" classname="semanticTests.integer" name="uint" time="0.270253">
</testcase>
<testcase assertions="3" classname="semanticTests.interfaceID" name="homer" time="0.189164">
</testcase>
<testcase assertions="3" classname="semanticTests.interfaceID" name="homer_interfaceId" time="0.188235">
</testcase>
<testcase assertions="3" classname="semanticTests.interfaceID" name="interfaceId_events" time="0.085995">
</testcase>
<testcase assertions="3" classname="semanticTests.interfaceID" name="interfaces" time="0.167391">
</testcase>
<testcase assertions="3" classname="semanticTests.interfaceID" name="lisa" time="0.234371">
</testcase>
<testcase assertions="3" classname="semanticTests.interfaceID" name="lisa_interfaceId" time="0.226013">
</testcase>
<testcase assertions="3" classname="semanticTests" name="interface_inheritance_conversions" time="0.368138">
</testcase>
<testcase assertions="3" classname="semanticTests" name="isoltestFormatting" time="0.197446">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting" name="account" time="0.036795">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting" name="balance_other_contract" time="0.204588">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting" name="balance_without_balance" time="0.013518">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting" name="balance_with_balance" time="0.011545">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting" name="balance_with_balance2" time="0.011353">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting" name="builtins" time="0.013245">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting" name="effects" time="0.013207">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting.storage" name="storage_empty" time="0.01325">
</testcase>
<testcase assertions="3" classname="semanticTests.isoltestTesting.storage" name="storage_nonempty" time="0.039509">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="bound_returning_calldata" time="0.179519">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="bound_returning_calldata_external" time="0.879888">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="bound_to_calldata" time="0.16625">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="bound_to_calldata_external" time="0.757611">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="external_call_with_function_pointer_parameter" time="0.518951">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="external_call_with_storage_array_parameter" time="0.429848">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="external_call_with_storage_mapping_parameter" time="0.339616">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_call_bound_with_parentheses" time="0.160352">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_call_bound_with_parentheses1" time="0.050976">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function" time="0.116561">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound" time="0.139392">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_address" time="0.078175">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_address_named_send_transfer" time="0.069093">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_array_named_pop_push" time="0.058848">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_bool" time="0.082719">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_contract" time="0.097752">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_dynamic_array" time="0.121048">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_enum" time="0.075773">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_external_function" time="0.158489">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_fixed_array" time="0.092037">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_fixed_bytes" time="0.106438">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_function_named_selector" time="0.092232">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_integer" time="0.074137">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_interface" time="0.096416">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_internal_function" time="0.093252">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_literal" time="0.256891">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_mapping" time="0.084553">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_storage_string" time="0.415557">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_bound_to_string" time="0.094848">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_calling_private" time="0.116182">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_pointer" time="0.05415">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="internal_library_function_return_var_size" time="0.133686">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_address" time="0.803281">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_address_homestead" time="0.43739">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_address_via_module" time="0.795277">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_delegatecall_guard_pure" time="0.628633">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_delegatecall_guard_view_needed" time="0.615469">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_delegatecall_guard_view_not_needed" time="0.617181">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_delegatecall_guard_view_staticcall" time="0.959085">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="library_enum_as_an_expression" time="0.042764">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_function_selectors" time="1.11501">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_function_selectors_struct" time="0.682034">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="library_return_struct_with_mapping" time="0.226314">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="library_struct_as_an_expression" time="0.042569">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="stub" time="0.297">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="stub_internal" time="0.073945">
</testcase>
<testcase assertions="5" classname="semanticTests.libraries" name="using_for_function_on_int" time="0.305508">
</testcase>
<testcase assertions="3" classname="semanticTests.libraries" name="using_for_storage_structs" time="0.061872">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="denominations" time="0.037943">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="escape" time="0.110511">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="ether" time="0.038233">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="gwei" time="0.038023">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="hex_string_with_non_printable_characters" time="0.034732">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="hex_string_with_underscore" time="0.126726">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="scientific_notation" time="0.103894">
</testcase>
<testcase assertions="3" classname="semanticTests.literals" name="wei" time="0.035896">
</testcase>
<testcase assertions="3" classname="semanticTests.memoryManagement" name="assembly_access" time="0.03395">
</testcase>
<testcase assertions="3" classname="semanticTests.memoryManagement" name="return_variable" time="0.136673">
</testcase>
<testcase assertions="3" classname="semanticTests.memoryManagement" name="static_memory_array_allocation" time="0.118839">
</testcase>
<testcase assertions="3" classname="semanticTests.memoryManagement" name="struct_allocation" time="0.11956">
</testcase>
<testcase assertions="3" classname="semanticTests.metaTypes" name="name_other_contract" time="0.184651">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="access_through_contract_name" time="0.113193">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="access_through_module_name" time="0.109732">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="break_in_modifier" time="0.112843">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="continue_in_modifier" time="0.118315">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="evaluation_order" time="0.441742">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier" time="0.038719">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_calling_functions_in_creation_context" time="0.168508">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_empty" time="0.035756">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_for_constructor" time="0.087413">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_library" time="0.102128">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_library_inheritance" time="0.101762">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_local_variables" time="0.055723">
</testcase>
<testcase assertions="2" classname="semanticTests.modifiers" name="function_modifier_loop" time="0.012375">
</testcase>
<testcase assertions="2" classname="semanticTests.modifiers" name="function_modifier_loop_viair" time="0.059813">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_multiple_times" time="0.122826">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_multiple_times_local_vars" time="0.154681">
</testcase>
<testcase assertions="2" classname="semanticTests.modifiers" name="function_modifier_multi_invocation" time="0.016088">
</testcase>
<testcase assertions="2" classname="semanticTests.modifiers" name="function_modifier_multi_invocation_viair" time="0.04764">
</testcase>
<testcase assertions="2" classname="semanticTests.modifiers" name="function_modifier_multi_with_return" time="0.016337">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_modifier_overriding" time="0.058128">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_return_parameter" time="0.058541">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="function_return_parameter_complex" time="0.291495">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="modifer_recursive" time="0.229584">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="modifiers_in_construction_context" time="0.022641">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="modifier_init_return" time="0.143569">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="modifier_in_constructor_ice" time="0.021516">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="return_does_not_skip_modifier" time="0.06852">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="return_in_modifier" time="0.093413">
</testcase>
<testcase assertions="3" classname="semanticTests.modifiers" name="stacked_return_with_modifiers" time="0.159921">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="circular_import" time="0.04594">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="circular_import_2" time="0.058524">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="circular_reimport" time="0.059334">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="circular_reimport_2" time="0.060535">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="free_different_interger_types" time="0.04327">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="free_function_resolution_base_contract" time="0.080402">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="free_function_resolution_override_virtual" time="0.074935">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="free_function_resolution_override_virtual_super" time="0.063336">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="free_function_resolution_override_virtual_transitive" time="0.117039">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="free_function_transitive_import" time="0.122403">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="import" time="0.117537">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="imported_free_function_via_alias" time="0.082512">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="imported_free_function_via_alias_direct_call" time="0.054921">
</testcase>
<testcase assertions="3" classname="semanticTests.multiSource" name="reimport_imported_function" time="0.035737">
</testcase>
<testcase assertions="3" classname="semanticTests.operators" name="compound_assign" time="0.108653">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="bitwise_shifting_constantinople" time="0.081093">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="bitwise_shifting_constantinople_combined" time="0.204347">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="bitwise_shifting_constants_constantinople" time="0.109729">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shifts" time="0.041766">
</testcase>
<testcase assertions="2" classname="semanticTests.operators.shifts" name="shift_bytes_cleanup" time="0.013444">
</testcase>
<testcase assertions="2" classname="semanticTests.operators.shifts" name="shift_bytes_cleanup_viaYul" time="0.0782">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_cleanup" time="0.047467">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_cleanup_garbled" time="0.03657">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_constant_left" time="0.039973">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_constant_left_assignment" time="0.03694">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_constant_right" time="0.040905">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_constant_right_assignment" time="0.039054">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_left" time="0.053701">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_left_assignment" time="0.053507">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_left_assignment_different_type" time="0.062217">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_left_larger_type" time="0.038588">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_left_uint32" time="0.074295">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_left_uint8" time="0.074011">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_negative_constant_left" time="0.04058">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_negative_constant_right" time="0.040793">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_overflow" time="0.120015">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right" time="0.050545">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_assignment" time="0.05013">
</testcase>
<testcase assertions="1" classname="semanticTests.operators.shifts" name="shift_right_garbled_signed_v1" time="0.00046">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_garbled_signed_v2" time="0.096181">
</testcase>
<testcase assertions="1" classname="semanticTests.operators.shifts" name="shift_right_garbled_v1" time="0.000265">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_garbled_v2" time="0.074307">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_literal" time="0.160005">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue" time="0.056758">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_assignment" time="0.056607">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_int16" time="0.079866">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_int32" time="0.080202">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_int8" time="0.079049">
</testcase>
<testcase assertions="1" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_signextend_int16_v1" time="0.000379">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_signextend_int16_v2" time="0.077928">
</testcase>
<testcase assertions="1" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_signextend_int32_v1" time="0.0004">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_signextend_int32_v2" time="0.079191">
</testcase>
<testcase assertions="1" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_signextend_int8_v1" time="0.00037">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_negative_lvalue_signextend_int8_v2" time="0.07346">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_uint32" time="0.073596">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_right_uint8" time="0.07319">
</testcase>
<testcase assertions="3" classname="semanticTests.operators.shifts" name="shift_underflow_negative_rvalue" time="0.068348">
</testcase>
<testcase assertions="3" classname="semanticTests.optimizer" name="shift_bytes" time="0.10637">
</testcase>
<testcase assertions="3" classname="semanticTests.payable" name="no_nonpayable_circumvention_by_modifier" time="0.035191">
</testcase>
<testcase assertions="3" classname="semanticTests.receive" name="empty_calldata_calls_receive" time="0.055753">
</testcase>
<testcase assertions="3" classname="semanticTests.receive" name="ether_and_data" time="0.015023">
</testcase>
<testcase assertions="3" classname="semanticTests.receive" name="inherited" time="0.08988">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="assert_require" time="0.101188">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="error_struct" time="0.068623">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="invalid_enum_as_external_arg" time="0.110156">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="invalid_enum_as_external_ret" time="0.072574">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="invalid_enum_compared" time="0.077712">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="invalid_enum_stored" time="0.112937">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="invalid_instruction" time="0.026516">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="revert" time="0.067639">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="revert_return_area" time="0.08445">
</testcase>
<testcase assertions="3" classname="semanticTests.reverts" name="simple_throw" time="0.068645">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="array_slices" time="0.260154">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="bubble" time="0.345515">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="calldata_arrays_too_large" time="0.222106">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="calldata_array_dynamic_invalid" time="0.208914">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="calldata_array_dynamic_static_short_decode" time="0.243724">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="calldata_array_dynamic_static_short_reencode" time="0.71525">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="calldata_array_invalid_length" time="0.289003">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="calldata_tail_short" time="0.269442">
</testcase>
<testcase assertions="1" classname="semanticTests.revertStrings" name="calldata_too_short_v1" time="0.000266">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="called_contract_has_code" time="0.157146">
</testcase>
<testcase assertions="1" classname="semanticTests.revertStrings" name="empty_v1" time="0.000284">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="empty_v2" time="0.252694">
</testcase>
<testcase assertions="1" classname="semanticTests.revertStrings" name="enum_v1" time="0.000276">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="enum_v2" time="0.211896">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="ether_non_payable_function" time="0.081573">
</testcase>
<testcase assertions="1" classname="semanticTests.revertStrings" name="function_entry_checks_v1" time="0.00027">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="function_entry_checks_v2" time="0.096413">
</testcase>
<testcase assertions="1" classname="semanticTests.revertStrings" name="invalid_abi_decoding_calldata_v1" time="0.000342">
</testcase>
<testcase assertions="1" classname="semanticTests.revertStrings" name="invalid_abi_decoding_memory_v1" time="0.000172">
</testcase>
<testcase assertions="5" classname="semanticTests.revertStrings" name="library_non_view_call" time="0.5202">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="short_input_array" time="0.299343">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="short_input_bytes" time="0.245631">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="transfer" time="0.284841">
</testcase>
<testcase assertions="3" classname="semanticTests.revertStrings" name="unknown_sig_no_fallback" time="0.037858">
</testcase>
<testcase assertions="3" classname="semanticTests.salted_create" name="salted_create" time="0.175462">
</testcase>
<testcase assertions="3" classname="semanticTests.salted_create" name="salted_create_with_value" time="0.425077">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="alignment" time="0.330501">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="arrays" time="1.3433">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="basic" time="0.221601">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="bytes_and_strings" time="0.314006">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="constructor" time="0.139255">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="failure" time="0.199975">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="fallback" time="0.349404">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="multiline" time="0.092326">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="multiline_comments" time="0.091519">
</testcase>
<testcase assertions="3" classname="semanticTests.smoke" name="structs" time="0.232185">
</testcase>
<testcase assertions="3" classname="semanticTests.specialFunctions" name="abi_encode_with_signature_from_string" time="0.256817">
</testcase>
<testcase assertions="3" classname="semanticTests.specialFunctions" name="abi_functions_member_access" time="0.026223">
</testcase>
<testcase assertions="3" classname="semanticTests.specialFunctions" name="keccak256_optimized" time="0.147316">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="blockhash_basic" time="0.099479">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="block_basefee" time="0.053706">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="block_chainid" time="0.035275">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="block_coinbase" time="0.037694">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="block_difficulty" time="0.035039">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="block_gaslimit" time="0.035698">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="block_number" time="0.035728">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="block_timestamp" time="0.035309">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="gasleft" time="0.039964">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="msg_data" time="0.109725">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="msg_sender" time="0.035239">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="msg_sig" time="0.062202">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="msg_value" time="0.030765">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="tx_gasprice" time="0.032979">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="tx_origin" time="0.035315">
</testcase>
<testcase assertions="3" classname="semanticTests.state" name="uncalled_blockhash" time="0.052019">
</testcase>
<testcase assertions="3" classname="semanticTests.statements" name="do_while_loop_continue" time="0.06855">
</testcase>
<testcase assertions="3" classname="semanticTests" name="state_variables_init_order" time="0.186069">
</testcase>
<testcase assertions="3" classname="semanticTests" name="state_variables_init_order_2" time="0.25094">
</testcase>
<testcase assertions="2" classname="semanticTests" name="state_variables_init_order_3" time="0.358804">
</testcase>
<testcase assertions="3" classname="semanticTests" name="state_var_initialization" time="0.128408">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="accessors_mapping_for_array" time="0.28828">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="array_accessor" time="0.774552">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="chop_sign_bits" time="1.66257">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="complex_accessors" time="0.245594">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="empty_nonempty_empty" time="0.403717">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="mappings_array2d_pop_delete" time="0.411702">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="mappings_array_pop_delete" time="0.317718">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="mapping_state" time="0.277935">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="mapping_string_key" time="0.257809">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="packed_functions" time="0.422068">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="packed_storage_overflow" time="0.185987">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="packed_storage_signed" time="0.190518">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="packed_storage_structs_bytes" time="0.360826">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="packed_storage_structs_enum" time="0.280222">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="packed_storage_structs_uint" time="0.224334">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="simple_accessor" time="0.057305">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="state_smoke_test" time="0.157379">
</testcase>
<testcase assertions="3" classname="semanticTests.storage" name="struct_accessor" time="0.245181">
</testcase>
<testcase assertions="3" classname="semanticTests.strings" name="empty_string" time="0.137129">
</testcase>
<testcase assertions="3" classname="semanticTests.strings" name="empty_string_input" time="0.401105">
</testcase>
<testcase assertions="3" classname="semanticTests.strings" name="string_escapes" time="0.033732">
</testcase>
<testcase assertions="3" classname="semanticTests.strings" name="unicode_escapes" time="0.188164">
</testcase>
<testcase assertions="3" classname="semanticTests.strings" name="unicode_string" time="0.134346">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="array_of_recursive_struct" time="0.135749">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_nested_structs" time="1.30167">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct" time="0.052031">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_structs" time="0.112938">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_and_ints" time="0.084123">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_array_member" time="0.078096">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_array_member_dynamic" time="0.180154">
</testcase>
<testcase assertions="5" classname="semanticTests.structs.calldata" name="calldata_struct_as_argument_of_lib_function" time="2.33528">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_as_memory_argument" time="0.684598">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_struct_member" time="0.092085">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_struct_member_dynamic" time="0.195342">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_to_memory" time="0.144428">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_to_memory_tuple_assignment" time="0.684445">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_to_storage" time="0.221311">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_with_array_to_memory" time="0.272093">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_with_bytes_to_memory" time="0.315742">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_with_nested_array_to_memory" time="0.909702">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="calldata_struct_with_nested_array_to_storage" time="0.764902">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="dynamically_encoded" time="0.159983">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.calldata" name="dynamic_nested" time="0.22103">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.conversion" name="recursive_storage_memory" time="0.401428">
</testcase>
<testcase assertions="3" classname="semanticTests.structs.conversion" name="recursive_storage_memory_complex" time="0.971175">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="delete_struct" time="0.279503">
</testcase>
<testcase assertions="5" classname="semanticTests.structs" name="event" time="0.283015">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="global" time="0.06528">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="lone_struct_array_type" time="0.05065">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="memory_structs_as_function_args" time="0.132666">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="memory_structs_nested" time="0.206623">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="memory_structs_nested_load" time="0.70274">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="memory_structs_read_write" time="0.570351">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="memory_struct_named_constructor" time="0.100408">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="multislot_struct_allocation" time="0.217478">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="nested_struct_allocation" time="0.082427">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="recursive_structs" time="0.155829">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="recursive_struct_2" time="0.300524">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="simple_struct_allocation" time="0.051303">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="structs" time="0.317968">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_assign_reference_to_struct" time="0.082969">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_constructor_nested" time="0.360118">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_containing_bytes_copy_and_delete" time="0.648703">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_copy" time="0.227009">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_copy_via_local" time="0.104895">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_delete_member" time="0.058839">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_delete_storage" time="0.135724">
</testcase>
<testcase assertions="2" classname="semanticTests.structs" name="struct_delete_storage_nested_small" time="0.259745">
</testcase>
<testcase assertions="2" classname="semanticTests.structs" name="struct_delete_storage_small" time="0.073711">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_delete_storage_with_array" time="0.362798">
</testcase>
<testcase assertions="2" classname="semanticTests.structs" name="struct_delete_storage_with_arrays_small" time="0.301383">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_delete_struct_in_mapping" time="0.075016">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_memory_to_storage" time="0.208463">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_memory_to_storage_function_ptr" time="0.249248">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_named_constructor" time="0.088505">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_reference" time="0.184998">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_storage_push_zero_value" time="0.245705">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_storage_to_mapping" time="0.068274">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_storage_to_memory" time="0.273452">
</testcase>
<testcase assertions="3" classname="semanticTests.structs" name="struct_storage_to_memory_function_ptr" time="0.335041">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="assert" time="0.121377">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="create" time="0.558773">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="invalid_error_encoding" time="1.25836">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="lowLevel" time="0.297615">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="malformed_error" time="0.661117">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="malformed_panic" time="0.379883">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="malformed_panic_2" time="0.398872">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="malformed_panic_3" time="0.405217">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="malformed_panic_4" time="0.459712">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="nested" time="0.494622">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="panic" time="0.43344">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="return_function" time="0.215245">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="simple" time="0.181091">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="simple_notuple" time="0.158282">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="structured" time="0.415886">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="structuredAndLowLevel" time="0.447806">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="super_trivial" time="0.116058">
</testcase>
<testcase assertions="3" classname="semanticTests.tryCatch" name="trivial" time="0.117398">
</testcase>
<testcase assertions="5" classname="semanticTests.tryCatch" name="try_catch_library_call" time="0.956433">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="array_mapping_abstract_constructor_param" time="0.152305">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="assign_calldata_value_type" time="0.045708">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_fixed_bytes_to_fixed_bytes_greater_size" time="0.048852">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_fixed_bytes_to_fixed_bytes_same_size" time="0.047894">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_fixed_bytes_to_fixed_bytes_smaller_size" time="0.052025">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_fixed_bytes_to_uint_greater_size" time="0.058279">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_fixed_bytes_to_uint_same_min_size" time="0.057747">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_fixed_bytes_to_uint_same_type" time="0.04452">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_fixed_bytes_to_uint_smaller_size" time="0.05943">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_uint_to_fixed_bytes_greater_size" time="0.060485">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_uint_to_fixed_bytes_same_min_size" time="0.057124">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_uint_to_fixed_bytes_same_size" time="0.042421">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="convert_uint_to_fixed_bytes_smaller_size" time="0.059069">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="external_function_to_address" time="0.093899">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="mapping_abstract_constructor_param" time="0.0693">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="mapping_contract_key" time="0.126176">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="mapping_contract_key_getter" time="0.215028">
</testcase>
<testcase assertions="5" classname="semanticTests.types" name="mapping_contract_key_library" time="0.634835">
</testcase>
<testcase assertions="1" classname="semanticTests.types" name="mapping_enum_key_getter_v1" time="0.000558">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="mapping_enum_key_getter_v2" time="0.226439">
</testcase>
<testcase assertions="1" classname="semanticTests.types" name="mapping_enum_key_library_v1" time="0.000423">
</testcase>
<testcase assertions="5" classname="semanticTests.types" name="mapping_enum_key_library_v2" time="0.584309">
</testcase>
<testcase assertions="1" classname="semanticTests.types" name="mapping_enum_key_v1" time="0.000424">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="mapping_enum_key_v2" time="0.137079">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="mapping_simple" time="0.122371">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="nested_tuples" time="0.105635">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="packing_signed_types" time="0.037021">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="packing_unpacking_types" time="0.12871">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="strings" time="0.117886">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="struct_mapping_abstract_constructor_param" time="0.093601">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="tuple_assign_multi_slot_grow" time="0.164331">
</testcase>
<testcase assertions="3" classname="semanticTests.types" name="type_conversion_cleanup" time="0.046882">
</testcase>
<testcase assertions="3" classname="semanticTests.underscore" name="as_function" time="0.064796">
</testcase>
<testcase assertions="3" classname="semanticTests.uninitializedFunctionPointer" name="invalidInConstructor" time="0.151017">
</testcase>
<testcase assertions="3" classname="semanticTests.uninitializedFunctionPointer" name="invalidStoredInConstructor" time="0.161818">
</testcase>
<testcase assertions="3" classname="semanticTests.uninitializedFunctionPointer" name="store2" time="0.098607">
</testcase>
<testcase assertions="3" classname="semanticTests.uninitializedFunctionPointer" name="storeInConstructor" time="0.075887">
</testcase>
<testcase assertions="2" classname="semanticTests.uninitializedFunctionPointer" name="uninitialized_internal_storage_function_legacy" time="0.009304">
</testcase>
<testcase assertions="2" classname="semanticTests.uninitializedFunctionPointer" name="uninitialized_internal_storage_function_via_yul" time="0.045826">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="delete_local" time="0.03406">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="delete_locals" time="0.040635">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="mapping_local_assignment" time="0.130269">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="mapping_local_compound_assignment" time="0.136363">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="mapping_local_tuple_assignment" time="0.130423">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="public_state_overridding" time="0.08156">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="public_state_overridding_dynamic_struct" time="0.345907">
</testcase>
<testcase assertions="3" classname="semanticTests.variables" name="public_state_overridding_mapping_to_dynamic_struct" time="0.42839">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="address_code" time="0.443892">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="address_code_complex" time="0.230504">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="assignment_to_const_var_involving_expression" time="0.050244">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="balance" time="0.037035">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="byte_optimization_bug" time="0.064309">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="codebalance_assembly" time="0.059582">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="codehash" time="0.081838">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="codehash_assembly" time="0.073831">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="code_access_content" time="0.288875">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="code_access_create" time="0.185193">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="code_access_padding" time="0.11464">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="code_access_runtime" time="0.168399">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="code_length" time="0.088472">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="code_length_contract_member" time="0.054953">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="contract_binary_dependencies" time="0.131973">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="crazy_elementary_typenames_on_stack" time="0.038025">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="cross_contract_types" time="0.06217">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="decayed_tuple" time="0.034742">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="destructuring_assignment" time="0.896101">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="empty_name_return_parameter" time="0.040853">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="erc20" time="0.575772">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="external_types_in_calls" time="0.415496">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="flipping_sign_tests" time="0.043767">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="gasleft_decrease" time="0.104662">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="gasleft_shadow_resolution" time="0.05713">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="inline_member_init" time="0.062409">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="inline_member_init_inheritence" time="0.095814">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="inline_tuple_with_rational_numbers" time="0.083837">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="iszero_bnot_correct" time="0.044545">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="literal_empty_string" time="0.168816">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="memory_overwrite" time="0.162745">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="multi_modifiers" time="0.108529">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="multi_variable_declaration" time="0.300292">
</testcase>
<testcase assertions="2" classname="semanticTests.various" name="negative_stack_height" time="0.149171">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="nested_calldata_struct" time="0.07257">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="nested_calldata_struct_to_memory" time="0.188453">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="positive_integers_to_signed" time="0.118645">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="senders_balance" time="0.193663">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="single_copy_with_multiple_inheritance" time="0.246804">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="skip_dynamic_types" time="0.364993">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="skip_dynamic_types_for_static_arrays_with_dynamic_elements" time="1.03944">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="skip_dynamic_types_for_structs" time="0.588514">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="state_variable_local_variable_mixture" time="0.043601">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="state_variable_under_contract_name" time="0.04014">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="staticcall_for_view_and_pure" time="0.246293">
</testcase>
<testcase assertions="1" classname="semanticTests.various" name="staticcall_for_view_and_pure_pre_byzantium" time="0.000336">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="storage_string_as_mapping_key_without_variable" time="0.068541">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="store_bytes" time="0.193221">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="string_tuples" time="0.200392">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="super" time="0.116082">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="super_alone" time="0.026128">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="super_parentheses" time="0.150018">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="swap_in_storage_overwrite" time="0.115557">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="test_underscore_in_hex" time="0.064243">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="tuples" time="0.287694">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="typed_multi_variable_declaration" time="0.075817">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="value_complex" time="0.222792">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="value_insane" time="0.225616">
</testcase>
<testcase assertions="3" classname="semanticTests.various" name="write_storage_external" time="0.491872">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_2d_assignment" time="0.202225">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_2d_new" time="0.189569">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_3d_assignment" time="0.300181">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_3d_new" time="0.288393">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_function_pointers" time="0.778258">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.array_memory_allocation" name="array_2d_zeroed_memory_index_access" time="0.314857">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.array_memory_allocation" name="array_array_static" time="0.296833">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.array_memory_allocation" name="array_static_return_param_zeroed_memory_index_access" time="0.397714">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.array_memory_allocation" name="array_static_zeroed_memory_index_access" time="0.231541">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.array_memory_allocation" name="array_zeroed_memory_index_access" time="0.235192">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_memory_as_parameter" time="0.306171">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_memory_create" time="0.081808">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_memory_index_access" time="0.269521">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_push_return_reference" time="0.122082">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_push_with_arg" time="0.126144">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_index_access" time="0.225581">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_index_boundary_test" time="0.1693">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_index_zeroed_test" time="0.320242">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_length_access" time="0.50014">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_pop_zero_length" time="0.067951">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_push_empty" time="0.398629">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_push_empty_length_address" time="0.629794">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="array_storage_push_pop" time="0.568668">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="assert" time="0.102659">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="assert_and_require" time="0.083697">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="assign_tuple_from_function_call" time="0.092491">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="calldata_array_access" time="0.189632">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="calldata_array_index_range_access" time="0.363614">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="calldata_array_length" time="0.270044">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="calldata_array_three_dimensional" time="0.219627">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="calldata_bytes_array_bounds" time="0.149895">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul.cleanup" name="checked_arithmetic" time="0.202217">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.cleanup" name="comparison" time="0.109341">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="comparison" time="0.260526">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="comparison_functions" time="0.084199">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conditional" name="conditional_multiple" time="0.049811">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conditional" name="conditional_true_false_literal" time="0.048389">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conditional" name="conditional_tuple" time="0.081206">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conditional" name="conditional_with_assignment" time="0.061721">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conditional" name="conditional_with_variables" time="0.058376">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conversion" name="explicit_cast_assignment" time="0.037042">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conversion" name="explicit_cast_function_call" time="0.075876">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conversion" name="explicit_cast_local_assignment" time="0.044783">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conversion" name="function_cast" time="0.31556">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conversion" name="implicit_cast_assignment" time="0.035962">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conversion" name="implicit_cast_function_call" time="0.066647">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.conversion" name="implicit_cast_local_assignment" time="0.034963">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="define_tuple_from_function_call" time="0.095094">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="delete" time="0.077322">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_add_overflow" time="0.128066">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_add_overflow_signed" time="0.148644">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_div_overflow" time="0.146803">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_mod_zero" time="0.127054">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_mod_zero_signed" time="0.122503">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_mul_overflow" time="0.147299">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_mul_overflow_signed" time="0.200389">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_sub_overflow" time="0.124842">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="detect_sub_overflow_signed" time="0.149361">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="dirty_calldata_struct" time="0.105587">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="dirty_memory_dynamic_array" time="0.102652">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="dirty_memory_int32" time="0.076773">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="dirty_memory_static_array" time="0.07677">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="dirty_memory_struct" time="0.114396">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="dirty_memory_uint32" time="0.075017">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="empty_return_corrupted_free_memory_pointer" time="0.028863">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="exp" time="0.145663">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="exp_literals" time="0.163531">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="exp_literals_success" time="0.245683">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="exp_neg" time="0.171005">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="exp_neg_overflow" time="0.267863">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="exp_overflow" time="0.263732">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="exp_various" time="0.263546">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="function_address" time="0.120982">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="function_entry_checks" time="0.231714">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="function_pointers" time="0.146755">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="function_selector" time="0.106038">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="if" time="0.235935">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="keccak" time="0.079331">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="local_address_assignment" time="0.04888">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="local_assignment" time="0.041328">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="local_bool_assignment" time="0.046783">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="local_tuple_assignment" time="0.277121">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="local_variable_without_init" time="0.0328">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.loops" name="break" time="0.12251">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.loops" name="continue" time="0.132364">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.loops" name="return" time="0.124741">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.loops" name="simple" time="0.150976">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="mapping_enum_key_getter" time="0.132895">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="mapping_getters" time="0.155263">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="mapping_string_key" time="0.160972">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="memory_struct_allow" time="0.073278">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="msg_sender" time="0.037112">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="negation_bug" time="0.037496">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="require" time="0.318192">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="return" time="0.035373">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="return_and_convert" time="0.035152">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="return_storage_pointers" time="0.040261">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="short_circuit" time="0.098691">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="simple_assignment" time="0.052549">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="simple_inline_asm" time="0.050324">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="smoke_test" time="0.013417">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="dirty_storage_bytes" time="0.109934">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="dirty_storage_bytes_long" time="0.093268">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="dirty_storage_dynamic_array" time="0.119908">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="dirty_storage_static_array" time="0.066977">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="dirty_storage_struct" time="0.105567">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="mappings" time="0.338011">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="packed_storage" time="0.172006">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul.storage" name="simple_storage" time="0.069344">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="string_format" time="0.198641">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="string_literals" time="0.219619">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="struct_member_access" time="0.727638">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="tuple_evaluation_order" time="0.105212">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="unary_fixedbytes" time="0.504881">
</testcase>
<testcase assertions="2" classname="semanticTests.viaYul" name="unary_operations" time="0.420501">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="various_inline_asm" time="0.051636">
</testcase>
<testcase assertions="3" classname="semanticTests.viaYul" name="virtual_functions" time="0.114249">
</testcase>
<testcase assertions="3" classname="semanticTests.virtualFunctions" name="internal_virtual_function_calls" time="0.058286">
</testcase>
<testcase assertions="3" classname="semanticTests.virtualFunctions" name="internal_virtual_function_calls_through_dispatch" time="0.053405">
</testcase>
<testcase assertions="3" classname="semanticTests.virtualFunctions" name="virtual_function_calls" time="0.0869">
</testcase>
<testcase assertions="3" classname="semanticTests.virtualFunctions" name="virtual_function_usage_in_constructor_arguments" time="0.181312">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="abstract_contract" time="0.001131">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="address_payable" time="0.005285">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="array_type_name" time="0.001011">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="call" time="0.001783">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="empty_block" time="0.001096">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="function" time="0.001621">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="leave" time="0.001182">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="loop" time="0.001653">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="nested_functions" time="0.001513">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="slot_offset" time="0.002163">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="stringlit" time="0.001208">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="switch" time="0.001835">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="switch_default" time="0.001366">
</testcase>
<testcase assertions="1" classname="ASTJSON.assembly" name="var_access" time="0.001587">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="base_constructor_call" time="0.001894">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="constructor" time="0.000867">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="contract_dep_order" time="0.00144">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="documentation" time="0.002094">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="documentation_local_variable" time="0.004579">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="documentation_on_statements" time="0.003491">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="documentation_triple" time="0.003516">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="enum_value" time="0.000848">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="enum_value_declaration" time="0.001452">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="event_definition" time="0.000705">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="fallback" time="0.000827">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="fallback_and_reveice_ether" time="0.001087">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="fallback_payable" time="0.000904">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="function_type" time="0.002177">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="global_enum" time="0.000552">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="global_struct" time="0.000695">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="inheritance_specifier" time="0.000779">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="license" time="0.00057">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="long_type_name_binary_operation" time="0.001731">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="long_type_name_identifier" time="0.001759">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="mappings" time="0.001945">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="modifier_definition" time="0.001739">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="modifier_invocation" time="0.001651">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="mutability" time="0.001585">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="non_utf8" time="0.001317">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="not_existing_import" time="0.000712">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="override" time="0.002587">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="placeholder_statement" time="0.000806">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="receive_ether" time="0.000853">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="short_type_name" time="0.00136">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="short_type_name_ref" time="0.001449">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="smoke" time="0.000594">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="source_location" time="0.001656">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="string" time="0.001428">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="two_base_functions" time="0.002091">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="unicode" time="0.001402">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="used_errors" time="0.001953">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="using_for_directive" time="0.000875">
</testcase>
<testcase assertions="1" classname="ASTJSON" name="yul_hex_literal" time="0.001569">
</testcase>
<testcase assertions="1" classname="ABIJson" name="basic_test" time="0.00051">
</testcase>
<testcase assertions="1" classname="ABIJson" name="constructor_abi" time="0.000456">
</testcase>
<testcase assertions="1" classname="ABIJson" name="empty_contract" time="0.000288">
</testcase>
<testcase assertions="1" classname="ABIJson" name="empty_name_input_parameter_with_named_one" time="0.000526">
</testcase>
<testcase assertions="1" classname="ABIJson" name="empty_name_return_parameters" time="0.00044">
</testcase>
<testcase assertions="1" classname="ABIJson" name="errors" time="0.000713">
</testcase>
<testcase assertions="1" classname="ABIJson" name="errors_referenced" time="0.000824">
</testcase>
<testcase assertions="1" classname="ABIJson" name="events" time="0.000625">
</testcase>
<testcase assertions="1" classname="ABIJson" name="events_anonymous" time="0.000329">
</testcase>
<testcase assertions="1" classname="ABIJson" name="event_structs" time="0.000567">
</testcase>
<testcase assertions="1" classname="ABIJson" name="function_type" time="0.00041">
</testcase>
<testcase assertions="1" classname="ABIJson" name="function_type_extended" time="0.000406">
</testcase>
<testcase assertions="1" classname="ABIJson" name="global_struct" time="0.000559">
</testcase>
<testcase assertions="1" classname="ABIJson" name="include_fallback_function" time="0.000333">
</testcase>
<testcase assertions="1" classname="ABIJson" name="inherited" time="0.000839">
</testcase>
<testcase assertions="1" classname="ABIJson" name="internal_constructor" time="0.000408">
</testcase>
<testcase assertions="1" classname="ABIJson" name="library_function" time="0.000737">
</testcase>
<testcase assertions="1" classname="ABIJson" name="multiple_methods" time="0.000571">
</testcase>
<testcase assertions="1" classname="ABIJson" name="multiple_methods_order" time="0.000549">
</testcase>
<testcase assertions="1" classname="ABIJson" name="multiple_params" time="0.000476">
</testcase>
<testcase assertions="1" classname="ABIJson" name="payable_constructor_abi" time="0.000411">
</testcase>
<testcase assertions="1" classname="ABIJson" name="payable_fallback_function" time="0.000316">
</testcase>
<testcase assertions="1" classname="ABIJson" name="payable_function" time="0.000384">
</testcase>
<testcase assertions="1" classname="ABIJson" name="pure_function" time="0.000574">
</testcase>
<testcase assertions="1" classname="ABIJson" name="receive_ether_and_fallback_function" time="0.000376">
</testcase>
<testcase assertions="1" classname="ABIJson" name="receive_ether_function" time="0.000326">
</testcase>
<testcase assertions="1" classname="ABIJson" name="return_param_in_abi" time="0.000527">
</testcase>
<testcase assertions="1" classname="ABIJson" name="return_structs" time="0.000553">
</testcase>
<testcase assertions="1" classname="ABIJson" name="return_structs_with_contracts" time="0.000511">
</testcase>
<testcase assertions="1" classname="ABIJson" name="structs_and_arrays" time="0.000456">
</testcase>
<testcase assertions="1" classname="ABIJson" name="structs_in_libraries" time="0.000644">
</testcase>
<testcase assertions="1" classname="ABIJson" name="view_function" time="0.000576">
</testcase>
<testcase assertions="1" classname="gasTests" name="abiv2" time="0.041993">
</testcase>
<testcase assertions="1" classname="gasTests" name="abiv2_optimised" time="0.776274">
</testcase>
<testcase assertions="1" classname="gasTests" name="data_storage" time="0.00575">
</testcase>
<testcase assertions="1" classname="gasTests" name="dispatch_large" time="0.017355">
</testcase>
<testcase assertions="1" classname="gasTests" name="dispatch_large_optimised" time="0.046783">
</testcase>
<testcase assertions="1" classname="gasTests" name="dispatch_medium" time="0.007648">
</testcase>
<testcase assertions="1" classname="gasTests" name="dispatch_medium_optimised" time="0.025037">
</testcase>
<testcase assertions="1" classname="gasTests" name="dispatch_small" time="0.003765">
</testcase>
<testcase assertions="1" classname="gasTests" name="dispatch_small_optimised" time="0.015389">
</testcase>
<testcase assertions="1" classname="gasTests" name="exp" time="0.003814">
</testcase>
<testcase assertions="1" classname="gasTests" name="exp_optimized" time="0.01394">
</testcase>
<testcase assertions="1" classname="gasTests" name="storage_costs" time="0.010583">
</testcase>
</testsuite>