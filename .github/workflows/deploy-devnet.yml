name: Deploy Hardhat Project to Devnet and Save Image

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  deploy-hardhat:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Deploy')
    runs-on: ubuntu-latest
   
    env:
      BASE_IMAGE: yohands/my_first_container:latest
      FINAL_IMAGE: yohands/my_first-contracts
      CONTAINER_NAME: devnet-node

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get short commit SHA
        id: vars
        run: echo "COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV        

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Start devnet with go-ethereum image
        run: |
          docker run -d \
            --name $CONTAINER_NAME \
            -p 8545:8545 -p 4000:4000 \
            $BASE_IMAGE \
            /bin/sh /start.sh

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Hardhat dependencies
        working-directory: ./hardhat
        run: npm install

      - name: Deploy contracts to devnet and capture address
        working-directory: ./hardhat
        run: |
          DEPLOY_OUTPUT=$(npx hardhat run scripts/deploy.js --network localhost)
          echo "$DEPLOY_OUTPUT"
          echo "$DEPLOY_OUTPUT" > deploy.log
          echo "CONTRACT_ADDRESS=$(echo \"$DEPLOY_OUTPUT\" | grep -i 'Lock deployed to:' | awk '{ print $NF }')" >> $GITHUB_ENV

      # - name: Retry contract verification on Blockscout
      #   working-directory: ./hardhat
      #   run: |
      #     echo "üîç Verifying contract at $CONTRACT_ADDRESS"
      #     for i in {1..5}; do
      #       npx hardhat verify --network localhost $CONTRACT_ADDRESS && break
      #       echo "Retry $i: Verification failed. Waiting for Blockscout sync..."
      #       sleep 10
      #     done

      # - name: Confirm contract is visible in Blockscout
      #   run: |
      #     echo "Waiting for Blockscout explorer to index contract..."
      #     for i in {1..30}; do
      #       CODE=$(curl -s http://localhost:4000/api \
      #         -d "module=contract" \
      #         -d "action=getsourcecode" \
      #         -d "address=$CONTRACT_ADDRESS" | jq -r '.result[0].SourceCode')

      #       if [ "$CODE" != "" ] && [ "$CODE" != "null" ]; then
      #         echo "‚úÖ Contract is now visible in Blockscout"
      #         exit 0
      #       fi

      #       echo "‚è≥ Not indexed yet, retrying ($i)..."
      #       sleep 5
      #     done

      #     echo "‚ùå Contract not found in Blockscout after timeout."
      #     exit 1

      - name: Commit container with deployed contracts
        run: |
          docker commit $CONTAINER_NAME $FINAL_IMAGE:latest
          docker tag $FINAL_IMAGE:latest $FINAL_IMAGE:${{ env.COMMIT_SHA }}

      - name: Stop and remove container
        run: docker rm -f $CONTAINER_NAME        

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to Docker Hub
        run: |
          docker push $FINAL_IMAGE:latest
          docker push $FINAL_IMAGE:${{ env.COMMIT_SHA }}

      - name: Run container with predeployed contracts
        run: |
          docker run -d \
            --name test-node \
            -p 8545:8545 -p 4000:4000 \
            $FINAL_IMAGE:latest \
            /bin/sh /start.sh
          sleep 20

      - name: Check Blockscout Explorer
        run: |
          echo "Waiting for Blockscout..."
          for i in {1..30}; do
              if curl -s http://localhost:4000 | grep -qi "blockscout"; then
                echo "‚úÖ Blockscout UI is up!"
                exit 0
              fi
              sleep 5
          done
          echo "‚ùå Blockscout did not respond."
          docker logs test-node
          exit 1

      - name: Run Hardhat tests
        working-directory: ./hardhat
        run: npx hardhat test

      - name: Stop and remove test container
        run: docker rm -f test-node

        #adding comment to ensure the workflow is complete